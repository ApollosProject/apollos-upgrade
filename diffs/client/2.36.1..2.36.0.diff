diff --git a/apolloschurchapp/Gemfile b/apolloschurchapp/Gemfile
index a2f9bd8c..77041843 100644
--- a/apolloschurchapp/Gemfile
+++ b/apolloschurchapp/Gemfile
@@ -1,3 +1,3 @@
 source 'https://rubygems.org'
-gem 'cocoapods', '1.11.2'
+gem 'cocoapods', '1.10.1'
 gem 'fastlane', '2.179.0'
diff --git a/apolloschurchapp/Gemfile.lock b/apolloschurchapp/Gemfile.lock
index eb216be9..6ff36a82 100644
--- a/apolloschurchapp/Gemfile.lock
+++ b/apolloschurchapp/Gemfile.lock
@@ -1,14 +1,12 @@
 GEM
   remote: https://rubygems.org/
   specs:
-    CFPropertyList (3.0.4)
-      rexml
-    activesupport (6.1.4.1)
+    CFPropertyList (3.0.3)
+    activesupport (5.2.5)
       concurrent-ruby (~> 1.0, >= 1.0.2)
-      i18n (>= 1.6, < 2)
-      minitest (>= 5.1)
-      tzinfo (~> 2.0)
-      zeitwerk (~> 2.3)
+      i18n (>= 0.7, < 2)
+      minitest (~> 5.1)
+      tzinfo (~> 1.1)
     addressable (2.8.0)
       public_suffix (>= 2.0.2, < 5.0)
     algoliasearch (1.27.5)
@@ -16,28 +14,28 @@ GEM
       json (>= 1.5.1)
     artifactory (3.0.15)
     atomos (0.1.3)
-    aws-eventstream (1.2.0)
-    aws-partitions (1.518.0)
-    aws-sdk-core (3.121.3)
+    aws-eventstream (1.1.1)
+    aws-partitions (1.449.0)
+    aws-sdk-core (3.114.0)
       aws-eventstream (~> 1, >= 1.0.2)
       aws-partitions (~> 1, >= 1.239.0)
       aws-sigv4 (~> 1.1)
       jmespath (~> 1.0)
-    aws-sdk-kms (1.50.0)
-      aws-sdk-core (~> 3, >= 3.121.2)
+    aws-sdk-kms (1.43.0)
+      aws-sdk-core (~> 3, >= 3.112.0)
       aws-sigv4 (~> 1.1)
-    aws-sdk-s3 (1.104.0)
-      aws-sdk-core (~> 3, >= 3.121.2)
+    aws-sdk-s3 (1.94.0)
+      aws-sdk-core (~> 3, >= 3.112.0)
       aws-sdk-kms (~> 1)
-      aws-sigv4 (~> 1.4)
-    aws-sigv4 (1.4.0)
+      aws-sigv4 (~> 1.1)
+    aws-sigv4 (1.2.3)
       aws-eventstream (~> 1, >= 1.0.2)
     babosa (1.0.4)
     claide (1.0.3)
-    cocoapods (1.11.2)
-      addressable (~> 2.8)
+    cocoapods (1.10.1)
+      addressable (~> 2.6)
       claide (>= 1.0.2, < 2.0)
-      cocoapods-core (= 1.11.2)
+      cocoapods-core (= 1.10.1)
       cocoapods-deintegrate (>= 1.0.3, < 2.0)
       cocoapods-downloader (>= 1.4.0, < 2.0)
       cocoapods-plugins (>= 1.0.0, < 2.0)
@@ -48,26 +46,26 @@ GEM
       escape (~> 0.0.4)
       fourflusher (>= 2.3.0, < 3.0)
       gh_inspector (~> 1.0)
-      molinillo (~> 0.8.0)
+      molinillo (~> 0.6.6)
       nap (~> 1.0)
-      ruby-macho (>= 1.0, < 3.0)
-      xcodeproj (>= 1.21.0, < 2.0)
-    cocoapods-core (1.11.2)
-      activesupport (>= 5.0, < 7)
-      addressable (~> 2.8)
+      ruby-macho (~> 1.4)
+      xcodeproj (>= 1.19.0, < 2.0)
+    cocoapods-core (1.10.1)
+      activesupport (> 5.0, < 6)
+      addressable (~> 2.6)
       algoliasearch (~> 1.0)
       concurrent-ruby (~> 1.1)
       fuzzy_match (~> 2.0.4)
       nap (~> 1.0)
       netrc (~> 0.11)
-      public_suffix (~> 4.0)
+      public_suffix
       typhoeus (~> 1.0)
-    cocoapods-deintegrate (1.0.5)
-    cocoapods-downloader (1.5.1)
+    cocoapods-deintegrate (1.0.4)
+    cocoapods-downloader (1.4.0)
     cocoapods-plugins (1.0.0)
       nap
-    cocoapods-search (1.0.1)
-    cocoapods-trunk (1.6.0)
+    cocoapods-search (1.0.0)
+    cocoapods-trunk (1.5.0)
       nap (>= 0.8, < 2.0)
       netrc (~> 0.11)
     cocoapods-try (1.2.0)
@@ -75,43 +73,33 @@ GEM
     colored2 (3.1.2)
     commander-fastlane (4.4.6)
       highline (~> 1.7.2)
-    concurrent-ruby (1.1.9)
+    concurrent-ruby (1.1.8)
     declarative (0.0.20)
-    digest-crc (0.6.4)
+    digest-crc (0.6.3)
       rake (>= 12.0.0, < 14.0.0)
     domain_name (0.5.20190701)
       unf (>= 0.0.5, < 1.0.0)
     dotenv (2.7.6)
-    emoji_regex (3.2.3)
+    emoji_regex (3.2.2)
     escape (0.0.4)
-    ethon (0.15.0)
+    ethon (0.14.0)
       ffi (>= 1.15.0)
-    excon (0.87.0)
-    faraday (1.8.0)
-      faraday-em_http (~> 1.0)
-      faraday-em_synchrony (~> 1.0)
+    excon (0.81.0)
+    faraday (1.4.1)
       faraday-excon (~> 1.1)
-      faraday-httpclient (~> 1.0.1)
       faraday-net_http (~> 1.0)
       faraday-net_http_persistent (~> 1.1)
-      faraday-patron (~> 1.0)
-      faraday-rack (~> 1.0)
       multipart-post (>= 1.2, < 3)
       ruby2_keywords (>= 0.0.4)
     faraday-cookie_jar (0.0.7)
       faraday (>= 0.8.0)
       http-cookie (~> 1.0.0)
-    faraday-em_http (1.0.0)
-    faraday-em_synchrony (1.0.0)
     faraday-excon (1.1.0)
-    faraday-httpclient (1.0.1)
     faraday-net_http (1.0.1)
-    faraday-net_http_persistent (1.2.0)
-    faraday-patron (1.0.0)
-    faraday-rack (1.0.0)
-    faraday_middleware (1.2.0)
+    faraday-net_http_persistent (1.1.0)
+    faraday_middleware (1.0.0)
       faraday (~> 1.0)
-    fastimage (2.2.5)
+    fastimage (2.2.3)
     fastlane (2.179.0)
       CFPropertyList (>= 2.3, < 4.0.0)
       addressable (>= 2.3, < 3.0.0)
@@ -150,7 +138,7 @@ GEM
       xcodeproj (>= 1.13.0, < 2.0.0)
       xcpretty (~> 0.3.0)
       xcpretty-travis-formatter (>= 0.0.3)
-    ffi (1.15.4)
+    ffi (1.15.0)
     fourflusher (2.3.1)
     fuzzy_match (2.0.4)
     gh_inspector (1.1.3)
@@ -162,54 +150,55 @@ GEM
       representable (~> 3.0)
       retriable (>= 2.0, < 4.0)
       signet (~> 0.12)
-    google-apis-core (0.4.1)
+    google-apis-core (0.3.0)
       addressable (~> 2.5, >= 2.5.1)
-      googleauth (>= 0.16.2, < 2.a)
-      httpclient (>= 2.8.1, < 3.a)
+      googleauth (~> 0.14)
+      httpclient (>= 2.8.1, < 3.0)
       mini_mime (~> 1.0)
       representable (~> 3.0)
-      retriable (>= 2.0, < 4.a)
+      retriable (>= 2.0, < 4.0)
       rexml
+      signet (~> 0.14)
       webrick
-    google-apis-iamcredentials_v1 (0.7.0)
-      google-apis-core (>= 0.4, < 2.a)
-    google-apis-storage_v1 (0.8.0)
-      google-apis-core (>= 0.4, < 2.a)
+    google-apis-iamcredentials_v1 (0.3.0)
+      google-apis-core (~> 0.1)
+    google-apis-storage_v1 (0.3.0)
+      google-apis-core (~> 0.1)
     google-cloud-core (1.6.0)
       google-cloud-env (~> 1.0)
       google-cloud-errors (~> 1.0)
     google-cloud-env (1.5.0)
       faraday (>= 0.17.3, < 2.0)
-    google-cloud-errors (1.2.0)
-    google-cloud-storage (1.34.1)
+    google-cloud-errors (1.1.0)
+    google-cloud-storage (1.31.0)
       addressable (~> 2.5)
       digest-crc (~> 0.4)
       google-apis-iamcredentials_v1 (~> 0.1)
       google-apis-storage_v1 (~> 0.1)
-      google-cloud-core (~> 1.6)
-      googleauth (>= 0.16.2, < 2.a)
+      google-cloud-core (~> 1.2)
+      googleauth (~> 0.9)
       mini_mime (~> 1.0)
-    googleauth (0.17.1)
+    googleauth (0.16.2)
       faraday (>= 0.17.3, < 2.0)
       jwt (>= 1.4, < 3.0)
       memoist (~> 0.16)
       multi_json (~> 1.11)
       os (>= 0.9, < 2.0)
-      signet (~> 0.15)
+      signet (~> 0.14)
     highline (1.7.10)
-    http-cookie (1.0.4)
+    http-cookie (1.0.3)
       domain_name (~> 0.5)
     httpclient (2.8.3)
     i18n (1.8.10)
       concurrent-ruby (~> 1.0)
     jmespath (1.4.0)
-    json (2.6.0)
-    jwt (2.3.0)
+    json (2.5.1)
+    jwt (2.2.3)
     memoist (0.16.2)
     mini_magick (4.11.0)
-    mini_mime (1.1.2)
+    mini_mime (1.1.0)
     minitest (5.14.4)
-    molinillo (0.8.0)
+    molinillo (0.6.6)
     multi_json (1.15.0)
     multipart-post (2.0.0)
     nanaimo (0.3.0)
@@ -219,7 +208,7 @@ GEM
     os (1.1.1)
     plist (3.6.0)
     public_suffix (4.0.6)
-    rake (13.0.6)
+    rake (13.0.3)
     representable (3.1.1)
       declarative (< 0.1.0)
       trailblazer-option (>= 0.1.1, < 0.2.0)
@@ -227,22 +216,23 @@ GEM
     retriable (3.1.2)
     rexml (3.2.5)
     rouge (2.0.7)
-    ruby-macho (2.5.1)
-    ruby2_keywords (0.0.5)
-    rubyzip (2.3.2)
+    ruby-macho (1.4.0)
+    ruby2_keywords (0.0.4)
+    rubyzip (2.3.0)
     security (0.1.3)
-    signet (0.16.0)
-      addressable (~> 2.8)
+    signet (0.15.0)
+      addressable (~> 2.3)
       faraday (>= 0.17.3, < 2.0)
       jwt (>= 1.5, < 3.0)
       multi_json (~> 1.10)
     simctl (1.6.8)
       CFPropertyList
       naturally
-    slack-notifier (2.4.0)
+    slack-notifier (2.3.2)
     terminal-notifier (2.0.0)
     terminal-table (1.8.0)
       unicode-display_width (~> 1.1, >= 1.1.1)
+    thread_safe (0.3.6)
     trailblazer-option (0.1.1)
     tty-cursor (0.7.1)
     tty-screen (0.8.1)
@@ -250,34 +240,32 @@ GEM
       tty-cursor (~> 0.7)
     typhoeus (1.4.0)
       ethon (>= 0.9.0)
-    tzinfo (2.0.4)
-      concurrent-ruby (~> 1.0)
+    tzinfo (1.2.9)
+      thread_safe (~> 0.1)
     uber (0.1.0)
     unf (0.1.4)
       unf_ext
-    unf_ext (0.0.8)
-    unicode-display_width (1.8.0)
+    unf_ext (0.0.7.7)
+    unicode-display_width (1.7.0)
     webrick (1.7.0)
     word_wrap (1.0.0)
-    xcodeproj (1.21.0)
+    xcodeproj (1.19.0)
       CFPropertyList (>= 2.3.3, < 4.0)
       atomos (~> 0.1.3)
       claide (>= 1.0.2, < 2.0)
       colored2 (~> 3.1)
       nanaimo (~> 0.3.0)
-      rexml (~> 3.2.4)
     xcpretty (0.3.0)
       rouge (~> 2.0.7)
     xcpretty-travis-formatter (1.0.1)
       xcpretty (~> 0.2, >= 0.0.7)
-    zeitwerk (2.5.1)
 
 PLATFORMS
   ruby
 
 DEPENDENCIES
-  cocoapods (= 1.11.2)
+  cocoapods (= 1.10.1)
   fastlane (= 2.179.0)
 
 BUNDLED WITH
-   2.2.29
+   2.2.21
diff --git a/apolloschurchapp/apollos.json b/apolloschurchapp/apollos.json
index 00ebfd6b..6c473bf7 100644
--- a/apolloschurchapp/apollos.json
+++ b/apolloschurchapp/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "2.36.1",
+    "version": "2.36.0",
     "environment": "client"
 }
diff --git a/apolloschurchapp/ios/Podfile.lock b/apolloschurchapp/ios/Podfile.lock
index 5001c681..5c8986fb 100644
--- a/apolloschurchapp/ios/Podfile.lock
+++ b/apolloschurchapp/ios/Podfile.lock
@@ -259,7 +259,7 @@ PODS:
     - React-jsi (= 0.64.2)
     - React-perflogger (= 0.64.2)
   - React-jsinspector (0.64.2)
-  - react-native-apollos-player (2.36.1):
+  - react-native-apollos-player (2.36.0):
     - React
   - react-native-config (0.11.7):
     - React
@@ -659,7 +659,7 @@ SPEC CHECKSUMS:
   React-jsi: 67747b9722f6dab2ffe15b011bcf6b3f2c3f1427
   React-jsiexecutor: 80c46bd381fd06e418e0d4f53672dc1d1945c4c3
   React-jsinspector: cc614ec18a9ca96fd275100c16d74d62ee11f0ae
-  react-native-apollos-player: 8471d5d758723666eb1130fdb4e83d2cf473ac99
+  react-native-apollos-player: 252ba954987096e6d95f04f3b2485063d144b4bc
   react-native-config: 55548054279d92e0e4566ea15a8b9b81028ec342
   react-native-geolocation: c956aeb136625c23e0dce0467664af2c437888c9
   react-native-geolocation-service: f33626f1ae12381ca2ae60f98b2f5edd676bf95a
@@ -703,4 +703,4 @@ SPEC CHECKSUMS:
 
 PODFILE CHECKSUM: f16a1b76b786ae6104c99d682d91f693f9b7fca0
 
-COCOAPODS: 1.11.2
+COCOAPODS: 1.10.1
diff --git a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
index d8569658..11df3572 100644
--- a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
+++ b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
@@ -454,7 +454,7 @@
 			);
 			inputPaths = (
 				"${PODS_ROOT}/Target Support Files/Pods-apolloschurchapp-apolloschurchappTests/Pods-apolloschurchapp-apolloschurchappTests-frameworks.sh",
-				"${PODS_XCFRAMEWORKS_BUILD_DIR}/OpenSSL-Universal/OpenSSL.framework/OpenSSL",
+				"${PODS_XCFRAMEWORKS_BUILD_DIR}/OpenSSL/OpenSSL.framework/OpenSSL",
 			);
 			name = "[CP] Embed Pods Frameworks";
 			outputPaths = (
@@ -571,7 +571,7 @@
 			);
 			inputPaths = (
 				"${PODS_ROOT}/Target Support Files/Pods-apolloschurchapp/Pods-apolloschurchapp-frameworks.sh",
-				"${PODS_XCFRAMEWORKS_BUILD_DIR}/OpenSSL-Universal/OpenSSL.framework/OpenSSL",
+				"${PODS_XCFRAMEWORKS_BUILD_DIR}/OpenSSL/OpenSSL.framework/OpenSSL",
 			);
 			name = "[CP] Embed Pods Frameworks";
 			outputPaths = (
diff --git a/apolloschurchapp/package.json b/apolloschurchapp/package.json
index 25f4d366..b9db9ed8 100644
--- a/apolloschurchapp/package.json
+++ b/apolloschurchapp/package.json
@@ -17,7 +17,7 @@
     "pods": "(bundle install && cd ios && bundle exec pod install --repo-update)",
     "start": "yarn start:dev",
     "start:dev": "node ./scripts/get-introspection-data.js && react-native start",
-    "test": "echo \"No tests\"",
+    "test": "jest",
     "icons": "react-native set-icon --path",
     "splash": "react-native set-splash --path"
   },
@@ -41,22 +41,22 @@
   "dependencies": {
     "@apollo/client": "3.3.20",
     "@apollo/react-hooks": "^3.1.3",
-    "@apollosproject/config": "^2.36.1",
+    "@apollosproject/config": "^2.36.0",
     "@apollosproject/react-native-airplay-btn": "^0.2.0",
-    "@apollosproject/ui-analytics": "^2.36.1",
-    "@apollosproject/ui-auth": "^2.36.1",
-    "@apollosproject/ui-connected": "^2.36.1",
-    "@apollosproject/ui-fragments": "^2.36.1",
-    "@apollosproject/ui-htmlview": "^2.36.1",
-    "@apollosproject/ui-kit": "^2.36.1",
-    "@apollosproject/ui-mapview": "^2.36.1",
-    "@apollosproject/ui-media-player": "^2.36.1",
-    "@apollosproject/ui-notifications": "^2.36.1",
-    "@apollosproject/ui-onboarding": "^2.36.1",
-    "@apollosproject/ui-passes": "^2.36.1",
-    "@apollosproject/ui-prayer": "^2.36.1",
-    "@apollosproject/ui-scripture": "^2.36.1",
-    "@apollosproject/ui-test-utils": "^2.36.1",
+    "@apollosproject/ui-analytics": "^2.36.0",
+    "@apollosproject/ui-auth": "^2.36.0",
+    "@apollosproject/ui-connected": "^2.36.0",
+    "@apollosproject/ui-fragments": "^2.36.0",
+    "@apollosproject/ui-htmlview": "^2.36.0",
+    "@apollosproject/ui-kit": "^2.36.0",
+    "@apollosproject/ui-mapview": "^2.36.0",
+    "@apollosproject/ui-media-player": "^2.36.0",
+    "@apollosproject/ui-notifications": "^2.36.0",
+    "@apollosproject/ui-onboarding": "^2.36.0",
+    "@apollosproject/ui-passes": "^2.36.0",
+    "@apollosproject/ui-prayer": "^2.36.0",
+    "@apollosproject/ui-scripture": "^2.36.0",
+    "@apollosproject/ui-test-utils": "^2.36.0",
     "@gorhom/bottom-sheet": "3.4.1",
     "@react-native-community/async-storage": "^1.5.1",
     "@react-native-community/datetimepicker": "^3.0.0",
@@ -113,7 +113,7 @@
     "yup": "0.26.6"
   },
   "devDependencies": {
-    "@apollosproject/eslint-config": "^2.36.1",
+    "@apollosproject/eslint-config": "^2.36.0",
     "@babel/core": "^7.14.6",
     "@babel/runtime": "^7.14.6",
     "@bam.tech/react-native-make": "^3.0.3",
diff --git a/apolloschurchapp/src/index.js b/apolloschurchapp/src/index.js
index 3f7bdbb9..4efb3fbe 100644
--- a/apolloschurchapp/src/index.js
+++ b/apolloschurchapp/src/index.js
@@ -29,12 +29,13 @@ import {
   ContentSingleConnected,
   ContentFeedConnected,
   SearchScreenConnected,
-  UserSettingsConnected,
 } from '@apollosproject/ui-connected';
 import Providers from './Providers';
 import Tabs from './tabs';
 import customTheme, { customIcons } from './theme';
 
+import UserSettingsNavigator from './user-settings';
+
 enableScreens(); // improves performance for react-navigation
 
 const AppStatusBar = withTheme(({ theme }) => ({
@@ -131,11 +132,7 @@ const App = () => (
                 stackPresentation: 'push',
               }}
             />
-            <Screen
-              name="Location"
-              component={Location}
-              options={{ title: 'Campuses' }}
-            />
+            <Screen name="Location" component={Location} />
             <Screen
               name="Passes"
               component={Passes}
@@ -153,7 +150,7 @@ const App = () => (
             <Screen name="Search" component={SearchScreenConnected} />
             <Screen
               name="UserSettingsNavigator"
-              component={UserSettingsConnected}
+              component={UserSettingsNavigator}
             />
           </Navigator>
         </Providers>
diff --git a/apolloschurchapp/src/user-settings/ChangePassword.js b/apolloschurchapp/src/user-settings/ChangePassword.js
new file mode 100644
index 00000000..cd07d4f9
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/ChangePassword.js
@@ -0,0 +1,114 @@
+import React, { PureComponent } from 'react';
+import PropTypes from 'prop-types';
+import { KeyboardAvoidingView } from 'react-native';
+import { Mutation } from '@apollo/client/react/components';
+import { gql } from '@apollo/client';
+import { Formik } from 'formik';
+import * as Yup from 'yup';
+
+import { Button, TextInput, PaddedView, styled } from '@apollosproject/ui-kit';
+
+import { SafeAreaView } from 'react-native-safe-area-context';
+import CHANGE_PASSWORD from './passwordChange';
+
+const FlexedKeyboardAvoidingView = styled({
+  flex: 1,
+})(KeyboardAvoidingView);
+
+const Footer = styled(({ theme }) => ({
+  flex: 1,
+  justifyContent: 'flex-end',
+  marginBottom: theme.sizing.baseUnit * 5,
+}))(SafeAreaView);
+
+class ChangePassword extends PureComponent {
+  static propTypes = {
+    navigation: PropTypes.shape({
+      navigate: PropTypes.func,
+      goBack: PropTypes.func,
+    }),
+  };
+
+  renderForm = (props) => (
+    <FlexedKeyboardAvoidingView behavior="padding">
+      <PaddedView>
+        <TextInput
+          label="New Password"
+          type="password"
+          value={props.values.password}
+          error={props.touched.password && props.errors.password}
+          onChangeText={(text) => props.setFieldValue('password', text)}
+        />
+        <TextInput
+          label="Confirm Password"
+          type="password"
+          value={props.values.confirmPassword}
+          error={props.touched.confirmPassword && props.errors.confirmPassword}
+          onChangeText={(text) => props.setFieldValue('confirmPassword', text)}
+        />
+      </PaddedView>
+      <Footer>
+        <PaddedView>
+          <Button
+            disabled={props.isSubmitting}
+            onPress={props.handleSubmit}
+            title="Save"
+            loading={props.isSubmitting}
+          />
+        </PaddedView>
+      </Footer>
+    </FlexedKeyboardAvoidingView>
+  );
+
+  render() {
+    return (
+      <Mutation
+        mutation={CHANGE_PASSWORD}
+        update={async (cache, { data: { token } }) => {
+          await cache.writeQuery({
+            query: gql`
+              query authToken {
+                authToken @client
+              }
+            `,
+            data: { authToken: token },
+          });
+        }}
+      >
+        {(updatePassword) => (
+          <Formik
+            validationSchema={Yup.object().shape({
+              password: Yup.string()
+                .min(6, 'Password must be at least 6 characters')
+                .required('Password is required'),
+              confirmPassword: Yup.string()
+                .min(6, 'Password must be at least 6 characters')
+                .oneOf([Yup.ref('password')], 'Passwords must match.')
+                .required('Password confirm is required'),
+            })}
+            onSubmit={async (variables, { setSubmitting, setFieldError }) => {
+              try {
+                await updatePassword({ variables });
+
+                await this.props.navigation.goBack();
+              } catch (e) {
+                const { graphQLErrors } = e;
+                if (graphQLErrors.length) {
+                  setFieldError(
+                    'confirmPassword',
+                    'Unknown error. Please try again later.'
+                  );
+                }
+              }
+              setSubmitting(false);
+            }}
+          >
+            {this.renderForm}
+          </Formik>
+        )}
+      </Mutation>
+    );
+  }
+}
+
+export default ChangePassword;
diff --git a/apolloschurchapp/src/user-settings/ChangePassword.tests.js b/apolloschurchapp/src/user-settings/ChangePassword.tests.js
new file mode 100644
index 00000000..2ef34a19
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/ChangePassword.tests.js
@@ -0,0 +1,26 @@
+import React from 'react';
+
+import {
+  Providers,
+  renderWithApolloData,
+  WithReactNavigator,
+} from '@apollosproject/ui-test-utils';
+import { MockedProvider } from '@apollo/client/testing';
+import ChangePassword from './ChangePassword';
+
+describe('Change Password component', () => {
+  it('renders a change password form', async () => {
+    const navigation = {
+      navigate: jest.fn(),
+      goBack: jest.fn(),
+    };
+    const tree = await renderWithApolloData(
+      WithReactNavigator(
+        <Providers MockedProvider={MockedProvider}>
+          <ChangePassword navigation={navigation} />
+        </Providers>
+      )
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/user-settings/PersonDetails.tests.js b/apolloschurchapp/src/user-settings/PersonDetails.tests.js
new file mode 100644
index 00000000..fa280424
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/PersonDetails.tests.js
@@ -0,0 +1,53 @@
+import React from 'react';
+import { MockedProvider } from '@apollo/client/testing';
+import {
+  Providers,
+  renderWithApolloData,
+  WithReactNavigator,
+} from '@apollosproject/ui-test-utils';
+import { GET_USER_PROFILE } from '@apollosproject/ui-connected';
+
+import PersonalDetails from './PersonalDetails';
+
+describe('PersonalDetails component', () => {
+  it('renders PersonalDetails when logged in', async () => {
+    const mock = {
+      request: {
+        query: GET_USER_PROFILE,
+      },
+      result: {
+        data: {
+          currentUser: {
+            __typename: 'AuthenticatedUser',
+            id: 'AuthenticatedUser:123',
+            profile: {
+              __typename: 'Person',
+              id: 'Profile:123',
+              firstName: 'Isaac',
+              lastName: 'Hardy',
+              nickName: 'Ike',
+              email: 'isaac.hardy@newspring.cc',
+              birthDate: '2019-09-12T21:01:06.026Z',
+              gender: 'Male',
+              campus: null,
+              photo: null,
+            },
+          },
+        },
+      },
+    };
+    const navigation = {
+      navigate: jest.fn(),
+      goBack: jest.fn(),
+    };
+    const tree = await renderWithApolloData(
+      WithReactNavigator(
+        <Providers MockedProvider={MockedProvider} mocks={[mock]}>
+          <PersonalDetails navigation={navigation} />
+        </Providers>
+      )
+    );
+
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/user-settings/PersonalDetails.js b/apolloschurchapp/src/user-settings/PersonalDetails.js
new file mode 100644
index 00000000..2fddd0d3
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/PersonalDetails.js
@@ -0,0 +1,147 @@
+import React, { PureComponent } from 'react';
+import PropTypes from 'prop-types';
+import { KeyboardAvoidingView } from 'react-native';
+import { SafeAreaView } from 'react-native-safe-area-context';
+import { Query, Mutation } from '@apollo/client/react/components';
+import { Formik } from 'formik';
+import * as Yup from 'yup';
+
+import { TextInput, PaddedView, Button, styled } from '@apollosproject/ui-kit';
+
+import { GET_USER_PROFILE } from '@apollosproject/ui-connected';
+import UPDATE_CURRENT_USER from './updateCurrentUser';
+
+const FlexedKeyboardAvoidingView = styled({
+  flex: 1,
+})(KeyboardAvoidingView);
+
+const Footer = styled(({ theme }) => ({
+  flex: 1,
+  justifyContent: 'flex-end',
+  marginBottom: theme.sizing.baseUnit * 5,
+}))(SafeAreaView);
+
+class PersonalDetails extends PureComponent {
+  static propTypes = {
+    navigation: PropTypes.shape({
+      navigate: PropTypes.func,
+      goBack: PropTypes.func,
+    }),
+  };
+
+  renderForm = (props) => (
+    // have to add the offset to account for @react-navigation/native header
+    <FlexedKeyboardAvoidingView behavior="padding">
+      <PaddedView>
+        <TextInput
+          label="First Name"
+          type="text"
+          value={props.values.firstName}
+          error={props.touched.firstName && props.errors.firstName}
+          onChangeText={(text) => props.setFieldValue('firstName', text)}
+        />
+        <TextInput
+          label="Last Name"
+          type="text"
+          value={props.values.lastName}
+          error={props.touched.lastName && props.errors.lastName}
+          onChangeText={(text) => props.setFieldValue('lastName', text)}
+        />
+        <TextInput
+          label="Email"
+          type="email"
+          value={props.values.email}
+          error={props.touched.email && props.errors.email}
+          onChangeText={(text) => props.setFieldValue('email', text)}
+        />
+      </PaddedView>
+      <Footer>
+        <PaddedView>
+          <Button
+            disabled={!props.isValid || props.isSubmitting}
+            onPress={props.handleSubmit}
+            title="Save"
+            loading={props.isSubmitting}
+          />
+        </PaddedView>
+      </Footer>
+    </FlexedKeyboardAvoidingView>
+  );
+
+  render() {
+    return (
+      <Query query={GET_USER_PROFILE} fetchPolicy="cache-and-network">
+        {({ data: { currentUser = { profile: {} } } = {} }) => {
+          const { firstName, lastName, email } = currentUser.profile;
+
+          return (
+            <Mutation
+              mutation={UPDATE_CURRENT_USER}
+              update={async (cache, { data: { updateProfileFields } }) => {
+                await cache.writeQuery({
+                  query: GET_USER_PROFILE,
+                  data: {
+                    currentUser: {
+                      ...currentUser,
+                      profile: {
+                        ...currentUser.profile,
+                        firstName: updateProfileFields.firstName,
+                        lastName: updateProfileFields.lastName,
+                        email: updateProfileFields.email,
+                      },
+                    },
+                  },
+                });
+              }}
+            >
+              {(updateDetails) => (
+                <Formik
+                  initialValues={{ firstName, lastName, email }}
+                  validationSchema={Yup.object().shape({
+                    firstName: Yup.string().required('First Name is required!'),
+                    lastName: Yup.string().required('Last Name is required!'),
+                    email: Yup.string()
+                      .email('Invalid email address')
+                      .required('Email is required!'),
+                  })}
+                  onSubmit={async (
+                    variables,
+                    { setSubmitting, setFieldError }
+                  ) => {
+                    try {
+                      await updateDetails({ variables });
+                      await this.props.navigation.goBack();
+                    } catch (e) {
+                      const { graphQLErrors } = e;
+                      if (
+                        graphQLErrors.length &&
+                        graphQLErrors.find(({ message }) =>
+                          message.includes('User already exists')
+                        )
+                      ) {
+                        setFieldError(
+                          'email',
+                          'There is already a user with this email'
+                        );
+                      } else {
+                        setFieldError(
+                          'email',
+                          'Unknown error. Please try again later.'
+                        );
+                      }
+                    }
+                    setSubmitting(false);
+                  }}
+                >
+                  {this.renderForm}
+                </Formik>
+              )}
+            </Mutation>
+          );
+        }}
+      </Query>
+    );
+  }
+}
+
+export default PersonalDetails;
diff --git a/apolloschurchapp/src/user-settings/UserSettings.js b/apolloschurchapp/src/user-settings/UserSettings.js
new file mode 100644
index 00000000..4f3967af
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/UserSettings.js
@@ -0,0 +1,266 @@
+import React from 'react';
+import { ScrollView } from 'react-native';
+import { useQuery, useMutation, useApolloClient, gql } from '@apollo/client';
+import { useNavigation } from '@react-navigation/native';
+import { getVersion, getBuildNumber } from 'react-native-device-info';
+import { get } from 'lodash';
+
+import {
+  BackgroundView,
+  TableView,
+  Cell,
+  CellIcon,
+  CellText,
+  Divider,
+  Touchable,
+  ActivityIndicator,
+  NavigationService,
+  H3,
+  H4,
+  H6,
+  PaddedView,
+  withTheme,
+  styled,
+} from '@apollosproject/ui-kit';
+import {
+  checkOnboardingStatusAndNavigate,
+  onboardingComplete,
+} from '@apollosproject/ui-onboarding';
+import { GET_LOGIN_STATE, LOGOUT } from '@apollosproject/ui-auth';
+import {
+  RockAuthedWebBrowser,
+  UserAvatarUpdate,
+} from '@apollosproject/ui-connected';
+
+const StyledPaddedView = withTheme(({ theme }) => ({
+  style: {
+    paddingLeft: theme.sizing.baseUnit,
+    paddingBottom: theme.sizing.baseUnit * 0.5,
+    paddingTop: 0,
+  },
+}))(PaddedView);
+
+const StyledCellIcon = withTheme(({ theme }) => ({
+  fill: theme.colors.neutral.gray2,
+}))(CellIcon);
+
+const Container = styled({
+  alignItems: 'center',
+  justifyContent: 'center',
+})(PaddedView);
+
+const UserSettings = () => {
+  const navigation = useNavigation();
+  const {
+    data: { isLoggedIn = false },
+    loading,
+  } = useQuery(GET_LOGIN_STATE, { fetchPolicy: 'cache-and-network' });
+  const [logout] = useMutation(LOGOUT);
+  const client = useApolloClient();
+  const { data } = useQuery(gql`
+    query currentUserId {
+      currentUser {
+        id
+        profile {
+          firstName
+          lastName
+        }
+      }
+    }
+  `);
+
+  const firstName = get(data, 'currentUser.profile.firstName');
+  const lastName = get(data, 'currentUser.profile.lastName');
+
+  if (loading) {
+    return <ActivityIndicator />;
+  }
+  if (!isLoggedIn) {
+    return null;
+  }
+  return (
+    <BackgroundView>
+      <ScrollView>
+        <Container>
+          <UserAvatarUpdate />
+          <H3>{firstName && lastName ? `${firstName} ${lastName}` : ''}</H3>
+        </Container>
+        <RockAuthedWebBrowser>
+          {(openUrl) => (
+            <>
+              <TableView>
+                <Touchable
+                  onPress={() => {
+                    navigation.navigate('LikedContentFeedConnected');
+                  }}
+                >
+                  <Cell>
+                    <StyledCellIcon name="like" />
+                    <CellText>Likes</CellText>
+                  </Cell>
+                </Touchable>
+              </TableView>
+              <StyledPaddedView>
+                <H6>Your Profile</H6>
+              </StyledPaddedView>
+              <TableView>
+                <Touchable
+                  onPress={() => {
+                    navigation.navigate('PersonalDetails');
+                  }}
+                >
+                  <Cell>
+                    <CellText>Personal Details</CellText>
+                    <StyledCellIcon name="arrow-next" />
+                  </Cell>
+                </Touchable>
+                <Divider />
+                <Touchable
+                  onPress={() => {
+                    navigation.navigate('Location');
+                  }}
+                >
+                  <Cell>
+                    <CellText>Location</CellText>
+                    <StyledCellIcon name="arrow-next" />
+                  </Cell>
+                </Touchable>
+                <Divider />
+                <Touchable
+                  onPress={() => {
+                    navigation.navigate('ChangePassword');
+                  }}
+                >
+                  <Cell>
+                    <CellText>Change Password</CellText>
+                    <StyledCellIcon name="arrow-next" />
+                  </Cell>
+                </Touchable>
+                <Divider />
+                <Touchable
+                  onPress={() => {
+                    navigation.navigate('Notifications');
+                  }}
+                >
+                  <Cell>
+                    <CellText>Notification Settings</CellText>
+                    <StyledCellIcon name="arrow-next" />
+                  </Cell>
+                </Touchable>
+              </TableView>
+              <StyledPaddedView>
+                <H6>Help & Feedback</H6>
+              </StyledPaddedView>
+              <TableView>
+                <Touchable
+                  onPress={() => {
+                    openUrl('mailto:support@apollos.app');
+                  }}
+                >
+                  <Cell>
+                    <CellText>Give Feedback</CellText>
+                    <StyledCellIcon name="arrow-next" />
+                  </Cell>
+                </Touchable>
+                <Divider />
+                <Touchable
+                  onPress={() => openUrl('https://apollosrock.newspring.cc/')}
+                >
+                  <Cell>
+                    <CellText>Privacy Policy</CellText>
+                    <StyledCellIcon name="arrow-next" />
+                  </Cell>
+                </Touchable>
+                <Divider />
+                <Touchable
+                  onPress={() => openUrl('https://apollosrock.newspring.cc/')}
+                >
+                  <Cell>
+                    <CellText>Terms of Use</CellText>
+                    <StyledCellIcon name="arrow-next" />
+                  </Cell>
+                </Touchable>
+                <Divider />
+                <Cell>
+                  <CellText>
+                    {`App Version: ${getVersion()}.${getBuildNumber()}`}
+                  </CellText>
+                </Cell>
+              </TableView>
+              <TableView>
+                <Touchable
+                  onPress={async () => {
+                    await logout();
+                    // This resets the navigation stack, and the navigates to the first auth screen.
+                    // This ensures that user isn't navigated to a subscreen of Auth, like the pin entry screen.
+                    NavigationService.resetToAuth();
+                  }}
+                >
+                  <Cell>
+                    {
+                      // Uncomment this once this icon is merged to master in core
+                      // <StyledCellIcon name="arrow-down-right" />
+                    }
+                    <CellText>Logout</CellText>
+                  </Cell>
+                </Touchable>
+              </TableView>
+
+              {/* testing panel */}
+              {process.env.NODE_ENV !== 'production' ? (
+                <>
+                  <PaddedView>
+                    <H4>For development only</H4>
+                  </PaddedView>
+                  <TableView>
+                    <Touchable
+                      onPress={() =>
+                        checkOnboardingStatusAndNavigate({
+                          latestOnboardingVersion: 2,
+                          navigation: NavigationService,
+                          client,
+                        })
+                      }
+                    >
+                      <Cell>
+                        <CellText>Launch Onboarding</CellText>
+                      </Cell>
+                    </Touchable>
+                    <Divider />
+                    <Touchable
+                      onPress={() =>
+                        onboardingComplete({
+                          version: 0,
+                          userId: data?.currentUser?.id,
+                        })
+                      }
+                    >
+                      <Cell>
+                        <CellText>Reset Onboarding to Unseen</CellText>
+                      </Cell>
+                    </Touchable>
+                    <Divider />
+                    <Touchable
+                      onPress={() =>
+                        onboardingComplete({
+                          version: 1,
+                          userId: data?.currentUser?.id,
+                        })
+                      }
+                    >
+                      <Cell>
+                        <CellText>Reset Onboarding to Seen v1</CellText>
+                      </Cell>
+                    </Touchable>
+                  </TableView>
+                </>
+              ) : null}
+            </>
+          )}
+        </RockAuthedWebBrowser>
+      </ScrollView>
+    </BackgroundView>
+  );
+};
+
+export default UserSettings;
diff --git a/apolloschurchapp/src/user-settings/UserSettings.tests.js b/apolloschurchapp/src/user-settings/UserSettings.tests.js
new file mode 100644
index 00000000..e3b904a9
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/UserSettings.tests.js
@@ -0,0 +1,50 @@
+import React from 'react';
+
+import { GET_LOGIN_STATE } from '@apollosproject/ui-auth';
+import {
+  renderWithApolloData,
+  Providers,
+  WithReactNavigator,
+} from '@apollosproject/ui-test-utils';
+import { gql } from '@apollo/client';
+import { MockedProvider } from '@apollo/client/testing';
+import { InMemoryCache } from '@apollo/client/cache';
+
+import UserSettings from './UserSettings';
+
+const mock = {
+  request: {
+    query: gql`
+      query currentUserId {
+        currentUser {
+          id
+        }
+      }
+    `,
+  },
+  result: {
+    data: {
+      currentUser: {
+        id: 1,
+      },
+    },
+  },
+};
+
+describe('UserSettings component', () => {
+  it('renders UserSettings when logged in', async () => {
+    const cache = new InMemoryCache();
+    cache.writeQuery({
+      query: GET_LOGIN_STATE,
+      data: { isLoggedIn: true },
+    });
+    const tree = await renderWithApolloData(
+      WithReactNavigator(
+        <Providers cache={cache} MockedProvider={MockedProvider} mocks={[mock]}>
+          <UserSettings />
+        </Providers>
+      )
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/user-settings/index.js b/apolloschurchapp/src/user-settings/index.js
new file mode 100644
index 00000000..59b31488
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/index.js
@@ -0,0 +1,79 @@
+import React from 'react';
+import { Text } from 'react-native';
+import { useNavigation } from '@react-navigation/native';
+import { createNativeStackNavigator } from 'react-native-screens/native-stack';
+
+import { withTheme } from '@apollosproject/ui-kit';
+import { MapViewConnected as Location } from '@apollosproject/ui-mapview';
+import { LikedContentFeedConnected } from '@apollosproject/ui-connected';
+import { NotificationSettingsConnected } from '@apollosproject/ui-notifications';
+
+import PersonalDetails from './PersonalDetails';
+import ChangePassword from './ChangePassword';
+import UserSettings from './UserSettings';
+
+const StyledText = withTheme(({ theme }) => ({
+  style: {
+    color: theme.colors.secondary,
+    fontSize: theme.sizing.baseUnit * 1.1,
+  },
+}))(Text);
+
+const ModalCloseText = () => {
+  const navigation = useNavigation();
+  const onPress = () => navigation.goBack();
+  return (
+    <StyledText name={'close'} onPress={onPress}>
+      Done
+    </StyledText>
+  );
+};
+
+const { Screen, Navigator } = createNativeStackNavigator();
+
+const UserSettingsNavigator = () => (
+  <Navigator
+    screenOptions={{
+      // headerStyle: { backgroundColor: 'transparent' },
+      headerHideShadow: true,
+      headerRight: ModalCloseText,
+      // headerLeft: ModalBackButton,
+      // headerTitle: '',
+      // headerTopInsetEnabled: false,
+    }}
+  >
+    <Screen
+      component={UserSettings}
+      name="UserSettings"
+      options={{ title: 'Profile' }}
+    />
+
+    <Screen
+      name="Location"
+      component={Location}
+      options={{ title: 'Campuses' }}
+    />
+    <Screen
+      component={NotificationSettingsConnected}
+      name="Notifications"
+      options={{ title: 'Notification Settings' }}
+    />
+    <Screen
+      name="PersonalDetails"
+      component={PersonalDetails}
+      options={{ title: 'Personal Details' }}
+    />
+    <Screen
+      name="ChangePassword"
+      component={ChangePassword}
+      options={{ title: 'Change Password' }}
+    />
+    <Screen
+      component={LikedContentFeedConnected}
+      name="LikedContentFeedConnected"
+      options={{ title: 'Liked Content' }}
+    />
+  </Navigator>
+);
+
+export default UserSettingsNavigator;
diff --git a/apolloschurchapp/src/user-settings/passwordChange.js b/apolloschurchapp/src/user-settings/passwordChange.js
new file mode 100644
index 00000000..2bd714ab
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/passwordChange.js
@@ -0,0 +1,9 @@
+import gql from 'graphql-tag';
+
+export default gql`
+  mutation changePassword($password: String!) {
+    changePassword(password: $password) {
+      token
+    }
+  }
+`;
diff --git a/apolloschurchapp/src/user-settings/updateCurrentUser.js b/apolloschurchapp/src/user-settings/updateCurrentUser.js
new file mode 100644
index 00000000..5efd459c
--- /dev/null
+++ b/apolloschurchapp/src/user-settings/updateCurrentUser.js
@@ -0,0 +1,22 @@
+import gql from 'graphql-tag';
+
+export default gql`
+  mutation updateDetails(
+    $firstName: String!
+    $lastName: String!
+    $email: String!
+  ) {
+    updateProfileFields(
+      input: [
+        { field: FirstName, value: $firstName }
+        { field: LastName, value: $lastName }
+        { field: Email, value: $email }
+      ]
+    ) {
+      firstName
+      lastName
+      email
+      id
+    }
+  }
+`;
