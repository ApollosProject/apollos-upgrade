diff --git a/apolloschurchapp/__mocks__/@apollosproject/ui-analytics.js b/apolloschurchapp/__mocks__/@apollosproject/ui-analytics.js
new file mode 100644
index 00000000..0f88a6b3
--- /dev/null
+++ b/apolloschurchapp/__mocks__/@apollosproject/ui-analytics.js
@@ -0,0 +1,9 @@
+module.exports = {
+  track: () => '',
+  AnalyticsConsumer: ({ children }) => children({ test: jest.fn() }),
+  AnalyticsProvider: ({ children }) => children,
+  CoreNavigationAnalytics: ({ children }) =>
+    children({ onNavigationStateChange: jest.fn() }),
+  TrackEventWhenLoaded: () => null,
+  withTrackOnPress: (Component) => (props) => <Component {...props} />,
+};
diff --git a/apolloschurchapp/__mocks__/@apollosproject/ui-kit.js b/apolloschurchapp/__mocks__/@apollosproject/ui-kit.js
new file mode 100644
index 00000000..fcbc8f01
--- /dev/null
+++ b/apolloschurchapp/__mocks__/@apollosproject/ui-kit.js
@@ -0,0 +1,7 @@
+module.exports = {
+  ...jest.requireActual('@apollosproject/ui-kit'),
+  NavigationService: {
+    navigate: jest.fn(),
+    setTopLevelNavigator: jest.fn(),
+  },
+};
diff --git a/apolloschurchapp/__mocks__/@apollosproject/ui-mapview.js b/apolloschurchapp/__mocks__/@apollosproject/ui-mapview.js
new file mode 100644
index 00000000..b3290d22
--- /dev/null
+++ b/apolloschurchapp/__mocks__/@apollosproject/ui-mapview.js
@@ -0,0 +1,3 @@
+module.exports = {
+  MapViewConnected: 'MapViewConnected',
+};
diff --git a/apolloschurchapp/__mocks__/@apollosproject/ui-media-player.js b/apolloschurchapp/__mocks__/@apollosproject/ui-media-player.js
new file mode 100644
index 00000000..1d439c2e
--- /dev/null
+++ b/apolloschurchapp/__mocks__/@apollosproject/ui-media-player.js
@@ -0,0 +1,7 @@
+module.exports = {
+  MediaPlayerSpacer: ({ children }) => children,
+  MediaPlayer: () => 'MediaPlayer',
+  MediaPlayerProvider: ({ children }) => children,
+  playVideoMutation: 'mutation { playVideo }',
+  withTabBarMediaSpacer: () => ({ children }) => children,
+};
diff --git a/apolloschurchapp/__mocks__/@apollosproject/ui-notifications.js b/apolloschurchapp/__mocks__/@apollosproject/ui-notifications.js
new file mode 100644
index 00000000..67ae4672
--- /dev/null
+++ b/apolloschurchapp/__mocks__/@apollosproject/ui-notifications.js
@@ -0,0 +1 @@
+module.exports = { NotificationsProvider: ({ children }) => children };
diff --git a/apolloschurchapp/__mocks__/@react-native-community/async-storage.js b/apolloschurchapp/__mocks__/@react-native-community/async-storage.js
new file mode 100644
index 00000000..a4bf3f4d
--- /dev/null
+++ b/apolloschurchapp/__mocks__/@react-native-community/async-storage.js
@@ -0,0 +1,23 @@
+let cache = {};
+export default {
+  setItem: (key, value) =>
+    new Promise((resolve, reject) =>
+      typeof key !== 'string' || typeof value !== 'string'
+        ? reject(new Error('key and value must be string'))
+        : resolve((cache[key] = value))
+    ),
+  getItem: (key, value) =>
+    new Promise((resolve) =>
+      cache.hasOwnProperty(key) ? resolve(cache[key]) : resolve(null)
+    ),
+  removeItem: (key) =>
+    new Promise((resolve, reject) =>
+      cache.hasOwnProperty(key)
+        ? resolve(delete cache[key])
+        : reject('No such key!')
+    ),
+  clear: (key) => new Promise((resolve, reject) => resolve((cache = {}))),
+
+  getAllKeys: (key) =>
+    new Promise((resolve, reject) => resolve(Object.keys(cache))),
+};
diff --git a/apolloschurchapp/__mocks__/@react-native-community/datetimepicker.js b/apolloschurchapp/__mocks__/@react-native-community/datetimepicker.js
new file mode 100644
index 00000000..86e50600
--- /dev/null
+++ b/apolloschurchapp/__mocks__/@react-native-community/datetimepicker.js
@@ -0,0 +1 @@
+export default () => 'DateTimePicker';
diff --git a/apolloschurchapp/__mocks__/@react-native-community/geolocation.js b/apolloschurchapp/__mocks__/@react-native-community/geolocation.js
new file mode 100644
index 00000000..0e77776b
--- /dev/null
+++ b/apolloschurchapp/__mocks__/@react-native-community/geolocation.js
@@ -0,0 +1,3 @@
+export default {
+  getCurrentPosition: async () => null,
+};
diff --git a/apolloschurchapp/__mocks__/react-native-device-info.js b/apolloschurchapp/__mocks__/react-native-device-info.js
new file mode 100644
index 00000000..a838bf87
--- /dev/null
+++ b/apolloschurchapp/__mocks__/react-native-device-info.js
@@ -0,0 +1,7 @@
+module.exports = {
+  getUniqueId: () => 'id-123',
+  getSystemVersion: () => 'sys-version-123',
+  getModel: () => 'ios',
+  getVersion: () => 'version-123',
+  getBuildNumber: () => 0,
+};
diff --git a/apolloschurchapp/__mocks__/react-native-permissions.js b/apolloschurchapp/__mocks__/react-native-permissions.js
new file mode 100644
index 00000000..4d543c8f
--- /dev/null
+++ b/apolloschurchapp/__mocks__/react-native-permissions.js
@@ -0,0 +1 @@
+export * from 'react-native-permissions/mock.js';
diff --git a/apolloschurchapp/__mocks__/react-native-safari-view.js b/apolloschurchapp/__mocks__/react-native-safari-view.js
new file mode 100644
index 00000000..867a6802
--- /dev/null
+++ b/apolloschurchapp/__mocks__/react-native-safari-view.js
@@ -0,0 +1,5 @@
+module.exports = {
+  isAvailable: jest.fn().mockImplementation(() => Promise.resolve(true)),
+  show: jest.fn(),
+  default: require.requireActual('react-native').SafeAreaView,
+};
diff --git a/apolloschurchapp/__mocks__/react-native-safe-area-context.js b/apolloschurchapp/__mocks__/react-native-safe-area-context.js
new file mode 100644
index 00000000..2d7ec53d
--- /dev/null
+++ b/apolloschurchapp/__mocks__/react-native-safe-area-context.js
@@ -0,0 +1,7 @@
+module.exports = {
+  SafeAreaConsumer: ({ children }) =>
+    children({ top: 0, bottom: 0, left: 0, right: 0 }),
+  SafeAreaProvider: ({ children }) => children,
+  SafeAreaView: jest.requireActual('react-native').SafeAreaView,
+  useSafeAreaInsets: () => ({ top: 3 }),
+};
diff --git a/apolloschurchapp/__mocks__/react-native-splash-screen.js b/apolloschurchapp/__mocks__/react-native-splash-screen.js
new file mode 100644
index 00000000..f042176b
--- /dev/null
+++ b/apolloschurchapp/__mocks__/react-native-splash-screen.js
@@ -0,0 +1,8 @@
+export default {
+  show: jest.fn().mockImplementation(() => {
+    console.log('show splash screen');
+  }),
+  hide: jest.fn().mockImplementation(() => {
+    console.log('hide splash screen');
+  }),
+};
diff --git a/apolloschurchapp/__mocks__/react-native-video.js b/apolloschurchapp/__mocks__/react-native-video.js
new file mode 100644
index 00000000..6b2ed22f
--- /dev/null
+++ b/apolloschurchapp/__mocks__/react-native-video.js
@@ -0,0 +1 @@
+export default () => 'Video';
diff --git a/apolloschurchapp/__mocks__/rn-fetch-blob.js b/apolloschurchapp/__mocks__/rn-fetch-blob.js
new file mode 100644
index 00000000..17042190
--- /dev/null
+++ b/apolloschurchapp/__mocks__/rn-fetch-blob.js
@@ -0,0 +1 @@
+export default () => 'Fetch';
diff --git a/apolloschurchapp/apollos.json b/apolloschurchapp/apollos.json
index f2c58668..53eb6ea2 100644
--- a/apolloschurchapp/apollos.json
+++ b/apolloschurchapp/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "2.41.0",
+    "version": "2.40.0",
     "environment": "client"
 }
diff --git a/apolloschurchapp/ios/Podfile.lock b/apolloschurchapp/ios/Podfile.lock
index 1b7cfcba..f2ed53e4 100644
--- a/apolloschurchapp/ios/Podfile.lock
+++ b/apolloschurchapp/ios/Podfile.lock
@@ -297,7 +297,7 @@ PODS:
   - React-jsinspector (0.66.1)
   - React-logger (0.66.1):
     - glog
-  - react-native-apollos-player (2.41.0):
+  - react-native-apollos-player (2.40.0):
     - React
   - react-native-config (0.11.7):
     - React
@@ -720,7 +720,7 @@ SPEC CHECKSUMS:
   React-jsiexecutor: db2f6e22a534d466fc0e34e622df47d9d20bab2f
   React-jsinspector: 8c0517dee5e8c70cd6c3066f20213ff7ce54f176
   React-logger: bfddd3418dc1d45b77b822958f3e31422e2c179b
-  react-native-apollos-player: 4ddfa7a5acdd5b5d1015d63c0724a033dfea7166
+  react-native-apollos-player: 48964f832857c72594649f9074bbfb002b758a0f
   react-native-config: 55548054279d92e0e4566ea15a8b9b81028ec342
   react-native-geolocation: c956aeb136625c23e0dce0467664af2c437888c9
   react-native-geolocation-service: f33626f1ae12381ca2ae60f98b2f5edd676bf95a
diff --git a/apolloschurchapp/jest.setup.js b/apolloschurchapp/jest.setup.js
new file mode 100644
index 00000000..1d0062f1
--- /dev/null
+++ b/apolloschurchapp/jest.setup.js
@@ -0,0 +1,44 @@
+import { Animated } from 'react-native';
+import ApollosConfig from '@apollosproject/config';
+import FRAGMENTS from '@apollosproject/ui-fragments';
+
+ApollosConfig.loadJs({
+  FRAGMENTS,
+  ONE_SIGNAL_KEY: 'doesntmatter',
+});
+
+Animated.timing = (value, config) => ({
+  start: (callback) => {
+    value.setValue(config.toValue);
+    callback && callback({ finished: true });
+  },
+  stop: () => ({}),
+});
+Animated.spring = (value, config) => ({
+  start: (callback) => {
+    value.setValue(config.toValue);
+    callback && callback({ finished: true });
+  },
+  stop: () => ({}),
+});
+
+jest.mock('./src/client/index');
+
+jest.mock('react-native-reanimated', () => {
+  const Reanimated = require('react-native-reanimated/mock');
+
+  const Easing = {
+    exp: jest.fn(),
+    out: jest.fn(),
+  };
+
+  // The mock for `call` immediately calls the callback which is incorrect
+  // So we override it with a no-op
+  Reanimated.default.call = () => {};
+  Reanimated.Easing = Easing;
+  Reanimated.EasingNode = Easing;
+
+  return Reanimated;
+});
+
+global.__reanimatedWorkletInit = jest.fn();
diff --git a/apolloschurchapp/loadConfig.js b/apolloschurchapp/loadConfig.js
index 63d6039c..8eb6c287 100644
--- a/apolloschurchapp/loadConfig.js
+++ b/apolloschurchapp/loadConfig.js
@@ -5,15 +5,15 @@ import fragmentTypes from './src/client/fragmentTypes.json';
 // Create a map all the interfaces each type implements.
 // If UniversalContentItem implements Node, Card, and ContentNode,
 // our typemap would be { UniversalContentItem: ['Node', 'Card', 'ContentNode'] }
-//
-// Used with Apollo Client cache resolver as well as internal Apollos UI functions
-const TYPEMAP = {};
-fragmentTypes.__schema.types.forEach((supertype) => {
-  if (supertype.possibleTypes) {
-    TYPEMAP[supertype.name] = [
-      ...supertype.possibleTypes.map((subtype) => subtype.name),
-    ];
-  }
-});
+const TYPEMAP = fragmentTypes.__schema.types.reduce((acc, curr) => {
+  const { name } = curr;
+  const types = Object.fromEntries(
+    curr.possibleTypes.map((type) => [type.name, name])
+  );
+  Object.keys(types).forEach((key) => {
+    acc[key] = acc[key] ? [...acc[key], types[key]] : [types[key]];
+  });
+  return acc;
+}, {});
 
 ApollosConfig.loadJs({ FRAGMENTS, TYPEMAP });
diff --git a/apolloschurchapp/package.json b/apolloschurchapp/package.json
index 1b3e8986..a62efea8 100644
--- a/apolloschurchapp/package.json
+++ b/apolloschurchapp/package.json
@@ -9,6 +9,7 @@
     "setup": "./scripts/init.sh",
     "ios": "react-native run-ios",
     "android": "SIM=\"$($HOME/Library/Android/sdk/emulator/emulator -list-avds | sed -n 1p)\" && $HOME/Library/Android/sdk/emulator/emulator -avd \"${SIM}\" & react-native run-android",
+    "codecov": "cat ./coverage/lcov.info | codecov",
     "lint": "eslint .",
     "postinstall": "jetify && yarn pods",
     "bump": "yarn version --patch",
@@ -40,22 +41,22 @@
   "dependencies": {
     "@apollo/client": "3.3.20",
     "@apollo/react-hooks": "^3.1.3",
-    "@apollosproject/config": "^2.41.0",
+    "@apollosproject/config": "^2.40.0",
     "@apollosproject/react-native-airplay-btn": "^0.2.0",
-    "@apollosproject/ui-analytics": "^2.41.0",
-    "@apollosproject/ui-auth": "^2.41.0",
-    "@apollosproject/ui-connected": "^2.41.0",
-    "@apollosproject/ui-fragments": "^2.41.0",
-    "@apollosproject/ui-htmlview": "^2.41.0",
-    "@apollosproject/ui-kit": "^2.41.0",
-    "@apollosproject/ui-mapview": "^2.41.0",
-    "@apollosproject/ui-media-player": "^2.41.0",
-    "@apollosproject/ui-notifications": "^2.41.0",
-    "@apollosproject/ui-onboarding": "^2.41.0",
-    "@apollosproject/ui-passes": "^2.41.0",
-    "@apollosproject/ui-prayer": "^2.41.0",
-    "@apollosproject/ui-scripture": "^2.41.0",
-    "@apollosproject/ui-test-utils": "^2.41.0",
+    "@apollosproject/ui-analytics": "^2.40.0",
+    "@apollosproject/ui-auth": "^2.40.0",
+    "@apollosproject/ui-connected": "^2.40.0",
+    "@apollosproject/ui-fragments": "^2.40.0",
+    "@apollosproject/ui-htmlview": "^2.40.0",
+    "@apollosproject/ui-kit": "^2.40.0",
+    "@apollosproject/ui-mapview": "^2.40.0",
+    "@apollosproject/ui-media-player": "^2.40.0",
+    "@apollosproject/ui-notifications": "^2.40.0",
+    "@apollosproject/ui-onboarding": "^2.40.0",
+    "@apollosproject/ui-passes": "^2.40.0",
+    "@apollosproject/ui-prayer": "^2.40.0",
+    "@apollosproject/ui-scripture": "^2.40.0",
+    "@apollosproject/ui-test-utils": "^2.40.0",
     "@gorhom/bottom-sheet": "3.4.1",
     "@react-native-community/async-storage": "^1.5.1",
     "@react-native-community/datetimepicker": "^3.0.0",
@@ -112,7 +113,7 @@
     "yup": "0.26.6"
   },
   "devDependencies": {
-    "@apollosproject/eslint-config": "^2.41.0",
+    "@apollosproject/eslint-config": "^2.40.0",
     "@babel/core": "^7.14.6",
     "@babel/runtime": "^7.14.6",
     "@bam.tech/react-native-make": "^3.0.3",
@@ -120,6 +121,7 @@
     "@react-native-community/eslint-config": "^3.0.0",
     "babel-jest": "^26",
     "babel-plugin-module-resolver": "^4.0.0",
+    "codecov": "3.7.2",
     "eslint": "^7.28.0",
     "eslint-import-resolver-babel-module": "^5.0.0-beta.0",
     "eslint-plugin-react": "^7.26.1",
diff --git a/apolloschurchapp/src/client/cache.js b/apolloschurchapp/src/client/cache.js
index be36c6cb..abd9b8f9 100644
--- a/apolloschurchapp/src/client/cache.js
+++ b/apolloschurchapp/src/client/cache.js
@@ -3,6 +3,18 @@ import AsyncStorage from '@react-native-community/async-storage';
 import { CachePersistor } from 'apollo3-cache-persist';
 import ApollosConfig from '@apollosproject/config';
 
+// NOTE: this file is generated at runtime
+// eslint-disable-next-line
+import introspectionQueryResultData from "./fragmentTypes.json";
+
+const finalPossibleTypes = {};
+introspectionQueryResultData.__schema.types.forEach((supertype) => {
+  if (supertype.possibleTypes) {
+    finalPossibleTypes[supertype.name] = [
+      ...supertype.possibleTypes.map((subtype) => subtype.name),
+    ];
+  }
+});
 // We reset our apollo cache based an env value and static number.
 // In the future, we should also look at resetting the app when an error occurs related to Apollo.
 // You can also increment this number to force a manual reset of the cache.
@@ -13,7 +25,7 @@ const nodeCacheRedirect = (_, { id }, { getCacheKey }) =>
   id ? getCacheKey({ __typename: id.split(':')[0], id }) : null;
 
 const cache = new InMemoryCache({
-  possibleTypes: ApollosConfig.TYPEMAP,
+  possibleTypes: finalPossibleTypes,
   cacheRedirects: {
     Query: {
       node: nodeCacheRedirect,
diff --git a/apolloschurchapp/src/index.js b/apolloschurchapp/src/index.js
index 9ec765ba..c32498f9 100644
--- a/apolloschurchapp/src/index.js
+++ b/apolloschurchapp/src/index.js
@@ -75,6 +75,11 @@ const ThemedNavigationContainer = withTheme(({ theme, ...props }) => ({
   <NavigationContainer ref={containerRef} {...props} />
 ));
 
+const LandingToAuth = () => {
+  const navigation = useNavigation();
+  return <Landing onPressPrimary={() => navigation.navigate('Auth')} />;
+};
+
 const { Navigator, Screen } = createNativeStackNavigator();
 
 const App = () => (
@@ -143,7 +148,7 @@ const App = () => (
                 stackPresentation: 'push',
               }}
             />
-            <Screen name="LandingScreen" component={Landing} />
+            <Screen name="LandingScreen" component={LandingToAuth} />
             <Screen name="Search" component={SearchScreenConnected} />
             <Screen
               name="UserSettingsNavigator"
