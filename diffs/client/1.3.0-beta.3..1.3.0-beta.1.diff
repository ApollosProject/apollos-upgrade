diff --git a/apolloschurchapp/apollos.json b/apolloschurchapp/apollos.json
index 9c7a398..27167c3 100644
--- a/apolloschurchapp/apollos.json
+++ b/apolloschurchapp/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.3.0-beta.3",
+    "version": "1.3.0-beta.1",
     "environment": "client"
 }
\ No newline at end of file
diff --git a/apolloschurchapp/index.js b/apolloschurchapp/index.js
index 6ae0efd..f4cd897 100644
--- a/apolloschurchapp/index.js
+++ b/apolloschurchapp/index.js
@@ -7,7 +7,7 @@ import Storybook from './storybook';
 
 const useStorybook = ApollosConfig.STORYBOOK === 'true';
 
-const MainApp = require('./src').default;
+const MainApp = require('./src');
 
 let App = MainApp;
 if (useStorybook) {
diff --git a/apolloschurchapp/ios/Podfile.lock b/apolloschurchapp/ios/Podfile.lock
index 2123f74..eb9753b 100644
--- a/apolloschurchapp/ios/Podfile.lock
+++ b/apolloschurchapp/ios/Podfile.lock
@@ -182,7 +182,7 @@ DEPENDENCIES:
   - yoga (from `../node_modules/react-native/ReactCommon/yoga`)
 
 SPEC REPOS:
-  https://github.com/CocoaPods/Specs.git:
+  trunk:
     - boost-for-react-native
     - OneSignal
 
diff --git a/apolloschurchapp/metro.config.js b/apolloschurchapp/metro.config.js
index 6f18f61..c0a0c95 100644
--- a/apolloschurchapp/metro.config.js
+++ b/apolloschurchapp/metro.config.js
@@ -12,36 +12,35 @@ const flatten = (array) =>
   array.reduce((accum, curr) => curr.concat(accum), []);
 
 const localDeps = [
-  path.resolve('..', 'apollos-config'),
-  path.resolve('..', 'apollos-ui-analytics'),
-  path.resolve('..', 'apollos-ui-auth'),
   path.resolve('..', 'apollos-ui-connected'),
-  path.resolve('..', 'apollos-ui-fragments'),
-  path.resolve('..', 'apollos-ui-htmlview'),
   path.resolve('..', 'apollos-ui-kit'),
+  path.resolve('..', 'apollos-ui-passes'),
+  path.resolve('..', 'apollos-ui-auth'),
+  path.resolve('..', 'apollos-ui-htmlview'),
   path.resolve('..', 'apollos-ui-mapview'),
-  path.resolve('..', 'apollos-ui-media-player'),
-  path.resolve('..', 'apollos-ui-notifications'),
+  path.resolve('..', 'apollos-ui-analytics'),
+  path.resolve('..', 'apollos-ui-storybook'),
   path.resolve('..', 'apollos-ui-onboarding'),
-  path.resolve('..', 'apollos-ui-passes'),
+  path.resolve('..', 'apollos-ui-media-player'),
   path.resolve('..', 'apollos-ui-scripture'),
-  path.resolve('..', 'apollos-ui-storybook'),
+  path.resolve('..', 'apollos-ui-notifications'),
+  path.resolve('..', 'apollos-ui-fragments'),
+  path.resolve('..', 'apollos-config'),
 ];
 
 const sharedNativeModules = [
-  '@apollosproject/react-native-airplay-btn',
-  '@react-native-community/async-storage',
-  'react-native-config',
-  'react-native-gesture-handler',
   'react-native-linear-gradient',
-  'react-native-maps',
-  'react-native-modal-datetime-picker',
-  'react-native-music-control',
-  'react-native-onesignal',
   'react-native-safe-area-context',
   'react-native-svg',
+  'react-native-onesignal',
+  'react-native-music-control',
+  'react-native-gesture-handler',
   'react-native-video',
   'react-native-video-controls',
+  'react-native-maps',
+  'react-native-config',
+  'react-native-modal-datetime-picker',
+  '@apollosproject/react-native-airplay-btn',
   'react-navigation',
 ];
 
diff --git a/apolloschurchapp/package.json b/apolloschurchapp/package.json
index 8924504..67945eb 100644
--- a/apolloschurchapp/package.json
+++ b/apolloschurchapp/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apolloschurchapp",
-  "version": "1.3.0-beta.3",
+  "version": "1.3.0-beta.1",
   "private": true,
   "devDependencies": {
     "codecov": "3.0.2",
@@ -62,25 +62,25 @@
     ]
   },
   "dependencies": {
-    "@apollosproject/config": "^1.3.0-beta.3",
+    "@apollosproject/config": "^1.3.0-beta.1",
     "@apollosproject/react-native-airplay-btn": "0.2.0",
-    "@apollosproject/ui-analytics": "^1.3.0-beta.3",
-    "@apollosproject/ui-auth": "^1.3.0-beta.3",
-    "@apollosproject/ui-fragments": "^1.3.0-beta.3",
-    "@apollosproject/ui-htmlview": "^1.3.0-beta.3",
-    "@apollosproject/ui-kit": "^1.3.0-beta.3",
-    "@apollosproject/ui-mapview": "^1.3.0-beta.3",
-    "@apollosproject/ui-media-player": "^1.3.0-beta.3",
-    "@apollosproject/ui-notifications": "^1.3.0-beta.3",
-    "@apollosproject/ui-onboarding": "^1.3.0-beta.3",
-    "@apollosproject/ui-passes": "^1.3.0-beta.3",
-    "@apollosproject/ui-scripture": "^1.3.0-beta.3",
-    "@apollosproject/ui-storybook": "^1.3.0-beta.3",
+    "@apollosproject/ui-analytics": "^1.3.0-beta.1",
+    "@apollosproject/ui-auth": "^1.3.0-beta.1",
+    "@apollosproject/ui-fragments": "^1.3.0-beta.1",
+    "@apollosproject/ui-htmlview": "^1.3.0-beta.1",
+    "@apollosproject/ui-kit": "^1.3.0-beta.1",
+    "@apollosproject/ui-mapview": "^1.3.0-beta.1",
+    "@apollosproject/ui-media-player": "^1.3.0-beta.1",
+    "@apollosproject/ui-notifications": "^1.3.0-beta.1",
+    "@apollosproject/ui-onboarding": "^1.3.0-beta.1",
+    "@apollosproject/ui-passes": "^1.3.0-beta.1",
+    "@apollosproject/ui-scripture": "^1.3.0-beta.1",
+    "@apollosproject/ui-storybook": "^1.3.0-beta.1",
     "@react-native-community/async-storage": "^1.5.1",
     "@react-native-community/geolocation": "^2.0.2",
     "apollo-cache-inmemory": "1.5.1",
     "apollo-cache-persist": "0.1.1",
-    "apollo-client": "2.6.8",
+    "apollo-client": "2.5.1",
     "apollo-link": "1.2.8",
     "apollo-link-http": "1.5.11",
     "apollo-link-schema": "1.1.6",
diff --git a/apolloschurchapp/src/client/index.js b/apolloschurchapp/src/client/index.js
index 36957bf..f4e6c55 100644
--- a/apolloschurchapp/src/client/index.js
+++ b/apolloschurchapp/src/client/index.js
@@ -14,12 +14,12 @@ import cache, { ensureCacheHydration, MARK_CACHE_LOADED } from './cache';
 const goToAuth = () => NavigationService.resetToAuth();
 const wipeData = () => cache.writeData({ data: defaults });
 
-let clearStore;
+let resetStore;
 let storeIsResetting = false;
 const onAuthError = async () => {
   if (!storeIsResetting) {
     storeIsResetting = true;
-    await clearStore();
+    await resetStore();
   }
   storeIsResetting = false;
   goToAuth();
@@ -42,11 +42,11 @@ export const client = new ApolloClient({
 
 // Hack to give auth link access to method on client;
 // eslint-disable-next-line prefer-destructuring
-clearStore = client.clearStore;
+resetStore = client.resetStore;
 
 wipeData();
 // Ensure that media player still works after logout.
-client.onClearStore(() => wipeData());
+client.onResetStore(() => wipeData());
 
 class ClientProvider extends PureComponent {
   static propTypes = {
diff --git a/apolloschurchapp/src/content-feed/index.js b/apolloschurchapp/src/content-feed/index.js
index 17e015d..33d86ab 100644
--- a/apolloschurchapp/src/content-feed/index.js
+++ b/apolloschurchapp/src/content-feed/index.js
@@ -3,13 +3,11 @@ import { Query } from 'react-apollo';
 import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
-import {
-  ContentCardConnected,
-  fetchMoreResolver,
-} from '@apollosproject/ui-connected';
-
 import { BackgroundView, FeedView } from '@apollosproject/ui-kit';
 
+import ContentCardConnected from '../ui/ContentCardConnected';
+import fetchMoreResolver from '../utils/fetchMoreResolver';
+
 import GET_CONTENT_FEED from './getContentFeed';
 /**
  * This is where the component description lives
diff --git a/apolloschurchapp/src/content-single/ActionContainer/index.js b/apolloschurchapp/src/content-single/ActionContainer/index.js
index 8021d9c..6ad5233 100644
--- a/apolloschurchapp/src/content-single/ActionContainer/index.js
+++ b/apolloschurchapp/src/content-single/ActionContainer/index.js
@@ -3,10 +3,9 @@ import { Platform, View } from 'react-native';
 import PropTypes from 'prop-types';
 import { SideBySideView, styled } from '@apollosproject/ui-kit';
 import { MediaPlayerSpacer } from '@apollosproject/ui-media-player';
-import {
-  LikeButtonConnected,
-  ShareButtonConnected,
-} from '@apollosproject/ui-connected';
+import ShareContentButtonConnected from '../../ui/ShareContentButtonConnected';
+
+import LikeContentButtonConnected from '../../ui/LikeContentButtonConnected';
 
 const PositioningView = styled(({ theme }) => ({
   justifyContent: 'space-around',
@@ -23,8 +22,8 @@ const ActionContainer = ({ itemId }) => (
   <Container>
     <MediaPlayerSpacer>
       <PositioningView>
-        <LikeButtonConnected itemId={itemId} />
-        <ShareButtonConnected itemId={itemId} />
+        <LikeContentButtonConnected itemId={itemId} />
+        <ShareContentButtonConnected itemId={itemId} />
       </PositioningView>
     </MediaPlayerSpacer>
   </Container>
diff --git a/apolloschurchapp/src/content-single/Features/ScriptureFeature.js b/apolloschurchapp/src/content-single/Features/ScriptureFeature.js
index d346ce9..e5ebbd0 100644
--- a/apolloschurchapp/src/content-single/Features/ScriptureFeature.js
+++ b/apolloschurchapp/src/content-single/Features/ScriptureFeature.js
@@ -3,7 +3,7 @@ import PropTypes from 'prop-types';
 
 import { ActionCard } from '@apollosproject/ui-kit';
 import { ScriptureItem } from '@apollosproject/ui-scripture';
-import { ShareButtonConnected } from '@apollosproject/ui-connected';
+import ShareContentButtonConnected from '../../ui/ShareContentButtonConnected';
 
 const ScriptureFeature = ({
   scriptures,
@@ -13,7 +13,9 @@ const ScriptureFeature = ({
 }) => (
   <ActionCard
     icon={'text'}
-    action={<ShareButtonConnected message={message} itemId={contentId} />}
+    action={
+      <ShareContentButtonConnected message={message} itemId={contentId} />
+    }
   >
     {scriptures.map(({ copyright, reference, html, id, version }) => (
       <ScriptureItem
diff --git a/apolloschurchapp/src/content-single/Features/TextFeature.js b/apolloschurchapp/src/content-single/Features/TextFeature.js
index 4cec5a9..9faf4d0 100644
--- a/apolloschurchapp/src/content-single/Features/TextFeature.js
+++ b/apolloschurchapp/src/content-single/Features/TextFeature.js
@@ -2,11 +2,13 @@ import React from 'react';
 import PropTypes from 'prop-types';
 
 import { ActionCard, BodyText } from '@apollosproject/ui-kit';
-import { ShareButtonConnected } from '@apollosproject/ui-connected';
+import ShareContentButtonConnected from '../../ui/ShareContentButtonConnected';
 
 const TextFeature = ({ body, sharing: { message } = {}, contentId }) => (
   <ActionCard
-    action={<ShareButtonConnected message={message} itemId={contentId} />}
+    action={
+      <ShareContentButtonConnected message={message} itemId={contentId} />
+    }
   >
     <BodyText>{body}</BodyText>
   </ActionCard>
diff --git a/apolloschurchapp/src/content-single/HorizontalContentFeed/HorizontalContentFeed.tests.js b/apolloschurchapp/src/content-single/HorizontalContentFeed/HorizontalContentFeed.tests.js
index 910fc08..14c4701 100644
--- a/apolloschurchapp/src/content-single/HorizontalContentFeed/HorizontalContentFeed.tests.js
+++ b/apolloschurchapp/src/content-single/HorizontalContentFeed/HorizontalContentFeed.tests.js
@@ -1,7 +1,7 @@
 import React from 'react';
-import { GET_CONTENT_CARD } from '@apollosproject/ui-connected';
 import Providers from '../../Providers';
 import { renderWithApolloData } from '../../utils/testUtils';
+import GET_CONTENT_CARD from '../../ui/ContentCardConnected/query';
 import GET_HORIZONTAL_CONTENT from './getHorizontalContent';
 import HorizontalContentFeed from '.';
 
diff --git a/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js b/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
index 0da9322..f5f356f 100644
--- a/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
+++ b/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
@@ -6,7 +6,7 @@ import { Query } from 'react-apollo';
 
 import { HorizontalTileFeed, TouchableScale } from '@apollosproject/ui-kit';
 
-import { HorizontalContentCardConnected } from '@apollosproject/ui-connected';
+import HorizontalContentCardConnected from '../../ui/HorizontalContentCardConnected';
 
 import GET_HORIZONTAL_CONTENT from './getHorizontalContent';
 
diff --git a/apolloschurchapp/src/content-single/MediaControls/index.js b/apolloschurchapp/src/content-single/MediaControls/index.js
index f3ac16f..63af268 100644
--- a/apolloschurchapp/src/content-single/MediaControls/index.js
+++ b/apolloschurchapp/src/content-single/MediaControls/index.js
@@ -13,10 +13,9 @@ import {
   MediaThumbnailItem,
   H6,
 } from '@apollosproject/ui-kit';
-import {
-  LiveConsumer,
-  RockAuthedWebBrowser,
-} from '@apollosproject/ui-connected';
+import { LiveConsumer } from '@apollosproject/ui-connected';
+
+import { WebBrowserConsumer } from '../../ui/WebBrowser';
 
 import GET_CONTENT_MEDIA from './getContentMedia';
 
@@ -75,14 +74,14 @@ class MediaControls extends PureComponent {
   );
 
   renderWebView = ({ webViewUrl, coverImageSources }) => (
-    <RockAuthedWebBrowser>
+    <WebBrowserConsumer>
       {(openUrl) =>
         this.renderPlayButton({
           action: () => openUrl(webViewUrl),
           coverImageSources,
         })
       }
-    </RockAuthedWebBrowser>
+    </WebBrowserConsumer>
   );
 
   renderControls = ({
diff --git a/apolloschurchapp/src/tabs/connect/ActionBar.js b/apolloschurchapp/src/tabs/connect/ActionBar.js
index 12f4564..2c3e5cd 100644
--- a/apolloschurchapp/src/tabs/connect/ActionBar.js
+++ b/apolloschurchapp/src/tabs/connect/ActionBar.js
@@ -2,10 +2,10 @@ import React from 'react';
 import { ActionBar, ActionBarItem } from '@apollosproject/ui-kit';
 import { withNavigation } from 'react-navigation';
 import PropTypes from 'prop-types';
-import { RockAuthedWebBrowser } from '@apollosproject/ui-connected';
+import { WebBrowserConsumer } from '../../ui/WebBrowser';
 
 const Toolbar = ({ navigation }) => (
-  <RockAuthedWebBrowser>
+  <WebBrowserConsumer>
     {(openUrl) => (
       <ActionBar>
         <ActionBarItem
@@ -25,7 +25,7 @@ const Toolbar = ({ navigation }) => (
         />
       </ActionBar>
     )}
-  </RockAuthedWebBrowser>
+  </WebBrowserConsumer>
 );
 
 Toolbar.propTypes = {
diff --git a/apolloschurchapp/src/tabs/connect/ActionTable/index.js b/apolloschurchapp/src/tabs/connect/ActionTable/index.js
index dc37bcd..d267f72 100644
--- a/apolloschurchapp/src/tabs/connect/ActionTable/index.js
+++ b/apolloschurchapp/src/tabs/connect/ActionTable/index.js
@@ -12,7 +12,7 @@ import {
   PaddedView,
   H4,
 } from '@apollosproject/ui-kit';
-import { RockAuthedWebBrowser } from '@apollosproject/ui-connected';
+import { WebBrowserConsumer } from '../../../ui/WebBrowser';
 import NavigationActions from '../../../NavigationService';
 
 const RowHeader = styled(({ theme }) => ({
@@ -27,7 +27,7 @@ const Name = styled({
 })(View);
 
 const ActionTable = () => (
-  <RockAuthedWebBrowser>
+  <WebBrowserConsumer>
     {(openUrl) => (
       <View>
         <RowHeader>
@@ -76,7 +76,7 @@ const ActionTable = () => (
         </TableView>
       </View>
     )}
-  </RockAuthedWebBrowser>
+  </WebBrowserConsumer>
 );
 
 const StyledActionTable = styled(({ theme }) => ({
diff --git a/apolloschurchapp/src/tabs/connect/Connect.js b/apolloschurchapp/src/tabs/connect/Connect.js
index 628e03a..4ba12d4 100644
--- a/apolloschurchapp/src/tabs/connect/Connect.js
+++ b/apolloschurchapp/src/tabs/connect/Connect.js
@@ -3,11 +3,11 @@ import { ScrollView } from 'react-native';
 import { SafeAreaView } from 'react-navigation';
 import PropTypes from 'prop-types';
 
-import { HorizontalLikedContentFeedConnected } from '@apollosproject/ui-connected';
 import { BackgroundView } from '@apollosproject/ui-kit';
 import ActionTable from './ActionTable';
 import ActionBar from './ActionBar';
 import UserAvatarHeader from './UserAvatarHeader';
+import { RecentlyLikedTileFeedConnected } from './RecentlyLikedTileFeed';
 
 class Connect extends PureComponent {
   static navigationOptions = () => ({
@@ -29,7 +29,7 @@ class Connect extends PureComponent {
           <ScrollView>
             <UserAvatarHeader />
             <ActionBar />
-            <HorizontalLikedContentFeedConnected />
+            <RecentlyLikedTileFeedConnected />
             <ActionTable />
           </ScrollView>
         </SafeAreaView>
diff --git a/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js b/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js
new file mode 100644
index 0000000..da4eb24
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js
@@ -0,0 +1,68 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import wait from 'waait';
+
+import Providers from '../../../Providers';
+
+import GET_LIKED_CONTENT from '../getLikedContent';
+import LikedContentList from '.';
+
+describe('LikedContentList component', () => {
+  it('renders LikedContentList', async () => {
+    const mock = {
+      request: {
+        query: GET_LIKED_CONTENT,
+      },
+      result: {
+        data: {
+          likedContent: [
+            {
+              __typename: 'UniversalContentItem',
+              id: 'UniversalContentItem:4148aeb9482181025e9cad42826e676a',
+              title: 'Making Prayer a Spiritual Habit',
+              coverImage: {
+                sources: [
+                  {
+                    uri:
+                      'https://apollosrock.newspring.cc/GetImage.ashx?guid=55be1fd5-d8eb-43a6-aa70-f8e27bb63d31',
+                  },
+                ],
+              },
+              sharing: {
+                title: 'Making Prayer a Spiritual Habit',
+                message: '',
+                url: 'https://apollosrock.newspring.cc/',
+              },
+            },
+            {
+              __typename: 'UniversalContentItem',
+              id: 'UniversalContentItem:9dbdc4e565dcaa3c9b17eb5ae42de96e',
+              title: 'Vacations and Your Budget',
+              coverImage: {
+                sources: [
+                  {
+                    uri:
+                      'https://apollosrock.newspring.cc/GetImage.ashx?guid=993efb47-47ec-4dec-a3d3-47bcacfbd58e',
+                  },
+                ],
+              },
+              sharing: {
+                title: 'Vacations and Your Budget',
+                message: '',
+                url: 'https://apollosrock.newspring.cc/',
+              },
+            },
+          ],
+        },
+      },
+    };
+    const navigation = { navigate: jest.fn(), getParam: jest.fn() };
+    const tree = renderer.create(
+      <Providers mocks={[mock]}>
+        <LikedContentList navigation={navigation} />
+      </Providers>
+    );
+    await wait(0); // wait for response from graphql
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/tabs/connect/LikedContentList/index.js b/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
new file mode 100644
index 0000000..c923b53
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
@@ -0,0 +1,69 @@
+import React, { PureComponent } from 'react';
+import PropTypes from 'prop-types';
+import { Query } from 'react-apollo';
+import { get } from 'lodash';
+
+import { BackgroundView, FeedView } from '@apollosproject/ui-kit';
+import fetchMoreResolver from '../../../utils/fetchMoreResolver';
+import ContentCardConnected from '../../../ui/ContentCardConnected';
+
+import GET_LIKED_CONTENT from '../getLikedContent';
+/** A FeedView wrapped in a query to pull content data. */
+class LikedContentList extends PureComponent {
+  /** Function for React Navigation to set information in the header. */
+  static navigationOptions = () => ({
+    title: 'Your Likes',
+  });
+
+  static propTypes = {
+    /** Functions passed down from React Navigation to use in navigating to/from
+     * items in the feed.
+     */
+    navigation: PropTypes.shape({
+      getParam: PropTypes.func,
+      navigate: PropTypes.func,
+    }),
+  };
+
+  /** Function that is called when a card in the feed is pressed.
+   * Takes the user to the ContentSingle
+   */
+  handleOnPress = (item) =>
+    this.props.navigation.navigate('ContentSingle', {
+      itemId: item.id,
+      sharing: item.sharing,
+    });
+
+  render() {
+    return (
+      <BackgroundView>
+        <Query
+          query={GET_LIKED_CONTENT}
+          fetchPolicy="cache-and-network"
+          variables={{ first: 20 }}
+        >
+          {({ loading, error, data, refetch, fetchMore, variables }) => (
+            <FeedView
+              ListItemComponent={ContentCardConnected}
+              content={get(data, 'likedContent.edges', []).map(
+                (edge) => edge.node
+              )}
+              isLoading={loading}
+              error={error}
+              refetch={refetch}
+              onPressItem={this.handleOnPress}
+              fetchMore={fetchMoreResolver({
+                collectionName: 'likedContent',
+                fetchMore,
+                variables,
+                data,
+              })}
+            />
+          )}
+        </Query>
+      </BackgroundView>
+    );
+  }
+}
+
+export default LikedContentList;
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js
new file mode 100644
index 0000000..fe20d03
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js
@@ -0,0 +1,118 @@
+import React, { Component } from 'react';
+import { View } from 'react-native';
+import { withNavigation } from 'react-navigation';
+import PropTypes from 'prop-types';
+
+import {
+  styled,
+  withTheme,
+  PaddedView,
+  H5,
+  H6,
+  HorizontalTileFeed,
+  ButtonLink,
+  TouchableScale,
+  Touchable,
+  withIsLoading,
+} from '@apollosproject/ui-kit';
+
+import HorizontalContentCardConnected from '../../../ui/HorizontalContentCardConnected';
+
+const RowHeader = styled(({ theme }) => ({
+  flexDirection: 'row',
+  justifyContent: 'space-between',
+  alignItems: 'center',
+  zIndex: 2, // UX hack to improve tapability. Positions RowHeader above StyledHorizontalTileFeed
+  paddingTop: theme.sizing.baseUnit * 0.5,
+  paddingLeft: theme.sizing.baseUnit,
+}))(View);
+
+const Name = styled({
+  flexGrow: 2,
+})(View);
+
+const ButtonLinkSpacing = styled(({ theme }) => ({
+  flexDirection: 'row', // correctly positions the loading state
+  justifyContent: 'flex-end', // correctly positions the loading state
+  padding: theme.sizing.baseUnit, // UX hack to improve tapability.
+}))(View);
+
+const AndroidTouchableFix = withTheme(({ theme }) => ({
+  borderRadius: theme.sizing.baseBorderRadius / 2,
+}))(Touchable);
+
+const StyledHorizontalTileFeed = styled(({ theme }) => ({
+  /* UX hack to improve tapability. The magic number below happens to be the number of pixels that
+   * aligns everything in the same place as if none of the UX hacks were there. */
+  marginTop: theme.sizing.baseUnit * -1.25,
+  zIndex: 1,
+}))(HorizontalTileFeed);
+
+class RecentlyLikedTileFeed extends Component {
+  static propTypes = {
+    navigation: PropTypes.shape({
+      navigate: PropTypes.func,
+    }),
+    isLoading: PropTypes.bool,
+    name: PropTypes.string,
+    content: PropTypes.arrayOf(
+      PropTypes.any // this component doesn't care about the shape of `node`, just that it exists
+    ),
+  };
+
+  loadingStateObject = {
+    id: 'fake_id',
+    title: '',
+    coverImage: [],
+  };
+
+  titleImageItem = ({ item }) => (
+    <TouchableScale
+      onPress={() => {
+        this.props.navigation.push('ContentSingle', {
+          itemId: item.id,
+        });
+      }}
+    >
+      <HorizontalContentCardConnected
+        isLoading={item.isLoading}
+        contentId={item.id}
+      />
+    </TouchableScale>
+  );
+
+  render() {
+    const { isLoading, name, navigation, content = [] } = this.props;
+
+    return (
+      <PaddedView horizontal={false}>
+        <RowHeader>
+          <Name>
+            <H5>{name}</H5>
+          </Name>
+
+          <AndroidTouchableFix
+            onPress={() => {
+              navigation.navigate('LikedContentList');
+            }}
+          >
+            <ButtonLinkSpacing>
+              <H6>
+                {/* we have to wrap "View All" in a ButtonLink twice to inherit styles and color correctly. */}
+                <ButtonLink>View All</ButtonLink>
+              </H6>
+            </ButtonLinkSpacing>
+          </AndroidTouchableFix>
+        </RowHeader>
+        <StyledHorizontalTileFeed
+          content={content}
+          renderItem={this.titleImageItem}
+          loadingStateObject={this.loadingStateObject}
+          isLoading={isLoading}
+        />
+      </PaddedView>
+    );
+  }
+}
+
+export default withNavigation(withIsLoading(RecentlyLikedTileFeed));
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js
new file mode 100644
index 0000000..01671e2
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js
@@ -0,0 +1,111 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from '../../../Providers';
+import RecentlyLikedTileFeed from './RecentlyLikedTileFeed';
+
+describe('RecentlyLikedTileFeed', () => {
+  it('renders a RecentlyLikedTileFeed', () => {
+    const props = {
+      content: [
+        {
+          id: 'UniversalContentItem:4148aeb9482181025e9cad42826e676a',
+          title: 'Making Prayer a Spiritual Habit',
+          __typename: 'UniversalContentItem',
+          coverImage: {
+            sources: [
+              {
+                uri:
+                  'https://apollosrock.newspring.cc/GetImage.ashx?guid=55be1fd5-d8eb-43a6-aa70-f8e27bb63d31',
+              },
+            ],
+          },
+          sharing: {
+            title: 'Making Prayer a Spiritual Habit',
+            message: '',
+            url: 'https://apollosrock.newspring.cc/',
+          },
+        },
+        {
+          id: 'UniversalContentItem:9dbdc4e565dcaa3c9b17eb5ae42de96e',
+          title: 'Vacations and Your Budget',
+          __typename: 'UniversalContentItem',
+          coverImage: {
+            sources: [
+              {
+                uri:
+                  'https://apollosrock.newspring.cc/GetImage.ashx?guid=993efb47-47ec-4dec-a3d3-47bcacfbd58e',
+              },
+            ],
+          },
+          sharing: {
+            title: 'Vacations and Your Budget',
+            message: '',
+            url: 'https://apollosrock.newspring.cc/',
+          },
+        },
+      ],
+      name: 'Liked Content',
+      navigation: jest.fn(),
+      isLoading: false,
+    };
+
+    const tree = renderer.create(
+      <Providers>
+        <RecentlyLikedTileFeed {...props} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+
+  it('renders a loading state', () => {
+    const props = {
+      content: [
+        {
+          id: 'UniversalContentItem:4148aeb9482181025e9cad42826e676a',
+          title: 'Making Prayer a Spiritual Habit',
+          coverImage: {
+            sources: [
+              {
+                uri:
+                  'https://apollosrock.newspring.cc/GetImage.ashx?guid=55be1fd5-d8eb-43a6-aa70-f8e27bb63d31',
+              },
+            ],
+          },
+          sharing: {
+            title: 'Making Prayer a Spiritual Habit',
+            message: '',
+            url: 'https://apollosrock.newspring.cc/',
+          },
+        },
+        {
+          id: 'UniversalContentItem:9dbdc4e565dcaa3c9b17eb5ae42de96e',
+          title: 'Vacations and Your Budget',
+          coverImage: {
+            sources: [
+              {
+                uri:
+                  'https://apollosrock.newspring.cc/GetImage.ashx?guid=993efb47-47ec-4dec-a3d3-47bcacfbd58e',
+              },
+            ],
+          },
+          sharing: {
+            title: 'Vacations and Your Budget',
+            message: '',
+            url: 'https://apollosrock.newspring.cc/',
+          },
+        },
+      ],
+      name: 'Liked Content',
+      navigation: jest.fn(),
+      isLoading: true,
+    };
+
+    const tree = renderer.create(
+      <Providers>
+        <RecentlyLikedTileFeed {...props} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js
new file mode 100644
index 0000000..bfccbe1
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js
@@ -0,0 +1,43 @@
+import React from 'react';
+import { Query } from 'react-apollo';
+import PropTypes from 'prop-types';
+
+import GET_LIKED_CONTENT from '../getLikedContent';
+import RecentlyLikedTileFeed from './RecentlyLikedTileFeed';
+
+const RecentlyLikedTileFeedConnected = ({ navigation }) => (
+  <Query
+    query={GET_LIKED_CONTENT}
+    fetchPolicy="cache-and-network"
+    variables={{ first: 3 }}
+  >
+    {({
+      loading,
+      data: { likedContent: { edges = [] } = { edges: [] } } = {},
+    }) => {
+      if (!edges.length) return null;
+      return (
+        <RecentlyLikedTileFeed
+          id={'liked'}
+          name={'Recently Liked'}
+          content={edges.map((e) => e.node)}
+          isLoading={loading}
+          navigation={navigation}
+          loadingStateObject={{
+            title: 'Recently Liked',
+            isLoading: true,
+          }}
+        />
+      );
+    }}
+  </Query>
+);
+
+RecentlyLikedTileFeedConnected.propTypes = {
+  navigation: PropTypes.shape({
+    getParam: PropTypes.func,
+    navigate: PropTypes.func,
+  }),
+};
+
+export default RecentlyLikedTileFeedConnected;
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js
new file mode 100644
index 0000000..415e557
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js
@@ -0,0 +1,111 @@
+import React from 'react';
+
+import Providers from '../../../Providers';
+
+import { renderWithApolloData } from '../../../utils/testUtils';
+
+import GET_LIKED_CONTENT from '../getLikedContent';
+import RecentlyLikedTileFeedConnected from './RecentlyLikedTileFeedConnected';
+
+describe('RecentlyLikedTileFeedConnected', () => {
+  it('renders a RecentlyLikedTileFeedConnected', async () => {
+    const mock = {
+      request: {
+        query: GET_LIKED_CONTENT,
+        variables: { first: 3 },
+      },
+      result: {
+        data: {
+          likedContent: {
+            __typename: 'ContentItemsConnection',
+            pageInfo: {
+              __typename: 'PaginationInfo',
+              endCursor: '123',
+            },
+            edges: [
+              {
+                __typename: 'ContentItemsConnectionEdge',
+                node: {
+                  __typename: 'UniversalContentItem',
+                  id: 'UniversalContentItem:d57994350b9d213866b24dea3a97433d',
+                  coverImage: null,
+                  parentChannel: {
+                    id: 'ContentChannel:4f68015ba18662a7409d1219a4ce013e',
+                    name: 'Editorial',
+                    iconName: 'text',
+                    __typename: 'ContentChannel',
+                  },
+                  title: 'Mea Animal Aperiam Ornatus Eu',
+                  hyphenatedTitle: 'Mea Animal Aperiam Ornatus Eu',
+                  summary: 'Bla bla bla',
+                  theme: null,
+                  isLiked: false,
+                  likedCount: 0,
+                  videos: [],
+                  audios: [],
+                },
+              },
+              {
+                __typename: 'ContentItemsConnectionEdge',
+                node: {
+                  __typename: 'UniversalContentItem',
+                  id: 'UniversalContentItem:b36e55d803443431e96bb4b5068147ec',
+                  coverImage: null,
+                  parentChannel: {
+                    id: 'ContentChannel:4f68015ba18662a7409d1219a4ce013e',
+                    name: 'Editorial',
+                    iconName: 'text',
+                    __typename: 'ContentChannel',
+                  },
+                  title: 'Probo Senserit Id Mea, Ut Sed Malis Postea,',
+                  hyphenatedTitle:
+                    'Probo Senserit Id Mea, Ut Sed Malis Postea,',
+                  summary: 'Bla bla bla',
+                  theme: null,
+                  isLiked: false,
+                  likedCount: 0,
+                  videos: [],
+                  audios: [],
+                },
+              },
+            ],
+          },
+        },
+      },
+    };
+    const navigation = { navigate: jest.fn(), getParam: jest.fn() };
+    const tree = await renderWithApolloData(
+      <Providers mocks={[mock]}>
+        <RecentlyLikedTileFeedConnected navigation={navigation} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+
+  it('renders nothing if no liked content', async () => {
+    const mock = {
+      request: {
+        query: GET_LIKED_CONTENT,
+      },
+      result: {
+        data: {
+          likedContent: {
+            __typename: 'ContentItemsConnection',
+            pageInfo: {
+              __typename: 'PaginationInfo',
+              endCursor: null,
+            },
+            edges: [],
+          },
+        },
+      },
+    };
+    const navigation = { navigate: jest.fn(), getParam: jest.fn() };
+    const tree = await renderWithApolloData(
+      <Providers mocks={[mock]}>
+        <RecentlyLikedTileFeedConnected navigation={navigation} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/index.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/index.js
new file mode 100644
index 0000000..f67e890
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/index.js
@@ -0,0 +1,2 @@
+export RecentlyLikedTileFeed from './RecentlyLikedTileFeed';
+export RecentlyLikedTileFeedConnected from './RecentlyLikedTileFeedConnected';
diff --git a/apolloschurchapp/src/tabs/connect/getLikedContent.js b/apolloschurchapp/src/tabs/connect/getLikedContent.js
new file mode 100644
index 0000000..2ed6520
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/getLikedContent.js
@@ -0,0 +1,21 @@
+import gql from 'graphql-tag';
+import ApollosConfig from '@apollosproject/config';
+
+export default gql`
+  query getAllLikedContent($first: Int, $after: String) {
+    likedContent(first: $first, after: $after) {
+      pageInfo {
+        endCursor
+      }
+      edges {
+        node {
+          ... on ContentItem {
+            isLiked
+            ...contentCardFragment
+          }
+        }
+      }
+    }
+  }
+  ${ApollosConfig.FRAGMENTS.CONTENT_CARD_FRAGMENT}
+`;
diff --git a/apolloschurchapp/src/tabs/connect/index.js b/apolloschurchapp/src/tabs/connect/index.js
index 6d40ffa..8512ed9 100644
--- a/apolloschurchapp/src/tabs/connect/index.js
+++ b/apolloschurchapp/src/tabs/connect/index.js
@@ -1,19 +1,19 @@
 import { createStackNavigator } from 'react-navigation';
 import { withTheme } from '@apollosproject/ui-kit';
-import { LikedContentFeedConnected } from '@apollosproject/ui-connected';
 
 import UserSettings from '../../user-settings';
-import TestingControlPanel from '../../testing-control-panel';
 
+import TestingControlPanel from '../../testing-control-panel';
 import tabBarIcon from '../tabBarIcon';
 import Connect from './Connect';
+import LikedContentList from './LikedContentList';
 
 const ConnectNavigator = createStackNavigator(
   {
     Connect,
     TestingControlPanel,
     UserSettings,
-    LikedContentFeedConnected,
+    LikedContentList,
   },
   {
     initialRouteName: 'Connect',
diff --git a/apolloschurchapp/src/tabs/discover/DiscoverFeed/DiscoverFeed.tests.js b/apolloschurchapp/src/tabs/discover/DiscoverFeed/DiscoverFeed.tests.js
index 61156fe..568ee71 100644
--- a/apolloschurchapp/src/tabs/discover/DiscoverFeed/DiscoverFeed.tests.js
+++ b/apolloschurchapp/src/tabs/discover/DiscoverFeed/DiscoverFeed.tests.js
@@ -3,9 +3,9 @@ import { flatMap } from 'lodash';
 import { createStackNavigator, createAppContainer } from 'react-navigation';
 import renderer from 'react-test-renderer';
 
-import { GET_CONTENT_CARD } from '@apollosproject/ui-connected';
 import Providers from '../../../Providers';
 import { renderWithApolloData } from '../../../utils/testUtils';
+import GET_CONTENT_CARD from '../../../ui/ContentCardConnected/query';
 
 import GET_CONTENT_CHANNELS from './getContentChannels';
 import DiscoverFeed from '.';
diff --git a/apolloschurchapp/src/tabs/discover/DiscoverFeed/TileContentFeed.js b/apolloschurchapp/src/tabs/discover/DiscoverFeed/TileContentFeed.js
index fcea58e..62c31bb 100644
--- a/apolloschurchapp/src/tabs/discover/DiscoverFeed/TileContentFeed.js
+++ b/apolloschurchapp/src/tabs/discover/DiscoverFeed/TileContentFeed.js
@@ -16,7 +16,7 @@ import {
   withIsLoading,
 } from '@apollosproject/ui-kit';
 
-import { HorizontalContentCardConnected } from '@apollosproject/ui-connected';
+import HorizontalContentCardConnected from '../../../ui/HorizontalContentCardConnected';
 
 const RowHeader = styled(({ theme }) => ({
   flexDirection: 'row',
diff --git a/apolloschurchapp/src/tabs/discover/SearchFeed/SearchFeed.tests.js b/apolloschurchapp/src/tabs/discover/SearchFeed/SearchFeed.tests.js
index d8e0544..aed2839 100644
--- a/apolloschurchapp/src/tabs/discover/SearchFeed/SearchFeed.tests.js
+++ b/apolloschurchapp/src/tabs/discover/SearchFeed/SearchFeed.tests.js
@@ -3,9 +3,9 @@ import { flatMap } from 'lodash';
 import { createStackNavigator, createAppContainer } from 'react-navigation';
 import renderer from 'react-test-renderer';
 
-import { GET_CONTENT_CARD } from '@apollosproject/ui-connected';
 import Providers from '../../../Providers';
 import { renderWithApolloData } from '../../../utils/testUtils';
+import GET_CONTENT_CARD from '../../../ui/ContentCardConnected/query';
 
 import GET_SEARCH_RESULTS from './getSearchResults';
 import SearchFeed from '.';
diff --git a/apolloschurchapp/src/tabs/discover/discover.tests.js b/apolloschurchapp/src/tabs/discover/discover.tests.js
index a0cff65..ecedffb 100644
--- a/apolloschurchapp/src/tabs/discover/discover.tests.js
+++ b/apolloschurchapp/src/tabs/discover/discover.tests.js
@@ -2,10 +2,10 @@ import React from 'react';
 import { flatMap } from 'lodash';
 import { createStackNavigator, createAppContainer } from 'react-navigation';
 
-import { GET_CONTENT_CARD } from '@apollosproject/ui-connected';
 import Providers from '../../Providers';
 
 import { renderWithApolloData } from '../../utils/testUtils';
+import GET_CONTENT_CARD from '../../ui/ContentCardConnected/query';
 
 import Discover from './Discover';
 import GET_CONTENT_CHANNELS from './DiscoverFeed/getContentChannels';
diff --git a/apolloschurchapp/src/tabs/home/Home.js b/apolloschurchapp/src/tabs/home/Home.js
index 570904d..bae53bc 100644
--- a/apolloschurchapp/src/tabs/home/Home.js
+++ b/apolloschurchapp/src/tabs/home/Home.js
@@ -5,10 +5,6 @@ import SafeAreaView from 'react-native-safe-area-view';
 import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
-import {
-  ContentCardConnected,
-  fetchMoreResolver,
-} from '@apollosproject/ui-connected';
 import {
   styled,
   FeedView,
@@ -17,6 +13,9 @@ import {
   FeaturedCard,
 } from '@apollosproject/ui-kit';
 
+import fetchMoreResolver from '../../utils/fetchMoreResolver';
+import ContentCardConnected from '../../ui/ContentCardConnected';
+
 import Features from './Features';
 import GET_USER_FEED from './getUserFeed';
 import GET_CAMPAIGN_CONTENT_ITEM from './getCampaignContentItem';
diff --git a/apolloschurchapp/src/testing-control-panel/index.js b/apolloschurchapp/src/testing-control-panel/index.js
index 7417f33..77ed57c 100644
--- a/apolloschurchapp/src/testing-control-panel/index.js
+++ b/apolloschurchapp/src/testing-control-panel/index.js
@@ -1,7 +1,7 @@
 import React, { PureComponent } from 'react';
 import { TableView } from '@apollosproject/ui-kit';
-import { RockAuthedWebBrowser } from '@apollosproject/ui-connected';
 import { UserWebBrowserConsumer } from '../user-web-browser';
+import { WebBrowserConsumer } from '../ui/WebBrowser';
 import TouchableCell from './TouchableCell';
 
 export default class TestingControlPanel extends PureComponent {
@@ -26,7 +26,7 @@ export default class TestingControlPanel extends PureComponent {
             />
           )}
         </UserWebBrowserConsumer>
-        <RockAuthedWebBrowser>
+        <WebBrowserConsumer>
           {(openUrl) => (
             <TouchableCell
               handlePress={() =>
@@ -40,7 +40,7 @@ export default class TestingControlPanel extends PureComponent {
               cellText={`Open InAppBrowser With Rock Token`}
             />
           )}
-        </RockAuthedWebBrowser>
+        </WebBrowserConsumer>
         <TouchableCell
           handlePress={() => this.props.navigation.navigate('Onboarding')}
           iconName="Avatar"
diff --git a/apolloschurchapp/src/ui/ContentCardConnected/ContentCardConnected.js b/apolloschurchapp/src/ui/ContentCardConnected/ContentCardConnected.js
new file mode 100644
index 0000000..399c930
--- /dev/null
+++ b/apolloschurchapp/src/ui/ContentCardConnected/ContentCardConnected.js
@@ -0,0 +1,63 @@
+import React, { memo } from 'react';
+import PropTypes from 'prop-types';
+import { Query } from 'react-apollo';
+import { get } from 'lodash';
+
+import { ErrorCard } from '@apollosproject/ui-kit';
+
+import { LiveConsumer } from '@apollosproject/ui-connected';
+
+import contentCardComponentMapper from './contentCardComponentMapper';
+import GET_CONTENT_CARD from './query';
+
+const ContentCardConnected = memo(
+  ({ Component, contentId, isLoading, tile, mapProps, ...otherProps }) => {
+    if (!contentId || isLoading)
+      return <Component {...otherProps} isLoading tile={tile} />;
+
+    return (
+      <LiveConsumer contentId={contentId}>
+        {(liveStream) => (
+          <Query query={GET_CONTENT_CARD} variables={{ contentId }}>
+            {({ data: { node = {} } = {}, loading, error }) => {
+              if (error) return <ErrorCard error={error} />;
+
+              const coverImage = get(node, 'coverImage.sources', undefined);
+              const hasMedia = !!get(node, 'videos.[0].sources[0]', null);
+              const isLive = !!liveStream;
+              const labelText = get(node, 'parentChannel.name', '');
+
+              return (
+                <Component
+                  {...node}
+                  hasAction={hasMedia}
+                  isLive={isLive}
+                  labelText={isLive ? 'Live' : labelText}
+                  {...otherProps}
+                  coverImage={coverImage}
+                  isLoading={loading}
+                />
+              );
+            }}
+          </Query>
+        )}
+      </LiveConsumer>
+    );
+  }
+);
+
+ContentCardConnected.propTypes = {
+  Component: PropTypes.func,
+  mapProps: PropTypes.func,
+  contentId: PropTypes.string,
+  isLoading: PropTypes.bool,
+  tile: PropTypes.bool,
+};
+
+ContentCardConnected.defaultProps = {
+  Component: contentCardComponentMapper,
+};
+
+ContentCardConnected.displayName = 'ContentCardConnected';
+
+export default ContentCardConnected;
diff --git a/apolloschurchapp/src/ui/ContentCardConnected/contentCardComponentMapper.js b/apolloschurchapp/src/ui/ContentCardConnected/contentCardComponentMapper.js
new file mode 100644
index 0000000..30d8e1e
--- /dev/null
+++ b/apolloschurchapp/src/ui/ContentCardConnected/contentCardComponentMapper.js
@@ -0,0 +1,19 @@
+import React from 'react';
+import { get } from 'lodash';
+
+import { DefaultCard, HighlightCard } from '@apollosproject/ui-kit';
+
+const contentCardComponentMapper = (props) => {
+  // map typename to the the card we want to render.
+  switch (get(props, '__typename')) {
+    case 'MediaContentItem':
+    case 'WeekendContentItem':
+    case 'ContentSeriesContentItem':
+    case 'DevotionalContentItem':
+      return <HighlightCard {...props} />;
+    default:
+      return <DefaultCard {...props} />;
+  }
+};
+
+export default contentCardComponentMapper;
diff --git a/apolloschurchapp/src/ui/ContentCardConnected/index.js b/apolloschurchapp/src/ui/ContentCardConnected/index.js
new file mode 100644
index 0000000..8d01605
--- /dev/null
+++ b/apolloschurchapp/src/ui/ContentCardConnected/index.js
@@ -0,0 +1,5 @@
+import ContentCardConnected from './ContentCardConnected';
+
+export contentCardComponentMapper from './contentCardComponentMapper';
+
+export default ContentCardConnected;
diff --git a/apolloschurchapp/src/ui/ContentCardConnected/query.js b/apolloschurchapp/src/ui/ContentCardConnected/query.js
new file mode 100644
index 0000000..37255d5
--- /dev/null
+++ b/apolloschurchapp/src/ui/ContentCardConnected/query.js
@@ -0,0 +1,15 @@
+import gql from 'graphql-tag';
+import ApollosConfig from '@apollosproject/config';
+
+const GET_CONTENT_CARD = gql`
+  query getContentCard($contentId: ID!) {
+    node(id: $contentId) {
+      id
+      __typename
+      ...contentCardFragment
+    }
+  }
+  ${ApollosConfig.FRAGMENTS.CONTENT_CARD_FRAGMENT}
+`;
+
+export default GET_CONTENT_CARD;
diff --git a/apolloschurchapp/src/ui/HorizontalContentCardConnected/horizontalContentCardComponentMapper.js b/apolloschurchapp/src/ui/HorizontalContentCardConnected/horizontalContentCardComponentMapper.js
new file mode 100644
index 0000000..433b143
--- /dev/null
+++ b/apolloschurchapp/src/ui/HorizontalContentCardConnected/horizontalContentCardComponentMapper.js
@@ -0,0 +1,32 @@
+import React from 'react';
+import { get } from 'lodash';
+import PropTypes from 'prop-types';
+
+import {
+  HorizontalDefaultCard,
+  HorizontalHighlightCard,
+} from '@apollosproject/ui-kit';
+
+const horizontalContentCardComponentMapper = ({
+  title,
+  hyphenatedTitle,
+  ...props
+}) => {
+  // map typename to the the card we want to render.
+  switch (get(props, '__typename')) {
+    case 'MediaContentItem':
+    case 'WeekendContentItem':
+    case 'ContentSeriesContentItem':
+    case 'DevotionalContentItem':
+      return <HorizontalHighlightCard title={hyphenatedTitle} {...props} />;
+    default:
+      return <HorizontalDefaultCard title={title} {...props} />;
+  }
+};
+
+horizontalContentCardComponentMapper.propTypes = {
+  hyphenatedTitle: PropTypes.string,
+  title: PropTypes.string,
+};
+
+export default horizontalContentCardComponentMapper;
diff --git a/apolloschurchapp/src/ui/HorizontalContentCardConnected/index.js b/apolloschurchapp/src/ui/HorizontalContentCardConnected/index.js
new file mode 100644
index 0000000..c0a38bc
--- /dev/null
+++ b/apolloschurchapp/src/ui/HorizontalContentCardConnected/index.js
@@ -0,0 +1,29 @@
+import React, { memo } from 'react';
+import PropTypes from 'prop-types';
+
+import ContentCardConnected from '../ContentCardConnected';
+
+import horizontalContentCardComponentMapper from './horizontalContentCardComponentMapper';
+
+const HorizontalContentCardConnected = memo(
+  ({ Component, isLoading, ...otherProps }) => (
+    <ContentCardConnected
+      Component={Component}
+      isLoading={isLoading}
+      {...otherProps}
+    />
+  )
+);
+
+HorizontalContentCardConnected.propTypes = {
+  Component: PropTypes.func,
+  isLoading: PropTypes.bool,
+};
+
+HorizontalContentCardConnected.defaultProps = {
+  Component: horizontalContentCardComponentMapper,
+};
+
+HorizontalContentCardConnected.displayName = 'HorizontalContentCardConnected';
+
+export default HorizontalContentCardConnected;
diff --git a/apolloschurchapp/src/ui/LikeContentButton/Like.tests.js b/apolloschurchapp/src/ui/LikeContentButton/Like.tests.js
new file mode 100644
index 0000000..41cc70f
--- /dev/null
+++ b/apolloschurchapp/src/ui/LikeContentButton/Like.tests.js
@@ -0,0 +1,26 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from '../../Providers';
+
+import { LikeIcon } from '.';
+
+describe('the LikeContentButton component', () => {
+  it('should render a Like', () => {
+    const tree = renderer.create(
+      <Providers>
+        <LikeIcon itemId={'abc'} isLiked={false} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+
+  it('should render a UnLike', () => {
+    const tree = renderer.create(
+      <Providers>
+        <LikeIcon itemId={'abc'} isLiked />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/LikeContentButton/index.js b/apolloschurchapp/src/ui/LikeContentButton/index.js
new file mode 100644
index 0000000..3a58e27
--- /dev/null
+++ b/apolloschurchapp/src/ui/LikeContentButton/index.js
@@ -0,0 +1,36 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import { Icon, withTheme } from '@apollosproject/ui-kit';
+import { ProtectedTouchable } from '@apollosproject/ui-auth';
+
+import { withNavigation } from 'react-navigation';
+
+const LikeIcon = withTheme(
+  ({ theme: { colors: { secondary } = {} } = {}, isLiked } = {}) => ({
+    name: isLiked ? 'like-solid' : 'like',
+    fill: secondary,
+  })
+)(Icon);
+
+LikeIcon.propTypes = {
+  isLiked: PropTypes.bool,
+};
+
+const LikeContentButton = withNavigation(({ isLiked, toggleLike, itemId }) => (
+  <ProtectedTouchable
+    onPress={() =>
+      toggleLike({ itemId, operation: isLiked ? 'Unlike' : 'Like' })
+    }
+  >
+    <LikeIcon isLiked={isLiked} />
+  </ProtectedTouchable>
+));
+
+LikeContentButton.propTypes = {
+  itemId: PropTypes.string,
+  isLiked: PropTypes.bool,
+  toggleLike: PropTypes.func,
+};
+
+export { LikeContentButton as default, LikeIcon };
diff --git a/apolloschurchapp/src/ui/LikeContentButtonConnected/LikeButton.tests.js b/apolloschurchapp/src/ui/LikeContentButtonConnected/LikeButton.tests.js
new file mode 100644
index 0000000..5a66dd1
--- /dev/null
+++ b/apolloschurchapp/src/ui/LikeContentButtonConnected/LikeButton.tests.js
@@ -0,0 +1,114 @@
+// import React from 'react';
+// import renderer from 'react-test-renderer';
+
+// import Providers from '../Providers';
+// import gql from 'graphql-tag';
+
+// import LikeContentButtonConnected from '.';
+
+describe('the LikeContentButtonConnected component', () => {
+  it('should render', () => {
+    //     const updateLikeEntity = {
+    //       request: {
+    //         query: gql`
+    //           mutation updateLikeEntity($itemId: ID!, $operation: LIKE_OPERATION!) {
+    //             updateLikeEntity(
+    //               input: { nodeId: $itemId, operation: $operation }
+    //             ) {
+    //               id
+    //               operation
+    //               interactionDateTime
+    //             }
+    //           }
+    //         `,
+    //         variables: {
+    //           itemId: 'asdf',
+    //           operation: 'Like',
+    //         },
+    //       },
+    //       result: {
+    //         data: {
+    //           node: { isLiked: true },
+    //         },
+    //       },
+    //     };
+    //     const getLikedContentItem = {
+    //       request: {
+    //         query: gql`
+    //           query getLikedContentItem($itemId: ID!) {
+    //             node(id: $itemId) {
+    //               ... on ContentItem {
+    //                 id
+    //                 isLiked
+    //               }
+    //             }
+    //           }
+    //         `,
+    //         variables: {
+    //           itemId: 'asdf',
+    //         },
+    //       },
+    //       result: {
+    //         data: {
+    //           updateLikeEntity: { operation: 'Like' },
+    //         },
+    //       },
+    //     };
+    //     const tree = renderer.create(
+    //       <Providers mocks={[updateLikeEntity, getLikedContentItem]}>
+    //         <LikeContentButtonConnected itemId={'asdf'} />
+    //       </Providers>
+    //     );
+    //     expect(tree).toMatchSnapshot();
+  });
+  it('should render when loading', () => {
+    //     const updateLikeEntity = {
+    //       request: {
+    //         query: gql`
+    //           mutation updateLikeEntity($itemId: ID!, $operation: LIKE_OPERATION!) {
+    //             updateLikeEntity(
+    //               input: { nodeId: $itemId, operation: $operation }
+    //             ) {
+    //               id
+    //               operation
+    //               interactionDateTime
+    //             }
+    //           }
+    //         `,
+    //         variables: {
+    //           itemId: 'asdf',
+    //           operation: 'Like',
+    //         },
+    //       },
+    //       result: {
+    //         data: {
+    //           node: { isLiked: true },
+    //         },
+    //       },
+    //     };
+    //     const getLikedContentItem = {
+    //       request: {
+    //         query: gql`
+    //           query getLikedContentItem($itemId: ID!) {
+    //             node(id: $itemId) {
+    //               ... on ContentItem {
+    //                 id
+    //                 isLiked
+    //               }
+    //             }
+    //           }
+    //         `,
+    //         variables: {
+    //           itemId: 'asdf',
+    //         },
+    //       },
+    //       result: null,
+    //     };
+    //     const tree = renderer.create(
+    //       <Providers mocks={[updateLikeEntity, getLikedContentItem]}>
+    //         <LikeContentButtonConnected itemId={'asdf'} />
+    //       </Providers>
+    //     );
+    //     expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/LikeContentButtonConnected/getLikedContentItem.js b/apolloschurchapp/src/ui/LikeContentButtonConnected/getLikedContentItem.js
new file mode 100644
index 0000000..1ddaa3a
--- /dev/null
+++ b/apolloschurchapp/src/ui/LikeContentButtonConnected/getLikedContentItem.js
@@ -0,0 +1,12 @@
+import gql from 'graphql-tag';
+
+export default gql`
+  query getLikedContentItem($itemId: ID!) {
+    node(id: $itemId) {
+      ... on ContentItem {
+        id
+        isLiked
+      }
+    }
+  }
+`;
diff --git a/apolloschurchapp/src/ui/LikeContentButtonConnected/index.js b/apolloschurchapp/src/ui/LikeContentButtonConnected/index.js
new file mode 100644
index 0000000..6bf7b1e
--- /dev/null
+++ b/apolloschurchapp/src/ui/LikeContentButtonConnected/index.js
@@ -0,0 +1,123 @@
+import React from 'react';
+
+import PropTypes from 'prop-types';
+import { get } from 'lodash';
+import { Query, Mutation } from 'react-apollo';
+
+import { AnalyticsConsumer } from '@apollosproject/ui-analytics';
+import LikeContentButton from '../LikeContentButton';
+
+import UPDATE_LIKE_ENTITY from './updateLikeEntity';
+import GET_LIKED_CONTENT_ITEM from './getLikedContentItem';
+import updateLikedContent from './updateLikedContent';
+
+const GetLikeData = ({ itemId, children }) => (
+  <Query query={GET_LIKED_CONTENT_ITEM} variables={{ itemId }}>
+    {({ data: { node = {} } = {}, loading }) => {
+      const isLiked = loading ? false : get(node, 'isLiked') || false;
+      return children({ isLiked, item: node });
+    }}
+  </Query>
+);
+
+GetLikeData.propTypes = {
+  itemId: PropTypes.string,
+  children: PropTypes.func.isRequired,
+};
+
+const UpdateLikeStatus = ({
+  itemId,
+  item = { __typename: null },
+  isLiked,
+  children,
+}) => (
+  <AnalyticsConsumer>
+    {({ track }) => (
+      <Mutation
+        mutation={UPDATE_LIKE_ENTITY}
+        optimisticResponse={{
+          updateLikeEntity: {
+            id: itemId, // unknown at this time
+            isLiked: !isLiked,
+            likedCount: 0, // field required but exact value is not needed
+            __typename: item && item.__typename,
+          },
+        }}
+        update={(
+          cache,
+          {
+            data: {
+              updateLikeEntity: { isLiked: liked },
+            },
+          }
+        ) => {
+          updateLikedContent({ liked, cache, item });
+          cache.writeQuery({
+            query: GET_LIKED_CONTENT_ITEM,
+            data: {
+              node: {
+                ...item,
+                isLiked: liked,
+              },
+            },
+          });
+        }}
+      >
+        {(createNewInteraction) =>
+          itemId
+            ? children({
+                itemId,
+                isLiked,
+                toggleLike: async (variables) => {
+                  try {
+                    await createNewInteraction({ variables });
+                    track({
+                      eventName: isLiked ? 'UnlikeContent' : 'LikeContent',
+                      properties: {
+                        id: itemId,
+                      },
+                    });
+                  } catch (e) {
+                    throw e.message;
+                  }
+                },
+              })
+            : null
+        }
+      </Mutation>
+    )}
+  </AnalyticsConsumer>
+);
+
+UpdateLikeStatus.propTypes = {
+  itemId: PropTypes.string,
+  children: PropTypes.func.isRequired,
+  isLiked: PropTypes.bool.isRequired,
+  item: PropTypes.shape({
+    id: PropTypes.string,
+    __typename: PropTypes.string,
+    isLiked: PropTypes.bool,
+  }),
+};
+
+const LikeContentButtonConnected = ({ itemId }) => (
+  <GetLikeData itemId={itemId}>
+    {({ isLiked, item }) => (
+      <UpdateLikeStatus itemId={itemId} item={item} isLiked={isLiked}>
+        {({ toggleLike, isLiked: newLikeValue }) => (
+          <LikeContentButton
+            itemId={itemId}
+            isLiked={newLikeValue}
+            toggleLike={toggleLike}
+          />
+        )}
+      </UpdateLikeStatus>
+    )}
+  </GetLikeData>
+);
+
+LikeContentButtonConnected.propTypes = {
+  itemId: PropTypes.string,
+};
+
+export default LikeContentButtonConnected;
diff --git a/apolloschurchapp/src/ui/LikeContentButtonConnected/updateLikeEntity.js b/apolloschurchapp/src/ui/LikeContentButtonConnected/updateLikeEntity.js
new file mode 100644
index 0000000..986d867
--- /dev/null
+++ b/apolloschurchapp/src/ui/LikeContentButtonConnected/updateLikeEntity.js
@@ -0,0 +1,11 @@
+import gql from 'graphql-tag';
+
+export default gql`
+  mutation updateLikeEntity($itemId: ID!, $operation: LIKE_OPERATION!) {
+    updateLikeEntity(input: { nodeId: $itemId, operation: $operation }) {
+      id
+      isLiked
+      likedCount
+    }
+  }
+`;
diff --git a/apolloschurchapp/src/ui/LikeContentButtonConnected/updateLikedContent.js b/apolloschurchapp/src/ui/LikeContentButtonConnected/updateLikedContent.js
new file mode 100644
index 0000000..b8b52ea
--- /dev/null
+++ b/apolloschurchapp/src/ui/LikeContentButtonConnected/updateLikedContent.js
@@ -0,0 +1,82 @@
+import ApollosConfig from '@apollosproject/config';
+import GET_ALL_LIKED_CONTENT from '../../tabs/connect/getLikedContent';
+
+const addItemToLikedContentList = ({ cache, item, variables }) => {
+  try {
+    const data = cache.readQuery({
+      query: GET_ALL_LIKED_CONTENT,
+      variables,
+    });
+    const fullItem = cache.readFragment({
+      id: `${item.__typename}:${item.id}`,
+      fragment: ApollosConfig.FRAGMENTS.CONTENT_CARD_FRAGMENT,
+      fragmentName: 'contentCardFragment',
+    });
+    const newEdges = [
+      fullItem,
+      ...data.likedContent.edges.map(({ node }) => node),
+    ].map((node) => ({
+      __typename: 'ContentItemsConnectionEdge',
+      node: {
+        ...node,
+        isLiked: true,
+      },
+    }));
+    cache.writeQuery({
+      query: GET_ALL_LIKED_CONTENT,
+      variables,
+      data: {
+        ...data,
+        likedContent: {
+          ...data.likedContent,
+          edges: newEdges,
+        },
+      },
+    });
+  } catch (e) {
+    console.log(e);
+    // Most likely we haven't ran the `getAllLikedContent` query yet.
+    // We can safely exit.
+  }
+};
+
+const removeItemFromLikedContentList = ({ cache, item, variables }) => {
+  try {
+    const data = cache.readQuery({
+      query: GET_ALL_LIKED_CONTENT,
+      variables,
+    });
+
+    const filteredEdges = data.likedContent.edges.filter(
+      ({ node }) => node.id !== item.id
+    );
+
+    cache.writeQuery({
+      query: GET_ALL_LIKED_CONTENT,
+      variables,
+      data: {
+        ...data,
+        likedContent: {
+          ...data.likedContent,
+          edges: filteredEdges,
+        },
+      },
+    });
+  } catch (e) {
+    console.log(e);
+    // Most likely we haven't ran the `getAllLikedContent` query yet.
+    // We can safely exit.
+  }
+};
+
+const updateLikedContent = ({ liked, cache, item }) => {
+  if (liked) {
+    addItemToLikedContentList({ cache, item, variables: { first: 3 } });
+    addItemToLikedContentList({ cache, item, variables: { first: 20 } });
+  } else {
+    removeItemFromLikedContentList({ cache, item, variables: { first: 3 } });
+    removeItemFromLikedContentList({ cache, item, variables: { first: 20 } });
+  }
+};
+
+export default updateLikedContent;
diff --git a/apolloschurchapp/src/ui/SearchCard/index.js b/apolloschurchapp/src/ui/SearchCard/index.js
index 8780834..3a73fb4 100644
--- a/apolloschurchapp/src/ui/SearchCard/index.js
+++ b/apolloschurchapp/src/ui/SearchCard/index.js
@@ -2,7 +2,7 @@ import React, { memo } from 'react';
 import PropTypes from 'prop-types';
 import { get } from 'lodash';
 
-import { contentCardComponentMapper } from '@apollosproject/ui-connected';
+import { contentCardComponentMapper } from '../ContentCardConnected';
 
 const SearchCard = memo(
   ({
diff --git a/apolloschurchapp/src/ui/ShareContentButton/ShareContentButton.tests.js b/apolloschurchapp/src/ui/ShareContentButton/ShareContentButton.tests.js
new file mode 100644
index 0000000..106f6b3
--- /dev/null
+++ b/apolloschurchapp/src/ui/ShareContentButton/ShareContentButton.tests.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import { Providers } from '@apollosproject/ui-kit';
+
+import ShareContentButton from '.';
+
+describe('the Share component', () => {
+  it('should render', () => {
+    const shareObject = {
+      title: 'Shared Object Title',
+      url: 'https://github.com/ApollosProject/apollos-prototype',
+    };
+    const tree = renderer.create(
+      <Providers>
+        <ShareContentButton content={shareObject} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/ShareContentButton/index.js b/apolloschurchapp/src/ui/ShareContentButton/index.js
new file mode 100644
index 0000000..b84568f
--- /dev/null
+++ b/apolloschurchapp/src/ui/ShareContentButton/index.js
@@ -0,0 +1,40 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { compose, pure } from 'recompose';
+import { Touchable, Icon, withTheme } from '@apollosproject/ui-kit';
+import { AnalyticsConsumer } from '@apollosproject/ui-analytics';
+import share from '../../utils/content/share';
+
+const enhance = compose(
+  pure,
+  withTheme()
+);
+
+const ShareContentButton = enhance(({ content, theme }) => (
+  <AnalyticsConsumer>
+    {({ track }) => {
+      const onPress = () => {
+        share(content);
+        track({
+          eventName: 'Share',
+          properties: { id: content.id, title: content.title },
+        });
+      };
+      return (
+        <Touchable onPress={onPress}>
+          <Icon name={'share'} fill={theme.colors.secondary} />
+        </Touchable>
+      );
+    }}
+  </AnalyticsConsumer>
+));
+
+ShareContentButton.propTypes = {
+  content: PropTypes.shape({
+    title: PropTypes.string,
+    url: PropTypes.string,
+    id: PropTypes.string,
+  }),
+};
+
+export default ShareContentButton;
diff --git a/apolloschurchapp/src/ui/ShareContentButtonConnected/ShareContentButtonConnected.tests.js b/apolloschurchapp/src/ui/ShareContentButtonConnected/ShareContentButtonConnected.tests.js
new file mode 100644
index 0000000..2dc48e9
--- /dev/null
+++ b/apolloschurchapp/src/ui/ShareContentButtonConnected/ShareContentButtonConnected.tests.js
@@ -0,0 +1,50 @@
+import React from 'react';
+import { renderWithApolloData } from '../../utils/testUtils';
+import Providers from '../../Providers';
+import getShareContent from './getShareContent';
+import ShareContentButtonConnected from '.';
+
+const shareMock = {
+  request: {
+    query: getShareContent,
+    variables: { itemId: '1' },
+  },
+  result: {
+    data: {
+      node: {
+        id: '1',
+        __typename: 'ContentSeriesContentItem',
+        sharing: {
+          url: 'https://apolloschurchapp.newspring.cc',
+          title: 'Test Title ',
+          __typename: 'SharableContentItem',
+        },
+      },
+    },
+  },
+};
+
+const mocks = [shareMock];
+
+describe('the ShareContentButtonConnected', () => {
+  it('renders a share button', async () => {
+    const tree = await renderWithApolloData(
+      <Providers mocks={mocks}>
+        <ShareContentButtonConnected itemId={'1'} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('renders a share button with custom url, and title', async () => {
+    const tree = await renderWithApolloData(
+      <Providers mocks={mocks}>
+        <ShareContentButtonConnected
+          itemId={'1'}
+          url={'https://apollosrock.com'}
+          title="Some great title"
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/ShareContentButtonConnected/getShareContent.js b/apolloschurchapp/src/ui/ShareContentButtonConnected/getShareContent.js
new file mode 100644
index 0000000..44718b3
--- /dev/null
+++ b/apolloschurchapp/src/ui/ShareContentButtonConnected/getShareContent.js
@@ -0,0 +1,16 @@
+import gql from 'graphql-tag';
+
+export default gql`
+  query getShareContent($itemId: ID!) {
+    node(id: $itemId) {
+      ... on ContentItem {
+        id
+        sharing {
+          url
+          message
+          title
+        }
+      }
+    }
+  }
+`;
diff --git a/apolloschurchapp/src/ui/ShareContentButtonConnected/index.js b/apolloschurchapp/src/ui/ShareContentButtonConnected/index.js
new file mode 100644
index 0000000..ebe4de6
--- /dev/null
+++ b/apolloschurchapp/src/ui/ShareContentButtonConnected/index.js
@@ -0,0 +1,34 @@
+import React from 'react';
+
+import PropTypes from 'prop-types';
+import { Query } from 'react-apollo';
+import { get } from 'lodash';
+
+import ShareContentButton from '../ShareContentButton';
+
+import GET_SHARE_CONTENT from './getShareContent';
+
+const ShareContentButtonConnected = ({ itemId, title, message, url }) => (
+  <Query query={GET_SHARE_CONTENT} variables={{ itemId }}>
+    {({ data }) => {
+      const sharing = get(data, 'node.sharing', {});
+      const content = {
+        id: itemId,
+        title: title || sharing.title,
+        message: message || sharing.message,
+        url: url || sharing.url,
+      };
+      return <ShareContentButton content={content} />;
+    }}
+  </Query>
+);
+
+ShareContentButtonConnected.propTypes = {
+  itemId: PropTypes.string.isRequired,
+  // These props are available to override the default sharing data for a node.
+  title: PropTypes.string,
+  message: PropTypes.string,
+  url: PropTypes.string,
+};
+
+export default ShareContentButtonConnected;
diff --git a/apolloschurchapp/src/ui/WebBrowser/Browser.js b/apolloschurchapp/src/ui/WebBrowser/Browser.js
new file mode 100644
index 0000000..19ef6bc
--- /dev/null
+++ b/apolloschurchapp/src/ui/WebBrowser/Browser.js
@@ -0,0 +1,63 @@
+import { Linking } from 'react-native';
+import InAppBrowser from 'react-native-inappbrowser-reborn';
+import gql from 'graphql-tag';
+import { client } from '../../client';
+
+export const GET_ROCK_AUTH_DETAILS = gql`
+  query RockAuthDetails {
+    currentUser {
+      id
+      rock {
+        authCookie
+        authToken
+      }
+    }
+  }
+`;
+
+export const getRockAuthDetails = async () => {
+  const { data: { currentUser: { rock } = {} } = {} } = await client.query({
+    query: GET_ROCK_AUTH_DETAILS,
+    fetchPolicy: 'network-only',
+  });
+  return rock;
+};
+
+const Browser = {
+  open: async (
+    baseURL,
+    options,
+    auth = { useRockCookie: false, useRockToken: false }
+  ) => {
+    const url = new URL(baseURL);
+    // NOTE: RN adds a trailing slash
+    // https://github.com/facebook/react-native/issues/24428
+    url._url = url.toString().endsWith('/')
+      ? url.toString().slice(0, -1)
+      : url.toString();
+
+    const { authCookie, authToken } = await getRockAuthDetails();
+    let headers = {};
+    if (auth.useRockCookie && authCookie) {
+      console.warn(
+        "iOS doesn't support headers, you may want to use src/user-web-view"
+      );
+      headers = { Cookie: authCookie };
+    }
+    if (auth.useRockToken && authToken) {
+      url.searchParams.append('rckipid', authToken);
+    }
+    try {
+      if (await InAppBrowser.isAvailable()) {
+        InAppBrowser.open(url.toString(), {
+          headers,
+          ...options,
+        });
+      } else Linking.openURL(url.toString());
+    } catch (e) {
+      console.error(e);
+    }
+  },
+};
+
+export default Browser;
diff --git a/apolloschurchapp/src/ui/WebBrowser/index.js b/apolloschurchapp/src/ui/WebBrowser/index.js
new file mode 100644
index 0000000..9e85ea5
--- /dev/null
+++ b/apolloschurchapp/src/ui/WebBrowser/index.js
@@ -0,0 +1,41 @@
+// Provider API for WebBrowser that injects theme values and defaults to the web browser:
+import { Platform } from 'react-native';
+import { createContext } from 'react';
+
+import { withTheme } from '@apollosproject/ui-kit';
+
+import Browser from './Browser';
+
+const { Provider: BaseProvider, Consumer } = createContext(Browser.open);
+
+// NOTE: don't think this is working...
+const Provider = withTheme(({ theme }) => ({
+  value: (url, headers = {}, options = {}) =>
+    Browser.open(url, {
+      ...Platform.select({
+        ios: {
+          dismissButtonStyle: 'cancel',
+          preferredBarTintColor: theme.colors.background.paper,
+          preferredControlTintColor: theme.colors.primary,
+          readerMode: false,
+          animated: true,
+          modalPresentationStyle: 'overFullScreen',
+          modalTransitionStyle: 'partialCurl',
+          modalEnabled: true,
+        },
+        android: {
+          toolbarColor: theme.colors.background.paper,
+          enableDefaultShare: true,
+          showTitle: true,
+          secondaryToolbarColor: 'black',
+          enableUrlBarHiding: true,
+          forceCloseOnRedirection: false,
+        },
+      }),
+      headers: { ...headers },
+      ...options,
+    }),
+}))(BaseProvider);
+
+export default Browser;
+export { Provider as WebBrowserProvider, Consumer as WebBrowserConsumer };
diff --git a/apolloschurchapp/src/ui/WebBrowser/index.tests.js b/apolloschurchapp/src/ui/WebBrowser/index.tests.js
new file mode 100644
index 0000000..1e616eb
--- /dev/null
+++ b/apolloschurchapp/src/ui/WebBrowser/index.tests.js
@@ -0,0 +1,35 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { Platform } from 'react-native';
+
+import Providers from '../../Providers';
+
+import { WebBrowserConsumer } from '.';
+
+jest.mock('Platform');
+
+describe(`WebBrowser Provider and Consumer`, () => {
+  it('passes a function', async () => {
+    renderer.create(
+      <Providers>
+        <WebBrowserConsumer>
+          {(openUrl) => {
+            expect(typeof openUrl).toBe('function');
+          }}
+        </WebBrowserConsumer>
+      </Providers>
+    );
+  });
+  it('passes a function (Android)', async () => {
+    Platform.OS = 'android';
+    renderer.create(
+      <Providers>
+        <WebBrowserConsumer>
+          {(openUrl) => {
+            expect(typeof openUrl).toBe('function');
+          }}
+        </WebBrowserConsumer>
+      </Providers>
+    );
+  });
+});
diff --git a/apolloschurchapp/src/user-settings/Locations/getCampusLocations.js b/apolloschurchapp/src/user-settings/Locations/getCampusLocations.js
index ea8b0b8..a0ce1b5 100644
--- a/apolloschurchapp/src/user-settings/Locations/getCampusLocations.js
+++ b/apolloschurchapp/src/user-settings/Locations/getCampusLocations.js
@@ -5,7 +5,6 @@ export default gql`
   query getAllCampuses($latitude: Float!, $longitude: Float!) {
     campuses(location: { latitude: $latitude, longitude: $longitude }) {
       ...CampusParts
-      distanceFromLocation
     }
     currentUser {
       id
diff --git a/apolloschurchapp/src/user-settings/index.js b/apolloschurchapp/src/user-settings/index.js
index e106747..1857c48 100644
--- a/apolloschurchapp/src/user-settings/index.js
+++ b/apolloschurchapp/src/user-settings/index.js
@@ -16,7 +16,7 @@ import {
 } from '@apollosproject/ui-kit';
 
 import { GET_LOGIN_STATE, LOGOUT } from '@apollosproject/ui-auth';
-import { RockAuthedWebBrowser } from '@apollosproject/ui-connected';
+import { WebBrowserConsumer } from '../ui/WebBrowser';
 import NavigationService from '../NavigationService';
 
 import ChangeAvatar from './ChangeAvatar';
@@ -44,7 +44,7 @@ class UserSettings extends PureComponent {
               <ScrollView>
                 <ChangeAvatar />
 
-                <RockAuthedWebBrowser>
+                <WebBrowserConsumer>
                   {(openUrl) => (
                     <>
                       <TableView>
@@ -148,7 +148,7 @@ class UserSettings extends PureComponent {
                       </TableView>
                     </>
                   )}
-                </RockAuthedWebBrowser>
+                </WebBrowserConsumer>
               </ScrollView>
             </BackgroundView>
           );
diff --git a/apolloschurchapp/src/user-settings/uploadPhoto.js b/apolloschurchapp/src/user-settings/uploadPhoto.js
index 6dbb4e4..b5949e8 100644
--- a/apolloschurchapp/src/user-settings/uploadPhoto.js
+++ b/apolloschurchapp/src/user-settings/uploadPhoto.js
@@ -9,7 +9,7 @@ import GET_USER_PHOTO from './getUserPhoto';
 
 const options = {
   title: 'Select Profile Image',
-  quality: 0.7,
+  quality: 0,
   storageOptions: {
     skipBackup: true,
     path: 'images',
diff --git a/apolloschurchapp/src/utils/__tests__/utils.tests.js b/apolloschurchapp/src/utils/__tests__/utils.tests.js
index 0ea7b89..24fe48a 100644
--- a/apolloschurchapp/src/utils/__tests__/utils.tests.js
+++ b/apolloschurchapp/src/utils/__tests__/utils.tests.js
@@ -1,8 +1,6 @@
 import React from 'react';
 import { Text } from 'react-native';
-
-import { fetchMoreResolver } from '@apollosproject/ui-connected';
-
+import fetchMoreResolver from '../fetchMoreResolver';
 import { renderWithApolloData } from '../testUtils';
 
 describe('the fetchMoreResolver function', () => {
diff --git a/apolloschurchapp/src/utils/content/__tests__/share.tests.js b/apolloschurchapp/src/utils/content/__tests__/share.tests.js
new file mode 100644
index 0000000..972edaa
--- /dev/null
+++ b/apolloschurchapp/src/utils/content/__tests__/share.tests.js
@@ -0,0 +1,38 @@
+import { Platform, Share } from 'react-native';
+import share from '../share';
+
+jest.mock('Platform');
+jest.mock('Share');
+
+describe('the share function', () => {
+  beforeAll(() => {
+    Share.share = jest.fn();
+  });
+  test('default arguments', () => {
+    Platform.OS = 'ios';
+    share({ title: 'title', url: 'http://url.com' });
+    expect(Share.share).toBeCalledWith({
+      title: 'title',
+      message: undefined,
+      url: 'http://url.com',
+    });
+  });
+  test('use message if provided', () => {
+    Platform.OS = 'ios';
+    share({ title: 'title', message: 'some message', url: 'http://url.com' });
+    expect(Share.share).toBeCalledWith({
+      title: 'title',
+      message: 'some message',
+      url: 'http://url.com',
+    });
+  });
+  test('android arguments', () => {
+    Platform.OS = 'android';
+    share({ title: 'title', url: 'http://url.com' });
+    expect(Share.share).toBeCalledWith({
+      title: 'title',
+      message: 'http://url.com',
+      url: 'http://url.com',
+    });
+  });
+});
diff --git a/apolloschurchapp/src/utils/content/share.js b/apolloschurchapp/src/utils/content/share.js
new file mode 100644
index 0000000..6d4326f
--- /dev/null
+++ b/apolloschurchapp/src/utils/content/share.js
@@ -0,0 +1,14 @@
+import { Platform, Share } from 'react-native';
+
+const share = ({ title, url, message }) => {
+  Share.share({
+    title,
+    message:
+      Platform.OS === 'android'
+        ? [message, url].filter((s) => !!s).join('\n')
+        : message,
+    url,
+  });
+};
+
+export default share;
diff --git a/apolloschurchapp/src/utils/fetchMoreResolver.js b/apolloschurchapp/src/utils/fetchMoreResolver.js
new file mode 100644
index 0000000..b93cb2f
--- /dev/null
+++ b/apolloschurchapp/src/utils/fetchMoreResolver.js
@@ -0,0 +1,42 @@
+import get from 'lodash/get';
+import set from 'lodash/fp/set';
+
+export default function fetchMoreResolver({
+  collectionName,
+  variables,
+  fetchMore,
+  data,
+}) {
+  return () => {
+    const pageInfoPath = `${collectionName}.pageInfo`;
+    const edgePath = `${collectionName}.edges`;
+
+    const after = get(data, `${pageInfoPath}.endCursor`);
+    if (!after) return;
+
+    fetchMore({
+      variables: { ...variables, after },
+      updateQuery: (previousResult, { fetchMoreResult }) => {
+        // combine previous data and fetchMore data
+        const newDataWithPageInfo = set(
+          pageInfoPath,
+          {
+            ...get(previousResult, pageInfoPath, {}),
+            ...get(fetchMoreResult, pageInfoPath, {}),
+          },
+          previousResult
+        );
+        const newDataWithAdditionalItems = set(
+          edgePath,
+          [
+            ...get(previousResult, edgePath, []),
+            ...get(fetchMoreResult, edgePath, []),
+          ],
+          newDataWithPageInfo
+        );
+
+        return newDataWithAdditionalItems;
+      },
+    });
+  };
+}
