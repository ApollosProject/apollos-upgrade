diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 6745712..0ff084f 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -52,6 +52,12 @@ ROCK_MAPPINGS:
   DEVOTIONAL_TYPE_IDS:
     - 1
 
+  # The apollos app will use the content channel types as "Content Series" types. A Content Series
+  # is any content item that represents a series of content - Sermon Series, Devotional Series, Podcast Series etc
+  SERIES_CONTENT_CHANNEL_TYPE_IDS:
+    - 6
+    - 7
+
 # Default mapping of field types -> ids. There's probably no reason to edit this.
 ROCK_CONSTANTS:
   TEXT: 1
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index c4b568f..a909d9e 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apollos-church-api",
-  "version": "0.6.0",
+  "version": "0.8.0-alpha.0",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
@@ -28,14 +28,14 @@
     "testEnvironment": "node"
   },
   "dependencies": {
-    "@apollosproject/data-connector-rock-content": "^0.6.0",
-    "@apollosproject/server-core": "^0.6.0",
-    "@apollosproject/config": "^0.6.0",
-    "@apollosproject/data-connector-analytics": "^0.6.0",
-    "@apollosproject/data-connector-people": "^0.6.0",
-    "@apollosproject/data-connector-rock-auth": "^0.6.0",
-    "@apollosproject/rock-apollo-data-source": "^0.6.0",
-    "@apollosproject/server-core": "^0.6.0",
+    "@apollosproject/config": "^0.8.0-alpha.0",
+    "@apollosproject/data-connector-analytics": "^0.8.0-alpha.0",
+    "@apollosproject/data-connector-bible": "^0.8.0-alpha.0",
+    "@apollosproject/data-connector-people": "^0.8.0-alpha.0",
+    "@apollosproject/data-connector-rock-auth": "^0.8.0-alpha.0",
+    "@apollosproject/data-connector-rock-content": "^0.8.0-alpha.0",
+    "@apollosproject/rock-apollo-data-source": "^0.8.0-alpha.0",
+    "@apollosproject/server-core": "^0.8.0-alpha.0",
     "apollo-datasource-rest": "0.1.1",
     "apollo-server": "^2.0.5",
     "casual": "1.5.19",
@@ -46,6 +46,7 @@
     "graphql": "0.13.2",
     "isomorphic-fetch": "2.2.1",
     "lodash": "4.17.10",
+    "natural": "^0.6.2",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3",
     "sanitize-html": "1.18.2",
@@ -53,7 +54,7 @@
     "with-query": "1.0.2"
   },
   "devDependencies": {
-    "@apollosproject/babel-preset-apollos": "^0.6.0",
+    "@apollosproject/babel-preset-apollos": "^0.8.0-alpha.0",
     "@babel/cli": "7.1.5",
     "@babel/core": "7.1.6",
     "codecov": "3.0.2",
diff --git a/apollos-church-api/src/data/bible/_tests_/resolver.tests.js b/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
deleted file mode 100644
index d445602..0000000
--- a/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
+++ /dev/null
@@ -1,34 +0,0 @@
-import { graphql } from 'graphql';
-import { fetch } from 'apollo-server-env';
-import { makeExecutableSchema } from 'apollo-server';
-import { testSchema as typeDefs, resolvers } from '../..';
-import { getTestContext } from '../../../utils/testUtils';
-
-describe('Scripture', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    context = getTestContext();
-
-    fetch.resetMocks();
-    fetch.mockLiveDataSourceApis();
-  });
-
-  it('returns', async () => {
-    const query = `
-      query {
-        scripture (query: "SNG.1.1") {
-          id
-          html
-          reference
-          copyright
-        }
-      }
-    `;
-    const rootValue = {};
-
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/bible/data-source.js b/apollos-church-api/src/data/bible/data-source.js
deleted file mode 100644
index d0ef9f7..0000000
--- a/apollos-church-api/src/data/bible/data-source.js
+++ /dev/null
@@ -1,28 +0,0 @@
-import { RESTDataSource } from 'apollo-datasource-rest';
-import ApollosConfig from '@apollosproject/config';
-
-const { BIBLE_API } = ApollosConfig;
-
-export default class Scripture extends RESTDataSource {
-  resource = 'Scripture';
-
-  baseURL = 'https://api.scripture.api.bible/v1/bibles/';
-
-  token = BIBLE_API.KEY;
-
-  willSendRequest(request) {
-    request.headers.set('api-key', `${this.token}`);
-  }
-
-  async getScripture(query) {
-    const bibleId = BIBLE_API.BIBLE_ID;
-    return this.get(`${bibleId}/search?query=${query}`);
-  }
-
-  // In the future, we can use this field to handle content that returns multiple
-  // "scriptures". Like references across several different books of the bible.
-  async getScriptures(query) {
-    const scripture = await this.getScripture(query);
-    return [scripture];
-  }
-}
diff --git a/apollos-church-api/src/data/bible/index.js b/apollos-church-api/src/data/bible/index.js
deleted file mode 100644
index 61a10a8..0000000
--- a/apollos-church-api/src/data/bible/index.js
+++ /dev/null
@@ -1,5 +0,0 @@
-import schema from './schema';
-import resolver from './resolver';
-import dataSource from './data-source';
-
-export { schema, resolver, dataSource };
diff --git a/apollos-church-api/src/data/bible/resolver.js b/apollos-church-api/src/data/bible/resolver.js
deleted file mode 100644
index 01d6711..0000000
--- a/apollos-church-api/src/data/bible/resolver.js
+++ /dev/null
@@ -1,14 +0,0 @@
-import { get } from 'lodash';
-
-export default {
-  Query: {
-    scripture: (root, { query }, { dataSources }) =>
-      dataSources.Scripture.getScripture(query),
-  },
-  Scripture: {
-    id: ({ data: { passages } = {} }) => get(passages, '[0].id'),
-    html: ({ data: { passages } = {} }) => get(passages, '[0].content'),
-    reference: ({ data: { passages } = {} }) => get(passages, '[0].reference'),
-    copyright: ({ data: { passages } = {} }) => get(passages, '[0].copyright'),
-  },
-};
diff --git a/apollos-church-api/src/data/bible/schema.js b/apollos-church-api/src/data/bible/schema.js
deleted file mode 100644
index 82e3fe7..0000000
--- a/apollos-church-api/src/data/bible/schema.js
+++ /dev/null
@@ -1,14 +0,0 @@
-import { gql } from 'apollo-server';
-
-export default gql`
-  type Scripture {
-    id: String
-    html: String
-    reference: String
-    copyright: String
-  }
-
-  extend type Query {
-    scripture(query: String!): Scripture
-  }
-`;
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 655c759..93e97f9 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -10,13 +10,13 @@ import {
 } from '@apollosproject/data-connector-rock-content';
 import * as Analytics from '@apollosproject/data-connector-analytics';
 import { Person, Family } from '@apollosproject/data-connector-people';
+import * as Scripture from '@apollosproject/data-connector-bible';
 
 import RockConstants from '../connectors/rock/rock-constants';
 
 import * as Media from './media';
 import * as LiveStream from './live';
 import * as Theme from './theme';
-import * as Scripture from './bible';
 import * as Interactions from './interactions';
 
 const data = {
@@ -39,6 +39,12 @@ const data = {
   DevotionalContentItem: {
     dataSource: ContentItem.dataSource,
   }, // alias
+  ContentSeriesContentItem: {
+    dataSource: ContentItem.dataSource,
+  }, // alias
+  MediaContentItem: {
+    dataSource: ContentItem.dataSource,
+  }, // alias
 };
 
 const { dataSources, resolvers, schema, context } = createApolloServerConfig(
diff --git a/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js b/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
index 52448a3..c961a9a 100644
--- a/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
+++ b/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
@@ -14,6 +14,9 @@ ApollosConfig.loadJs({
     API_TOKEN: 'some-rock-token',
     IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
   },
+  ROCK_MAPPINGS: {
+    SERIES_CONTENT_CHANNEL_TYPE_IDS: [6, 7],
+  },
 });
 
 describe('Interactions', () => {
diff --git a/apollos-church-api/src/data/interactions/data-source.js b/apollos-church-api/src/data/interactions/data-source.js
index 9729abe..3bc6411 100644
--- a/apollos-church-api/src/data/interactions/data-source.js
+++ b/apollos-church-api/src/data/interactions/data-source.js
@@ -24,7 +24,31 @@ export default class Interactions extends RockApolloDataSource {
     return this.get(`/Interactions/${interactionId}`);
   }
 
-  async getForContentItem({ contentItemId }) {
+  async getCountByOperationForContentItem({ contentItemId, operation }) {
+    const { dataSources } = this.context;
+    const contentItemType = await dataSources.RockConstants.modelTypeId(
+      'ContentItem'
+    );
+    try {
+      return (await this.request('Interactions')
+        .filter(
+          // eslint-disable-next-line prettier/prettier
+          `(RelatedEntityId eq ${contentItemId}) and (Operation eq '${operation}') and (RelatedEntityTypeId eq ${
+            contentItemType.id
+          })`
+        )
+        .select('Id') // $count not supported, next best thing to make efficient
+        .cache({ ttl: 1800 }) // TODO: whats the right way to do this?
+        .get()).length;
+    } catch (e) {
+      if (e instanceof AuthenticationError) {
+        return [];
+      }
+      throw e;
+    }
+  }
+
+  async getByCurrentUserForContentItem({ contentItemId }) {
     const { dataSources } = this.context;
     const contentItemType = await dataSources.RockConstants.modelTypeId(
       'ContentItem'
@@ -47,7 +71,7 @@ export default class Interactions extends RockApolloDataSource {
     }
   }
 
-  async getForContentItems() {
+  async getByCurrentUserForContentItems() {
     const { dataSources } = this.context;
     const contentItemType = await dataSources.RockConstants.modelTypeId(
       'ContentItem'
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 8704c6d..a7f0ca1 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,3 +1,4 @@
+import dotenv from 'dotenv/config'; // eslint-disable-line
 import config from './config'; // eslint-disable-line
 import server from './server';
 
diff --git a/apolloschurchapp/.env.production b/apolloschurchapp/.env.production
index d3b0b34..4dde734 100644
--- a/apolloschurchapp/.env.production
+++ b/apolloschurchapp/.env.production
@@ -1,2 +1,3 @@
 APP_DATA_URL=https://apollos-church-api.now.sh
 ONE_SIGNAL_KEY=$ONE_SIGNAL_KEY
+ANDROID_URL=doesnotmatter
\ No newline at end of file
diff --git a/apolloschurchapp/android/app/build.gradle b/apolloschurchapp/android/app/build.gradle
index 46787c7..6be0c59 100644
--- a/apolloschurchapp/android/app/build.gradle
+++ b/apolloschurchapp/android/app/build.gradle
@@ -111,8 +111,8 @@ android {
         applicationId "com.apolloschurch.app"
         minSdkVersion rootProject.ext.minSdkVersion
         targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 4
-        versionName "0.6.0"
+        versionCode 5
+        versionName "0.7.0"
         ndk {
             abiFilters "armeabi-v7a", "x86"
         }
diff --git a/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist b/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
index 097d689..aed24ed 100644
--- a/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
@@ -15,13 +15,13 @@
 	<key>CFBundlePackageType</key>
 	<string>APPL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.6.0</string>
+	<string>0.7.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>4</string>
+	<string>5</string>
 	<key>LSRequiresIPhoneOS</key>
-	<true/>
+	<true />
 	<key>UILaunchStoryboardName</key>
 	<string>LaunchScreen</string>
 	<key>UIRequiredDeviceCapabilities</key>
@@ -35,9 +35,9 @@
 		<string>UIInterfaceOrientationLandscapeRight</string>
 	</array>
 	<key>UIViewControllerBasedStatusBarAppearance</key>
-	<false/>
+	<false />
 	<key>NSLocationWhenInUseUsageDescription</key>
-	<string/>
+	<string />
 	<key>NSAppTransportSecurity</key>
 	<dict>
 		<key>NSExceptionDomains</key>
@@ -45,7 +45,7 @@
 			<key>localhost</key>
 			<dict>
 				<key>NSExceptionAllowsInsecureHTTPLoads</key>
-				<true/>
+				<true />
 			</dict>
 		</dict>
 	</dict>
diff --git a/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist b/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
index ae0bb6d..e358b6d 100644
--- a/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
@@ -15,10 +15,10 @@
 	<key>CFBundlePackageType</key>
 	<string>BNDL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.6.0</string>
+	<string>0.7.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>4</string>
+	<string>5</string>
 </dict>
 </plist>
diff --git a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
index 5e6fdda..a1d174c 100644
--- a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
+++ b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
@@ -1796,7 +1796,7 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CODE_SIGN_ENTITLEMENTS = apolloschurchapp/apolloschurchapp.entitlements;
 				CODE_SIGN_IDENTITY = "iPhone Developer";
-				CURRENT_PROJECT_VERSION = 4;
+				CURRENT_PROJECT_VERSION = 5;
 				DEAD_CODE_STRIPPING = NO;
 				DEVELOPMENT_TEAM = 7TM8C6252Z;
 				HEADER_SEARCH_PATHS = (
@@ -1831,7 +1831,7 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CODE_SIGN_ENTITLEMENTS = apolloschurchapp/apolloschurchapp.entitlements;
 				CODE_SIGN_IDENTITY = "iPhone Developer";
-				CURRENT_PROJECT_VERSION = 4;
+				CURRENT_PROJECT_VERSION = 5;
 				DEVELOPMENT_TEAM = 7TM8C6252Z;
 				HEADER_SEARCH_PATHS = (
 					"$(inherited)",
diff --git a/apolloschurchapp/ios/apolloschurchapp/Info.plist b/apolloschurchapp/ios/apolloschurchapp/Info.plist
index dd3a74d..0d5c926 100644
--- a/apolloschurchapp/ios/apolloschurchapp/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp/Info.plist
@@ -26,15 +26,15 @@
 	<key>CFBundlePackageType</key>
 	<string>APPL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.6.0</string>
+	<string>0.7.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>4</string>
+	<string>5</string>
 	<key>ITSAppUsesNonExemptEncryption</key>
-	<false/>
+	<false />
 	<key>LSRequiresIPhoneOS</key>
-	<true/>
+	<true />
 	<key>NSAppTransportSecurity</key>
 	<dict>
 		<key>NSExceptionDomains</key>
@@ -42,17 +42,17 @@
 			<key>embed.wistia.com</key>
 			<dict>
 				<key>NSExceptionAllowsInsecureHTTPLoads</key>
-				<true/>
+				<true />
 			</dict>
 			<key>localhost</key>
 			<dict>
 				<key>NSExceptionAllowsInsecureHTTPLoads</key>
-				<true/>
+				<true />
 			</dict>
 		</dict>
 	</dict>
 	<key>NSLocationWhenInUseUsageDescription</key>
-	<string/>
+	<string />
 	<key>UIAppFonts</key>
 	<array>
 		<string>DroidSerif-Bold.ttf</string>
@@ -88,7 +88,7 @@
 		<string>UIInterfaceOrientationLandscapeRight</string>
 	</array>
 	<key>UIViewControllerBasedStatusBarAppearance</key>
-	<false/>
+	<false />
 	<key>NSPhotoLibraryUsageDescription</key>
 	<string>$(PRODUCT_NAME) would like access to your photo gallery (for uploading profile pictures)</string>
 	<key>NSCameraUsageDescription</key>
diff --git a/apolloschurchapp/ios/apolloschurchappTests/Info.plist b/apolloschurchapp/ios/apolloschurchappTests/Info.plist
index ae0bb6d..e358b6d 100644
--- a/apolloschurchapp/ios/apolloschurchappTests/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchappTests/Info.plist
@@ -15,10 +15,10 @@
 	<key>CFBundlePackageType</key>
 	<string>BNDL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.6.0</string>
+	<string>0.7.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>4</string>
+	<string>5</string>
 </dict>
 </plist>
diff --git a/apolloschurchapp/package.json b/apolloschurchapp/package.json
index 09ac766..e0b9480 100644
--- a/apolloschurchapp/package.json
+++ b/apolloschurchapp/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apolloschurchapp",
-  "version": "0.6.0",
+  "version": "0.8.0-alpha.0",
   "private": true,
   "devDependencies": {
     "@storybook/addon-actions": "4.0.7",
@@ -33,7 +33,7 @@
     "ios": "react-native run-ios --simulator=\"iPhone X\"",
     "lint": "eslint ./src --ext .js",
     "postversion": "react-native-version --never-amend --android android/app/build.gradle --ios ios/",
-    "prestart": "node ./scripts/get-introspection-data.js",
+    "prestart": "babel-node ./scripts/get-introspection-data.js",
     "start": "react-native start",
     "storybook": "rnstl --searchDir ./storybook ./src --pattern \"**/*.stories.js\" && storybook start -p 7007 --root ../../",
     "test": "jest",
@@ -62,7 +62,7 @@
     }
   },
   "dependencies": {
-    "@apollosproject/ui-kit": "^0.6.0",
+    "@apollosproject/ui-kit": "^0.8.0-alpha.0",
     "apollo-cache-inmemory": "1.3.5",
     "apollo-cache-persist": "0.1.1",
     "apollo-client": "2.4.2",
@@ -85,6 +85,7 @@
     "memoize-one": "4.0.0",
     "moment": "2.22.2",
     "node-fetch": "2.2.0",
+    "numeral": "^2.0.6",
     "prettier": "1.14.2",
     "querystring": "^0.2.0",
     "react": "16.6.1",
diff --git a/apolloschurchapp/scripts/get-introspection-data.js b/apolloschurchapp/scripts/get-introspection-data.js
index 8acfcf3..f2c7e28 100755
--- a/apolloschurchapp/scripts/get-introspection-data.js
+++ b/apolloschurchapp/scripts/get-introspection-data.js
@@ -1,11 +1,15 @@
-const fs = require('fs');
-const Path = require('path');
+import fs from 'fs';
+import Path from 'path';
+import { APP_DATA_URL } from 'react-native-dotenv';
+import fetch from 'node-fetch';
 
-const fetch = require('node-fetch');
+const attempts = 0;
+const maxAttempts = 3;
+const timeBetweenAttempts = 5 * 1000;
 
-(async () => {
+const getIntrospectionData = async () => {
   try {
-    const query = await fetch(`https://apollos-church-api.now.sh/graphql`, {
+    const query = await fetch(APP_DATA_URL, {
       method: 'POST',
       headers: { 'Content-Type': 'application/json' },
       body: JSON.stringify({
@@ -36,7 +40,20 @@ const fetch = require('node-fetch');
       Path.resolve(__dirname, '../src/client/fragmentTypes.json'),
       JSON.stringify(data)
     );
+
+    console.log('Successfully wrote fragmentTypes!');
   } catch (e) {
-    throw new Error('Error writing fragmentTypes file', e);
+    if (attempts < maxAttempts) {
+      console.log(
+        `Error writing fragmentTypes (-api probably hasn't started yet). Trying again after wait. Attempt: ${attempts +
+          1} of ${maxAttempts}`
+      );
+      await new Promise((resolve) => setTimeout(resolve, timeBetweenAttempts)); // try again after waiting
+      getIntrospectionData();
+    } else {
+      // throw new Error('Error writing fragmentTypes file', e);
+    }
   }
-})();
+};
+
+getIntrospectionData();
diff --git a/apolloschurchapp/src/client/fragmentTypes.json b/apolloschurchapp/src/client/fragmentTypes.json
index 8b9885f..8d96fc0 100644
--- a/apolloschurchapp/src/client/fragmentTypes.json
+++ b/apolloschurchapp/src/client/fragmentTypes.json
@@ -1 +1 @@
-{"__schema":{"types":[{"kind":"INTERFACE","name":"Node","possibleTypes":[{"name":"ContentChannel"},{"name":"Person"},{"name":"Interaction"},{"name":"UniversalContentItem"},{"name":"DevotionalContentItem"}]},{"kind":"INTERFACE","name":"ContentItem","possibleTypes":[{"name":"UniversalContentItem"},{"name":"DevotionalContentItem"}]},{"kind":"INTERFACE","name":"Media","possibleTypes":[{"name":"ImageMedia"},{"name":"VideoMedia"},{"name":"AudioMedia"}]},{"kind":"INTERFACE","name":"MediaSource","possibleTypes":[{"name":"ImageMediaSource"},{"name":"VideoMediaSource"},{"name":"AudioMediaSource"}]},{"kind":"INTERFACE","name":"Sharable","possibleTypes":[{"name":"SharableContentItem"}]}]}}
\ No newline at end of file
+{"__schema":{"types":[{"kind":"INTERFACE","name":"Node","possibleTypes":[{"name":"ContentChannel"},{"name":"Person"},{"name":"Interaction"},{"name":"UniversalContentItem"},{"name":"DevotionalContentItem"},{"name":"MediaContentItem"},{"name":"ContentSeriesContentItem"}]},{"kind":"INTERFACE","name":"ContentItem","possibleTypes":[{"name":"UniversalContentItem"},{"name":"DevotionalContentItem"},{"name":"MediaContentItem"},{"name":"ContentSeriesContentItem"}]},{"kind":"INTERFACE","name":"Media","possibleTypes":[{"name":"ImageMedia"},{"name":"VideoMedia"},{"name":"AudioMedia"}]},{"kind":"INTERFACE","name":"MediaSource","possibleTypes":[{"name":"ImageMediaSource"},{"name":"VideoMediaSource"},{"name":"AudioMediaSource"}]},{"kind":"INTERFACE","name":"Sharable","possibleTypes":[{"name":"SharableContentItem"}]}]}}
\ No newline at end of file
diff --git a/apolloschurchapp/src/content-feed/getContentFeed.js b/apolloschurchapp/src/content-feed/getContentFeed.js
index 5bc3bc6..2e47d19 100644
--- a/apolloschurchapp/src/content-feed/getContentFeed.js
+++ b/apolloschurchapp/src/content-feed/getContentFeed.js
@@ -1,5 +1,6 @@
 import gql from 'graphql-tag';
 
+import { largeCardFragment } from 'apolloschurchapp/src/ui/ContentCardConnected';
 import { contentItemFragment } from '../content-single/getContentItem';
 
 export default gql`
@@ -10,21 +11,7 @@ export default gql`
           edges {
             node {
               ...contentItemFragment
-              __typename
-              id
-              coverImage {
-                name
-                sources {
-                  uri
-                }
-              }
-              isLiked
-              parentChannel {
-                id
-                name
-                iconName
-              }
-              title
+              ...largeCardFragment
             }
           }
         }
@@ -32,4 +19,5 @@ export default gql`
     }
   }
   ${contentItemFragment}
+  ${largeCardFragment}
 `;
diff --git a/apolloschurchapp/src/content-feed/index.js b/apolloschurchapp/src/content-feed/index.js
index 006b15c..8662d8a 100644
--- a/apolloschurchapp/src/content-feed/index.js
+++ b/apolloschurchapp/src/content-feed/index.js
@@ -5,6 +5,8 @@ import PropTypes from 'prop-types';
 
 import { BackgroundView, FeedView } from '@apollosproject/ui-kit';
 
+import ContentCardConnected from 'apolloschurchapp/src/ui/ContentCardConnected';
+
 import getContentFeed from './getContentFeed';
 /**
  * This is where the component description lives
@@ -50,6 +52,7 @@ class ContentFeed extends PureComponent {
         >
           {({ loading, error, data, refetch }) => (
             <FeedView
+              ListItemComponent={ContentCardConnected}
               content={get(
                 data,
                 'node.childContentItemsConnection.edges',
diff --git a/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js b/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
index fd8d149..c0a236f 100644
--- a/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
+++ b/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
@@ -7,17 +7,11 @@ import { Query } from 'react-apollo';
 import {
   CardTile,
   HorizontalTileFeed,
-  PaddedView,
-  styled,
   TouchableScale,
 } from '@apollosproject/ui-kit';
 
 import getHorizontalContent from './getHorizontalContent';
 
-const FeedContainer = styled({
-  paddingHorizontal: 0,
-})(PaddedView);
-
 const loadingStateObject = {
   node: {
     id: 'fakeId0',
@@ -73,14 +67,12 @@ class HorizontalContentFeed extends Component {
     const content = siblingContent.length ? siblingContent : childContent;
 
     return (content && content.length) || loading ? (
-      <FeedContainer>
-        <HorizontalTileFeed
-          content={content}
-          isLoading={loading}
-          loadingStateObject={loadingStateObject}
-          renderItem={this.renderItem}
-        />
-      </FeedContainer>
+      <HorizontalTileFeed
+        content={content}
+        isLoading={loading}
+        loadingStateObject={loadingStateObject}
+        renderItem={this.renderItem}
+      />
     ) : null;
   };
 
diff --git a/apolloschurchapp/src/tabs/connect/LikedContentList/index.js b/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
index f4d0d90..2fd7fda 100644
--- a/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
+++ b/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
@@ -3,6 +3,7 @@ import PropTypes from 'prop-types';
 import { Query } from 'react-apollo';
 
 import { BackgroundView, FeedView } from '@apollosproject/ui-kit';
+import ContentCardConnected from '../../../ui/ContentCardConnected';
 
 import getLikedContent from '../getLikedContent';
 /** A FeedView wrapped in a query to pull content data. */
@@ -37,6 +38,7 @@ class LikedContentList extends PureComponent {
         <Query query={getLikedContent} fetchPolicy="cache-and-network">
           {({ loading, error, data: { getAllLikedContent = [] }, refetch }) => (
             <FeedView
+              ListItemComponent={ContentCardConnected}
               initialNumToRender={5}
               content={getAllLikedContent}
               isLoading={loading}
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js
index 09ff5a2..8b4437d 100644
--- a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js
@@ -11,16 +11,17 @@ import {
   styled,
   ButtonLink,
   withIsLoading,
+  TouchableScale,
 } from '@apollosproject/ui-kit';
 
-import TileImageItem from '../../discover/TileImageItem';
+import ContentCard from 'apolloschurchapp/src/ui/ContentCardConnected';
 
-const RowHeader = styled(({ theme }) => ({
+const RowHeader = styled({
   flexDirection: 'row',
   justifyContent: 'space-between',
   alignItems: 'center',
-  paddingVertical: theme.sizing.baseUnit,
-}))(PaddedView);
+  paddingVertical: 0,
+})(PaddedView);
 
 const Name = styled({
   flexGrow: 1,
@@ -49,11 +50,20 @@ class RecentlyLikedTileFeed extends Component {
   };
 
   titleImageItem = ({ item }) => (
-    <TileImageItem
-      item={item}
-      isLoading={this.props.isLoading}
-      navigation={this.props.navigation}
-    />
+    <TouchableScale
+      onPress={() => {
+        this.props.navigation.push('ContentSingle', {
+          itemId: item.id,
+        });
+      }}
+    >
+      <ContentCard
+        isLoading={item.isLoading}
+        tile
+        contentId={item.id}
+        inHorizontalList
+      />
+    </TouchableScale>
   );
 
   render() {
diff --git a/apolloschurchapp/src/tabs/connect/getLikedContent.js b/apolloschurchapp/src/tabs/connect/getLikedContent.js
index 53ab5e7..0252dd1 100644
--- a/apolloschurchapp/src/tabs/connect/getLikedContent.js
+++ b/apolloschurchapp/src/tabs/connect/getLikedContent.js
@@ -1,5 +1,6 @@
 import gql from 'graphql-tag';
 
+import { largeCardFragment } from 'apolloschurchapp/src/ui/ContentCardConnected';
 import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
 
 export default gql`
@@ -7,8 +8,10 @@ export default gql`
     getAllLikedContent {
       ... on ContentItem {
         ...contentItemFragment
+        ...largeCardFragment
       }
     }
   }
   ${contentItemFragment}
+  ${largeCardFragment}
 `;
diff --git a/apolloschurchapp/src/tabs/discover/TileContentFeed.js b/apolloschurchapp/src/tabs/discover/TileContentFeed.js
index aeab3ef..4470a03 100644
--- a/apolloschurchapp/src/tabs/discover/TileContentFeed.js
+++ b/apolloschurchapp/src/tabs/discover/TileContentFeed.js
@@ -8,16 +8,24 @@ import {
   HorizontalTileFeed,
   styled,
   ButtonLink,
+  TouchableScale,
 } from '@apollosproject/ui-kit';
-import TileImageItem from './TileImageItem';
+
+import ContentCardConnected from '../../ui/ContentCardConnected';
 
 const RowHeader = styled({
   flexDirection: 'row',
   justifyContent: 'space-between',
   alignItems: 'center',
-  paddingVertical: 0,
+  paddingBottom: 0,
 })(PaddedView);
 
+const loadingStateObject = {
+  id: 'fake_id',
+  title: '',
+  coverImage: [],
+};
+
 const TileContentFeed = ({ isLoading, id, name, navigation, content = [] }) => (
   <PaddedView horizontal={false}>
     <RowHeader>
@@ -38,17 +46,22 @@ const TileContentFeed = ({ isLoading, id, name, navigation, content = [] }) => (
     <HorizontalTileFeed
       content={content}
       renderItem={({ item }) => (
-        <TileImageItem
-          item={item}
-          isLoading={isLoading}
-          navigation={navigation}
-        />
+        <TouchableScale
+          onPress={() => {
+            navigation.push('ContentSingle', {
+              itemId: item.id,
+            });
+          }}
+        >
+          <ContentCardConnected
+            contentId={item.id}
+            isLoading={isLoading}
+            tile
+            inHorizontalList
+          />
+        </TouchableScale>
       )}
-      loadingStateObject={{
-        id: 'fake_id',
-        title: '',
-        coverImage: [],
-      }}
+      loadingStateObject={loadingStateObject}
       isLoading={isLoading}
     />
   </PaddedView>
diff --git a/apolloschurchapp/src/tabs/discover/getContentChannels.js b/apolloschurchapp/src/tabs/discover/getContentChannels.js
index d39573a..bc9c243 100644
--- a/apolloschurchapp/src/tabs/discover/getContentChannels.js
+++ b/apolloschurchapp/src/tabs/discover/getContentChannels.js
@@ -1,6 +1,7 @@
 import gql from 'graphql-tag';
 
 import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
+import { tileCardFragment } from 'apolloschurchapp/src/ui/ContentCardConnected';
 
 export default gql`
   query getContentChannels {
@@ -12,21 +13,12 @@ export default gql`
           node {
             id
             ...contentItemFragment
-            title
-            coverImage {
-              sources {
-                uri
-              }
-            }
-            sharing {
-              title
-              message
-              url
-            }
+            ...tileCardFragment
           }
         }
       }
     }
   }
   ${contentItemFragment}
+  ${tileCardFragment}
 `;
diff --git a/apolloschurchapp/src/tabs/home/Home.js b/apolloschurchapp/src/tabs/home/Home.js
index 2505121..bb09a97 100644
--- a/apolloschurchapp/src/tabs/home/Home.js
+++ b/apolloschurchapp/src/tabs/home/Home.js
@@ -6,6 +6,7 @@ import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
 import { styled, FeedView, BackgroundView } from '@apollosproject/ui-kit';
+import ContentCardConnected from '../../ui/ContentCardConnected';
 
 import { LiveButton } from '../../live';
 
@@ -44,6 +45,7 @@ class Home extends PureComponent {
           <Query query={getUserFeed} fetchPolicy="cache-and-network">
             {({ loading, error, data, refetch }) => (
               <FeedView
+                ListItemComponent={ContentCardConnected}
                 content={get(data, 'userFeed.edges', []).map(
                   (edge) => edge.node
                 )}
diff --git a/apolloschurchapp/src/tabs/home/getUserFeed.js b/apolloschurchapp/src/tabs/home/getUserFeed.js
index 34ed66c..2d7cb9a 100644
--- a/apolloschurchapp/src/tabs/home/getUserFeed.js
+++ b/apolloschurchapp/src/tabs/home/getUserFeed.js
@@ -1,40 +1,19 @@
 import gql from 'graphql-tag';
 
 import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
+import { largeCardFragment } from 'apolloschurchapp/src/ui/ContentCardConnected';
 
 export default gql`
   query getUserFeed {
     userFeed {
       edges {
         node {
+          ...largeCardFragment
           ...contentItemFragment
-          __typename
-          id
-          coverImage {
-            name
-            sources {
-              uri
-            }
-          }
-          parentChannel {
-            id
-            name
-            iconName
-          }
-          theme {
-            type
-            colors {
-              primary
-              secondary
-              screen
-              paper
-            }
-          }
-          isLiked
-          title
         }
       }
     }
   }
   ${contentItemFragment}
+  ${largeCardFragment}
 `;
diff --git a/apolloschurchapp/src/ui/ContentCardConnected/index.js b/apolloschurchapp/src/ui/ContentCardConnected/index.js
new file mode 100644
index 0000000..b64bdc6
--- /dev/null
+++ b/apolloschurchapp/src/ui/ContentCardConnected/index.js
@@ -0,0 +1,55 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { Query } from 'react-apollo';
+import { get } from 'lodash';
+
+import { ContentCard, ErrorCard } from '@apollosproject/ui-kit';
+import getContentCard from './query';
+
+export { tileCardFragment, largeCardFragment } from './query';
+
+const ContentCardConnected = ({
+  contentId,
+  isLoading,
+  tile,
+  ...otherProps
+}) => {
+  if (!contentId || isLoading)
+    return <ContentCard {...otherProps} isLoading tile={tile} />;
+
+  return (
+    <Query query={getContentCard} variables={{ contentId, tile: !!tile }}>
+      {({ data: { node = {} } = {}, loading, error }) => {
+        if (error) return <ErrorCard error={error} />;
+
+        const metrics = [
+          {
+            icon: node.isLiked ? 'like-solid' : 'like',
+            value: node.likedCount,
+          },
+        ];
+
+        const coverImage = get(node, 'coverImage.sources', undefined);
+
+        return (
+          <ContentCard
+            {...node}
+            {...otherProps}
+            coverImage={coverImage}
+            metrics={metrics}
+            tile={tile}
+            isLoading={loading}
+          />
+        );
+      }}
+    </Query>
+  );
+};
+
+ContentCardConnected.propTypes = {
+  isLoading: PropTypes.bool,
+  contentId: PropTypes.string,
+  tile: PropTypes.bool,
+};
+
+export default ContentCardConnected;
diff --git a/apolloschurchapp/src/ui/ContentCardConnected/query.js b/apolloschurchapp/src/ui/ContentCardConnected/query.js
new file mode 100644
index 0000000..abefc12
--- /dev/null
+++ b/apolloschurchapp/src/ui/ContentCardConnected/query.js
@@ -0,0 +1,93 @@
+import gql from 'graphql-tag';
+
+export const coverImageFragment = gql`
+  fragment coverImageFragment on ContentItem {
+    coverImage {
+      sources {
+        uri
+      }
+    }
+  }
+`;
+
+export const themeFragment = gql`
+  fragment themeFragment on ContentItem {
+    theme {
+      type
+      colors {
+        primary
+        secondary
+        screen
+        paper
+      }
+    }
+  }
+`;
+
+export const contentCardMetricsFragment = gql`
+  fragment contentCardMetricsFragment on ContentItem {
+    isLiked
+    likedCount
+  }
+`;
+
+export const baseCardFragment = gql`
+  fragment baseCardFragment on ContentItem {
+    id
+    __typename
+    ...contentCardMetricsFragment
+    ...coverImageFragment
+    ...themeFragment
+    title
+    summary
+  }
+  ${contentCardMetricsFragment}
+  ${coverImageFragment}
+  ${themeFragment}
+`;
+
+export const tileCardFragment = gql`
+  fragment tileCardFragment on ContentItem {
+    ... on ContentSeriesContentItem {
+      id
+      ...themeFragment
+      ...coverImageFragment
+      ...contentCardMetricsFragment
+    }
+    ... on UniversalContentItem {
+      ...baseCardFragment
+    }
+    ... on DevotionalContentItem {
+      ...baseCardFragment
+    }
+    ... on MediaContentItem {
+      ...baseCardFragment
+    }
+  }
+  ${baseCardFragment}
+  ${themeFragment}
+  ${coverImageFragment}
+  ${contentCardMetricsFragment}
+`;
+
+export const largeCardFragment = gql`
+  fragment largeCardFragment on ContentItem {
+    ...baseCardFragment
+  }
+  ${baseCardFragment}
+`;
+
+const getContentCard = gql`
+  query getContentCard($contentId: ID!, $tile: Boolean!) {
+    node(id: $contentId) {
+      id
+      __typename
+      ...tileCardFragment @include(if: $tile)
+      ...largeCardFragment @skip(if: $tile)
+    }
+  }
+  ${tileCardFragment}
+  ${largeCardFragment}
+`;
+
+export default getContentCard;
