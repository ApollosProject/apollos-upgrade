diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index a909d9e..f50748c 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apollos-church-api",
-  "version": "0.8.0-alpha.0",
+  "version": "0.8.0-alpha.2",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
@@ -28,25 +28,25 @@
     "testEnvironment": "node"
   },
   "dependencies": {
-    "@apollosproject/config": "^0.8.0-alpha.0",
-    "@apollosproject/data-connector-analytics": "^0.8.0-alpha.0",
-    "@apollosproject/data-connector-bible": "^0.8.0-alpha.0",
-    "@apollosproject/data-connector-people": "^0.8.0-alpha.0",
-    "@apollosproject/data-connector-rock-auth": "^0.8.0-alpha.0",
-    "@apollosproject/data-connector-rock-content": "^0.8.0-alpha.0",
-    "@apollosproject/rock-apollo-data-source": "^0.8.0-alpha.0",
-    "@apollosproject/server-core": "^0.8.0-alpha.0",
+    "@apollosproject/config": "^0.8.0-alpha.2",
+    "@apollosproject/data-connector-analytics": "^0.8.0-alpha.2",
+    "@apollosproject/data-connector-bible": "^0.8.0-alpha.2",
+    "@apollosproject/data-connector-church-online": "^0.8.0-alpha.2",
+    "@apollosproject/data-connector-cloudinary": "^0.8.0-alpha.2",
+    "@apollosproject/data-connector-people": "^0.8.0-alpha.2",
+    "@apollosproject/data-connector-rock-auth": "^0.8.0-alpha.2",
+    "@apollosproject/data-connector-rock-content": "^0.8.0-alpha.2",
+    "@apollosproject/rock-apollo-data-source": "^0.8.0-alpha.2",
+    "@apollosproject/server-core": "^0.8.0-alpha.2",
     "apollo-datasource-rest": "0.1.1",
     "apollo-server": "^2.0.5",
     "casual": "1.5.19",
-    "cloudinary": "^1.11.0",
     "color": "3.0.0",
     "dataloader": "1.4.0",
     "dotenv": "6.0.0",
     "graphql": "0.13.2",
     "isomorphic-fetch": "2.2.1",
     "lodash": "4.17.10",
-    "natural": "^0.6.2",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3",
     "sanitize-html": "1.18.2",
@@ -54,7 +54,7 @@
     "with-query": "1.0.2"
   },
   "devDependencies": {
-    "@apollosproject/babel-preset-apollos": "^0.8.0-alpha.0",
+    "@apollosproject/babel-preset-apollos": "^0.8.0-alpha.2",
     "@babel/cli": "7.1.5",
     "@babel/core": "7.1.6",
     "codecov": "3.0.2",
diff --git a/apollos-church-api/src/connectors/__tests__/cloudinary.tests.js b/apollos-church-api/src/connectors/__tests__/cloudinary.tests.js
deleted file mode 100644
index 10b8391..0000000
--- a/apollos-church-api/src/connectors/__tests__/cloudinary.tests.js
+++ /dev/null
@@ -1,51 +0,0 @@
-import ApollosConfig from '@apollosproject/config';
-import withCloudinary, { config } from '../cloudinary';
-
-const originalUrl =
-  'https://apollosrock.newspring.cc/GetImage.ashx?guid=f54b0db0-95f5-44ad-b8f2-8bcd1b23cfdb';
-
-describe('Cloudinary', () => {
-  beforeEach(() => {
-    // reset cloudinary config
-    ApollosConfig.loadJs({
-      CLOUDINARY: {
-        URL:
-          'cloudinary://123456789012345:abcdeghijklmnopqrstuvwxyz12@n07t21i7',
-      },
-    });
-    config();
-  });
-  afterEach(() => {
-    ApollosConfig.loadJs({
-      CLOUDINARY: {
-        URL: null,
-      },
-    });
-    config();
-  });
-  it('must return the URL if CLOUDINARY_URL is not specified', () => {
-    ApollosConfig.loadJs({
-      CLOUDINARY: {
-        URL: null,
-      },
-    });
-    config();
-
-    const url = withCloudinary(originalUrl);
-
-    expect(url).toEqual(originalUrl);
-  });
-  it('must return a cloudinary fetch URL if CLOUDINARY_URL is defined', () => {
-    const url = withCloudinary(originalUrl);
-
-    expect(url).toEqual(
-      'https://res.cloudinary.com/n07t21i7/image/fetch/c_limit,f_auto,w_1600/https://apollosrock.newspring.cc/GetImage.ashx%3Fguid%3Df54b0db0-95f5-44ad-b8f2-8bcd1b23cfdb'
-    );
-  });
-  it('must not double parse a cloudinary url.', () => {
-    const url = withCloudinary(originalUrl);
-    const doubledParsed = withCloudinary(url);
-
-    expect(url).toEqual(doubledParsed);
-  });
-});
diff --git a/apollos-church-api/src/connectors/cloudinary.js b/apollos-church-api/src/connectors/cloudinary.js
deleted file mode 100644
index 93f4a02..0000000
--- a/apollos-church-api/src/connectors/cloudinary.js
+++ /dev/null
@@ -1,39 +0,0 @@
-import cloudinary from 'cloudinary';
-import ApollosConfig from '@apollosproject/config';
-
-const { CLOUDINARY } = ApollosConfig;
-// Cloudinary picks up settings from `env`,
-// no way to pass straight into config if using `CLOUDINARY_URL format`
-// Exposed as Utiliy function to reset config (mostly used in tests)
-export function config() {
-  process.env.CLOUDINARY_URL = CLOUDINARY.URL;
-  cloudinary.config(true);
-  cloudinary.config({
-    private_cdn: false,
-    secure: true,
-  });
-}
-// we always want to setup the config on boot.
-config();
-
-const cleanUrl = (url) => url.replace(/:(443|80)/, '');
-
-export default function withCloudinary(_url = '', options) {
-  const url = cleanUrl(_url);
-  // If we call this function twice, only the first transform will be applied
-  if (url.startsWith('https://res.cloudinary.com')) {
-    return url;
-  }
-  if (CLOUDINARY.URL) {
-    return cloudinary.url(url, {
-      type: 'fetch',
-      fetch_format: 'auto',
-      width: '1600',
-      crop: 'limit',
-      ...options,
-    });
-  }
-  return url;
-}
-
-export { cloudinary };
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 93e97f9..bbc6632 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -11,11 +11,10 @@ import {
 import * as Analytics from '@apollosproject/data-connector-analytics';
 import { Person, Family } from '@apollosproject/data-connector-people';
 import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
 
 import RockConstants from '../connectors/rock/rock-constants';
-
-import * as Media from './media';
-import * as LiveStream from './live';
 import * as Theme from './theme';
 import * as Interactions from './interactions';
 
@@ -23,7 +22,7 @@ const data = {
   ContentChannel,
   ContentItem,
   Person,
-  Media,
+  Cloudinary,
   Auth,
   LiveStream,
   Theme,
diff --git a/apollos-church-api/src/data/media/index.js b/apollos-church-api/src/data/media/index.js
deleted file mode 100644
index 2abc0de..0000000
--- a/apollos-church-api/src/data/media/index.js
+++ /dev/null
@@ -1,98 +0,0 @@
-import { gql } from 'apollo-server';
-import ApollosConfig from '@apollosproject/config';
-import withCloudinary from '../../connectors/cloudinary';
-
-const { ROCK } = ApollosConfig;
-
-export const schema = gql`
-  interface Media {
-    name: String
-    key: String
-    sources: [MediaSource]
-  }
-
-  interface MediaSource {
-    uri: String
-  }
-
-  type ImageMedia implements Media {
-    name: String
-    key: String
-    sources: [ImageMediaSource]
-  }
-
-  type VideoMedia implements Media {
-    name: String
-    key: String
-    sources: [VideoMediaSource]
-    # duration: Float
-    embedHtml: String
-  }
-
-  type AudioMedia implements Media {
-    name: String
-    key: String
-    # duration: Float
-    sources: [AudioMediaSource]
-  }
-
-  type AudioMediaSource implements MediaSource {
-    uri: String
-    # format: String
-    # size: String
-  }
-
-  type ImageMediaSource implements MediaSource {
-    uri: String
-    # width: Int
-    # height: Int
-  }
-
-  type VideoMediaSource implements MediaSource {
-    uri: String
-    # format: String
-    # size: String
-  }
-
-  enum MediaInputType {
-    IMAGE
-    VIDEO
-    AUDIO
-  }
-`;
-
-const addTypenameToSources = (__typename) => ({ sources }) =>
-  sources.map((s) => ({ __typename, ...s }));
-
-export const resolver = {
-  Media: {
-    // Implementors must attach __typename to root.
-    __resolveType: ({ __typename }) => __typename,
-  },
-  MediaSource: {
-    // Implementors must attach __typename to root.
-    __resolveType: ({ __typename }) => __typename,
-  },
-  ImageMedia: {
-    sources: addTypenameToSources('ImageMediaSource'),
-  },
-  AudioMedia: {
-    sources: addTypenameToSources('AudioMediaSource'),
-  },
-  VideoMedia: {
-    sources: addTypenameToSources('VideoMediaSource'),
-  },
-  ImageMediaSource: {
-    uri: ({ uri = '' }) => {
-      if (!uri || typeof uri !== 'string') return null;
-      if (uri.startsWith('http')) return withCloudinary(uri);
-      if (uri.startsWith('//')) return withCloudinary(`https:${uri}`);
-
-      // Handle Rock GUID:
-      if (uri.split('-').length === 5)
-        return withCloudinary(`${ROCK.IMAGE_URL}?guid=${uri}`);
-
-      return uri;
-    },
-  },
-};
diff --git a/apolloschurchapp/.env.production b/apolloschurchapp/.env.production
index 4dde734..4f37d9c 100644
--- a/apolloschurchapp/.env.production
+++ b/apolloschurchapp/.env.production
@@ -1,3 +1,3 @@
-APP_DATA_URL=https://apollos-church-api.now.sh
+APP_DATA_URL=https://apollos-church-api.herokuapp.com/
 ONE_SIGNAL_KEY=$ONE_SIGNAL_KEY
 ANDROID_URL=doesnotmatter
\ No newline at end of file
diff --git a/apolloschurchapp/package.json b/apolloschurchapp/package.json
index e0b9480..d992510 100644
--- a/apolloschurchapp/package.json
+++ b/apolloschurchapp/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apolloschurchapp",
-  "version": "0.8.0-alpha.0",
+  "version": "0.8.0-alpha.2",
   "private": true,
   "devDependencies": {
     "@storybook/addon-actions": "4.0.7",
@@ -62,7 +62,7 @@
     }
   },
   "dependencies": {
-    "@apollosproject/ui-kit": "^0.8.0-alpha.0",
+    "@apollosproject/ui-kit": "^0.8.0-alpha.2",
     "apollo-cache-inmemory": "1.3.5",
     "apollo-cache-persist": "0.1.1",
     "apollo-client": "2.4.2",
diff --git a/apolloschurchapp/src/content-single/ContentSingle.js b/apolloschurchapp/src/content-single/ContentSingle.js
new file mode 100644
index 0000000..f5b2709
--- /dev/null
+++ b/apolloschurchapp/src/content-single/ContentSingle.js
@@ -0,0 +1,104 @@
+import React, { PureComponent } from 'react';
+import { Query } from 'react-apollo';
+import { get } from 'lodash';
+import PropTypes from 'prop-types';
+
+import { ErrorCard, ThemeMixin } from '@apollosproject/ui-kit';
+
+import TrackEventWhenLoaded from 'apolloschurchapp/src/analytics/TrackEventWhenLoaded';
+import { events } from 'apolloschurchapp/src/analytics';
+
+import ActionContainer from './ActionContainer';
+import getContentItem from './getContentItem';
+
+import DevotionalContentItem from './DevotionalContentItem';
+import UniversalContentItem from './UniversalContentItem';
+
+import NavigationHeader from './NavigationHeader';
+
+class ContentSingle extends PureComponent {
+  static propTypes = {
+    navigation: PropTypes.shape({
+      getParam: PropTypes.func,
+      push: PropTypes.func,
+    }),
+  };
+
+  static navigationOptions = {
+    header: NavigationHeader,
+  };
+
+  get itemId() {
+    return this.props.navigation.getParam('itemId', []);
+  }
+
+  get queryVariables() {
+    return { itemId: this.itemId };
+  }
+
+  renderContent = ({ content, loading, error }) => {
+    let { __typename } = content;
+    if (!__typename && this.itemId) {
+      [__typename] = this.itemId.split(':');
+    }
+    switch (__typename) {
+      case 'DevotionalContentItem':
+        return (
+          <DevotionalContentItem
+            id={this.itemId}
+            content={content}
+            loading={loading}
+            error={error}
+          />
+        );
+      case 'UniversalContentItem':
+      default:
+        return (
+          <UniversalContentItem
+            id={this.itemId}
+            content={content}
+            loading={loading}
+            error={error}
+          />
+        );
+    }
+  };
+
+  renderWithData = ({ loading, error, data }) => {
+    if (error) return <ErrorCard error={error} />;
+
+    const content = data.node || {};
+
+    const { theme = {}, id } = content;
+
+    return (
+      <ThemeMixin
+        mixin={{
+          type: get(theme, 'type', 'light').toLowerCase(),
+          colors: get(theme, 'colors'),
+        }}
+      >
+        <TrackEventWhenLoaded
+          loaded={!!(!loading && content.title)}
+          eventName={events.ViewContent}
+          properties={{
+            title: content.title,
+            itemId: this.itemId,
+          }}
+        />
+        {this.renderContent({ content, loading, error })}
+        <ActionContainer itemId={id} />
+      </ThemeMixin>
+    );
+  };
+
+  render() {
+    return (
+      <Query query={getContentItem} variables={this.queryVariables}>
+        {this.renderWithData}
+      </Query>
+    );
+  }
+}
+
+export default ContentSingle;
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/index.js b/apolloschurchapp/src/content-single/DevotionalContentItem/index.js
index ad6835f..8544eba 100644
--- a/apolloschurchapp/src/content-single/DevotionalContentItem/index.js
+++ b/apolloschurchapp/src/content-single/DevotionalContentItem/index.js
@@ -40,10 +40,17 @@ class DevotionalContentItem extends PureComponent {
    * Returns: an array of scripture references.
    */
   getScriptureReferences = (scripture) => {
-    if (scripture && scripture.length) {
-      return scripture.map((ref) => ref.reference);
+    let arrayOfRefrences = null;
+
+    if (scripture) {
+      arrayOfRefrences = scripture.map(
+        (ref) =>
+          // only add refs to the array if they exist
+          ref.reference || ''
+      );
     }
-    return null;
+
+    return arrayOfRefrences;
   };
 
   /**
@@ -79,7 +86,12 @@ class DevotionalContentItem extends PureComponent {
     loading,
   }) => {
     if (error) return <ErrorCard error={error} />;
-    const hasScripture = loading || scriptures.length;
+    // only include scriptures where the references are not null
+    const validScriptures = scriptures.filter(
+      (scripture) => scripture.reference != null
+    );
+
+    const hasScripture = loading || validScriptures.length;
     const tabRoutes = [{ title: 'Devotional', key: 'content' }];
     if (hasScripture) tabRoutes.push({ title: 'Scripture', key: 'scripture' });
     return (
diff --git a/apolloschurchapp/src/content-single/NavigationHeader.js b/apolloschurchapp/src/content-single/NavigationHeader.js
new file mode 100644
index 0000000..50a10ff
--- /dev/null
+++ b/apolloschurchapp/src/content-single/NavigationHeader.js
@@ -0,0 +1,36 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { ModalViewHeader } from '@apollosproject/ui-kit';
+
+const NavigationHeader = ({ scene, navigation }) => {
+  let onBack = null;
+  if (scene.index > 0) onBack = () => navigation.pop();
+
+  const onClose = () => {
+    // Since we're dealing with nested navigators, we have to trigger two actions:
+    // One action that pops us to the top of the modal's navigation history
+    // Another action that pops us one more level, which triggers the modal to close.
+    //
+    // FWIW, calling something like `.pop(scenes.length + 1)` or something does not work,
+    // as that results in the same thing as `.popToTop()`. React-Navigation must have some special-case
+    // handling for calling `.pop()` at the top of a nested navigators stack.
+    //
+    // Because react (or redux?) chains renders, this still results in only one clean animation!
+    navigation.popToTop();
+    navigation.pop();
+  };
+
+  return <ModalViewHeader onClose={onClose} onBack={onBack} />;
+};
+
+NavigationHeader.propTypes = {
+  scene: PropTypes.shape({
+    index: PropTypes.number,
+  }),
+  navigation: PropTypes.shape({
+    pop: PropTypes.func,
+    popToTop: PropTypes.func,
+  }),
+};
+
+export default NavigationHeader;
diff --git a/apolloschurchapp/src/content-single/index.js b/apolloschurchapp/src/content-single/index.js
index d9f5be6..f5b2709 100644
--- a/apolloschurchapp/src/content-single/index.js
+++ b/apolloschurchapp/src/content-single/index.js
@@ -3,16 +3,19 @@ import { Query } from 'react-apollo';
 import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
-import { ErrorCard, ThemeMixin, ModalView } from '@apollosproject/ui-kit';
-import TrackEventWhenLoaded from 'apolloschurchapp/src/analytics/TrackEventWhenLoaded';
+import { ErrorCard, ThemeMixin } from '@apollosproject/ui-kit';
 
+import TrackEventWhenLoaded from 'apolloschurchapp/src/analytics/TrackEventWhenLoaded';
 import { events } from 'apolloschurchapp/src/analytics';
+
 import ActionContainer from './ActionContainer';
 import getContentItem from './getContentItem';
 
 import DevotionalContentItem from './DevotionalContentItem';
 import UniversalContentItem from './UniversalContentItem';
 
+import NavigationHeader from './NavigationHeader';
+
 class ContentSingle extends PureComponent {
   static propTypes = {
     navigation: PropTypes.shape({
@@ -22,7 +25,7 @@ class ContentSingle extends PureComponent {
   };
 
   static navigationOptions = {
-    header: null,
+    header: NavigationHeader,
   };
 
   get itemId() {
@@ -75,18 +78,16 @@ class ContentSingle extends PureComponent {
           colors: get(theme, 'colors'),
         }}
       >
-        <ModalView navigation={this.props.navigation}>
-          <TrackEventWhenLoaded
-            loaded={!!(!loading && content.title)}
-            eventName={events.ViewContent}
-            properties={{
-              title: content.title,
-              itemId: this.itemId,
-            }}
-          />
-          {this.renderContent({ content, loading, error })}
-          <ActionContainer itemId={id} />
-        </ModalView>
+        <TrackEventWhenLoaded
+          loaded={!!(!loading && content.title)}
+          eventName={events.ViewContent}
+          properties={{
+            title: content.title,
+            itemId: this.itemId,
+          }}
+        />
+        {this.renderContent({ content, loading, error })}
+        <ActionContainer itemId={id} />
       </ThemeMixin>
     );
   };
diff --git a/apolloschurchapp/src/ui/MediaPlayer/FullscreenControls.js b/apolloschurchapp/src/ui/MediaPlayer/FullscreenControls.js
index a9a46d1..7256ae4 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/FullscreenControls.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/FullscreenControls.js
@@ -19,8 +19,7 @@ import {
   styled,
   H4,
   H6,
-  Icon,
-  Touchable,
+  ButtonIcon,
 } from '@apollosproject/ui-kit';
 
 import Seeker from './Seeker';
@@ -77,20 +76,20 @@ const Titles = styled({
 const Title = styled({ textAlign: 'center' })(H4);
 const Artist = styled({ textAlign: 'center' })(H6);
 
-const IconSm = withTheme(({ theme, disabled }) => ({
-  size: theme.sizing.baseUnit,
-  opacity: disabled ? 0.5 : 1.25,
-}))(Icon);
+const IconSm = withTheme(({ theme }) => ({
+  size: theme.sizing.baseUnit * 1.25,
+  iconPadding: theme.sizing.baseUnit * 1.25,
+}))(ButtonIcon);
 
-const IconMd = withTheme(({ theme, disabled }) => ({
+const IconMd = withTheme(({ theme }) => ({
   size: theme.sizing.baseUnit * 1.875,
-  opacity: disabled ? 0.5 : 1,
-}))(Icon);
+  iconPadding: theme.sizing.baseUnit * 0.9375,
+}))(ButtonIcon);
 
-const IconLg = withTheme(({ theme, disabled }) => ({
+const IconLg = withTheme(({ theme }) => ({
   size: theme.sizing.baseUnit * 3.125,
-  opacity: disabled ? 0.5 : 1,
-}))(Icon);
+  iconPadding: theme.sizing.baseUnit * 0.3125,
+}))(ButtonIcon);
 
 /**
  * FullscreenControls displays fading player controls
@@ -201,21 +200,40 @@ class FullscreenControls extends PureComponent {
     this.closeTimeout = setTimeout(this.handleControlVisibility, 5000);
   };
 
-  renderSkipForward = ({ skip }) => (
-    <Touchable onPress={() => skip(30)}>
-      <IconMd name="skip-forward-thirty" />
-    </Touchable>
-  );
-
-  renderSkipBack = ({ skip }) => (
-    <Touchable onPress={() => skip(-30)}>
-      <IconMd name="skip-back-thirty" />
-    </Touchable>
+  renderPlayerControls = ({ isLoading, skip }) => (
+    <PlayControls>
+      <IconSm
+        onPress={this.isMuted ? this.handleUnMute : this.handleMute}
+        name={this.isMuted ? 'mute' : 'volume'}
+        disabled={isLoading}
+      />
+      <IconMd
+        onPress={() => skip(-30)}
+        name={'skip-back-thirty'}
+        disabled={isLoading}
+      />
+      <IconLg
+        onPress={this.isPlaying ? this.handlePause : this.handlePlay}
+        name={this.isPlaying ? 'pause' : 'play'}
+        disabled={isLoading}
+      />
+      <IconMd
+        onPress={() => skip(30)}
+        name={'skip-forward-thirty'}
+        disabled={isLoading}
+      />
+      <IconSm
+        onPress={this.isVideo ? this.handleHideVideo : this.handleShowVideo}
+        name={this.isVideo ? 'video' : 'video-off'}
+        disabled={isLoading}
+      />
+    </PlayControls>
   );
 
   renderFullscreenControls = ({ data: { mediaPlayer = {} } = {} }) => {
     this.isVideo = get(mediaPlayer, 'showVideo');
     this.isPlaying = mediaPlayer.isPlaying;
+    this.isMuted = mediaPlayer.muted;
 
     if (
       (mediaPlayer.isFullscreen && !this.wasFullscreen) ||
@@ -237,51 +255,21 @@ class FullscreenControls extends PureComponent {
               style={StyleSheet.absoluteFill}
               forceInset={{ top: 'always', bottom: 'always' }}
             >
-              <Touchable onPress={this.handleClose}>
+              <TouchableWithoutFeedback onPress={this.handleClose}>
                 <UpperControl>
-                  <IconSm name="arrow-down" />
+                  <IconSm name="arrow-down" onPress={this.handleClose} />
                   <Titles>
                     <Title>{get(mediaPlayer, 'currentTrack.title')}</Title>
                     <Artist>{get(mediaPlayer, 'currentTrack.artist')}</Artist>
                   </Titles>
-                  <IconSm name="empty" />
+                  <IconSm name="empty" disabled />
                 </UpperControl>
-              </Touchable>
+              </TouchableWithoutFeedback>
               <LowerControl>
                 <PlayHead>
                   <Seeker onScrubbing={this.handleOnScrubbing} />
                 </PlayHead>
-                <PlayControls>
-                  {get(mediaPlayer, 'muted') ? (
-                    <Touchable onPress={this.handleUnMute}>
-                      <IconSm name="mute" />
-                    </Touchable>
-                  ) : (
-                    <Touchable onPress={this.handleMute}>
-                      <IconSm name="volume" />
-                    </Touchable>
-                  )}
-                  <ControlsConsumer>{this.renderSkipBack}</ControlsConsumer>
-                  {mediaPlayer.isPlaying ? (
-                    <Touchable onPress={this.handlePause}>
-                      <IconLg name="pause" />
-                    </Touchable>
-                  ) : (
-                    <Touchable onPress={this.handlePlay}>
-                      <IconLg name="play" />
-                    </Touchable>
-                  )}
-                  <ControlsConsumer>{this.renderSkipForward}</ControlsConsumer>
-                  {mediaPlayer.showVideo ? (
-                    <Touchable onPress={this.handleHideVideo}>
-                      <IconSm name="video" />
-                    </Touchable>
-                  ) : (
-                    <Touchable onPress={this.handleShowVideo}>
-                      <IconSm name="video-off" />
-                    </Touchable>
-                  )}
-                </PlayControls>
+                <ControlsConsumer>{this.renderPlayerControls}</ControlsConsumer>
               </LowerControl>
             </SafeAreaView>
           </Background>
diff --git a/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.js b/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.js
index 1e86006..ecc64e7 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.js
@@ -6,6 +6,7 @@ import {
   Dimensions,
   PanResponder,
   Platform,
+  StatusBar,
 } from 'react-native';
 import PropTypes from 'prop-types';
 import { Query, withApollo } from 'react-apollo';
@@ -214,6 +215,7 @@ class FullscreenPlayer extends PureComponent {
     return (
       <Animated.View style={this.coverStyle}>
         <FullscreenMediaPlayerSafeLayout isFullscreen={isFullscreen}>
+          {isFullscreen ? <StatusBar hidden /> : null}
           {coverFlow}
         </FullscreenMediaPlayerSafeLayout>
       </Animated.View>
diff --git a/apolloschurchapp/src/ui/MediaPlayer/MiniControls.js b/apolloschurchapp/src/ui/MediaPlayer/MiniControls.js
index 54f52e4..80bc783 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/MiniControls.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/MiniControls.js
@@ -3,12 +3,13 @@ import { Platform, View, Animated, StyleSheet } from 'react-native';
 import { Mutation, Query } from 'react-apollo';
 
 import {
+  withTheme,
+  Icon,
   styled,
   Touchable,
   H5,
   H6,
-  Icon,
-  withTheme,
+  ButtonIcon,
 } from '@apollosproject/ui-kit';
 
 import Seeker from './Seeker';
@@ -97,10 +98,13 @@ const MiniSeeker = styled({
   bottom: 0,
 })(Seeker);
 
-const StyledIcon = withTheme(({ theme }) => ({
+const IconStyles = withTheme(({ theme }) => ({
   fill: theme.colors.darkTertiary,
   size: theme.sizing.baseUnit * 1.25,
-}))(Icon);
+}));
+
+const StyledIcon = IconStyles(Icon);
+const StyledButtonIcon = IconStyles(ButtonIcon);
 
 /**
  * The MiniControls renders basic track info and a play/pause button.
@@ -163,17 +167,16 @@ class MiniControls extends Component {
                 {isPlaying ? (
                   <Mutation mutation={pauseMutation}>
                     {(pause) => (
-                      <Touchable onPress={() => pause()}>
-                        <StyledIcon name="pause" />
-                      </Touchable>
+                      <StyledButtonIcon
+                        name={'pause'}
+                        onPress={() => pause()}
+                      />
                     )}
                   </Mutation>
                 ) : (
                   <Mutation mutation={playMutation}>
                     {(play) => (
-                      <Touchable onPress={() => play()}>
-                        <StyledIcon name="play" />
-                      </Touchable>
+                      <StyledButtonIcon name={'play'} onPress={() => play()} />
                     )}
                   </Mutation>
                 )}
diff --git a/apolloschurchapp/src/ui/MediaPlayer/PlayheadState.js b/apolloschurchapp/src/ui/MediaPlayer/PlayheadState.js
index 0d5b33d..ed10ed7 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/PlayheadState.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/PlayheadState.js
@@ -11,6 +11,7 @@ const defaultState = {
   currentTime: new Animated.Value(0),
   playableDuration: new Animated.Value(1),
   seekableDuration: new Animated.Value(1),
+  isLoading: true,
 };
 
 const controlState = () => {};
@@ -31,18 +32,30 @@ class ProviderWithoutApollo extends Component {
   get controlState() {
     return {
       onLoad: this.handleOnLoad,
+      onLoadStart: this.handleOnLoadStart,
+      // onBuffer: this.handleOnBuffer,
       onProgress: this.handleOnProgress,
       skip: this.skip,
+      isLoading: this.state.isLoading,
+      // isBuffering: this.state.isBuffering,
     };
   }
 
   handleOnLoad = ({ duration }) => {
-    this.setState({ duration });
+    this.setState({ duration, isLoading: false });
     this.state.currentTime.setValue(0);
     this.state.playableDuration.setValue(0);
     this.state.seekableDuration.setValue(0);
   };
 
+  handleOnLoadStart = () => {
+    this.setState({ isLoading: true });
+  };
+
+  // handleOnBuffer = ({ isBuffering }) => {
+  //   this.setState({ isBuffering }); // bool value https://github.com/react-native-community/react-native-video/blob/2c391f580702f9579a0ebd01c6e97415feda928b/ios/Video/RCTVideo.m#L636-L643
+  // };
+
   handleOnProgress = ({ currentTime, playableDuration, seekableDuration }) => {
     if (!this.seekingTo || Math.abs(this.seekingTo - currentTime) < 1) {
       // when seeking, only update `currentTime` after the seek has finished
@@ -64,6 +77,7 @@ class ProviderWithoutApollo extends Component {
   };
 
   skip = async (secondsToSkip) => {
+    if (this.lastCurrentTime === undefined) return;
     const currentTime = Math.min(
       Math.max(this.lastCurrentTime + secondsToSkip, 0),
       this.state.duration
diff --git a/apolloschurchapp/src/ui/MediaPlayer/VideoWindow.js b/apolloschurchapp/src/ui/MediaPlayer/VideoWindow.js
index 350916e..4b07c38 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/VideoWindow.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/VideoWindow.js
@@ -33,6 +33,8 @@ class VideoWindow extends PureComponent {
     }),
     onProgress: PropTypes.func,
     onLoad: PropTypes.func,
+    onLoadStart: PropTypes.func,
+    // onBuffer: PropTypes.func,
   };
 
   loadingOverlay = new Animated.Value(1);
@@ -56,25 +58,39 @@ class VideoWindow extends PureComponent {
   };
 
   handleOnLoad = ({ duration }) => {
-    Animated.spring(this.loadingOverlay, {
-      toValue: 0,
-      useNativeDriver: true,
-    }).start();
+    this.showLoadingIndicator(false);
 
     if (this.props.onLoad) this.props.onLoad({ duration });
   };
 
   handleOnLoadStart = () => {
-    Animated.spring(this.loadingOverlay, {
-      toValue: 1,
-      useNativeDriver: true,
-    });
+    if (this.props.onLoadStart) this.props.onLoadStart();
+    this.showLoadingIndicator(true);
+  };
+
+  handleOnBuffer = ({ isBuffering }) => {
+    // if (this.props.onBuffer) this.props.onBuffer({ isBuffering });
+    this.showLoadingIndicator(!isBuffering);
   };
 
   setVideoRef = (element) => {
     this.video = element;
   };
 
+  showLoadingIndicator(isLoading) {
+    if (isLoading) {
+      Animated.spring(this.loadingOverlay, {
+        toValue: 1,
+        useNativeDriver: true,
+      });
+    } else {
+      Animated.spring(this.loadingOverlay, {
+        toValue: 0,
+        useNativeDriver: true,
+      }).start();
+    }
+  }
+
   renderVideo = ({ data: { mediaPlayer = {} } = {} }) => {
     if (!get(mediaPlayer, 'currentTrack.mediaSource')) return null;
 
@@ -101,6 +117,7 @@ class VideoWindow extends PureComponent {
         resizeMode={'contain'}
         onLoadStart={this.handleOnLoadStart}
         onLoad={this.handleOnLoad}
+        // onBuffer={this.handleOnBuffer}
         onProgress={this.handleOnProgress}
         style={StyleSheet.absoluteFill}
         volume={mediaPlayer.muted ? 0 : 1}
@@ -125,7 +142,7 @@ class VideoWindow extends PureComponent {
       <Background>
         <Query query={getVideoState}>{this.renderVideo}</Query>
         <Animated.View style={this.loadingStyle}>
-          <ActivityIndicator />
+          <ActivityIndicator size={'large'} />
         </Animated.View>
       </Background>
     );
diff --git a/apolloschurchapp/src/utils/content/share.js b/apolloschurchapp/src/utils/content/share.js
index 4a52f5c..e04063d 100644
--- a/apolloschurchapp/src/utils/content/share.js
+++ b/apolloschurchapp/src/utils/content/share.js
@@ -1,12 +1,12 @@
-import { Share } from 'react-native';
+import { Platform, Share } from 'react-native';
 // import { get } from 'lodash';
 import { track, events } from 'apolloschurchapp/src/analytics';
 // import getSiteLink from './getSiteLink';
 
-const share = ({ title, message, url, id = '' }) => {
+const share = ({ title, url, id = '' }) => {
   Share.share({
     title,
-    message,
+    message: Platform.OS === 'android' ? `${title}\n${url}` : title,
     url,
   });
 
