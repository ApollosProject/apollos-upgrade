diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
index 33c14f5..8a33ffe 100644
--- a/apollos-church-api/.envExample
+++ b/apollos-church-api/.envExample
@@ -1,3 +1,4 @@
 ROCK_API=
 ROCK_TOKEN=
 ESV_KEY=
+CLOUDINARY_URL=
\ No newline at end of file
diff --git a/apollos-church-api/__mocks__/apollo-server-env.js b/apollos-church-api/__mocks__/apollo-server-env.js
index 88fdf3f..ffa940a 100644
--- a/apollos-church-api/__mocks__/apollo-server-env.js
+++ b/apollos-church-api/__mocks__/apollo-server-env.js
@@ -1,6 +1,5 @@
 import fetch from 'jest-fetch-mock';
 
-import { Constants } from '../src/connectors/rock';
 import * as apolloDatasourceMocks from './apollo-datasource-mocks';
 import * as rockMocks from './rock-api-mocks';
 
@@ -37,7 +36,7 @@ fetch.mockRockDataSourceAPI = () => {
   fetch.mockImplementation((request) => {
     let { url } = request;
     url = decodeURI(url);
-    if (!url.match(Constants.ROCK_API)) {
+    if (!url.match('https://apollosrock.newspring.cc/api')) {
       if (request.url.match('/api.scripture.api.bible/v1')) {
         return resolveWith(apolloDatasourceMocks.Scripture());
       }
@@ -140,7 +139,7 @@ fetch.mockRockDataSourceAPI = () => {
           response.status = 400;
           return Promise.reject(response);
         }
-        return resolveWith({ personId: 35 });
+        return resolveWith('35');
       }
 
       return resolveWith([rockMocks.people()]);
diff --git a/apollos-church-api/__mocks__/dotenv/config.js b/apollos-church-api/__mocks__/dotenv/config.js
new file mode 100644
index 0000000..c312228
--- /dev/null
+++ b/apollos-church-api/__mocks__/dotenv/config.js
@@ -0,0 +1 @@
+// console.log('Disable reading from `env` file in test env.');
diff --git a/apollos-church-api/__mocks__/isomorphic-fetch.js b/apollos-church-api/__mocks__/isomorphic-fetch.js
index 70a2ed0..779ea17 100644
--- a/apollos-church-api/__mocks__/isomorphic-fetch.js
+++ b/apollos-church-api/__mocks__/isomorphic-fetch.js
@@ -1,8 +1,6 @@
 import 'isomorphic-fetch';
 import fetch from 'jest-fetch-mock';
 
-import { Constants } from '../src/connectors/rock';
-
 import * as rockMocks from './rock-api-mocks';
 
 const resolveWith = (data) =>
@@ -10,7 +8,8 @@ const resolveWith = (data) =>
 
 fetch.mockRockAPI = () => {
   fetch.mockImplementation((url, options) => {
-    if (!url.match(Constants.ROCK_API)) return Promise.reject();
+    if (!url.match('https://apollosrock.newspring.cc/api'))
+      return Promise.reject();
 
     if (url.match('api/ContentChannels/\\d')) {
       return resolveWith(rockMocks.contentChannel());
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
new file mode 100644
index 0000000..6745712
--- /dev/null
+++ b/apollos-church-api/config.yml
@@ -0,0 +1,166 @@
+# This file, in conjuction with your .env file,
+# should be used to configure the apollos server.
+
+# Any values you wish to keep secret should be placed in `.env`
+# You can access those values (and any other values in your environment)
+# using the ${VARIABLE_NAME} syntax
+
+# This file should be checked into version control.
+# `.env` should NOT be checked into version control.
+
+ROCK:
+  API_URL: https://apollosrock.newspring.cc/api
+  API_TOKEN: ${ROCK_TOKEN}
+  IMAGE_URL: https://apollosrock.newspring.cc/GetImage.ashx
+ANALYTICS:
+  # Filling out these fields will automatically enable analytics tracking
+  # on the accompanying service
+  SEGMENT_KEY:
+  GA_ID:
+BIBLE_API:
+  KEY: ${BIBLE_API_KEY}
+  BIBLE_ID: "9879dbb7cfe39e4d-01"
+CLOUDINARY:
+  # Cloudinary is used to improve image loading
+  # value should look something like
+  # cloudinary://123123123:adkfnla_adASDv_adAS@test
+  URL: ${CLOUDINARY_URL}
+
+# This key holds various properties that allow our GraphQL server to map to your Rock Instance
+ROCK_MAPPINGS:
+  # Apollos will pull these content channels and expose them in the app on the discover screen.
+  DISCOVER_CONTENT_CHANNEL_IDS:
+    - 2
+    - 3
+    - 4
+    - 6
+    - 8
+  # Apollos will pull content items from these channels and expose them on the user feed
+  # However, it will not expose the channel itself.
+  FEED_CONTENT_CHANNEL_IDS:
+    - 1
+    - 2
+    - 3
+    - 4
+    - 5
+    - 6
+    - 8
+
+  # The apollos app will show scripture for specific ContentChannelTypeIds, specified here.
+  # As of right now, it will pull from the 'scriptures' field.
+  # Ignore if this doesn't apply to you.
+  DEVOTIONAL_TYPE_IDS:
+    - 1
+
+# Default mapping of field types -> ids. There's probably no reason to edit this.
+ROCK_CONSTANTS:
+  TEXT: 1
+  MULTI_SELECT: 2
+  BOOLEAN: 3
+  COLOR: 4
+  SINGLE_SELECT: 6
+  INTEGER: 7
+  PAGE_REFERENCE: 8
+  IMAGE: 10
+  DATE: 11
+  DECIMAL: 14
+  DEFINED_TYPE: 15
+  DEFINED_VALUE: 16
+  PERSON: 18
+  HTML: 20
+  MEMO: 21
+  GROUP_TYPES: 22
+  GROUP: 23
+  CAMPUSES: 26
+  ENTITY_TYPE: 29
+  CAMPUS: 30
+  EMAIL_TEMPLATE: 31
+  FILE: 32
+  GROUP_TYPE: 33
+  KEY_VALUE_LIST: 34
+  BINARY_FILE_TYPE: 35
+  WORKFLOW_TYPE: 36
+  BINARY_FILE: 37
+  FINANCIAL_ACCOUNT: 38
+  FINANCIAL_ACCOUNTS: 39
+  COMPONENT: 40
+  COMPONENTS: 41
+  CATEGORIES: 42
+  GROUP_ROLE: 43
+  CATEGORY: 44
+  LOCATION: 45
+  DATE_RANGE: 46
+  DECIMAL_RANGE: 47
+  INTEGER_RANGE: 48
+  TIME: 49
+  GROUP_LOCATION_TYPE: 50
+  CODE_EDITOR: 51
+  PERSON_BADGES: 52
+  SITE: 53
+  COMMUNICATION_TEMPLATE: 54
+  DAY_OF_WEEK: 55
+  DAYS_OF_WEEK: 56
+  REMOTE_AUTHS: 57
+  COMPARISON: 58
+  METRIC_ENTITY: 59
+  WORKFLOW_ACTIVITY: 60
+  WORKFLOW_ATTRIBUTE: 61
+  METRICS: 62
+  ENTITY: 63
+  METRIC_CATEGORIES: 64
+  WORKFLOW_TEXT_OR_ATTRIBUTE: 65
+  SLIDING_DATE_RANGE: 66
+  GROUP_TYPE_GROUP: 67
+  SECURITY_ROLE: 68
+  VALUE_LIST: 69
+  CURRENCY: 70
+  EMAIL: 71
+  URL_LINK: 72
+  WORKFLOW_TYPES: 73
+  ATTRIBUTE: 74
+  SCHEDULES: 75
+  CONTENT_CHANNEL: 76
+  AUDIO_FILE: 77
+  AUDIO_URL: 78
+  VIDEO_FILE: 79
+  VIDEO_URL: 80
+  ENCRYPTED_TEXT: 81
+  FILTER_DATE: 82
+  DATE_TIME: 83
+  DEFINED_VALUE_RANGE: 84
+  RATING: 85
+  SYSTEM_EMAIL: 86
+  FINANCIAL_GATEWAY: 87
+  GROUP_AND_ROLE: 88
+  NOTE_TYPE: 89
+  NOTE_TYPES: 90
+  EVENT_CALENDAR: 91
+  EVENT_ITEM: 92
+  CONNECTION_ACTIVITY_TYPE: 93
+  CONNECTION_OPPORTUNITY: 94
+  CONNECTION_REQUEST: 95
+  CONNECTION_STATE: 96
+  CONNECTION_STATUS: 97
+  CONNECTION_TYPE: 98
+  CONNECTION_TYPES: 99
+  MERGE_TEMPLATE: 100
+  RANGE_SLIDER: 101
+  BINARY_FILE_TYPES: 102
+  MARKDOWN: 103
+  DATA_VIEW: 104
+  PHONE_NUMBER: 105
+  SCHEDULE: 106
+  LAVA_COMMANDS: 107
+  ADDRESS: 108
+  BENEVOLENCE_REQUEST: 109
+  CONTENT_CHANNEL_TYPES: 110
+  WORKFLOW: 111
+  SSN: 112
+  MATRIX: 113
+  LAVA: 114
+  DATA_VIEWS: 115
+  COMMUNICATION_PREFERENCE: 116
+  INTERACTION_CHANNEL: 117
+  GROUP_MEMBER: 118
+  TIME_ZONE: 119
+  LABEL: 120
\ No newline at end of file
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index d3eb5b0..214c975 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,11 +1,11 @@
 {
   "name": "apollos-church-api",
-  "version": "0.6.0",
+  "version": "0.6.1",
   "private": true,
-  "main": "src/index.js",
+  "main": "lib/index.js",
   "scripts": {
     "start": "if test \"$NOW_ENV\" = \"true\" ; then yarn start:now ; else yarn start:dev ; fi",
-    "start:dev": "nodemon ./src/index.js --exec babel-node",
+    "start:dev": "nodemon ./src/index.js --exec babel-node --delay 2",
     "start:now": "babel-node ./src/index.js",
     "start:prod": "NODE_ENV=production node ./lib/index.js",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
@@ -22,16 +22,21 @@
   "jest": {
     "collectCoverage": true,
     "testMatch": [
-      "<rootDir>/**/__tests__/**/*.{js,jsx,mjs}",
-      "<rootDir>/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
+      "<rootDir>/src/**/__tests__/**/*.{js,jsx,mjs}",
+      "<rootDir>/src/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
     ],
     "testEnvironment": "node"
   },
   "dependencies": {
+    "@apollosproject/config": "file:../apollos-config",
+    "@apollosproject/data-connector-rock-auth": "file:../apollos-data-connector-rock-auth",
+    "@apollosproject/rock-apollo-data-source": "file:../apollos-rock-apollo-data-source",
+    "@apollosproject/server-core": "file:../apollos-server-core",
     "analytics-node": "^3.3.0",
     "apollo-datasource-rest": "0.1.1",
     "apollo-server": "^2.0.5",
     "casual": "1.5.19",
+    "cloudinary": "^1.11.0",
     "color": "3.0.0",
     "crypto": "1.0.1",
     "dataloader": "1.4.0",
@@ -51,7 +56,7 @@
   "devDependencies": {
     "@babel/cli": "7.0.0-beta.47",
     "@babel/core": "7.0.0-beta.47",
-    "babel-preset-apollos": "link:../babel-preset-apollos",
+    "babel-preset-apollos": "file:../babel-preset-apollos",
     "codecov": "3.0.2",
     "coveralls": "3.0.1",
     "jest": "23.0.0",
diff --git a/apollos-church-api/src/config.js b/apollos-church-api/src/config.js
new file mode 100644
index 0000000..59a4853
--- /dev/null
+++ b/apollos-church-api/src/config.js
@@ -0,0 +1,7 @@
+import path from 'path';
+import dotenv from 'dotenv/config'; // eslint-disable-line
+import ApollosConfig from '@apollosproject/config';
+
+ApollosConfig.loadYaml({
+  configPath: path.join(__dirname, '..', 'config.yml'),
+});
diff --git a/apollos-church-api/src/connectors/__tests__/cloudinary.tests.js b/apollos-church-api/src/connectors/__tests__/cloudinary.tests.js
new file mode 100644
index 0000000..10b8391
--- /dev/null
+++ b/apollos-church-api/src/connectors/__tests__/cloudinary.tests.js
@@ -0,0 +1,51 @@
+import ApollosConfig from '@apollosproject/config';
+import withCloudinary, { config } from '../cloudinary';
+
+const originalUrl =
+  'https://apollosrock.newspring.cc/GetImage.ashx?guid=f54b0db0-95f5-44ad-b8f2-8bcd1b23cfdb';
+
+describe('Cloudinary', () => {
+  beforeEach(() => {
+    // reset cloudinary config
+    ApollosConfig.loadJs({
+      CLOUDINARY: {
+        URL:
+          'cloudinary://123456789012345:abcdeghijklmnopqrstuvwxyz12@n07t21i7',
+      },
+    });
+    config();
+  });
+  afterEach(() => {
+    ApollosConfig.loadJs({
+      CLOUDINARY: {
+        URL: null,
+      },
+    });
+    config();
+  });
+  it('must return the URL if CLOUDINARY_URL is not specified', () => {
+    ApollosConfig.loadJs({
+      CLOUDINARY: {
+        URL: null,
+      },
+    });
+    config();
+
+    const url = withCloudinary(originalUrl);
+
+    expect(url).toEqual(originalUrl);
+  });
+  it('must return a cloudinary fetch URL if CLOUDINARY_URL is defined', () => {
+    const url = withCloudinary(originalUrl);
+
+    expect(url).toEqual(
+      'https://res.cloudinary.com/n07t21i7/image/fetch/c_limit,f_auto,w_1600/https://apollosrock.newspring.cc/GetImage.ashx%3Fguid%3Df54b0db0-95f5-44ad-b8f2-8bcd1b23cfdb'
+    );
+  });
+  it('must not double parse a cloudinary url.', () => {
+    const url = withCloudinary(originalUrl);
+    const doubledParsed = withCloudinary(url);
+
+    expect(url).toEqual(doubledParsed);
+  });
+});
diff --git a/apollos-church-api/src/connectors/cloudinary.js b/apollos-church-api/src/connectors/cloudinary.js
new file mode 100644
index 0000000..93f4a02
--- /dev/null
+++ b/apollos-church-api/src/connectors/cloudinary.js
@@ -0,0 +1,39 @@
+import cloudinary from 'cloudinary';
+import ApollosConfig from '@apollosproject/config';
+
+const { CLOUDINARY } = ApollosConfig;
+// Cloudinary picks up settings from `env`,
+// no way to pass straight into config if using `CLOUDINARY_URL format`
+// Exposed as Utiliy function to reset config (mostly used in tests)
+export function config() {
+  process.env.CLOUDINARY_URL = CLOUDINARY.URL;
+  cloudinary.config(true);
+  cloudinary.config({
+    private_cdn: false,
+    secure: true,
+  });
+}
+// we always want to setup the config on boot.
+config();
+
+const cleanUrl = (url) => url.replace(/:(443|80)/, '');
+
+export default function withCloudinary(_url = '', options) {
+  const url = cleanUrl(_url);
+  // If we call this function twice, only the first transform will be applied
+  if (url.startsWith('https://res.cloudinary.com')) {
+    return url;
+  }
+  if (CLOUDINARY.URL) {
+    return cloudinary.url(url, {
+      type: 'fetch',
+      fetch_format: 'auto',
+      width: '1600',
+      crop: 'limit',
+      ...options,
+    });
+  }
+  return url;
+}
+
+export { cloudinary };
diff --git a/apollos-church-api/src/connectors/rock/.Rhistory b/apollos-church-api/src/connectors/rock/.Rhistory
new file mode 100644
index 0000000..e69de29
diff --git a/apollos-church-api/src/connectors/rock/RequestBuilder.js b/apollos-church-api/src/connectors/rock/RequestBuilder.js
deleted file mode 100644
index 6c60a65..0000000
--- a/apollos-church-api/src/connectors/rock/RequestBuilder.js
+++ /dev/null
@@ -1,123 +0,0 @@
-import withQuery from 'with-query';
-
-// Simple request builder for querying the Rock API.
-// Would probably work against most OData APIs, but built to just
-// tackle the specific needs of Apollos on top of Rock.
-export default class RockRequestBuilder {
-  constructor({ connector, resource, defaultOptions = null }) {
-    this.connector = connector;
-    this.resource = resource;
-    if (defaultOptions) {
-      this.query = defaultOptions;
-    }
-  }
-
-  query = {};
-
-  transforms = [];
-
-  options = {};
-
-  get path() {
-    let path = [this.resource];
-    if (this.resourceId) path.push(this.resourceId);
-    path = path.join('/');
-    path = withQuery(path, this.query);
-    return path;
-  }
-
-  /**
-   * Sends a GET request to the server, resolves with results
-   * @returns promise
-   */
-  get = ({ options = {}, body = {} } = {}) =>
-    this.connector
-      .get(this.path, body, { ...options, ...this.options })
-      .then((results) => {
-        if (this.transforms.length)
-          return this.transforms.reduce(
-            (current, transformer) => transformer(current),
-            results
-          );
-        return results;
-      });
-
-  /**
-   * Find a single resource by ID
-   */
-  find = (id) => {
-    this.resourceId = id;
-    return this;
-  };
-
-  /**
-   * Filter resources by an odata string
-   */
-  filter = (filter) => {
-    const key = '$filter';
-    if (this.query[key]) {
-      this.query[key] = `(${this.query[key]}) or (${filter})`;
-    } else {
-      this.query[key] = filter;
-    }
-    return this;
-  };
-
-  cache = ({ ttl }) => {
-    this.options.ttl = ttl;
-    return this;
-  };
-
-  /**
-   * Expands resources inline
-   */
-  expand = (expand) => {
-    let { $expand } = this.query;
-    if (!$expand) {
-      $expand = [];
-    } else {
-      $expand = $expand.split(',');
-    }
-    $expand.push(expand);
-    this.query.$expand = $expand.join(',');
-    return this;
-  };
-
-  /**
-   * Order resources by a given attribute and direction
-   * @param {string} name The name of the attribute to order by
-   * @param {string} direction The direction to order results by. Defaults to 'asc'
-   */
-  orderBy = (name, direction = 'asc') => {
-    this.query.$orderby = `${name} ${direction}`;
-    return this;
-  };
-
-  /**
-   * Only return the top N results. Used for pagination
-   * @param {number} top
-   */
-  top = (top) => {
-    this.query.$top = top;
-    return this;
-  };
-
-  /**
-   * Skip the first N results. Used for pagination
-   * @param {number} skip
-   */
-  skip = (skip) => {
-    this.query.$skip = skip;
-    return this;
-  };
-
-  /**
-   * Transform the shape of the results.
-   * This is ran _after_ data is requested and not
-   * affected by other methods that are chained to the request
-   */
-  transform = (func) => {
-    this.transforms.push(func);
-    return this;
-  };
-}
diff --git a/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js b/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js
deleted file mode 100644
index 876db73..0000000
--- a/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js
+++ /dev/null
@@ -1,53 +0,0 @@
-import { createCursor } from '../../../utils/cursor';
-import RestDataSource from '../data-source';
-import RequestBuilder from '../RequestBuilder';
-
-describe('RestDataSource', () => {
-  it('constructs', () => {
-    expect(new RestDataSource()).toBeTruthy();
-  });
-
-  describe('the paginate method', () => {
-    let get;
-    let dataSource;
-    beforeEach(() => {
-      get = jest.fn();
-      get.mockReturnValue(new Promise((resolve) => resolve([1, 2, 3])));
-      dataSource = new RestDataSource();
-      dataSource.request = (resource) =>
-        new RequestBuilder({
-          resource,
-          connector: { get },
-        });
-    });
-
-    it('paginates a cursor', () => {
-      const cursor = dataSource.request('TestResource');
-      const result = dataSource.paginate({ cursor });
-      expect(result).toBeTruthy();
-      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=20&%24skip=0');
-    });
-
-    it('skips pages', () => {
-      const cursor = dataSource.request('TestResource');
-      const after = createCursor({ position: 25 });
-      const result = dataSource.paginate({ cursor, args: { after } });
-      expect(result).toBeTruthy();
-      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=20&%24skip=26');
-    });
-
-    it('throws on an invalid `after` cursor', () => {
-      const cursor = dataSource.request('TestResource');
-      const after = createCursor({ position: 25 });
-      const result = dataSource.paginate({ cursor, args: { after } });
-      expect(result).rejects.toThrow();
-    });
-
-    it('sets page size', () => {
-      const cursor = dataSource.request('TestResource');
-      const result = dataSource.paginate({ cursor, args: { first: 2 } });
-      expect(result).toBeTruthy();
-      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=2&%24skip=0');
-    });
-  });
-});
diff --git a/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js b/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js
deleted file mode 100644
index 56dd747..0000000
--- a/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js
+++ /dev/null
@@ -1,104 +0,0 @@
-import RequestBuilder from '../RequestBuilder';
-
-describe('RequestBuilder', () => {
-  let request;
-  let connector;
-  let get;
-
-  beforeEach(() => {
-    get = jest.fn((...args) => new Promise((resolve) => resolve(args)));
-    connector = { get };
-    request = new RequestBuilder({
-      connector,
-      resource: 'SomeResource',
-    });
-  });
-
-  it('constructs', () => {
-    expect(request).toBeTruthy();
-  });
-
-  it('gets requests', () => {
-    expect(request.get()).resolves.toMatchSnapshot();
-  });
-
-  it('finds by id', () => {
-    expect(request.find(1).get()).resolves.toMatchSnapshot();
-  });
-
-  it('filters', () => {
-    expect(
-      request.filter('Something eq SomethingElse').get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('chains multiple filters', () => {
-    expect(
-      request
-        .filter('A eq Ab')
-        .filter('B eq Bc')
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('expands', () => {
-    expect(request.expand('Puppies').get()).resolves.toMatchSnapshot();
-  });
-
-  it('chains multiple expands', () => {
-    expect(
-      request
-        .expand('Puppies')
-        .expand('Cats')
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('chains mixed-format expands', () => {
-    expect(
-      request
-        .expand('Dogs/Puppies')
-        .expand('Cats,Kittens')
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('allows for pagination', () => {
-    expect(
-      request
-        .top(2)
-        .skip(5)
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('caches', () => {
-    expect(request.cache({ ttl: 20 }).get()).resolves.toMatchSnapshot();
-  });
-
-  it('orders', () => {
-    expect(request.orderBy('MyField').get()).resolves.toMatchSnapshot();
-  });
-
-  it('orders in custom order', () => {
-    expect(request.orderBy('MyField', 'desc').get()).resolves.toMatchSnapshot();
-  });
-
-  it('transforms result shapes', () => {
-    get = jest.fn(() => new Promise((resolve) => resolve({ a: 'yo' })));
-    connector = { get };
-    request = new RequestBuilder({
-      connector,
-      resource: 'SomeResource',
-    });
-
-    expect(
-      request
-        .transform((input) => {
-          expect(input).toMatchSnapshot();
-          return { b: 'neigh' };
-        })
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/connectors/rock/constants.js b/apollos-church-api/src/connectors/rock/constants.js
deleted file mode 100644
index eeb9bae..0000000
--- a/apollos-church-api/src/connectors/rock/constants.js
+++ /dev/null
@@ -1,121 +0,0 @@
-import url from 'url';
-
-export const {
-  ROCK_API = 'https://apollosrock.newspring.cc/api',
-  ROCK_TOKEN = 'some-rock-token',
-} = process.env;
-
-export const GET_IMAGE = url.resolve(ROCK_API, 'GetImage.ashx');
-
-export const FIELD_TYPES = {
-  TEXT: 1,
-  MULTI_SELECT: 2,
-  BOOLEAN: 3,
-  COLOR: 4,
-  SINGLE_SELECT: 6,
-  INTEGER: 7,
-  PAGE_REFERENCE: 8,
-  IMAGE: 10,
-  DATE: 11,
-  DECIMAL: 14,
-  DEFINED_TYPE: 15,
-  DEFINED_VALUE: 16,
-  PERSON: 18,
-  HTML: 20,
-  MEMO: 21,
-  GROUP_TYPES: 22,
-  GROUP: 23,
-  CAMPUSES: 26,
-  ENTITY_TYPE: 29,
-  CAMPUS: 30,
-  EMAIL_TEMPLATE: 31,
-  FILE: 32,
-  GROUP_TYPE: 33,
-  KEY_VALUE_LIST: 34,
-  BINARY_FILE_TYPE: 35,
-  WORKFLOW_TYPE: 36,
-  BINARY_FILE: 37,
-  FINANCIAL_ACCOUNT: 38,
-  FINANCIAL_ACCOUNTS: 39,
-  COMPONENT: 40,
-  COMPONENTS: 41,
-  CATEGORIES: 42,
-  GROUP_ROLE: 43,
-  CATEGORY: 44,
-  LOCATION: 45,
-  DATE_RANGE: 46,
-  DECIMAL_RANGE: 47,
-  INTEGER_RANGE: 48,
-  TIME: 49,
-  GROUP_LOCATION_TYPE: 50,
-  CODE_EDITOR: 51,
-  PERSON_BADGES: 52,
-  SITE: 53,
-  COMMUNICATION_TEMPLATE: 54,
-  DAY_OF_WEEK: 55,
-  DAYS_OF_WEEK: 56,
-  REMOTE_AUTHS: 57,
-  COMPARISON: 58,
-  METRIC_ENTITY: 59,
-  WORKFLOW_ACTIVITY: 60,
-  WORKFLOW_ATTRIBUTE: 61,
-  METRICS: 62,
-  ENTITY: 63,
-  METRIC_CATEGORIES: 64,
-  WORKFLOW_TEXT_OR_ATTRIBUTE: 65,
-  SLIDING_DATE_RANGE: 66,
-  GROUP_TYPE_GROUP: 67,
-  SECURITY_ROLE: 68,
-  VALUE_LIST: 69,
-  CURRENCY: 70,
-  EMAIL: 71,
-  URL_LINK: 72,
-  WORKFLOW_TYPES: 73,
-  ATTRIBUTE: 74,
-  SCHEDULES: 75,
-  CONTENT_CHANNEL: 76,
-  AUDIO_FILE: 77,
-  AUDIO_URL: 78,
-  VIDEO_FILE: 79,
-  VIDEO_URL: 80,
-  ENCRYPTED_TEXT: 81,
-  FILTER_DATE: 82,
-  DATE_TIME: 83,
-  DEFINED_VALUE_RANGE: 84,
-  RATING: 85,
-  SYSTEM_EMAIL: 86,
-  FINANCIAL_GATEWAY: 87,
-  GROUP_AND_ROLE: 88,
-  NOTE_TYPE: 89,
-  NOTE_TYPES: 90,
-  EVENT_CALENDAR: 91,
-  EVENT_ITEM: 92,
-  CONNECTION_ACTIVITY_TYPE: 93,
-  CONNECTION_OPPORTUNITY: 94,
-  CONNECTION_REQUEST: 95,
-  CONNECTION_STATE: 96,
-  CONNECTION_STATUS: 97,
-  CONNECTION_TYPE: 98,
-  CONNECTION_TYPES: 99,
-  MERGE_TEMPLATE: 100,
-  RANGE_SLIDER: 101,
-  BINARY_FILE_TYPES: 102,
-  MARKDOWN: 103,
-  DATA_VIEW: 104,
-  PHONE_NUMBER: 105,
-  SCHEDULE: 106,
-  LAVA_COMMANDS: 107,
-  ADDRESS: 108,
-  BENEVOLENCE_REQUEST: 109,
-  CONTENT_CHANNEL_TYPES: 110,
-  WORKFLOW: 111,
-  SSN: 112,
-  MATRIX: 113,
-  LAVA: 114,
-  DATA_VIEWS: 115,
-  COMMUNICATION_PREFERENCE: 116,
-  INTERACTION_CHANNEL: 117,
-  GROUP_MEMBER: 118,
-  TIME_ZONE: 119,
-  LABEL: 120,
-};
diff --git a/apollos-church-api/src/connectors/rock/data-source.js b/apollos-church-api/src/connectors/rock/data-source.js
deleted file mode 100644
index 046c063..0000000
--- a/apollos-church-api/src/connectors/rock/data-source.js
+++ /dev/null
@@ -1,82 +0,0 @@
-/* eslint-disable class-methods-use-this */
-import { RESTDataSource } from 'apollo-datasource-rest';
-import { mapKeys, mapValues, camelCase } from 'lodash';
-import { fetch } from 'apollo-server-env';
-
-import { createCursor, parseCursor } from '../../utils/cursor';
-
-import { ROCK_API, ROCK_TOKEN } from './constants'; // eslint-disable-line import/named
-import RequestBuilder from './RequestBuilder';
-
-export default class RockApolloDataSource extends RESTDataSource {
-  // Subclasses can set this to true to force all requests to turn extended responses.
-  expanded = false;
-
-  baseURL = ROCK_API;
-
-  get rockToken() {
-    if (process.env.NODE_ENV === 'test') {
-      return 'some-rock-token';
-    }
-    return ROCK_TOKEN;
-  }
-
-  nodeFetch = fetch;
-
-  didReceiveResponse(response, request) {
-    // Can't use await b/c of `super` keyword
-    return super
-      .didReceiveResponse(response, request)
-      .then((parsedResponse) => this.normalize(parsedResponse));
-  }
-
-  willSendRequest(request) {
-    request.headers.set('Authorization-Token', ROCK_TOKEN);
-    request.headers.set('user-agent', 'Apollos');
-    request.headers.set('Content-Type', 'application/json');
-  }
-
-  normalize = (data) => {
-    if (Array.isArray(data)) return data.map(this.normalize);
-    if (typeof data !== 'object') return data;
-    const normalizedValues = mapValues(data, this.normalize);
-    return mapKeys(normalizedValues, (value, key) => camelCase(key));
-  };
-
-  request(resource = this.resource) {
-    return new RequestBuilder({
-      resource,
-      connector: this,
-      defaultOptions: this.expanded ? { loadAttributes: 'expanded' } : null,
-    });
-  }
-
-  async paginate({ cursor, args: { after, first = 20 } = {} }) {
-    let skip = 0;
-    if (after) {
-      const parsed = parseCursor(after);
-      if (parsed && Object.hasOwnProperty.call(parsed, 'position')) {
-        skip = parsed.position + 1;
-      } else {
-        throw new Error(`An invalid 'after' cursor was provided: ${after}`);
-      }
-    }
-
-    const edges = cursor
-      ? cursor
-          .top(first)
-          .skip(skip)
-          .transform((result) =>
-            result.map((node, i) => ({
-              node,
-              cursor: createCursor({ position: i + skip }),
-            }))
-          )
-          .get()
-      : [];
-
-    return {
-      edges,
-    };
-  }
-}
diff --git a/apollos-church-api/src/connectors/rock/index.js b/apollos-church-api/src/connectors/rock/index.js
deleted file mode 100644
index cc53a6f..0000000
--- a/apollos-church-api/src/connectors/rock/index.js
+++ /dev/null
@@ -1,3 +0,0 @@
-import * as Constants from './constants';
-
-export { Constants }; // eslint-disable-line import/prefer-default-export
diff --git a/apollos-church-api/src/connectors/rock/rock-constants.js b/apollos-church-api/src/connectors/rock/rock-constants.js
index 59884e2..083f072 100644
--- a/apollos-church-api/src/connectors/rock/rock-constants.js
+++ b/apollos-church-api/src/connectors/rock/rock-constants.js
@@ -1,5 +1,6 @@
-/* eslint-disable no-console */
-import RockApolloDataSource from './data-source';
+// TODO - eliminate this file through more robust configuration.
+
+import RockApolloDataSource from '@apollosproject/rock-apollo-data-source';
 
 const mapApollosNameToRockName = (name) => {
   switch (name) {
@@ -29,7 +30,6 @@ export default class RockConstants extends RockApolloDataSource {
       .cache({ ttl: 86400 })
       .get();
     if (objects.length) {
-      console.log('Found', objects[0]);
       return objects[0];
     }
     const objectId = await this.post(`/${model}`, objectAttributes);
diff --git a/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js b/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js
index c70a06c..efe9b7b 100644
--- a/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js
+++ b/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js
@@ -1,6 +1,7 @@
 import { mockUA, mockSend, mockEvent } from 'universal-analytics';
 import Analytics, { mockTrack, mockIdentify } from 'analytics-node';
 import { AuthenticationError } from 'apollo-server';
+import ApollosConfig from '@apollosproject/config';
 import DataSource from '../data-source';
 import RockAnalytics from '../interfaces/rock_interactions';
 
@@ -41,17 +42,13 @@ const buildDataSource = (Auth = AuthWithUser) => {
 };
 
 describe('Analytics Data Source', () => {
-  const OLD_ENV = process.env;
-
   beforeEach(() => {
     clearMocks();
-    process.env = { ...OLD_ENV };
-
-    process.env.APOLLOS_SEGMENT_KEY = 'something';
-    process.env.APOLLOS_GA_KEY = 'something-else';
+    const ANALYTICS = { SEGMENT_KEY: 'something', GA_ID: 'something-else' };
+    ApollosConfig.loadJs({ ANALYTICS });
   });
   afterEach(() => {
-    process.env = OLD_ENV;
+    ApollosConfig.loadJs({ ANALYTICS: { SEGMENT_KEY: null, GA_ID: null } });
   });
 
   it('must accept arbitrary interfaces', async () => {
@@ -188,7 +185,9 @@ describe('Analytics Data Source', () => {
     });
 
     it('must not track segment without a key', async () => {
-      delete process.env.APOLLOS_SEGMENT_KEY;
+      ApollosConfig.loadJs({
+        ANALYTICS: { GA_ID: 'something-else', SEGMENT_KEY: null },
+      });
       const analytics = buildDataSource();
       const result = await analytics.track({
         eventName: 'View Content',
@@ -202,7 +201,9 @@ describe('Analytics Data Source', () => {
     });
 
     it('must not track google analytics without a key', async () => {
-      delete process.env.APOLLOS_GA_KEY;
+      ApollosConfig.loadJs({
+        ANALYTICS: { SEGMENT_KEY: 'something', GA_ID: null },
+      });
       const analytics = buildDataSource();
       const result = await analytics.track({
         eventName: 'View Content',
diff --git a/apollos-church-api/src/data/analytics/data-source.js b/apollos-church-api/src/data/analytics/data-source.js
index 5077b64..43ee542 100644
--- a/apollos-church-api/src/data/analytics/data-source.js
+++ b/apollos-church-api/src/data/analytics/data-source.js
@@ -1,8 +1,10 @@
 import { AuthenticationError } from 'apollo-server';
 import { DataSource } from 'apollo-datasource';
+import ApollosConfig from '@apollosproject/config';
 import GAInterface from './interfaces/ga';
 import SegmentInterface from './interfaces/segment';
 
+const { ANALYTICS } = ApollosConfig;
 // Utility function to convert GQL array of key/values to Object.
 const mapArrayToObject = (array = []) =>
   array.reduce((accum, { field, value }) => {
@@ -14,11 +16,11 @@ const mapArrayToObject = (array = []) =>
 // Add interfaces to this function to get picked up automatically.
 export const getInterfaces = () => {
   const interfaces = [];
-  if (process.env.APOLLOS_SEGMENT_KEY) {
-    interfaces.push(new SegmentInterface(process.env.APOLLOS_SEGMENT_KEY));
+  if (ANALYTICS.SEGMENT_KEY) {
+    interfaces.push(new SegmentInterface(ANALYTICS.SEGMENT_KEY));
   }
-  if (process.env.APOLLOS_GA_KEY) {
-    interfaces.push(new GAInterface(process.env.APOLLOS_GA_KEY));
+  if (ANALYTICS.GA_ID) {
+    interfaces.push(new GAInterface(ANALYTICS.GA_ID));
   }
   return interfaces;
 };
diff --git a/apollos-church-api/src/data/auth/__tests__/index.tests.js b/apollos-church-api/src/data/auth/__tests__/index.tests.js
deleted file mode 100644
index 9d70095..0000000
--- a/apollos-church-api/src/data/auth/__tests__/index.tests.js
+++ /dev/null
@@ -1,240 +0,0 @@
-import { graphql } from 'graphql';
-import { fetch } from 'apollo-server-env';
-import { makeExecutableSchema } from 'apollo-server';
-
-import { getTestContext } from '../../../utils/testUtils';
-import { testSchema as typeDefs, resolvers } from '../..';
-import { generateToken, registerToken } from '../token';
-
-// we import the root-level schema and resolver so we test the entire integration:
-
-describe('Auth', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    fetch.resetMocks();
-    fetch.mockRockDataSourceAPI();
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    context = getTestContext();
-  });
-
-  it('logs in a user', async () => {
-    const query = `
-      mutation {
-        authenticate(identity: "some-identity", password: "good") {
-          user {
-            id
-            profile {
-              id
-            }
-          }
-        }
-      }
-    `;
-    const rootValue = {};
-
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('throws invalid credentials error on bad password', async () => {
-    const query = `
-      mutation {
-        authenticate(identity: "some-identity", password: "bad") {
-          user {
-            id
-          }
-        }
-      }
-    `;
-    const rootValue = {};
-
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  describe('currentUser query', () => {
-    const query = `
-      query {
-        currentUser {
-          id
-          profile {
-            id
-          }
-        }
-      }
-    `;
-    it('requires you to be logged in', async () => {
-      const rootValue = {};
-
-      const result = await graphql(schema, query, rootValue, context);
-      expect(result).toMatchSnapshot();
-    });
-
-    it('queries current user when logged in', async () => {
-      const rootValue = {};
-      const token = generateToken({ cookie: 'some-cookie', sessionId: 123 });
-
-      context = getTestContext({
-        req: {
-          headers: { authorization: token },
-        },
-      });
-
-      const result = await graphql(schema, query, rootValue, context);
-      expect(result).toMatchSnapshot();
-    });
-
-    it('logs a user out without a sessionId', async () => {
-      const rootValue = {};
-      const token = generateToken({ cookie: 'some-cookie' });
-      context = getTestContext({
-        req: {
-          headers: { authorization: token },
-        },
-      });
-
-      const result = await graphql(schema, query, rootValue, context);
-      expect(result).toMatchSnapshot();
-    });
-
-    it('queries current user when logged in', async () => {
-      const rootValue = {};
-      try {
-        const { userToken, rockCookie } = registerToken('asdfasdfasdf');
-        context.userToken = userToken;
-        context.rockCookie = rockCookie;
-
-        await graphql(schema, query, rootValue, context);
-      } catch (e) {
-        expect(e.message).toEqual('Invalid token');
-      }
-    });
-  });
-
-  it('registers an auth token and passes the cookie on requests to rock', async () => {
-    const token = generateToken({ cookie: 'some-cookie', sessionId: 123 });
-    const secondContext = getTestContext({
-      req: {
-        headers: { authorization: token },
-      },
-    });
-    const query = `
-      query {
-        currentUser {
-          id
-        }
-      }
-    `;
-    const rootValue = {};
-    await graphql(schema, query, rootValue, secondContext);
-    expect(fetch.mock.calls[0][0].headers).toMatchSnapshot();
-  });
-
-  describe('Change Password', () => {
-    it('throws error without a current user', async () => {
-      try {
-        await context.dataSources.Auth.changePassword({
-          password: 'newPassword',
-        });
-      } catch (e) {
-        expect(e.message).toEqual('Must be logged in');
-      }
-    });
-
-    it('generates a new token', async () => {
-      const { userToken, rockCookie } = registerToken(
-        generateToken({ cookie: 'some-cookie' })
-      );
-      context.userToken = userToken;
-      context.rockCookie = rockCookie;
-      const {
-        rockCookie: newCookie,
-        token: newToken,
-      } = await context.dataSources.Auth.changePassword({
-        password: 'good',
-      });
-      expect(newCookie).toEqual('some cookie');
-      expect(typeof newToken).toEqual('string');
-    });
-  });
-
-  describe('User Registration', () => {
-    it('checks if user is already registered', async () => {
-      const result = await context.dataSources.Auth.personExists({
-        identity: 'isaac.hardy@newspring.cc',
-      });
-
-      expect(result).toEqual(true);
-    });
-
-    it('throws error in personExists', async () => {
-      const result = await context.dataSources.Auth.personExists({
-        identity: 'fake',
-      });
-
-      expect(result).toEqual(false);
-    });
-
-    it('creates user profile', async () => {
-      const result = await context.dataSources.Auth.createUserProfile({
-        email: 'isaac.hardy@newspring.cc',
-      });
-
-      expect(result).toEqual({ personId: 35 });
-    });
-
-    it('throws error in createUserProfile', async () => {
-      try {
-        await context.dataSources.Auth.createUserProfile({
-          email: '',
-        });
-      } catch (e) {
-        expect(e.message).toEqual('Unable to create profile!');
-      }
-    });
-
-    it('creates user login', async () => {
-      const result = await context.dataSources.Auth.createUserLogin({
-        email: 'isaac.hardy@newspring.cc',
-        password: 'password',
-        personId: 35,
-      });
-
-      expect(result).toEqual({ id: 21 });
-    });
-
-    it('throws error in createUserLogin', async () => {
-      try {
-        await context.dataSources.Auth.createUserLogin({
-          email: '',
-          password: 'password',
-          personId: 35,
-        });
-      } catch (e) {
-        expect(e.message).toEqual('Unable to create user login!');
-      }
-    });
-
-    it('creates new registration', async () => {
-      const query = `
-        mutation {
-          registerPerson(email: "hello.world@earth.org", password: "good") {
-            user {
-              id
-              profile {
-                id
-                email
-              }
-            }
-          }
-        }
-      `;
-
-      const rootValue = {};
-
-      const result = await graphql(schema, query, rootValue, context);
-      expect(result).toMatchSnapshot();
-    });
-  });
-});
diff --git a/apollos-church-api/src/data/auth/data-source.js b/apollos-church-api/src/data/auth/data-source.js
deleted file mode 100644
index cf81fe0..0000000
--- a/apollos-church-api/src/data/auth/data-source.js
+++ /dev/null
@@ -1,150 +0,0 @@
-import { AuthenticationError } from 'apollo-server';
-import { fetch, Request } from 'apollo-server-env';
-import moment from 'moment';
-
-import RockApolloDataSource from '../../connectors/rock/data-source';
-import { generateToken, registerToken } from './token';
-
-export default class AuthDataSource extends RockApolloDataSource {
-  resource = 'Auth';
-
-  rockCookie = null;
-
-  userToken = null;
-
-  getCurrentPerson = async ({ cookie } = { cookie: null }) => {
-    const { rockCookie } = this.context;
-    const userCookie = cookie || rockCookie;
-    if (userCookie) {
-      const request = await this.request('People/GetCurrentPerson').get({
-        options: { headers: { cookie: userCookie } },
-      });
-      return request;
-    }
-    throw new AuthenticationError('Must be logged in');
-  };
-
-  fetchUserCookie = async (Username, Password) => {
-    try {
-      // We use `new Response` rather than string/options b/c if conforms more closely with ApolloRESTDataSource
-      // (makes mocking in tests WAY easier to use `new Request` as an input in both places)
-      const response = await fetch(
-        new Request(`${this.baseURL}/Auth/Login`, {
-          method: 'POST',
-          body: JSON.stringify({
-            Username,
-            Password,
-          }),
-          headers: {
-            'Content-Type': 'Application/Json',
-          },
-        })
-      );
-      if (response.status >= 400) throw new AuthenticationError();
-      const cookie = response.headers.get('set-cookie');
-      return cookie;
-    } catch (err) {
-      throw new AuthenticationError('Invalid Credentials');
-    }
-  };
-
-  createSession = async ({ cookie }) => {
-    const currentUser = await this.getCurrentPerson({ cookie });
-    return this.post('/InteractionSessions', {
-      PersonAliasId: currentUser.primaryAliasId,
-    });
-  };
-
-  authenticate = async ({ identity, password }) => {
-    try {
-      const cookie = await this.fetchUserCookie(identity, password);
-      const sessionId = await this.createSession({ cookie });
-      const token = generateToken({ cookie, sessionId });
-      const { userToken, rockCookie } = registerToken(token);
-      this.context.rockCookie = rockCookie;
-      this.context.userToken = userToken;
-      this.context.sessionId = sessionId;
-      return { token, rockCookie };
-    } catch (e) {
-      throw e;
-    }
-  };
-
-  personExists = async ({ identity }) => {
-    const hasUserName = await this.request(
-      `/UserLogins?$filter=UserName eq '${identity}'`
-    ).get();
-
-    if (hasUserName.length) {
-      return true;
-    }
-    return false;
-  };
-
-  createUserProfile = async (props = {}) => {
-    try {
-      const { email } = props;
-
-      return await this.post('/People', {
-        Email: email,
-        IsSystem: false, // Required by Rock
-        Gender: 0, // Required by Rock
-      });
-    } catch (err) {
-      throw new Error('Unable to create profile!');
-    }
-  };
-
-  createUserLogin = async (props = {}) => {
-    try {
-      const { email, password, personId } = props;
-
-      return await this.post('/UserLogins', {
-        PersonId: personId,
-        EntityTypeId: 27, // A default setting we use in Rock-person-creation-flow
-        UserName: email,
-        PlainTextPassword: password,
-        LastLoginDateTime: `${moment().toISOString()}`,
-      });
-    } catch (err) {
-      throw new Error('Unable to create user login!');
-    }
-  };
-
-  changePassword = async ({ password }) => {
-    const currentUser = await this.getCurrentPerson();
-    const { email, id } = currentUser;
-    const logins = await this.request('/UserLogins')
-      .filter(`UserName eq '${email}'`)
-      .get();
-
-    if (logins.length > 0) {
-      await this.delete(`/UserLogins/${logins[0].id}`);
-    }
-    await this.createUserLogin({
-      personId: id,
-      email,
-      password,
-    });
-    return this.authenticate({
-      identity: email,
-      password,
-    });
-  };
-
-  registerPerson = async ({ email, password }) => {
-    const personExists = await this.personExists({ identity: email });
-    if (personExists) throw new Error('User already exists!');
-
-    const { personId } = await this.createUserProfile({ email });
-
-    await this.createUserLogin({
-      email,
-      password,
-      personId,
-    });
-
-    const token = await this.authenticate({ identity: email, password });
-    return token;
-  };
-}
diff --git a/apollos-church-api/src/data/auth/index.js b/apollos-church-api/src/data/auth/index.js
deleted file mode 100644
index 0500a2c..0000000
--- a/apollos-church-api/src/data/auth/index.js
+++ /dev/null
@@ -1,50 +0,0 @@
-import { gql } from 'apollo-server';
-import { createGlobalId } from '../node';
-
-// export { default as model } from './model';
-export { default as dataSource } from './data-source';
-
-export const schema = gql`
-  type AuthenticatedUser {
-    id: ID!
-    profile: Person
-  }
-
-  type Authentication {
-    user: AuthenticatedUser
-    token: String
-  }
-
-  extend type Mutation {
-    authenticate(identity: String!, password: String!): Authentication
-    changePassword(password: String!): Authentication
-    registerPerson(email: String!, password: String!): Authentication
-  }
-
-  extend type Query {
-    currentUser: AuthenticatedUser
-  }
-`;
-
-export const resolver = {
-  Query: {
-    currentUser: (root, args, { dataSources }) =>
-      dataSources.Auth.getCurrentPerson(),
-  },
-  AuthenticatedUser: {
-    id: ({ id }, args, context, { parentType }) =>
-      createGlobalId(id, parentType.name),
-    profile: (authUser) => authUser,
-  },
-  Authentication: {
-    user: (root, args, { dataSources }) => dataSources.Auth.getCurrentPerson(),
-  },
-  Mutation: {
-    authenticate: (root, { identity, password }, { dataSources }) =>
-      dataSources.Auth.authenticate({ identity, password }),
-    changePassword: (root, { password }, { dataSources }) =>
-      dataSources.Auth.changePassword({ password }),
-    registerPerson: (root, args, { dataSources }) =>
-      dataSources.Auth.registerPerson(args),
-  },
-};
diff --git a/apollos-church-api/src/data/auth/token.js b/apollos-church-api/src/data/auth/token.js
deleted file mode 100644
index ad562ab..0000000
--- a/apollos-church-api/src/data/auth/token.js
+++ /dev/null
@@ -1,23 +0,0 @@
-import { AuthenticationError } from 'apollo-server';
-import jwt from 'jsonwebtoken';
-
-const secret = process.env.SECRET || 'ASea$2gadj#asd0';
-
-export const parseToken = (token) => jwt.verify(token, secret);
-
-export const registerToken = (token) => {
-  try {
-    const { cookie, sessionId } = parseToken(token);
-
-    return {
-      userToken: token,
-      rockCookie: cookie,
-      sessionId,
-    };
-  } catch (e) {
-    throw new AuthenticationError('Invalid token');
-  }
-};
-
-export const generateToken = (params) =>
-  jwt.sign({ ...params }, secret, { expiresIn: '60d' });
diff --git a/apollos-church-api/src/data/bible/_tests_/resolver.tests.js b/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
index dc35d17..d445602 100644
--- a/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
+++ b/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
@@ -19,6 +19,7 @@ describe('Scripture', () => {
     const query = `
       query {
         scripture (query: "SNG.1.1") {
+          id
           html
           reference
           copyright
diff --git a/apollos-church-api/src/data/bible/data-source.js b/apollos-church-api/src/data/bible/data-source.js
index 6ef562b..d0ef9f7 100644
--- a/apollos-church-api/src/data/bible/data-source.js
+++ b/apollos-church-api/src/data/bible/data-source.js
@@ -1,18 +1,28 @@
 import { RESTDataSource } from 'apollo-datasource-rest';
+import ApollosConfig from '@apollosproject/config';
+
+const { BIBLE_API } = ApollosConfig;
 
 export default class Scripture extends RESTDataSource {
   resource = 'Scripture';
 
   baseURL = 'https://api.scripture.api.bible/v1/bibles/';
 
-  token = process.env.BIBLE_API_KEY;
+  token = BIBLE_API.KEY;
 
   willSendRequest(request) {
     request.headers.set('api-key', `${this.token}`);
   }
 
   async getScripture(query) {
-    const bibleId = process.env.BIBLE_ID;
+    const bibleId = BIBLE_API.BIBLE_ID;
     return this.get(`${bibleId}/search?query=${query}`);
   }
+
+  // In the future, we can use this field to handle content that returns multiple
+  // "scriptures". Like references across several different books of the bible.
+  async getScriptures(query) {
+    const scripture = await this.getScripture(query);
+    return [scripture];
+  }
 }
diff --git a/apollos-church-api/src/data/bible/index.js b/apollos-church-api/src/data/bible/index.js
index 5a77220..61a10a8 100644
--- a/apollos-church-api/src/data/bible/index.js
+++ b/apollos-church-api/src/data/bible/index.js
@@ -1,6 +1,5 @@
 import schema from './schema';
 import resolver from './resolver';
-import model from './model';
 import dataSource from './data-source';
 
-export { schema, resolver, model, dataSource };
+export { schema, resolver, dataSource };
diff --git a/apollos-church-api/src/data/bible/model.js b/apollos-church-api/src/data/bible/model.js
deleted file mode 100644
index 49b466c..0000000
--- a/apollos-church-api/src/data/bible/model.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export default class {
-  resource = 'Scripture';
-}
diff --git a/apollos-church-api/src/data/bible/resolver.js b/apollos-church-api/src/data/bible/resolver.js
index d2c0df4..01d6711 100644
--- a/apollos-church-api/src/data/bible/resolver.js
+++ b/apollos-church-api/src/data/bible/resolver.js
@@ -6,6 +6,7 @@ export default {
       dataSources.Scripture.getScripture(query),
   },
   Scripture: {
+    id: ({ data: { passages } = {} }) => get(passages, '[0].id'),
     html: ({ data: { passages } = {} }) => get(passages, '[0].content'),
     reference: ({ data: { passages } = {} }) => get(passages, '[0].reference'),
     copyright: ({ data: { passages } = {} }) => get(passages, '[0].copyright'),
diff --git a/apollos-church-api/src/data/bible/schema.js b/apollos-church-api/src/data/bible/schema.js
index 5b4a81f..82e3fe7 100644
--- a/apollos-church-api/src/data/bible/schema.js
+++ b/apollos-church-api/src/data/bible/schema.js
@@ -2,8 +2,9 @@ import { gql } from 'apollo-server';
 
 export default gql`
   type Scripture {
-    reference: String
+    id: String
     html: String
+    reference: String
     copyright: String
   }
 
diff --git a/apollos-church-api/src/data/content-channels/__tests__/model.tests.js b/apollos-church-api/src/data/content-channels/__tests__/model.tests.js
index 393f8ad..3c397e4 100644
--- a/apollos-church-api/src/data/content-channels/__tests__/model.tests.js
+++ b/apollos-church-api/src/data/content-channels/__tests__/model.tests.js
@@ -1,6 +1,15 @@
+import ApollosConfig from '@apollosproject/config';
 import { buildGetMock } from '../../../utils/testUtils';
 import ContentChannelDataSource from '../data-source';
 
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+});
+
 describe('ContentChannelModel', () => {
   it('constructs', () => {
     expect(new ContentChannelDataSource()).toBeTruthy();
diff --git a/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js b/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js
index a228d13..4438d33 100644
--- a/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js
+++ b/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js
@@ -1,11 +1,24 @@
 import { graphql } from 'graphql';
 import { fetch } from 'apollo-server-env';
 import { makeExecutableSchema } from 'apollo-server';
-import { createGlobalId } from '../../node/model';
+import { createGlobalId } from '@apollosproject/server-core';
+import ApollosConfig from '@apollosproject/config';
+
 import { getTestContext } from '../../../utils/testUtils';
 // we import the root-level schema and resolver so we test the entire integration:
 import { testSchema as typeDefs, resolvers } from '../..';
 
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+  ROCK_MAPPINGS: {
+    DISCOVER_CONTENT_CHANNEL_IDS: [2, 3, 4, 6, 8],
+  },
+});
+
 const contentChannelFragment = `
   fragment ContentChannelFragment on ContentChannel {
     id
diff --git a/apollos-church-api/src/data/content-channels/data-source.js b/apollos-church-api/src/data/content-channels/data-source.js
index d225c44..68f53e2 100644
--- a/apollos-church-api/src/data/content-channels/data-source.js
+++ b/apollos-church-api/src/data/content-channels/data-source.js
@@ -1,4 +1,7 @@
-import RockApolloDataSource from '../../connectors/rock/data-source';
+import RockApolloDataSource from '@apollosproject/rock-apollo-data-source';
+import ApollosConfig from '@apollosproject/config';
+
+const { ROCK_MAPPINGS } = ApollosConfig;
 
 export default class ContentChannel extends RockApolloDataSource {
   resource = 'ContentChannels';
@@ -10,11 +13,11 @@ export default class ContentChannel extends RockApolloDataSource {
 
   getRootChannels = () =>
     this.request()
-      .filter('Id eq 2')
-      .filter('Id eq 3')
-      .filter('Id eq 4')
-      .filter('Id eq 6')
-      .filter('Id eq 8')
+      .filter(
+        ROCK_MAPPINGS.DISCOVER_CONTENT_CHANNEL_IDS.map(
+          (channelId) => `(Id eq ${channelId})`
+        ).join(' or ')
+      )
       .get();
 
   getFromId = (id) =>
diff --git a/apollos-church-api/src/data/content-channels/index.js b/apollos-church-api/src/data/content-channels/index.js
index fe61ec4..397cf36 100644
--- a/apollos-church-api/src/data/content-channels/index.js
+++ b/apollos-church-api/src/data/content-channels/index.js
@@ -1,5 +1,5 @@
 import { gql } from 'apollo-server';
-import { createGlobalId } from '../node';
+import { createGlobalId } from '@apollosproject/server-core';
 
 // export { default as model } from './model';
 export { default as dataSource } from './data-source';
diff --git a/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js b/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js
index 878c940..3caf10c 100644
--- a/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js
+++ b/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js
@@ -1,8 +1,17 @@
 import { fetch } from 'apollo-server-env';
+import ApollosConfig from '@apollosproject/config';
 import { buildGetMock } from '../../../utils/testUtils';
 
 import ContentItemsDataSource from '../data-source';
 
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+});
+
 describe('ContentItemsModel', () => {
   beforeEach(() => {
     fetch.resetMocks();
diff --git a/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js b/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js
index 6295a2d..e3d64d9 100644
--- a/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js
+++ b/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js
@@ -2,10 +2,28 @@ import { graphql } from 'graphql';
 import { fetch } from 'apollo-server-env';
 import { makeExecutableSchema } from 'apollo-server';
 
+import { createGlobalId } from '@apollosproject/server-core';
+import ApollosConfig from '@apollosproject/config';
 import { testSchema as typeDefs, resolvers } from '../..';
+import { resolver } from '..';
 import { getTestContext } from '../../../utils/testUtils';
 // we import the root-level schema and resolver so we test the entire integration:
-import { createGlobalId } from '../../node/model';
+
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+  ROCK_CONSTANTS: {
+    IMAGE: 10,
+    AUDIO_FILE: 77,
+    VIDEO_FILE: 79,
+  },
+  ROCK_MAPPINGS: {
+    FEED_CONTENT_CHANNEL_IDS: [1, 2, 3, 4, 6, 8],
+  },
+});
 
 const contentItemFragment = `
   fragment ContentItemFragment on UniversalContentItem {
@@ -56,6 +74,10 @@ const contentItemFragment = `
         }
         cursor
       }
+      pageInfo {
+        startCursor
+        endCursor
+      }
     }
     parentChannel {
       id
@@ -199,3 +221,30 @@ describe('UniversalContentItem', () => {
     expect(result).toMatchSnapshot();
   });
 });
+
+const { ContentItemsConnection } = resolver;
+
+describe('ContentItemsConnection resolvee', () => {
+  it('builds a pageInfo object with items', async () => {
+    const edges = Promise.resolve([
+      { cursor: `item-0` },
+      { cursor: `item-1` },
+      { cursor: `item-2` },
+    ]);
+    const { startCursor, endCursor } = await ContentItemsConnection.pageInfo({
+      edges,
+    });
+
+    expect(startCursor).toEqual('item-0');
+    expect(endCursor).toEqual('item-2');
+  });
+  it('builds a pageInfo object without items', async () => {
+    const edges = [];
+    const { startCursor, endCursor } = await ContentItemsConnection.pageInfo({
+      edges,
+    });
+
+    expect(startCursor).toEqual(null);
+    expect(endCursor).toEqual(null);
+  });
+});
diff --git a/apollos-church-api/src/data/content-items/data-source.js b/apollos-church-api/src/data/content-items/data-source.js
index 6d458da..1f42bde 100644
--- a/apollos-church-api/src/data/content-items/data-source.js
+++ b/apollos-church-api/src/data/content-items/data-source.js
@@ -1,4 +1,7 @@
-import RockApolloDataSource from '../../connectors/rock/data-source';
+import RockApolloDataSource from '@apollosproject/rock-apollo-data-source';
+import ApollosConfig from '@apollosproject/config';
+
+const { ROCK_MAPPINGS } = ApollosConfig;
 
 export default class ContentItem extends RockApolloDataSource {
   resource = 'ContentChannelItems';
@@ -64,14 +67,12 @@ export default class ContentItem extends RockApolloDataSource {
   };
 
   byUserFeed = () =>
-    this.request() // TODO: load these IDs dynamically
-      .filter(`ContentChannelId eq 1`)
-      .filter(`ContentChannelId eq 2`)
-      .filter(`ContentChannelId eq 3`)
-      .filter(`ContentChannelId eq 4`)
-      .filter(`ContentChannelId eq 5`)
-      .filter(`ContentChannelId eq 6`)
-      .filter(`ContentChannelId eq 8`)
+    this.request()
+      .filter(
+        ROCK_MAPPINGS.FEED_CONTENT_CHANNEL_IDS.map(
+          (id) => `(ContentChannelId eq ${id})`
+        ).join(' or ')
+      )
       .orderBy('StartDateTime', 'desc');
 
   byContentChannelId = (id) =>
diff --git a/apollos-church-api/src/data/content-items/index.js b/apollos-church-api/src/data/content-items/index.js
index 94b92e4..e6eec8a 100644
--- a/apollos-church-api/src/data/content-items/index.js
+++ b/apollos-church-api/src/data/content-items/index.js
@@ -5,10 +5,12 @@ import omitBy from 'lodash/fp/omitBy';
 import pickBy from 'lodash/fp/pickBy';
 import mapValues from 'lodash/fp/mapValues';
 import values from 'lodash/fp/values';
+import { createGlobalId } from '@apollosproject/server-core';
+import ApollosConfig from '@apollosproject/config';
 import sanitizeHtml from '../../utils/sanitize-html';
-import { Constants } from '../../connectors/rock';
-import { createGlobalId } from '../node';
+import { withEdgePagination } from '../pagination/utils';
 
+const { ROCK_CONSTANTS, ROCK_MAPPINGS } = ApollosConfig;
 const mapValuesWithKey = mapValues.convert({ cap: false });
 
 // export { default as model } from './model';
@@ -89,7 +91,7 @@ export const schema = gql`
     sharing: SharableContentItem
     theme: Theme
     isLiked: Boolean
-    scriptures: Scripture
+    scriptures: [Scripture]
   }
 
   type Term {
@@ -105,7 +107,7 @@ export const schema = gql`
   type ContentItemsConnection {
     edges: [ContentItemsConnectionEdge]
     # TODO totalCount: Int
-    # TODO pageInfo: PaginationInfo
+    pageInfo: PaginationInfo
   }
 
   type ContentItemsConnectionEdge {
@@ -119,25 +121,26 @@ export const schema = gql`
   }
 `;
 
+// Empty fields in rock default to `''`
 const hasScripture = ({ attributeValues }) =>
-  get(attributeValues, 'scriptures.value') != null;
+  get(attributeValues, 'scriptures.value', '') !== '';
 
 const isImage = ({ key, attributeValues, attributes }) =>
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.IMAGE ||
+  attributes[key].fieldTypeId === ROCK_CONSTANTS.IMAGE ||
   (key.toLowerCase().includes('image') &&
     typeof attributeValues[key].value === 'string' &&
     attributeValues[key].value.startsWith('http')); // looks like an image url
 
 const isVideo = ({ key, attributeValues, attributes }) =>
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.VIDEO_FILE ||
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.VIDEO_URL ||
+  attributes[key].fieldTypeId === ROCK_CONSTANTS.VIDEO_FILE ||
+  attributes[key].fieldTypeId === ROCK_CONSTANTS.VIDEO_URL ||
   (key.toLowerCase().includes('video') &&
     typeof attributeValues[key].value === 'string' &&
     attributeValues[key].value.startsWith('http')); // looks like a video url
 
 const isAudio = ({ key, attributeValues, attributes }) =>
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.AUDIO_FILE ||
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.AUDIO_URL ||
+  attributes[key].fieldTypeId === ROCK_CONSTANTS.AUDIO_FILE ||
+  attributes[key].fieldTypeId === ROCK_CONSTANTS.AUDIO_URL ||
   (key.toLowerCase().includes('audio') &&
     typeof attributeValues[key].value === 'string' &&
     attributeValues[key].value.startsWith('http')); // looks like an audio url
@@ -251,11 +254,8 @@ export const defaultContentItemResolvers = {
     return null;
   },
 
-  // This resolver function is temporary, and is just used to get a seed to generate a random theme from
-  theme: (root) => {
-    if (![6, 5, 4].includes(root.contentChannelId)) return null; // todo: don't generate a theme for these content channel ids
-    return root.guid; // todo: this `guid` is just being used as a seed to generate colors for now
-  },
+  theme: () => null, // todo: integrate themes from Rock
+
   isLiked: async ({ id, isLiked }, args, { dataSources }) => {
     if (isLiked != null) return isLiked;
 
@@ -281,46 +281,67 @@ export const resolver = {
     getAllLikedContent: async (root, args, { dataSources }) => {
       // Get All Interactions from current user
       const interactions = await dataSources.Interactions.getForContentItems();
-
-      const likeCounts = {};
-
       // Iterate over the interactions and determine which pieces of content
       // has more likes than unlikes
-      interactions.forEach(({ operation, relatedEntityId }) => {
-        if (!likeCounts[relatedEntityId]) {
-          likeCounts[relatedEntityId] = 0;
-        }
-        if (operation === 'Like') {
-          likeCounts[relatedEntityId] += 1;
-        }
-        if (operation === 'Unlike') {
-          likeCounts[relatedEntityId] -= 1;
-        }
-      });
-
-      const itemIds = [];
-      Object.keys(likeCounts).forEach((relatedEntityId) => {
-        if (likeCounts[relatedEntityId] > 0) {
-          itemIds.push(relatedEntityId);
-        }
-      });
 
-      // Grab content related to user's interactions
-      const getUserContentFromInteractions = itemIds.map((id) =>
-        dataSources.ContentItem.getFromId(id)
+      const mostRecentlyLiked = (interactionDateTime, itemInteractions) =>
+        new Date(interactionDateTime) > new Date(itemInteractions.lastLiked)
+          ? interactionDateTime
+          : itemInteractions.lastLiked;
+
+      const likeCounts = interactions.reduce(
+        (agg, { operation, relatedEntityId, interactionDateTime }) => {
+          if (!agg[relatedEntityId]) {
+            // eslint-disable-next-line no-param-reassign
+            agg[relatedEntityId] = { count: 0, lastLiked: null };
+          }
+
+          const itemInteractions = agg[relatedEntityId];
+          if (operation === 'Like') {
+            itemInteractions.count += 1;
+            // We need to keep track of the time it was most recently liked.
+            // we will use this when sorting.
+            itemInteractions.lastLiked = mostRecentlyLiked(
+              interactionDateTime,
+              itemInteractions
+            );
+          }
+          if (operation === 'Unlike') {
+            itemInteractions.count -= 1;
+          }
+          return agg;
+        },
+        {}
       );
 
+      // Get items with more likes than unlikes
+      // Like counts can be undefined if you call [].reduce(func, {})
+      const itemIds = Object.keys(likeCounts || {})
+        .map((relatedEntityId) => {
+          if (likeCounts[relatedEntityId].count > 0) {
+            return relatedEntityId;
+          }
+          return null;
+        })
+        .filter((i) => i !== null);
+
+      // Grab content related to user's interactions
       const resolveUserContentFromInteractions = await Promise.all(
-        getUserContentFromInteractions
+        itemIds.map((id) => dataSources.ContentItem.getFromId(id))
       );
 
-      // Determine the isLiked value on contentitems and create an obj that we
-      // can merge with our main set of data later
-      const calculateIsLikedOnContentItems = resolveUserContentFromInteractions.map(
+      // Doing this ensures we don't perform a seperate request
+      // for `isLiked` if requested through gql.
+      const itemsWithIsLiked = resolveUserContentFromInteractions.map(
         (item) => ({ ...item, isLiked: true })
       );
 
-      return calculateIsLikedOnContentItems;
+      // Sorts by most recently liked first.
+      const sortedIsLikedContentItems = itemsWithIsLiked.sort(
+        (a, b) => likeCounts[a.id].lastLiked < likeCounts[b.id].lastLiked
+      );
+
+      return sortedIsLikedContentItems;
     },
   },
   DevotionalContentItem: {
@@ -328,7 +349,7 @@ export const resolver = {
     scriptures: ({ attributeValues }, args, { dataSources }) => {
       const reference = get(attributeValues, 'scriptures.value');
       if (reference && reference != null) {
-        return dataSources.Scripture.getScripture(reference);
+        return dataSources.Scripture.getScriptures(reference);
       }
       return null;
     },
@@ -351,8 +372,11 @@ export const resolver = {
   },
   ContentItem: {
     ...defaultContentItemResolvers,
-    __resolveType: ({ attributeValues }) => {
-      if (hasScripture({ attributeValues })) {
+    __resolveType: ({ attributeValues, contentChannelTypeId }) => {
+      if (
+        hasScripture({ attributeValues }) &&
+        ROCK_MAPPINGS.DEVOTIONAL_TYPE_IDS.includes(contentChannelTypeId)
+      ) {
         return 'DevotionalContentItem';
       }
       return 'UniversalContentItem';
@@ -363,4 +387,7 @@ export const resolver = {
     title: ({ title }) => title,
     message: () => '',
   },
+  ContentItemsConnection: {
+    pageInfo: withEdgePagination,
+  },
 };
diff --git a/apollos-church-api/src/data/family/__tests__/data-source.tests.js b/apollos-church-api/src/data/family/__tests__/data-source.tests.js
index 81c3fa7..fe5c3ac 100644
--- a/apollos-church-api/src/data/family/__tests__/data-source.tests.js
+++ b/apollos-church-api/src/data/family/__tests__/data-source.tests.js
@@ -1,6 +1,15 @@
+import ApollosConfig from '@apollosproject/config';
 import { buildGetMock } from '../../../utils/testUtils';
 import DataSource from '../data-source';
 
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+});
+
 describe('Family Data Source', () => {
   it('must fetch a users location w/ family location', async () => {
     const dataSource = new DataSource();
diff --git a/apollos-church-api/src/data/family/__tests__/schema.tests.js b/apollos-church-api/src/data/family/__tests__/schema.tests.js
index 6c2f511..c7bd1a5 100644
--- a/apollos-church-api/src/data/family/__tests__/schema.tests.js
+++ b/apollos-church-api/src/data/family/__tests__/schema.tests.js
@@ -2,12 +2,21 @@ import { graphql } from 'graphql';
 import { fetch } from 'apollo-server-env';
 import { makeExecutableSchema } from 'apollo-server';
 
+import ApollosConfig from '@apollosproject/config';
+import { generateToken } from '@apollosproject/data-connector-rock-auth';
 import { testSchema as typeDefs, resolvers } from '../..';
-import { generateToken } from '../../auth/token';
 // we import the root-level schema and resolver so we test the entire integration:
 import { getTestContext } from '../../../utils/testUtils';
 
-describe('Person', () => {
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+});
+
+describe('Family', () => {
   let schema;
   let context;
   beforeEach(() => {
diff --git a/apollos-church-api/src/data/family/data-source.js b/apollos-church-api/src/data/family/data-source.js
index 6494ee7..fca4046 100644
--- a/apollos-church-api/src/data/family/data-source.js
+++ b/apollos-church-api/src/data/family/data-source.js
@@ -1,4 +1,4 @@
-import RockApolloDataSource from '../../connectors/rock/data-source';
+import RockApolloDataSource from '@apollosproject/rock-apollo-data-source';
 
 export default class Family extends RockApolloDataSource {
   resource = 'Family';
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 17aea27..c5d2880 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -1,13 +1,13 @@
 import { gql } from 'apollo-server';
-import { mapValues, values, merge, compact } from 'lodash';
 
+import { createApolloServerConfig } from '@apollosproject/server-core';
+
+import * as Auth from '@apollosproject/data-connector-rock-auth';
 import RockConstants from '../connectors/rock/rock-constants';
-import * as Node from './node';
 import * as ContentChannel from './content-channels';
 import * as ContentItem from './content-items';
 import * as Person from './people';
 import * as Media from './media';
-import * as Auth from './auth';
 import * as LiveStream from './live';
 import * as Theme from './theme';
 import * as Scripture from './bible';
@@ -15,9 +15,9 @@ import * as Interactions from './interactions';
 import * as Sharable from './sharable';
 import * as Analytics from './analytics';
 import * as Family from './family';
+import * as Pagination from './pagination';
 
 const data = {
-  Node,
   ContentChannel,
   ContentItem,
   Person,
@@ -31,31 +31,20 @@ const data = {
   Sharable,
   Analytics,
   Family,
+  Pagination,
+  UniversalContentItem: {
+    dataSource: ContentItem.dataSource,
+  }, // alias
+  DevotionalContentItem: {
+    dataSource: ContentItem.dataSource,
+  }, // alias
 };
 
-export const schema = [
-  gql`
-    type Query {
-      _placeholder: Boolean # needed, empty schema defs aren't supported
-    }
-
-    type Mutation {
-      _placeholder: Boolean # needed, empty schema defs aren't supported
-    }
-  `,
-  ...compact(values(data).map((datum) => datum.schema)),
-];
-
-export const resolvers = merge(
-  ...compact(values(data).map((datum) => datum.resolver))
+const { dataSources, resolvers, schema, context } = createApolloServerConfig(
+  data
 );
 
-export const dataSources = mapValues(data, (datum) => datum.dataSource);
-
-export const models = {
-  ...mapValues(data, (datum) => datum.model),
-  UniversalContentItem: ContentItem.model, // alias
-};
+export { dataSources, resolvers, schema, context };
 
 // the upload Scalar is added
 export const testSchema = [
diff --git a/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js b/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
index 8fcba7a..52448a3 100644
--- a/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
+++ b/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
@@ -1,12 +1,21 @@
 import { graphql } from 'graphql';
 import { fetch } from 'apollo-server-env';
 import { makeExecutableSchema } from 'apollo-server';
+import ApollosConfig from '@apollosproject/config';
+import { createGlobalId } from '@apollosproject/server-core';
 
+import { generateToken } from '@apollosproject/data-connector-rock-auth';
 import { getTestContext } from '../../../utils/testUtils';
-import { createGlobalId } from '../../node/model';
-import { generateToken } from '../../auth/token';
 import { testSchema as typeDefs, resolvers } from '../..';
 
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+});
+
 describe('Interactions', () => {
   let schema;
   let context;
diff --git a/apollos-church-api/src/data/interactions/data-source.js b/apollos-church-api/src/data/interactions/data-source.js
index de31e93..9729abe 100644
--- a/apollos-church-api/src/data/interactions/data-source.js
+++ b/apollos-church-api/src/data/interactions/data-source.js
@@ -1,6 +1,6 @@
 import { AuthenticationError } from 'apollo-server';
-import { parseGlobalId } from '../node';
-import RockApolloDataSource from '../../connectors/rock/data-source';
+import { parseGlobalId } from '@apollosproject/server-core';
+import RockApolloDataSource from '@apollosproject/rock-apollo-data-source';
 
 export default class Interactions extends RockApolloDataSource {
   resource = 'Interactions';
diff --git a/apollos-church-api/src/data/interactions/resolver.js b/apollos-church-api/src/data/interactions/resolver.js
index ef5c4ec..b22937f 100644
--- a/apollos-church-api/src/data/interactions/resolver.js
+++ b/apollos-church-api/src/data/interactions/resolver.js
@@ -1,4 +1,4 @@
-import { createGlobalId } from '../node/model';
+import { createGlobalId } from '@apollosproject/server-core';
 
 export default {
   Mutation: {
diff --git a/apollos-church-api/src/data/live/index.js b/apollos-church-api/src/data/live/index.js
index 5a77220..61a10a8 100644
--- a/apollos-church-api/src/data/live/index.js
+++ b/apollos-church-api/src/data/live/index.js
@@ -1,6 +1,5 @@
 import schema from './schema';
 import resolver from './resolver';
-import model from './model';
 import dataSource from './data-source';
 
-export { schema, resolver, model, dataSource };
+export { schema, resolver, dataSource };
diff --git a/apollos-church-api/src/data/live/model.js b/apollos-church-api/src/data/live/model.js
deleted file mode 100644
index 68710b2..0000000
--- a/apollos-church-api/src/data/live/model.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export default class LiveStream {
-  resource = 'LiveStream';
-}
diff --git a/apollos-church-api/src/data/media/index.js b/apollos-church-api/src/data/media/index.js
index 423651d..2abc0de 100644
--- a/apollos-church-api/src/data/media/index.js
+++ b/apollos-church-api/src/data/media/index.js
@@ -1,7 +1,8 @@
 import { gql } from 'apollo-server';
-import { Constants } from '../../connectors/rock';
+import ApollosConfig from '@apollosproject/config';
+import withCloudinary from '../../connectors/cloudinary';
 
-export { default as model } from './model';
+const { ROCK } = ApollosConfig;
 
 export const schema = gql`
   interface Media {
@@ -84,12 +85,12 @@ export const resolver = {
   ImageMediaSource: {
     uri: ({ uri = '' }) => {
       if (!uri || typeof uri !== 'string') return null;
-      if (uri.startsWith('http')) return uri;
-      if (uri.startsWith('//')) return `https:${uri}`;
+      if (uri.startsWith('http')) return withCloudinary(uri);
+      if (uri.startsWith('//')) return withCloudinary(`https:${uri}`);
 
       // Handle Rock GUID:
       if (uri.split('-').length === 5)
-        return `${Constants.GET_IMAGE}?guid=${uri}`;
+        return withCloudinary(`${ROCK.IMAGE_URL}?guid=${uri}`);
 
       return uri;
     },
diff --git a/apollos-church-api/src/data/media/model.js b/apollos-church-api/src/data/media/model.js
deleted file mode 100644
index c59adde..0000000
--- a/apollos-church-api/src/data/media/model.js
+++ /dev/null
@@ -1 +0,0 @@
-export default class MediaModel {}
diff --git a/apollos-church-api/src/data/node/__tests__/model.js b/apollos-church-api/src/data/node/__tests__/model.js
deleted file mode 100644
index ae59c1f..0000000
--- a/apollos-church-api/src/data/node/__tests__/model.js
+++ /dev/null
@@ -1,126 +0,0 @@
-import casual from 'casual';
-import Node, { createGlobalId, parseGlobalId } from '../model';
-
-describe('Node', () => {
-  it('`createGlobalId` should take two arguments and return a string', () => {
-    const id = casual.word;
-    const type = casual.word;
-
-    expect(typeof createGlobalId(id, type)).toEqual('string');
-  });
-
-  it('`createGlobalId` should be decodeable by `parseGlobalId`', () => {
-    const id = casual.word;
-    const __type = casual.word;
-    const globalId = createGlobalId(id, __type);
-
-    expect(parseGlobalId(globalId)).toEqual({
-      __type,
-      id,
-    });
-  });
-
-  it('`parseGlobalId` should take a global id and return the type and id', () => {
-    const id = casual.word;
-    const __type = casual.word;
-    const globalId = createGlobalId(id, __type);
-
-    expect(parseGlobalId(globalId)).toEqual({
-      __type,
-      id,
-    });
-  });
-
-  it('`parseGlobalId` should throw an error if ID is invalid', () => {
-    expect(() => parseGlobalId('blah-blah')).toThrow();
-  });
-
-  it('Node class should parse an encoded id to get the type to resolve', async () => {
-    const id = casual.word;
-    const __type = 'Test';
-    const globalId = createGlobalId(id, __type);
-
-    const dataSources = {
-      Test: {
-        getFromId(_id) {
-          expect(_id).toEqual(id);
-          return {};
-        },
-      },
-    };
-
-    const node = new Node();
-    node.get(globalId, dataSources);
-  });
-
-  it("Node class should throw error if it can't find a matching model", async () => {
-    const id = casual.word;
-    const __type = 'NoModel';
-    const globalId = createGlobalId(id, __type);
-
-    const node = new Node({});
-    expect(node.get(globalId)).rejects.toBeDefined();
-  });
-
-  it("Node class doesn't assign __type if model returns falsey", async () => {
-    const id = casual.word;
-    const __type = 'Test';
-    const globalId = createGlobalId(id, __type);
-
-    const dataSources = {
-      Test: {
-        getFromId() {
-          return '';
-        },
-      },
-    };
-
-    const node = new Node(dataSources);
-    const record = node.get(globalId);
-    expect(record).not.toHaveProperty('__type');
-  });
-
-  it('Node class should return data from the models `getFromId` method', async () => {
-    const id = casual.word;
-    const __type = 'Test';
-    const globalId = createGlobalId(id, __type);
-    const data = {
-      test: casual.word,
-    };
-
-    const dataSources = {
-      Test: {
-        getFromId() {
-          return Promise.resolve(data);
-        },
-      },
-    };
-
-    const node = new Node();
-    const result = await node.get(globalId, dataSources);
-
-    expect(result.test).toEqual(data.test);
-  });
-
-  it('Node class should attach the __type to the resulting data', async () => {
-    const id = casual.word;
-    const __type = 'Test';
-    const globalId = createGlobalId(id, __type);
-    const data = {
-      test: casual.word,
-    };
-
-    const dataSources = {
-      Test: {
-        getFromId() {
-          return Promise.resolve(data);
-        },
-      },
-    };
-
-    const node = new Node();
-    const result = await node.get(globalId, dataSources);
-
-    expect(result.__type).toEqual(__type);
-  });
-});
diff --git a/apollos-church-api/src/data/node/__tests__/resolver.js b/apollos-church-api/src/data/node/__tests__/resolver.js
deleted file mode 100644
index 65a6957..0000000
--- a/apollos-church-api/src/data/node/__tests__/resolver.js
+++ /dev/null
@@ -1,56 +0,0 @@
-import casual from 'casual';
-import Resolver from '../resolver';
-
-const sampleData = {
-  _id: casual.word,
-  __type: 'Test',
-};
-
-it('Node should only have a __resolveType on the resolver', () => {
-  const { Node } = Resolver;
-
-  expect(Node.__resolveType).toBeTruthy();
-  expect(Object.keys(Node).length).toEqual(1);
-  expect(Object.keys(Node)[0]).toEqual('__resolveType');
-});
-
-it('Node should return the type from the data passed to it', () => {
-  const { Node } = Resolver;
-
-  const schema = {
-    getType(type) {
-      expect(type).toEqual(sampleData.__type);
-      return type;
-    },
-  };
-
-  const __type = Node.__resolveType(sampleData, null, {
-    schema,
-  });
-  expect(__type).toEqual(sampleData.__type);
-});
-
-it('Query node should return the data via the `Node` class', () => {
-  const { Query } = Resolver;
-
-  const fakeId = casual.word;
-  const models = {
-    Node: {
-      get(id) {
-        expect(id).toEqual(fakeId);
-        return sampleData;
-      },
-    },
-  };
-
-  const data = Query.node(
-    null,
-    {
-      id: fakeId,
-    },
-    {
-      models,
-    }
-  );
-  expect(data).toEqual(sampleData);
-});
diff --git a/apollos-church-api/src/data/node/index.js b/apollos-church-api/src/data/node/index.js
deleted file mode 100644
index 8943216..0000000
--- a/apollos-church-api/src/data/node/index.js
+++ /dev/null
@@ -1,5 +0,0 @@
-import schema from './schema';
-import resolver from './resolver';
-import model, { createGlobalId, parseGlobalId } from './model';
-
-export { schema, resolver, model, createGlobalId, parseGlobalId };
diff --git a/apollos-church-api/src/data/node/model.js b/apollos-church-api/src/data/node/model.js
deleted file mode 100644
index 1317273..0000000
--- a/apollos-church-api/src/data/node/model.js
+++ /dev/null
@@ -1,48 +0,0 @@
-/* eslint-disable class-methods-use-this */
-import Crypto from 'crypto';
-
-const secret = process.env.SECRET || 'LZEVhlgzFZKClu1r';
-
-export function createGlobalId(id, type) {
-  const cipher = Crypto.createCipher('aes192', secret);
-
-  let encrypted = cipher.update(`${id}`, 'utf8', 'hex');
-  encrypted += cipher.final('hex');
-
-  return `${type}:${encrypted}`;
-}
-
-export function parseGlobalId(encodedId) {
-  try {
-    const decipher = Crypto.createDecipher('aes192', secret);
-
-    const [__type, encryptedId] = encodedId.split(':');
-    let decrypted = decipher.update(encryptedId, 'hex', 'utf8');
-    decrypted += decipher.final('utf8');
-
-    const id = decrypted.toString();
-    return {
-      __type,
-      id,
-    };
-  } catch (e) {
-    throw new Error('Error parsing ID');
-  }
-}
-
-export default class Node {
-  async get(encodedId, dataSources) {
-    const { __type, id } = parseGlobalId(encodedId);
-    if (
-      !dataSources ||
-      !dataSources[__type] ||
-      !dataSources[__type].getFromId
-    ) {
-      throw new Error(`No dataSource found using ${__type}`);
-    }
-
-    const data = await dataSources[__type].getFromId(id, encodedId);
-    if (data) data.__type = __type;
-    return data;
-  }
-}
diff --git a/apollos-church-api/src/data/node/resolver.js b/apollos-church-api/src/data/node/resolver.js
deleted file mode 100644
index f7b4be4..0000000
--- a/apollos-church-api/src/data/node/resolver.js
+++ /dev/null
@@ -1,9 +0,0 @@
-export default {
-  Query: {
-    node: (root, { id }, { models, dataSources }) =>
-      models.Node.get(id, dataSources),
-  },
-  Node: {
-    __resolveType: ({ __type }, args, { schema }) => schema.getType(__type),
-  },
-};
diff --git a/apollos-church-api/src/data/node/schema.js b/apollos-church-api/src/data/node/schema.js
deleted file mode 100644
index 58f9fb1..0000000
--- a/apollos-church-api/src/data/node/schema.js
+++ /dev/null
@@ -1,11 +0,0 @@
-import { gql } from 'apollo-server';
-
-export default gql`
-  extend type Query {
-    node(id: ID!): Node
-  }
-
-  interface Node {
-    id: ID!
-  }
-`;
diff --git a/apollos-church-api/src/data/pagination/index.js b/apollos-church-api/src/data/pagination/index.js
new file mode 100644
index 0000000..008a053
--- /dev/null
+++ b/apollos-church-api/src/data/pagination/index.js
@@ -0,0 +1,12 @@
+import { gql } from 'apollo-server';
+
+export const schema = gql`
+  type PaginationInfo {
+    startCursor: String
+    endCursor: String
+  }
+`;
+
+export const resolver = {
+  PaginationInfo: {},
+};
diff --git a/apollos-church-api/src/data/pagination/utils.js b/apollos-church-api/src/data/pagination/utils.js
new file mode 100644
index 0000000..87c0efa
--- /dev/null
+++ b/apollos-church-api/src/data/pagination/utils.js
@@ -0,0 +1,7 @@
+// eslint-disable-next-line import/prefer-default-export
+export const withEdgePagination = async ({ edges }) => {
+  const result = await edges;
+  const startCursor = result.length ? result[0].cursor : null;
+  const endCursor = result.length ? result[result.length - 1].cursor : null;
+  return { startCursor, endCursor };
+};
diff --git a/apollos-church-api/src/data/people/__tests__/data-source.tests.js b/apollos-church-api/src/data/people/__tests__/data-source.tests.js
index be750f5..768c809 100644
--- a/apollos-church-api/src/data/people/__tests__/data-source.tests.js
+++ b/apollos-church-api/src/data/people/__tests__/data-source.tests.js
@@ -1,6 +1,15 @@
+import ApollosConfig from '@apollosproject/config';
 import { buildGetMock } from '../../../utils/testUtils';
 import Person from '../data-source';
 
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+});
+
 const auth = (dataSource) => ({
   getCurrentPerson: buildGetMock(
     { Id: 51, FirstName: 'Vincent', LastName: 'Wilson' },
diff --git a/apollos-church-api/src/data/people/__tests__/resolvers.test.js b/apollos-church-api/src/data/people/__tests__/resolvers.test.js
index 8dad30b..a74fd24 100644
--- a/apollos-church-api/src/data/people/__tests__/resolvers.test.js
+++ b/apollos-church-api/src/data/people/__tests__/resolvers.test.js
@@ -2,11 +2,23 @@ import { graphql } from 'graphql';
 import { fetch } from 'apollo-server-env';
 import { makeExecutableSchema } from 'apollo-server';
 
-import { generateToken, registerToken } from '../../auth/token';
+import ApollosConfig from '@apollosproject/config';
+import { createGlobalId } from '@apollosproject/server-core';
+import {
+  generateToken,
+  registerToken,
+} from '@apollosproject/data-connector-rock-auth';
 // we import the root-level schema and resolver so we test the entire integration:
 import { testSchema as typeDefs, resolvers } from '../..';
 import { getTestContext } from '../../../utils/testUtils';
-import { createGlobalId } from '../../node/model';
+
+ApollosConfig.loadJs({
+  ROCK: {
+    API_URL: 'https://apollosrock.newspring.cc/api',
+    API_TOKEN: 'some-rock-token',
+    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx',
+  },
+});
 
 describe('Person', () => {
   let schema;
diff --git a/apollos-church-api/src/data/people/data-source.js b/apollos-church-api/src/data/people/data-source.js
index 9b98e0f..6f23d0c 100644
--- a/apollos-church-api/src/data/people/data-source.js
+++ b/apollos-church-api/src/data/people/data-source.js
@@ -1,7 +1,7 @@
 import { AuthenticationError } from 'apollo-server';
 import FormData from 'form-data';
 import { camelCase, mapKeys } from 'lodash';
-import RockApolloDataSource from '../../connectors/rock/data-source';
+import RockApolloDataSource from '@apollosproject/rock-apollo-data-source';
 
 export default class Person extends RockApolloDataSource {
   resource = 'People';
diff --git a/apollos-church-api/src/data/people/resolver.js b/apollos-church-api/src/data/people/resolver.js
index f58e3c0..f01c425 100644
--- a/apollos-church-api/src/data/people/resolver.js
+++ b/apollos-church-api/src/data/people/resolver.js
@@ -1,4 +1,4 @@
-import { createGlobalId } from '../node';
+import { createGlobalId } from '@apollosproject/server-core';
 
 export default {
   Query: {
diff --git a/apollos-church-api/src/getContext.js b/apollos-church-api/src/getContext.js
deleted file mode 100644
index fc2af43..0000000
--- a/apollos-church-api/src/getContext.js
+++ /dev/null
@@ -1,39 +0,0 @@
-import dotenv from 'dotenv/config'; // eslint-disable-line
-import { get } from 'lodash';
-
-import { registerToken } from './data/auth/token';
-
-import { models } from './data';
-
-// Construct a context object for each request
-export default ({ req = {} } = {}) => {
-  // initialize connectors for every request so API fetches
-  // are deduplicated per-request only.
-  const connectors = {};
-
-  const initiatedModels = {};
-
-  const context = {
-    models: initiatedModels,
-    connectors,
-  };
-
-  Object.keys(models).forEach((modelName) => {
-    if (models[modelName]) {
-      initiatedModels[modelName] = new models[modelName](context);
-    }
-  });
-
-  if (get(req, 'headers.authorization')) {
-    const { userToken, rockCookie, sessionId } = registerToken(
-      req.headers.authorization
-    );
-    if (sessionId) {
-      context.userToken = userToken;
-      context.rockCookie = rockCookie;
-      context.sessionId = sessionId;
-    }
-  }
-
-  return context;
-};
diff --git a/apollos-church-api/src/getDataSources.js b/apollos-church-api/src/getDataSources.js
deleted file mode 100644
index 100f28f..0000000
--- a/apollos-church-api/src/getDataSources.js
+++ /dev/null
@@ -1,16 +0,0 @@
-import { dataSources } from './data';
-
-export default () => {
-  const sources = {};
-  Object.keys(dataSources).forEach((dataSourceName) => {
-    if (dataSources[dataSourceName]) {
-      sources[dataSourceName] = new dataSources[dataSourceName]();
-    }
-  });
-
-  return {
-    ...sources,
-    UniversalContentItem: sources.ContentItem, // alias
-    DevotionalContentItem: sources.ContentItem, // alias
-  };
-};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index afb3fd0..8371e6f 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,11 +1,15 @@
+import config from './config'; // eslint-disable-line
 import server from './server';
 
 export { testSchema } from './server'; // eslint-disable-line import/prefer-default-export
 
 // Use the port, if provided.
 const { PORT } = process.env;
-const options = PORT ? { port: PORT } : {};
+if (!PORT)
+  console.warn(
+    'Add `ENV=4000` if you are having trouble connecting to the server. By default, PORT is random.'
+  );
 
-server.listen(options).then(({ url }) => {
+server.listen({ port: PORT }).then(({ url }) => {
   console.log(`🚀 Server ready at ${url}`);
 });
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index cfeb876..e82048c 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -1,17 +1,14 @@
-import dotenv from 'dotenv/config'; // eslint-disable-line
 import { ApolloServer } from 'apollo-server';
-import { resolvers, schema, testSchema } from './data';
 
-import getContext from './getContext';
-import getDataSources from './getDataSources';
+import { resolvers, schema, testSchema, context, dataSources } from './data';
 
 export { resolvers, schema, testSchema };
 
 export default new ApolloServer({
   typeDefs: schema,
   resolvers,
-  dataSources: getDataSources,
-  context: getContext,
+  dataSources,
+  context,
   introspection: true,
   formatError: (error) => {
     console.error(error.extensions.exception.stacktrace.join('\n'));
diff --git a/apollos-church-api/src/utils/cursor.js b/apollos-church-api/src/utils/cursor.js
deleted file mode 100644
index 8727100..0000000
--- a/apollos-church-api/src/utils/cursor.js
+++ /dev/null
@@ -1,25 +0,0 @@
-import Crypto from 'crypto';
-
-const secret = process.env.SECRET || 'SEfjsvoSDFnvblaE';
-
-export function createCursor(obj) {
-  const str = JSON.stringify(obj);
-  const cipher = Crypto.createCipher('aes192', secret);
-  let encrypted = cipher.update(str, 'utf8', 'hex');
-  encrypted += cipher.final('hex');
-
-  return encodeURI(encrypted);
-}
-
-export function parseCursor(str) {
-  try {
-    const decipher = Crypto.createDecipher('aes192', secret);
-
-    let decrypted = decipher.update(decodeURI(str), 'hex', 'utf8');
-    decrypted += decipher.final('utf8');
-
-    return JSON.parse(decrypted);
-  } catch (e) {
-    throw new Error('Error parsing cursor');
-  }
-}
diff --git a/apollos-church-api/src/utils/cursor.tests.js b/apollos-church-api/src/utils/cursor.tests.js
deleted file mode 100644
index 2d9d958..0000000
--- a/apollos-church-api/src/utils/cursor.tests.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import casual from 'casual';
-import { createCursor, parseCursor } from './cursor';
-
-describe('Node', () => {
-  it('`createCursor` should take a valid json shape and return a string', () => {
-    const id = casual.word;
-
-    expect(typeof createCursor({ id })).toEqual('string');
-  });
-
-  it('`createCursor` should be decodeable by `parseCursor`', () => {
-    const id = 'molestiae';
-    const cursor = createCursor({ id });
-
-    expect(parseCursor(cursor)).toMatchSnapshot();
-  });
-
-  it('`parseCursor` should throw an error if cursor is invalid', () => {
-    expect(() => parseCursor('blah-blah')).toThrow();
-  });
-});
diff --git a/apollos-church-api/src/utils/testUtils.js b/apollos-church-api/src/utils/testUtils.js
index b9e5a55..5f1c527 100644
--- a/apollos-church-api/src/utils/testUtils.js
+++ b/apollos-church-api/src/utils/testUtils.js
@@ -1,10 +1,11 @@
 import { KeyValueCache } from 'apollo-server-caching';
-import getContext from '../getContext';
-import getDataSources from '../getDataSources';
+import {
+  context as getContext,
+  dataSources as getDataSources,
+} from '../data/index';
 
 export function getTestContext(req) {
   const context = getContext(req);
-
   const dataSources = getDataSources();
   // Apollo Server does this internally.
   Object.values(dataSources).forEach((dataSource) => {
diff --git a/apolloschurchapp/android/app/build.gradle b/apolloschurchapp/android/app/build.gradle
index 0cc8441..bb05abc 100644
--- a/apolloschurchapp/android/app/build.gradle
+++ b/apolloschurchapp/android/app/build.gradle
@@ -108,11 +108,11 @@ android {
     buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        applicationId "com.apolloschurchapp"
+        applicationId "com.apolloschurch.app"
         minSdkVersion rootProject.ext.minSdkVersion
         targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 3
-        versionName "0.5.0"
+        versionCode 4
+        versionName "0.6.0"
         ndk {
             abiFilters "armeabi-v7a", "x86"
         }
diff --git a/apolloschurchapp/android/app/src/main/res/drawable/background_splash.xml b/apolloschurchapp/android/app/src/main/res/drawable/background_splash.xml
index cee9de4..4f85728 100644
--- a/apolloschurchapp/android/app/src/main/res/drawable/background_splash.xml
+++ b/apolloschurchapp/android/app/src/main/res/drawable/background_splash.xml
@@ -7,7 +7,7 @@
     <item
         android:width="95.28dp"
         android:height="100dp"
+        android:top="-24dp"
         android:drawable="@mipmap/splash_icon"
         android:gravity="center" />
-
 </layer-list>
diff --git a/apolloschurchapp/android/app/src/main/res/layout/launch_screen.xml b/apolloschurchapp/android/app/src/main/res/layout/launch_screen.xml
index 852bd17..0009481 100644
--- a/apolloschurchapp/android/app/src/main/res/layout/launch_screen.xml
+++ b/apolloschurchapp/android/app/src/main/res/layout/launch_screen.xml
@@ -5,11 +5,9 @@
     android:layout_height="match_parent"
     android:background="@color/deep_water"
     android:gravity="center">
-    <ImageView
 
+    <ImageView
         android:layout_width="95.28dp"
         android:layout_height="100dp"
-        android:layout_marginTop="-24dp"
-        android:src="@mipmap/splash_icon"
-    />
+        android:src="@mipmap/splash_icon" />
 </LinearLayout>
diff --git a/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist b/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
index e1fe057..097d689 100644
--- a/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
@@ -15,11 +15,11 @@
 	<key>CFBundlePackageType</key>
 	<string>APPL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.5.0</string>
+	<string>0.6.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>3</string>
+	<string>4</string>
 	<key>LSRequiresIPhoneOS</key>
 	<true/>
 	<key>UILaunchStoryboardName</key>
diff --git a/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist b/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
index 4491f31..ae0bb6d 100644
--- a/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
@@ -15,10 +15,10 @@
 	<key>CFBundlePackageType</key>
 	<string>BNDL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.5.0</string>
+	<string>0.6.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>3</string>
+	<string>4</string>
 </dict>
 </plist>
diff --git a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
index 4fca692..6b523bd 100644
--- a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
+++ b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
@@ -1738,7 +1738,7 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CODE_SIGN_ENTITLEMENTS = apolloschurchapp/apolloschurchapp.entitlements;
 				CODE_SIGN_IDENTITY = "iPhone Developer";
-				CURRENT_PROJECT_VERSION = 3;
+				CURRENT_PROJECT_VERSION = 4;
 				DEAD_CODE_STRIPPING = NO;
 				DEVELOPMENT_TEAM = 7TM8C6252Z;
 				HEADER_SEARCH_PATHS = (
@@ -1772,7 +1772,7 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CODE_SIGN_ENTITLEMENTS = apolloschurchapp/apolloschurchapp.entitlements;
 				CODE_SIGN_IDENTITY = "iPhone Developer";
-				CURRENT_PROJECT_VERSION = 3;
+				CURRENT_PROJECT_VERSION = 4;
 				DEVELOPMENT_TEAM = 7TM8C6252Z;
 				HEADER_SEARCH_PATHS = (
 					"$(inherited)",
diff --git a/apolloschurchapp/ios/apolloschurchapp/Info.plist b/apolloschurchapp/ios/apolloschurchapp/Info.plist
index df2c677..dd3a74d 100644
--- a/apolloschurchapp/ios/apolloschurchapp/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp/Info.plist
@@ -26,11 +26,11 @@
 	<key>CFBundlePackageType</key>
 	<string>APPL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.5.0</string>
+	<string>0.6.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>3</string>
+	<string>4</string>
 	<key>ITSAppUsesNonExemptEncryption</key>
 	<false/>
 	<key>LSRequiresIPhoneOS</key>
@@ -52,7 +52,7 @@
 		</dict>
 	</dict>
 	<key>NSLocationWhenInUseUsageDescription</key>
-	<string></string>
+	<string/>
 	<key>UIAppFonts</key>
 	<array>
 		<string>DroidSerif-Bold.ttf</string>
diff --git a/apolloschurchapp/ios/apolloschurchappTests/Info.plist b/apolloschurchapp/ios/apolloschurchappTests/Info.plist
index 4491f31..ae0bb6d 100644
--- a/apolloschurchapp/ios/apolloschurchappTests/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchappTests/Info.plist
@@ -15,10 +15,10 @@
 	<key>CFBundlePackageType</key>
 	<string>BNDL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.5.0</string>
+	<string>0.6.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>3</string>
+	<string>4</string>
 </dict>
 </plist>
diff --git a/apolloschurchapp/package.json b/apolloschurchapp/package.json
index ef14df1..64229a5 100644
--- a/apolloschurchapp/package.json
+++ b/apolloschurchapp/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apolloschurchapp",
-  "version": "0.6.0",
+  "version": "0.6.1",
   "private": true,
   "workspaces": {
     "nohoist": [
@@ -12,12 +12,12 @@
     "@storybook/addon-links": "4.0.0-alpha.2",
     "@storybook/addons": "4.0.0-alpha.2",
     "@storybook/react-native": "4.0.0-alpha.2",
-    "apollos-church-api": "link:../apollos-church-api",
-    "babel-preset-apollos": "link:../babel-preset-apollos",
+    "apollos-church-api": "file:../apollos-church-api",
+    "babel-preset-apollos": "file:../babel-preset-apollos",
     "babel-preset-react-native": "5",
     "codecov": "3.0.2",
     "get-yarn-workspaces": "1.0.2",
-    "jest": "^23.5.0",
+    "jest": "23.5.0",
     "jest-react-native": "18.0.0",
     "nodemon": "1.17.5",
     "prop-types": "15.6.1",
@@ -67,15 +67,15 @@
     }
   },
   "dependencies": {
-    "apollo-cache-inmemory": "1.2.2",
+    "apollo-cache-inmemory": "1.3.5",
     "apollo-cache-persist": "0.1.1",
-    "apollo-client": "2.3.2",
-    "apollo-link": "1.2.2",
-    "apollo-link-context": "1.0.8",
-    "apollo-link-http": "1.5.4",
-    "apollo-link-schema": "1.1.0",
-    "apollo-link-state": "0.4.1",
-    "apollo-upload-client": "^8.1.0",
+    "apollo-client": "2.4.2",
+    "apollo-link": "1.2.3",
+    "apollo-link-context": "1.0.9",
+    "apollo-link-http": "1.5.5",
+    "apollo-link-schema": "1.1.1",
+    "apollo-link-state": "0.4.2",
+    "apollo-upload-client": "9.0.0",
     "color": "3.0.0",
     "entities": "1.1.1",
     "formik": "0.11.11",
@@ -84,24 +84,24 @@
     "graphql-tools": "3.1.1",
     "htmlparser2": "3.9.2",
     "lodash": "4.17.10",
-    "memoize-one": "^4.0.0",
+    "memoize-one": "4.0.0",
     "moment": "2.22.2",
-    "node-fetch": "^2.2.0",
-    "prettier": "^1.14.2",
+    "node-fetch": "2.2.0",
+    "prettier": "1.14.2",
     "react": "16.4.1",
-    "react-apollo": "2.1.11",
+    "react-apollo": "2.2.4",
     "react-native": "0.56.0",
     "react-native-custom-tabs": "0.1.7",
     "react-native-device-info": "0.22.5",
-    "react-native-image-picker": "^0.26.10",
+    "react-native-image-picker": "0.26.10",
     "react-native-keyboard-aware-scroll-view": "0.7.0",
     "react-native-linear-gradient": "2.4.0",
     "react-native-modal-datetime-picker": "6.0.0",
-    "react-native-music-control": "^0.7.3",
-    "react-native-onesignal": "^3.2.7",
+    "react-native-music-control": "0.7.3",
+    "react-native-onesignal": "3.2.7",
     "react-native-safari-view": "2.1.0",
-    "react-native-safe-area-view": "^0.11.0",
-    "react-native-screens": "^1.0.0-alpha.12",
+    "react-native-safe-area-view": "0.11.0",
+    "react-native-screens": "1.0.0-alpha.12",
     "react-native-splash-screen": "3.1.1",
     "react-native-svg": "6.5.2",
     "react-native-tab-view": "1.0.2",
diff --git a/apolloschurchapp/src/auth/index.js b/apolloschurchapp/src/auth/index.js
index 4b7d059..f174021 100644
--- a/apolloschurchapp/src/auth/index.js
+++ b/apolloschurchapp/src/auth/index.js
@@ -43,7 +43,7 @@ const CancelButton = styled(({ theme }) => ({
 
 class Auth extends PureComponent {
   static navigationOptions = {
-    title: 'Login',
+    header: null,
   };
 
   tabRoutes = [
diff --git a/apolloschurchapp/src/client/cache.js b/apolloschurchapp/src/client/cache.js
index 2963286..3979a8a 100644
--- a/apolloschurchapp/src/client/cache.js
+++ b/apolloschurchapp/src/client/cache.js
@@ -14,14 +14,16 @@ import introspectionQueryResultData from './fragmentTypes.json';
 const SCHEMA_VERSION = `${DeviceInfo.getVersion()}${DeviceInfo.getBuildNumber()}`; // Must be a string.
 const SCHEMA_VERSION_KEY = 'apollo-schema-version';
 
+const nodeCacheRedirect = (_, { id }, { getCacheKey }) =>
+  id ? getCacheKey({ __typename: id.split(':')[0], id }) : null;
+
 const cache = new InMemoryCache({
   fragmentMatcher: new IntrospectionFragmentMatcher({
     introspectionQueryResultData,
   }),
   cacheRedirects: {
     Query: {
-      node: (_, { id }, { getCacheKey }) =>
-        id ? getCacheKey({ __typename: id.split(':')[0], id }) : null,
+      node: nodeCacheRedirect,
     },
   },
 });
@@ -37,7 +39,6 @@ export const ensureCacheHydration = (async () => {
     if (currentVersion === SCHEMA_VERSION) {
       // If the current version matches the latest version,
       // we're good to go and can restore the cache.
-      console.log('Restoring cache...');
       await persistor.restore();
     } else {
       // Otherwise, we'll want to purge the outdated persisted cache
diff --git a/apolloschurchapp/src/content-single/Devotional/index.js b/apolloschurchapp/src/content-single/Devotional/index.js
deleted file mode 100644
index 5683d0b..0000000
--- a/apolloschurchapp/src/content-single/Devotional/index.js
+++ /dev/null
@@ -1,84 +0,0 @@
-import React, { PureComponent } from 'react';
-import PropTypes from 'prop-types';
-
-import TabView, { SceneMap } from 'apolloschurchapp/src/ui/TabView';
-import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
-import ContentTab from './ContentTab';
-import ScriptureTab from './ScriptureTab';
-
-/**
- * The devotional component.
- * Displays a TabView with two tabs: ContentTab and ScriptureTab.
- */
-class Devotional extends PureComponent {
-  static propTypes = {
-    /** The devotional text */
-    body: PropTypes.string,
-    /** The devotional title */
-    title: PropTypes.string,
-    /** Toggles placeholders */
-    isLoading: PropTypes.bool,
-    /** An array of scripture objects */
-    scripture: PropTypes.arrayOf(
-      PropTypes.shape({
-        /** The ID of the verse (i.e. '1CO.15.57') */
-        id: PropTypes.string,
-        /** A human readable reference (i.e. '1 Corinthians 15:57') */
-        reference: PropTypes.string,
-        /** The scripture source to render */
-        html: PropTypes.string,
-      })
-    ),
-  };
-
-  /**
-   * Function to get the scripture references from the larger scripture object.
-   * Props: full scripture array of objects
-   * Returns: an array of scripture references.
-   */
-  getScriptureReferences = (scripture) => scripture.map((ref) => ref.reference);
-
-  /**
-   * The route that TabView uses to render the ContentTab.
-   * Note: navigationState gets passed down automatically from the TabView.
-   */
-  contentRoute = (navigationState) => (
-    <ContentTab
-      body={this.props.body}
-      isLoading={this.props.isLoading}
-      references={this.getScriptureReferences(this.props.scripture)}
-      title={this.props.title}
-      navigationState={navigationState}
-    />
-  );
-
-  /**
-   * The route that TabView uses to render the ScriptureTab
-   */
-  scriptureRoute = () => (
-    <ScriptureTab
-      scripture={this.props.scripture}
-      isLoading={this.props.isLoading}
-    />
-  );
-
-  render() {
-    const hasScripture = this.props.isLoading || this.props.scripture.length;
-    const tabRoutes = [{ title: 'Devotional', key: 'content' }];
-    if (hasScripture) tabRoutes.push({ title: 'Scripture', key: 'scripture' });
-
-    return (
-      <BackgroundView>
-        <TabView
-          routes={tabRoutes}
-          renderScene={SceneMap({
-            content: this.contentRoute,
-            scripture: this.scriptureRoute,
-          })}
-        />
-      </BackgroundView>
-    );
-  }
-}
-
-export default Devotional;
diff --git a/apolloschurchapp/src/content-single/Devotional/ContentTab.js b/apolloschurchapp/src/content-single/DevotionalContentItem/ContentTab.js
similarity index 62%
rename from apolloschurchapp/src/content-single/Devotional/ContentTab.js
rename to apolloschurchapp/src/content-single/DevotionalContentItem/ContentTab.js
index 3dd8316..3edf978 100644
--- a/apolloschurchapp/src/content-single/Devotional/ContentTab.js
+++ b/apolloschurchapp/src/content-single/DevotionalContentItem/ContentTab.js
@@ -1,12 +1,12 @@
 import React from 'react';
-import { ScrollView, View } from 'react-native';
+import { ScrollView } from 'react-native';
 import PropTypes from 'prop-types';
 import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
 import { H2 } from 'apolloschurchapp/src/ui/typography';
 import styled from 'apolloschurchapp/src/ui/styled';
-import HTMLView from 'apolloschurchapp/src/ui/HTMLView';
 import { ScriptureList } from 'apolloschurchapp/src/ui/Scripture';
-import Placeholder from 'apolloschurchapp/src/ui/Placeholder';
+import HorizontalContentFeed from '../HorizontalContentFeed';
+import HTMLContent from '../HTMLContent';
 
 const ContentContainer = styled({ paddingVertical: 0 })(PaddedView);
 
@@ -16,39 +16,34 @@ const ContentContainer = styled({ paddingVertical: 0 })(PaddedView);
  * and the body text of the devo.
  */
 const ContentTab = ({
+  id,
   title,
   references,
-  body,
   isLoading,
   navigationState,
+  navigation,
 }) => (
   <ScrollView>
     <ContentContainer>
-      <Placeholder.Paragraph
-        lineNumber={15}
-        onReady={!isLoading}
-        lastLineWidth="60%"
-        firstLineWidth="40%"
-      >
-        <View>
-          <H2 padded>{title}</H2>
-          {references && references.length ? (
-            <ScriptureList
-              references={references}
-              onPress={navigationState.route.jumpTo} // eslint-disable-line react/jsx-handler-names
-              tabDestination={'scripture'}
-            />
-          ) : null}
-          <HTMLView>{body}</HTMLView>
-        </View>
-      </Placeholder.Paragraph>
+      <H2 padded isLoading={!title && isLoading}>
+        {title}
+      </H2>
+      {references && references.length ? (
+        <ScriptureList
+          references={references}
+          onPress={navigationState.route.jumpTo} // eslint-disable-line react/jsx-handler-names
+          tabDestination={'scripture'}
+        />
+      ) : null}
+      <HTMLContent contentId={id} />
     </ContentContainer>
+    <HorizontalContentFeed contentId={id} navigation={navigation} />
   </ScrollView>
 );
 
 ContentTab.propTypes = {
-  /** The devotional text */
-  body: PropTypes.string,
+  /** The id of the devotional item */
+  id: PropTypes.string,
   /** Toggles placeholders */
   isLoading: PropTypes.bool,
   /**
diff --git a/apolloschurchapp/src/content-single/Devotional/Devotional.stories.js b/apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.stories.js
similarity index 93%
rename from apolloschurchapp/src/content-single/Devotional/Devotional.stories.js
rename to apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.stories.js
index 9caae7b..109a669 100644
--- a/apolloschurchapp/src/content-single/Devotional/Devotional.stories.js
+++ b/apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.stories.js
@@ -25,6 +25,16 @@ const content = {
   title: 'God is Our Banner',
 };
 
+const renderItem = () => {};
+
+const loadingStateObject = {
+  node: {
+    id: 'fakeId0',
+    title: '',
+    isLoading: true,
+  },
+};
+
 const stories = storiesOf('Devotional', module);
 
 stories.add('Example', () => (
@@ -33,6 +43,8 @@ stories.add('Example', () => (
     title={content.title}
     isLoading={false}
     scripture={scripture}
+    renderItem={renderItem}
+    loadingStateObject={loadingStateObject}
   />
 ));
 
@@ -42,5 +54,7 @@ stories.add('isLoading', () => (
     title={content.title}
     isLoading
     scripture={scripture}
+    renderItem={renderItem}
+    loadingStateObject={loadingStateObject}
   />
 ));
diff --git a/apolloschurchapp/src/content-single/Devotional/Devotional.tests.js b/apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.tests.js
similarity index 76%
rename from apolloschurchapp/src/content-single/Devotional/Devotional.tests.js
rename to apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.tests.js
index 470ef8b..59ed7e1 100644
--- a/apolloschurchapp/src/content-single/Devotional/Devotional.tests.js
+++ b/apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.tests.js
@@ -2,6 +2,8 @@ import React from 'react';
 import renderer from 'react-test-renderer';
 import wait from 'waait';
 import Providers from 'apolloschurchapp/src/Providers';
+import getContentItemContent from '../HTMLContent/getContentItemContent';
+import getScripture from './getScripture';
 import Devotional from '.';
 
 const content = {
@@ -11,14 +13,16 @@ const content = {
   title: 'God is Our Banner',
 };
 
-const scripture = [
+const scriptures = [
   {
+    __typename: 'Scripture',
     id: '1CO.15.57',
     reference: '1 Corinthians 15:57',
     html:
       '<p class="p"><span data-number="57" class="v">57</span>But thanks be to God, who gives us the victory through our Lord Jesus Christ. </p>',
   },
   {
+    __typename: 'Scripture',
     id: 'EXO.17.8-EXO.17.15',
     reference: 'Exodus 17:8-15',
     html:
@@ -26,30 +30,68 @@ const scripture = [
   },
 ];
 
+const scriptureMock = {
+  request: {
+    query: getScripture,
+    variables: { itemId: '1' },
+  },
+  result: {
+    data: {
+      node: { scriptures, id: '1', __typename: 'DevotionalContentItem' },
+    },
+  },
+};
+
+const contentItemHTMLMock = {
+  request: {
+    query: getContentItemContent,
+    variables: { contentId: '1' },
+  },
+  result: {
+    data: {
+      node: {
+        id: '1',
+        htmlContent: '<b>Some content!</b>',
+        __typename: 'DevotionalContentItem',
+      },
+    },
+  },
+};
+
+const mocks = [scriptureMock, contentItemHTMLMock];
+
+const navigation = {
+  push: jest.fn(),
+};
+
 describe('the Devotional component', () => {
   it('renders a devotional', async () => {
     const tree = renderer.create(
-      <Providers>
+      <Providers mocks={mocks}>
         <Devotional
-          body={content.body}
-          title={content.title}
-          isLoading={false}
-          scripture={scripture}
+          id="1"
+          content={content}
+          loading={false}
+          navigation={navigation}
         />
       </Providers>
     );
     await wait(0); // wait for response
     expect(tree).toMatchSnapshot();
   });
+  it('renders even with empty scripture array', async () => {
+    const tree = renderer.create(
+      <Providers mocks={mocks}>
+        <Devotional id="1" content={content} loading navigation={navigation} />
+      </Providers>
+    );
+    await wait(0); // wait for response
+    expect(tree).toMatchSnapshot();
+  });
   it('renders a loading state', async () => {
     const tree = renderer.create(
-      <Providers>
-        <Devotional
-          body={content.body}
-          title={content.title}
-          isLoading
-          scripture={scripture}
-        />
+      <Providers mocks={mocks}>
+        <Devotional id="1" content={content} loading navigation={navigation} />
       </Providers>
     );
     await wait(0); // wait for response
diff --git a/apolloschurchapp/src/content-single/Devotional/ScriptureTab.js b/apolloschurchapp/src/content-single/DevotionalContentItem/ScriptureTab.js
similarity index 80%
rename from apolloschurchapp/src/content-single/Devotional/ScriptureTab.js
rename to apolloschurchapp/src/content-single/DevotionalContentItem/ScriptureTab.js
index bbf39a9..dbb2481 100644
--- a/apolloschurchapp/src/content-single/Devotional/ScriptureTab.js
+++ b/apolloschurchapp/src/content-single/DevotionalContentItem/ScriptureTab.js
@@ -3,13 +3,14 @@ import { ScrollView } from 'react-native';
 import PropTypes from 'prop-types';
 import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
 import ScriptureItem from 'apolloschurchapp/src/ui/Scripture';
+import HorizontalContentFeed from '../HorizontalContentFeed';
 
 /**
  * This is the Scripture side of the Devotional tabbed component.
  * Maps over an array of scripture references and renders them
  * using the ScriptureItem component.
  */
-const ScriptureTab = ({ scripture, isLoading }) => (
+const ScriptureTab = ({ id, scripture, isLoading, navigation }) => (
   <ScrollView>
     <PaddedView>
       {scripture.map((ref) => (
@@ -21,10 +22,13 @@ const ScriptureTab = ({ scripture, isLoading }) => (
         />
       ))}
     </PaddedView>
+    <HorizontalContentFeed contentId={id} navigation={navigation} />
   </ScrollView>
 );
 
 ScriptureTab.propTypes = {
+  /** The id of the devotional content item */
+  id: PropTypes.string,
   /** Toggles placeholders */
   isLoading: PropTypes.bool,
   /** An array of scripture objects */
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/getScripture.js b/apolloschurchapp/src/content-single/DevotionalContentItem/getScripture.js
new file mode 100644
index 0000000..1f0fb59
--- /dev/null
+++ b/apolloschurchapp/src/content-single/DevotionalContentItem/getScripture.js
@@ -0,0 +1,17 @@
+import gql from 'graphql-tag';
+
+export default gql`
+  query getScripture($itemId: ID!) {
+    node(id: $itemId) {
+      __typename
+      id
+      ... on DevotionalContentItem {
+        scriptures {
+          id
+          html
+          reference
+        }
+      }
+    }
+  }
+`;
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/index.js b/apolloschurchapp/src/content-single/DevotionalContentItem/index.js
new file mode 100644
index 0000000..b880641
--- /dev/null
+++ b/apolloschurchapp/src/content-single/DevotionalContentItem/index.js
@@ -0,0 +1,106 @@
+import React, { PureComponent } from 'react';
+import { SafeAreaView } from 'react-native';
+import PropTypes from 'prop-types';
+import { Query } from 'react-apollo';
+
+import { ErrorCard } from 'apolloschurchapp/src/ui/Card';
+import TabView, { SceneMap } from 'apolloschurchapp/src/ui/TabView';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import styled from 'apolloschurchapp/src/ui/styled';
+import ContentTab from './ContentTab';
+import ScriptureTab from './ScriptureTab';
+
+import getScripture from './getScripture';
+
+const FlexedSafeAreaView = styled({ flex: 1 })(SafeAreaView);
+
+/**
+ * The devotional component.
+ * Displays a TabView with two tabs: ContentTab and ScriptureTab.
+ */
+class DevotionalContentItem extends PureComponent {
+  static propTypes = {
+    /** The id of the devotional item */
+    id: PropTypes.string.isRequired,
+    content: PropTypes.shape({
+      /** The devotional title */
+      title: PropTypes.string,
+    }),
+    /** Toggles placeholders */
+    loading: PropTypes.bool,
+    navigation: PropTypes.shape({}),
+  };
+
+  /**
+   * Function to get the scripture references from the larger scripture object.
+   * Props: full scripture array of objects
+   * Returns: an array of scripture references.
+   */
+  getScriptureReferences = (scripture) => {
+    if (scripture && scripture.length) {
+      return scripture.map((ref) => ref.reference);
+    }
+    return null;
+  };
+
+  /**
+   * The route that TabView uses to render the ContentTab.
+   * Note: navigationState gets passed down automatically from the TabView.
+   */
+  contentRoute = ({ scriptures, loading }) => (navigationState) => (
+    <ContentTab
+      id={this.props.id}
+      references={this.getScriptureReferences(scriptures)}
+      title={this.props.content.title}
+      navigationState={navigationState}
+      navigation={this.props.navigation}
+      isLoading={this.props.loading || loading}
+    />
+  );
+
+  /**
+   * The route that TabView uses to render the ScriptureTab
+   */
+  scriptureRoute = ({ scriptures, loading }) => () => (
+    <ScriptureTab
+      id={this.props.id}
+      scripture={scriptures}
+      navigation={this.props.navigation}
+      isLoading={this.props.loading || loading}
+    />
+  );
+
+  renderTabs = ({
+    data: { node: { scriptures = [] } = {} } = {},
+    error,
+    loading,
+  }) => {
+    if (error) return <ErrorCard error={error} />;
+    const hasScripture = loading || scriptures.length;
+    const tabRoutes = [{ title: 'Devotional', key: 'content' }];
+    if (hasScripture) tabRoutes.push({ title: 'Scripture', key: 'scripture' });
+    return (
+      <TabView
+        routes={tabRoutes}
+        renderScene={SceneMap({
+          content: this.contentRoute({ scriptures, loading }),
+          scripture: this.scriptureRoute({ scriptures, loading }),
+        })}
+      />
+    );
+  };
+
+  render() {
+    return (
+      <BackgroundView>
+        <FlexedSafeAreaView>
+          <Query query={getScripture} variables={{ itemId: this.props.id }}>
+            {this.renderTabs}
+          </Query>
+        </FlexedSafeAreaView>
+      </BackgroundView>
+    );
+  }
+}
+
+export default DevotionalContentItem;
diff --git a/apolloschurchapp/src/content-single/HTMLContent/getContentItemContent.js b/apolloschurchapp/src/content-single/HTMLContent/getContentItemContent.js
index cd7ddc6..207df6d 100644
--- a/apolloschurchapp/src/content-single/HTMLContent/getContentItemContent.js
+++ b/apolloschurchapp/src/content-single/HTMLContent/getContentItemContent.js
@@ -1,7 +1,7 @@
 import gql from 'graphql-tag';
 
 export default gql`
-  query getContentItem($contentId: ID!) {
+  query getContentItemHTML($contentId: ID!) {
     node(id: $contentId) {
       ... on ContentItem {
         id
diff --git a/apolloschurchapp/src/content-single/MediaControls/index.js b/apolloschurchapp/src/content-single/MediaControls/index.js
index c2bfffc..dc95890 100644
--- a/apolloschurchapp/src/content-single/MediaControls/index.js
+++ b/apolloschurchapp/src/content-single/MediaControls/index.js
@@ -6,31 +6,40 @@ import { get } from 'lodash';
 
 import { playVideoMutation } from 'apolloschurchapp/src/ui/MediaPlayer/mutations';
 import Icon from 'apolloschurchapp/src/ui/Icon';
-import TouchableScale from 'apolloschurchapp/src/ui/TouchableScale';
 import styled from 'apolloschurchapp/src/ui/styled';
+import Button from 'apolloschurchapp/src/ui/Button';
 import getContentMedia from './getContentMedia';
 
-const buttonSizeDifferential = 3.5;
+const buttonSizeDifferential = 4;
 
 const MediaIcon = Icon; // todo: add back styles
 const MediaButton = styled(({ theme }) => ({
   width: theme.sizing.baseUnit * buttonSizeDifferential,
   height: theme.sizing.baseUnit * buttonSizeDifferential,
   borderRadius: theme.sizing.baseUnit * (buttonSizeDifferential / 2),
-  overflow: 'hidden',
-  backgroundColor: theme.colors.primary,
+  backgroundColor: theme.colors.secondary,
   justifyContent: 'center',
   alignItems: 'center',
-  borderWidth: buttonSizeDifferential,
-  borderColor: theme.colors.paper,
-  marginHorizontal: theme.sizing.baseUnit / 2,
+  borderWidth: 0, // remove default button border
+}))(Button);
+
+/** MediaButtton "border styles" live in a seperate component so that Android places it's elevation
+ * shadow in the right place. */
+const MediaButtonBorder = styled(({ theme }) => ({
+  borderRadius:
+    theme.sizing.baseUnit * (buttonSizeDifferential / 2) +
+    buttonSizeDifferential, // this is eqivalent to the MediaButton size above + the padding below
+  padding: buttonSizeDifferential, // padding + backgroundColor = MediaButton + "borderStyles"
+  backgroundColor: theme.colors.paper,
 }))(View);
 
 const Container = styled(({ theme }) => ({
   flexDirection: 'row',
   alignItems: 'center',
   justifyContent: 'center',
-  marginTop: -theme.sizing.baseUnit * (buttonSizeDifferential / 2),
+  marginTop:
+    -theme.sizing.baseUnit * (buttonSizeDifferential / 2) -
+    buttonSizeDifferential, // MediaButton size / 2 + border
 }))(View);
 
 class MediaControls extends PureComponent {
@@ -55,23 +64,25 @@ class MediaControls extends PureComponent {
         {(play) => (
           <Container>
             {videoSource ? (
-              <TouchableScale
-                onPress={() =>
-                  play({
-                    variables: {
-                      mediaSource: videoSource,
-                      posterSources: coverImageSources,
-                      title,
-                      isVideo: true,
-                      artist: parentChannel.name,
-                    },
-                  })
-                }
-              >
-                <MediaButton>
+              <MediaButtonBorder>
+                <MediaButton
+                  type="primary"
+                  onPress={() =>
+                    play({
+                      variables: {
+                        mediaSource: videoSource,
+                        posterSources: coverImageSources,
+                        title,
+                        isVideo: true,
+                        artist: parentChannel.name,
+                      },
+                    })
+                  }
+                  useForeground
+                >
                   <MediaIcon name="play" />
                 </MediaButton>
-              </TouchableScale>
+              </MediaButtonBorder>
             ) : null}
           </Container>
         )}
diff --git a/apolloschurchapp/src/content-single/UniversalContentItem/index.js b/apolloschurchapp/src/content-single/UniversalContentItem/index.js
new file mode 100644
index 0000000..bb631f8
--- /dev/null
+++ b/apolloschurchapp/src/content-single/UniversalContentItem/index.js
@@ -0,0 +1,63 @@
+import React from 'react';
+import { ScrollView } from 'react-native';
+import { get } from 'lodash';
+import PropTypes from 'prop-types';
+import styled from 'apolloschurchapp/src/ui/styled';
+import GradientOverlayImage from 'apolloschurchapp/src/ui/GradientOverlayImage';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { H2 } from 'apolloschurchapp/src/ui/typography';
+import MediaControls from '../MediaControls';
+import HTMLContent from '../HTMLContent';
+import HorizontalContentFeed from '../HorizontalContentFeed';
+
+const FlexedScrollView = styled({ flex: 1 })(ScrollView);
+
+const UniversalContentItem = ({ content, loading }) => {
+  const coverImageSources = get(content, 'coverImage.sources', []);
+  return (
+    <FlexedScrollView>
+      {coverImageSources.length || loading ? (
+        <GradientOverlayImage
+          isLoading={!coverImageSources.length && loading}
+          source={coverImageSources}
+        />
+      ) : null}
+      <BackgroundView>
+        <MediaControls contentId={content.id} />
+        <PaddedView>
+          <H2 padded isLoading={!content.title && loading}>
+            {content.title}
+          </H2>
+          <HTMLContent contentId={content.id} />
+        </PaddedView>
+        <HorizontalContentFeed contentId={content.id} />
+      </BackgroundView>
+    </FlexedScrollView>
+  );
+};
+
+UniversalContentItem.propTypes = {
+  content: PropTypes.shape({
+    __typename: PropTypes.string,
+    parentChannel: PropTypes.shape({
+      name: PropTypes.string,
+    }),
+    id: PropTypes.string,
+    htmlContent: PropTypes.string,
+    title: PropTypes.string,
+    scriptures: PropTypes.arrayOf(
+      PropTypes.shape({
+        /** The ID of the verse (i.e. '1CO.15.57') */
+        id: PropTypes.string,
+        /** A human readable reference (i.e. '1 Corinthians 15:57') */
+        reference: PropTypes.string,
+        /** The scripture source to render */
+        html: PropTypes.string,
+      })
+    ),
+  }),
+  loading: PropTypes.bool,
+};
+
+export default UniversalContentItem;
diff --git a/apolloschurchapp/src/content-single/getContentItem.js b/apolloschurchapp/src/content-single/getContentItem.js
index fcbfbac..40b8221 100644
--- a/apolloschurchapp/src/content-single/getContentItem.js
+++ b/apolloschurchapp/src/content-single/getContentItem.js
@@ -4,7 +4,6 @@ export const contentItemFragment = gql`
   fragment contentItemFragment on ContentItem {
     id
     title
-    htmlContent
     isLiked
     coverImage {
       name
@@ -41,6 +40,7 @@ export const contentItemFragment = gql`
 export default gql`
   query getContentItem($itemId: ID!) {
     node(id: $itemId) {
+      __typename
       ... on ContentItem {
         ...contentItemFragment
       }
diff --git a/apolloschurchapp/src/content-single/index.js b/apolloschurchapp/src/content-single/index.js
index 8f00a5c..d78cdaa 100644
--- a/apolloschurchapp/src/content-single/index.js
+++ b/apolloschurchapp/src/content-single/index.js
@@ -1,15 +1,9 @@
 import React, { PureComponent } from 'react';
-import { ScrollView } from 'react-native';
 import { Query } from 'react-apollo';
 import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
-import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
-import GradientOverlayImage from 'apolloschurchapp/src/ui/GradientOverlayImage';
-import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
-import { H2 } from 'apolloschurchapp/src/ui/typography';
 import { ErrorCard } from 'apolloschurchapp/src/ui/Card';
-import styled from 'apolloschurchapp/src/ui/styled';
 import { ThemeMixin } from 'apolloschurchapp/src/ui/theme';
 
 import ModalView from 'apolloschurchapp/src/ui/ModalView';
@@ -17,13 +11,10 @@ import TrackEventWhenLoaded from 'apolloschurchapp/src/analytics/TrackEventWhenL
 
 import { events } from 'apolloschurchapp/src/analytics';
 import ActionContainer from './ActionContainer';
-import HTMLContent from './HTMLContent';
-import HorizontalContentFeed from './HorizontalContentFeed';
-import MediaControls from './MediaControls';
-
 import getContentItem from './getContentItem';
 
-const FlexedScrollView = styled({ flex: 1 })(ScrollView);
+import DevotionalContentItem from './DevotionalContentItem';
+import UniversalContentItem from './UniversalContentItem';
 
 class ContentSingle extends PureComponent {
   static propTypes = {
@@ -33,18 +24,52 @@ class ContentSingle extends PureComponent {
     }),
   };
 
+  static navigationOptions = {
+    header: null,
+  };
+
+  get itemId() {
+    return this.props.navigation.getParam('itemId', []);
+  }
+
   get queryVariables() {
-    return { itemId: this.props.navigation.getParam('itemId', []) };
+    return { itemId: this.itemId };
   }
 
+  renderContent = ({ content, loading, error }) => {
+    let { __typename } = content;
+    if (!__typename && this.itemId) {
+      [__typename] = this.itemId.split(':');
+    }
+    switch (__typename) {
+      case 'DevotionalContentItem':
+        return (
+          <DevotionalContentItem
+            id={this.itemId}
+            content={content}
+            loading={loading}
+            error={error}
+          />
+        );
+      case 'UniversalContentItem':
+      default:
+        return (
+          <UniversalContentItem
+            id={this.itemId}
+            content={content}
+            loading={loading}
+            error={error}
+          />
+        );
+    }
+  };
+
   renderWithData = ({ loading, error, data }) => {
     if (error) return <ErrorCard error={error} />;
 
     const content = data.node || {};
 
-    const coverImageSources = get(content, 'coverImage.sources', []);
-
-    const { theme = {}, title, id } = content;
+    const { theme = {}, id } = content;
 
     return (
       <ThemeMixin
@@ -59,27 +84,10 @@ class ContentSingle extends PureComponent {
             eventName={events.ViewContent}
             properties={{
               title: content.title,
-              itemId: this.id,
+              itemId: this.itemId,
             }}
           />
-          <FlexedScrollView>
-            {coverImageSources.length || loading ? (
-              <GradientOverlayImage
-                isLoading={!coverImageSources.length && loading}
-                source={coverImageSources}
-              />
-            ) : null}
-            <BackgroundView>
-              <MediaControls contentId={id} />
-              <PaddedView>
-                <H2 padded isLoading={!title && loading}>
-                  {title}
-                </H2>
-                <HTMLContent contentId={id} />
-              </PaddedView>
-              <HorizontalContentFeed contentId={id} />
-            </BackgroundView>
-          </FlexedScrollView>
+          {this.renderContent({ content, loading, error })}
           <ActionContainer itemId={id} />
         </ModalView>
       </ThemeMixin>
diff --git a/apolloschurchapp/src/index.js b/apolloschurchapp/src/index.js
index 8e18ef1..50fdd81 100644
--- a/apolloschurchapp/src/index.js
+++ b/apolloschurchapp/src/index.js
@@ -6,17 +6,14 @@ import { createStackNavigator } from 'react-navigation';
 import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
 import MediaPlayer from 'apolloschurchapp/src/ui/MediaPlayer';
 import { withTheme } from 'apolloschurchapp/src/ui/theme';
-
 import Providers from './Providers';
 import NotificationsInit from './Notifications';
 import NavigationService from './NavigationService';
 import ContentSingle from './content-single';
-import UserSettings from './user-settings';
-import PersonalDetails from './user-settings/PersonalDetails';
-import ChangePassword from './user-settings/ChangePassword';
-import LikedContentList from './tabs/connect/LikedContentList';
 import Tabs from './tabs';
 import Auth from './auth';
+import PersonalDetails from './user-settings/PersonalDetails';
+import ChangePassword from './user-settings/ChangePassword';
 
 // Sentry.config(
 //   'https://5908fa19ed37447f86b2717423cadec5:45dd3b58792b413cb67109c5e63a0bb7@sentry.io/1241658'
@@ -32,15 +29,13 @@ const AppNavigator = createStackNavigator(
     Tabs,
     ContentSingle,
     Auth,
-    UserSettings,
-    LikedContentList,
     PersonalDetails,
     ChangePassword,
   },
   {
     initialRouteName: 'Tabs',
     mode: 'modal',
-    headerMode: 'none',
+    headerMode: 'screen',
   }
 );
 
diff --git a/apolloschurchapp/src/store/index.js b/apolloschurchapp/src/store/index.js
index 3ca0f6f..2873934 100644
--- a/apolloschurchapp/src/store/index.js
+++ b/apolloschurchapp/src/store/index.js
@@ -57,7 +57,7 @@ export const schema = `
 `;
 
 export const defaults = {
-  __typename: 'ClientState',
+  __typename: 'Query',
   authToken: null,
   mediaPlayer: {
     __typename: 'MediaPlayerState',
diff --git a/apolloschurchapp/src/tabs/connect/ActionTable/index.js b/apolloschurchapp/src/tabs/connect/ActionTable/index.js
new file mode 100644
index 0000000..36ed069
--- /dev/null
+++ b/apolloschurchapp/src/tabs/connect/ActionTable/index.js
@@ -0,0 +1,93 @@
+import React from 'react';
+import { View } from 'react-native';
+
+import TableView, {
+  Cell,
+  CellIcon,
+  CellText,
+  Divider,
+} from 'apolloschurchapp/src/ui/TableView';
+import { WebBrowserConsumer } from 'apolloschurchapp/src/ui/WebBrowser';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
+import NavigationActions from 'apolloschurchapp/src/NavigationService';
+import styled from 'apolloschurchapp/src/ui/styled';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+
+const RowHeader = styled(({ theme }) => ({
+  flexDirection: 'row',
+  justifyContent: 'space-between',
+  alignItems: 'center',
+  paddingVertical: theme.sizing.baseUnit,
+}))(PaddedView);
+
+const Name = styled({
+  flexGrow: 1,
+})(View);
+
+const ActionTable = () => (
+  <WebBrowserConsumer>
+    {(openUrl) => (
+      <View>
+        <RowHeader>
+          <Name>
+            <H4>{'Connect with Apollos'}</H4>
+          </Name>
+        </RowHeader>
+        <TableView>
+          <Touchable
+            onPress={() => openUrl('https://apollosrock.newspring.cc/page/235')}
+          >
+            <Cell>
+              <CellIcon name="check" />
+              <CellText>Find a serving opportunity</CellText>
+            </Cell>
+          </Touchable>
+          <Divider />
+          <Touchable
+            onPress={() => openUrl('https://apollosrock.newspring.cc/page/236')}
+          >
+            <Cell>
+              <CellIcon name="groups" />
+              <CellText>Join a small group</CellText>
+            </Cell>
+          </Touchable>
+          <Divider />
+          <Touchable
+            onPress={() => openUrl('https://apollosrock.newspring.cc/page/233')}
+          >
+            <Cell>
+              <CellIcon name="share" />
+              <CellText>I need prayer</CellText>
+            </Cell>
+          </Touchable>
+          <Divider />
+          <Touchable
+            onPress={() => openUrl('https://apollosrock.newspring.cc/page/186')}
+          >
+            <Cell>
+              <CellIcon name="download" />
+              <CellText>I would like to give</CellText>
+            </Cell>
+          </Touchable>
+        </TableView>
+        <TableView>
+          <Touchable
+            onPress={() => NavigationActions.navigate('TestingControlPanel')}
+          >
+            <Cell>
+              <CellIcon name="settings" />
+              <CellText>Open Testing Panel</CellText>
+            </Cell>
+          </Touchable>
+        </TableView>
+      </View>
+    )}
+  </WebBrowserConsumer>
+);
+
+const StyledActionTable = styled(({ theme }) => ({
+  paddingBottom: theme.sizing.baseUnit * 100,
+}))(ActionTable);
+
+export default StyledActionTable;
diff --git a/apolloschurchapp/src/tabs/connect/Connect.js b/apolloschurchapp/src/tabs/connect/Connect.js
index a61a421..f80cdc7 100644
--- a/apolloschurchapp/src/tabs/connect/Connect.js
+++ b/apolloschurchapp/src/tabs/connect/Connect.js
@@ -1,26 +1,18 @@
 import React, { PureComponent } from 'react';
-import { ScrollView, SafeAreaView, Platform } from 'react-native';
+import { ScrollView, SafeAreaView } from 'react-native';
 import { Query } from 'react-apollo';
 import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
 import { LoginButton } from 'apolloschurchapp/src/auth';
 import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
-import TableView, {
-  Cell,
-  CellIcon,
-  CellText,
-  Divider,
-} from 'apolloschurchapp/src/ui/TableView';
-import { WebBrowserConsumer } from 'apolloschurchapp/src/ui/WebBrowser';
-import Touchable from 'apolloschurchapp/src/ui/Touchable';
 import { withTheme } from 'apolloschurchapp/src/ui/theme';
 import { H1, BodyText, Paragraph } from 'apolloschurchapp/src/ui/typography';
 import styled from 'apolloschurchapp/src/ui/styled';
 import Icon from 'apolloschurchapp/src/ui/Icon';
 import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
-import NavigationActions from 'apolloschurchapp/src/NavigationService';
 
+import ActionTable from './ActionTable';
 import { UserAvatarHeaderConnected } from './UserAvatarHeader';
 import { RecentlyLikedTileFeedConnected } from './RecentlyLikedTileFeed';
 import getLoginState from './getLoginState';
@@ -40,16 +32,7 @@ const BrandIcon = withTheme(({ theme }) => ({
 const Header = styled(({ theme }) => ({
   paddingBottom: theme.sizing.baseUnit * 1.5,
   backgroundColor: theme.colors.background.paper,
-  // These conditional paddings are due to inconsistencies with SafeAreaView.
-  // TODO: revisit and update/remove these values after next RN upgrade.
-  ...Platform.select({
-    ios: {
-      paddingTop: theme.sizing.baseUnit * 5,
-    },
-    android: {
-      paddingTop: theme.sizing.baseUnit * 4,
-    },
-  }),
+  paddingTop: theme.sizing.baseUnit * 4,
 }))(PaddedView);
 
 const StyledLoginButton = styled(({ theme }) => ({
@@ -72,98 +55,45 @@ class Connect extends PureComponent {
   render() {
     return (
       <BackgroundView>
-        <WebBrowserConsumer>
-          {(openUrl) => (
-            <ScrollView>
+        <Query query={getLoginState}>
+          {({ data }) => {
+            if (get(data, 'isLoggedIn', false))
+              return (
+                <SafeAreaView>
+                  <ScrollView>
+                    <UserAvatarHeaderConnected key="UserAvatarHeaderConnected" />
+                    <RecentlyLikedTileFeedConnected key="RecentlyLikedTileFeedConnected" />
+                    <ActionTable />
+                  </ScrollView>
+                </SafeAreaView>
+              );
+            return (
               <SafeAreaView>
-                <Query query={getLoginState}>
-                  {({ data }) => {
-                    if (get(data, 'isLoggedIn', false))
-                      return [
-                        <UserAvatarHeaderConnected key="UserAvatarHeaderConnected" />,
-                        <RecentlyLikedTileFeedConnected key="RecentlyLikedTileFeedConnected" />,
-                      ];
-                    return (
-                      <Header>
-                        <BrandIcon />
-                        <Title>Connect!</Title>
-                        <Paragraph>
-                          <BodyText>
-                            Our mission is to help you connect to others as well
-                            as help you in your walk with Christ.
-                          </BodyText>
-                        </Paragraph>
-                        <Paragraph>
-                          <BodyText>
-                            By joining this community, you will unlock amazing
-                            features like; curated content and devotionals,
-                            simple event registration, and easy online giving!
-                          </BodyText>
-                        </Paragraph>
-                        <StyledLoginButton />
-                      </Header>
-                    );
-                  }}
-                </Query>
-                <TableView>
-                  <Touchable
-                    onPress={() =>
-                      openUrl('https://apollosrock.newspring.cc/page/235')
-                    }
-                  >
-                    <Cell>
-                      <CellIcon name="check" />
-                      <CellText>Find a serving opportunity</CellText>
-                    </Cell>
-                  </Touchable>
-                  <Divider />
-                  <Touchable
-                    onPress={() =>
-                      openUrl('https://apollosrock.newspring.cc/page/236')
-                    }
-                  >
-                    <Cell>
-                      <CellIcon name="groups" />
-                      <CellText>Join a small group</CellText>
-                    </Cell>
-                  </Touchable>
-                  <Divider />
-                  <Touchable
-                    onPress={() =>
-                      openUrl('https://apollosrock.newspring.cc/page/233')
-                    }
-                  >
-                    <Cell>
-                      <CellIcon name="share" />
-                      <CellText>I need prayer</CellText>
-                    </Cell>
-                  </Touchable>
-                  <Divider />
-                  <Touchable
-                    onPress={() =>
-                      openUrl('https://apollosrock.newspring.cc/page/186')
-                    }
-                  >
-                    <Cell>
-                      <CellIcon name="download" />
-                      <CellText>I would like to give</CellText>
-                    </Cell>
-                  </Touchable>
-                  <Touchable
-                    onPress={() =>
-                      NavigationActions.navigate('TestingControlPanel')
-                    }
-                  >
-                    <Cell>
-                      <CellIcon name="download" />
-                      <CellText>I would like to test the app</CellText>
-                    </Cell>
-                  </Touchable>
-                </TableView>
+                <ScrollView>
+                  <Header>
+                    <BrandIcon />
+                    <Title>Connect!</Title>
+                    <Paragraph>
+                      <BodyText>
+                        Our mission is to help you connect to others as well as
+                        help you in your walk with Christ.
+                      </BodyText>
+                    </Paragraph>
+                    <Paragraph>
+                      <BodyText>
+                        By joining this community, you will unlock amazing
+                        features like; curated content and devotionals, simple
+                        event registration, and easy online giving!
+                      </BodyText>
+                    </Paragraph>
+                    <StyledLoginButton />
+                  </Header>
+                  <ActionTable />
+                </ScrollView>
               </SafeAreaView>
-            </ScrollView>
-          )}
-        </WebBrowserConsumer>
+            );
+          }}
+        </Query>
       </BackgroundView>
     );
   }
diff --git a/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js b/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js
index fa6f98e..f6fadb7 100644
--- a/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js
+++ b/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js
@@ -17,6 +17,7 @@ describe('LikedContentList component', () => {
         data: {
           getAllLikedContent: [
             {
+              __typename: 'UniversalContentItem',
               id: 'UniversalContentItem:4148aeb9482181025e9cad42826e676a',
               title: 'Making Prayer a Spiritual Habit',
               coverImage: {
@@ -34,6 +35,7 @@ describe('LikedContentList component', () => {
               },
             },
             {
+              __typename: 'UniversalContentItem',
               id: 'UniversalContentItem:9dbdc4e565dcaa3c9b17eb5ae42de96e',
               title: 'Vacations and Your Budget',
               coverImage: {
diff --git a/apolloschurchapp/src/tabs/connect/LikedContentList/index.js b/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
index 7dbe57f..469876e 100644
--- a/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
+++ b/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
@@ -10,7 +10,7 @@ import getLikedContent from '../getLikedContent';
 class LikedContentList extends PureComponent {
   /** Function for React Navigation to set information in the header. */
   static navigationOptions = () => ({
-    title: 'Liked Content',
+    title: 'Your Likes',
   });
 
   static propTypes = {
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js
index 7e2d3eb..e57b4c6 100644
--- a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js
@@ -11,6 +11,7 @@ describe('RecentlyLikedTileFeed', () => {
         {
           id: 'UniversalContentItem:4148aeb9482181025e9cad42826e676a',
           title: 'Making Prayer a Spiritual Habit',
+          __typename: 'UniversalContentItem',
           coverImage: {
             sources: [
               {
@@ -28,6 +29,7 @@ describe('RecentlyLikedTileFeed', () => {
         {
           id: 'UniversalContentItem:9dbdc4e565dcaa3c9b17eb5ae42de96e',
           title: 'Vacations and Your Budget',
+          __typename: 'UniversalContentItem',
           coverImage: {
             sources: [
               {
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js
index 45dd4df..a86843d 100644
--- a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js
@@ -12,12 +12,12 @@ const RecentlyLikedTileFeedConnected = ({ navigation }) => (
       return (
         <RecentlyLikedTileFeed
           id={'liked'}
-          name={'Recently Like'}
+          name={'Recently Liked'}
           content={getAllLikedContent}
           isLoading={loading}
           navigation={navigation}
           loadingStateObject={{
-            title: 'Recently Like',
+            title: 'Recently Liked',
             isLoading: true,
           }}
         />
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js
index 349f4e9..20e6417 100644
--- a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js
@@ -18,6 +18,7 @@ describe('RecentlyLikedTileFeedConnected', () => {
           getAllLikedContent: [
             {
               id: 'UniversalContentItem:296373ecb53580855cadffa0375ebe18',
+              __typename: 'UniversalContentItem',
               title: 'Guys Night!',
               coverImage: {
                 sources: [
@@ -35,6 +36,7 @@ describe('RecentlyLikedTileFeedConnected', () => {
             },
             {
               id: 'UniversalContentItem:39193b5ad28717ebfeab4d226664d8e7',
+              __typename: 'UniversalContentItem',
               title: 'This August at NewSpring',
               coverImage: {
                 sources: [
@@ -52,6 +54,7 @@ describe('RecentlyLikedTileFeedConnected', () => {
             },
             {
               id: 'UniversalContentItem:ae8ec75906ba7437c49ad2534b5024db',
+              __typename: 'UniversalContentItem',
               title: 'A Place to Worship Free of Fear',
               coverImage: {
                 sources: [
diff --git a/apolloschurchapp/src/tabs/connect/UserAvatarHeader/UserAvatarHeader.js b/apolloschurchapp/src/tabs/connect/UserAvatarHeader/UserAvatarHeader.js
index 82f5f9c..6c973cd 100644
--- a/apolloschurchapp/src/tabs/connect/UserAvatarHeader/UserAvatarHeader.js
+++ b/apolloschurchapp/src/tabs/connect/UserAvatarHeader/UserAvatarHeader.js
@@ -16,10 +16,8 @@ import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
 const Container = styled(({ theme }) => ({
   alignItems: 'center',
   flexDirection: 'row',
-  /* This padding shouldn't be needed or at least not at such a high value but SafeAreaView doesn't
-   * appear to work so here it is 🤷‍♂️
-   * TODO: revisit and update/remove these values after next RN upgrade. */
-  paddingTop: theme.sizing.baseUnit * 3,
+  paddingTop: theme.sizing.baseUnit * 2,
+  paddingBottom: 0,
 }))(PaddedView);
 
 const SettingsIcon = compose(
diff --git a/apolloschurchapp/src/tabs/connect/getLikedContent.js b/apolloschurchapp/src/tabs/connect/getLikedContent.js
index 27e5260..53ab5e7 100644
--- a/apolloschurchapp/src/tabs/connect/getLikedContent.js
+++ b/apolloschurchapp/src/tabs/connect/getLikedContent.js
@@ -1,22 +1,14 @@
 import gql from 'graphql-tag';
 
+import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
+
 export default gql`
   query getAllLikedContent {
     getAllLikedContent {
       ... on ContentItem {
-        id
-        title
-        coverImage {
-          sources {
-            uri
-          }
-        }
-        sharing {
-          title
-          message
-          url
-        }
+        ...contentItemFragment
       }
     }
   }
+  ${contentItemFragment}
 `;
diff --git a/apolloschurchapp/src/tabs/connect/index.js b/apolloschurchapp/src/tabs/connect/index.js
index 00674fc..7091870 100644
--- a/apolloschurchapp/src/tabs/connect/index.js
+++ b/apolloschurchapp/src/tabs/connect/index.js
@@ -1,14 +1,18 @@
 import { createStackNavigator } from 'react-navigation';
 
-import tabBarIcon from '../tabBarIcon';
+import UserSettings from 'apolloschurchapp/src/user-settings';
 
 import TestingControlPanel from '../../testing-control-panel';
+import tabBarIcon from '../tabBarIcon';
 import Connect from './Connect';
+import LikedContentList from './LikedContentList';
 
 const ConnectNavigator = createStackNavigator(
   {
     Connect,
     TestingControlPanel,
+    UserSettings,
+    LikedContentList,
   },
   {
     initialRouteName: 'Connect',
diff --git a/apolloschurchapp/src/ui/Like/index.js b/apolloschurchapp/src/ui/Like/index.js
index d415028..983fb9c 100644
--- a/apolloschurchapp/src/ui/Like/index.js
+++ b/apolloschurchapp/src/ui/Like/index.js
@@ -1,19 +1,16 @@
 import React from 'react';
 import PropTypes from 'prop-types';
-import { compose, pure } from 'recompose';
 
 import Icon from 'apolloschurchapp/src/ui/Icon';
 import { withTheme } from 'apolloschurchapp/src/ui/theme';
 import ProtectedTouchable from '../../auth/ProtectedTouchable';
 
-const enhance = compose(
-  pure,
-  withTheme()
-);
-
-export const LikeIcon = enhance(({ isLiked, theme }) => (
-  <Icon name={isLiked ? 'like-solid' : 'like'} fill={theme.colors.secondary} />
-));
+const LikeIcon = withTheme(
+  ({ theme: { colors: { secondary } = {} } = {}, isLiked } = {}) => ({
+    name: isLiked ? 'like-solid' : 'like',
+    fill: secondary,
+  })
+)(Icon);
 
 LikeIcon.propTypes = {
   isLiked: PropTypes.bool,
@@ -35,4 +32,4 @@ Like.propTypes = {
   toggleLike: PropTypes.func,
 };
 
-export default Like;
+export { Like as default, LikeIcon };
diff --git a/apolloschurchapp/src/ui/LikeButton/index.js b/apolloschurchapp/src/ui/LikeButton/index.js
index d3a43b6..fee9f8b 100644
--- a/apolloschurchapp/src/ui/LikeButton/index.js
+++ b/apolloschurchapp/src/ui/LikeButton/index.js
@@ -9,6 +9,7 @@ import { track, events } from 'apolloschurchapp/src/analytics';
 
 import updateLikeEntity from './updateLikeEntity';
 import getLikedContentItem from './getLikedContentItem';
+import updateLikedContent from './updateLikedContent';
 
 const GetLikeData = ({ itemId, children }) => (
   <Query query={getLikedContentItem} variables={{ itemId }}>
@@ -35,7 +36,6 @@ const UpdateLikeStatus = ({ itemId, item, isLiked, children }) => (
         __typename: 'Interaction',
       },
     }}
-    refetchQueries={['getAllLikedContent']}
     update={(
       cache,
       {
@@ -44,6 +44,7 @@ const UpdateLikeStatus = ({ itemId, item, isLiked, children }) => (
         },
       }
     ) => {
+      updateLikedContent({ liked: operation === 'Like', cache, item });
       cache.writeQuery({
         query: getLikedContentItem,
         data: {
diff --git a/apolloschurchapp/src/ui/LikeButton/updateLikedContent.js b/apolloschurchapp/src/ui/LikeButton/updateLikedContent.js
new file mode 100644
index 0000000..50b612a
--- /dev/null
+++ b/apolloschurchapp/src/ui/LikeButton/updateLikedContent.js
@@ -0,0 +1,52 @@
+import getAllLikedContent from 'apolloschurchapp/src/tabs/connect/getLikedContent';
+import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
+
+const addItemToLikedContentList = ({ cache, item }) => {
+  try {
+    const data = cache.readQuery({ query: getAllLikedContent });
+    const fullItem = cache.readFragment({
+      id: `${item.__typename}:${item.id}`,
+      fragment: contentItemFragment,
+    });
+    cache.writeQuery({
+      query: getAllLikedContent,
+      data: {
+        ...data,
+        getAllLikedContent: [fullItem, ...data.getAllLikedContent],
+      },
+    });
+  } catch (e) {
+    console.log(e);
+    // Most likely we haven't ran the `getAllLikedContent` query yet.
+    // We can safely exit.
+  }
+};
+
+const removeItemFromLikedContentList = ({ cache, item }) => {
+  try {
+    const data = cache.readQuery({ query: getAllLikedContent });
+    cache.writeQuery({
+      query: getAllLikedContent,
+      data: {
+        ...data,
+        getAllLikedContent: data.getAllLikedContent.filter(
+          (content) => content.id !== item.id
+        ),
+      },
+    });
+  } catch (e) {
+    console.log(e);
+    // Most likely we haven't ran the `getAllLikedContent` query yet.
+    // We can safely exit.
+  }
+};
+
+const updateLikedContent = ({ liked, cache, item }) => {
+  if (liked) {
+    addItemToLikedContentList({ cache, item });
+  } else {
+    removeItemFromLikedContentList({ cache, item });
+  }
+};
+
+export default updateLikedContent;
diff --git a/apolloschurchapp/src/ui/UserAvatarView/AvatarForm.js b/apolloschurchapp/src/ui/UserAvatarView/AvatarForm.js
index 9bdf841..2abef0a 100644
--- a/apolloschurchapp/src/ui/UserAvatarView/AvatarForm.js
+++ b/apolloschurchapp/src/ui/UserAvatarView/AvatarForm.js
@@ -28,12 +28,20 @@ export default class AvatarForm extends PureComponent {
     isUploadingFile: false,
   };
 
-  handleUploadPhoto = async () => {
-    await uploadPhoto({
-      onUpload: () => this.setState({ isUploadingFile: true }),
-    });
-    await this.props.refetch();
+  componentWillUnmount() {
     this.setState({ isUploadingFile: false });
+  }
+
+  handleUploadPhoto = async () => {
+    try {
+      await uploadPhoto({
+        onUpload: () => this.setState({ isUploadingFile: true }),
+      });
+      await this.props.refetch();
+      await this.setState({ isUploadingFile: false });
+    } catch (e) {
+      this.setState({ isUploadingFile: false });
+    }
   };
 
   render() {
diff --git a/apolloschurchapp/src/ui/UserAvatarView/uploadPhoto.js b/apolloschurchapp/src/ui/UserAvatarView/uploadPhoto.js
index 700b9e5..055a8ef 100644
--- a/apolloschurchapp/src/ui/UserAvatarView/uploadPhoto.js
+++ b/apolloschurchapp/src/ui/UserAvatarView/uploadPhoto.js
@@ -2,6 +2,7 @@ import gql from 'graphql-tag';
 import ImagePicker from 'react-native-image-picker';
 import { client } from 'apolloschurchapp/src/client';
 import { ReactNativeFile } from 'apollo-upload-client';
+import getUserProfile from '../../tabs/connect/getUserProfile';
 
 const options = {
   title: 'Select Profile Image',
@@ -15,7 +16,7 @@ function showImagePicker() {
   return new Promise((resolve, reject) => {
     ImagePicker.showImagePicker(options, (response) => {
       if (response.didCancel) {
-        resolve({ cancelled: true });
+        reject(response.didCancel);
       } else if (response.error) {
         reject(response.error);
       } else {
@@ -26,22 +27,53 @@ function showImagePicker() {
 }
 
 export default async ({ onUpload = () => ({}) }) => {
-  const image = await showImagePicker();
-  const file = new ReactNativeFile({
-    uri: image.uri,
-    name: image.fileName,
-    type: 'image/jpeg',
-  });
-  onUpload();
-  return client.mutate({
-    mutation: gql`
-      mutation uploadProfileImage($file: Upload!, $size: Int!) {
-        uploadProfileImage(file: $file, size: $size) {
-          firstName
-          lastName
+  try {
+    const image = await showImagePicker();
+    const file = new ReactNativeFile({
+      uri: image.uri,
+      name: image.fileName,
+      type: 'image/jpeg',
+    });
+    onUpload();
+    return client.mutate({
+      mutation: gql`
+        mutation uploadProfileImage($file: Upload!, $size: Int!) {
+          uploadProfileImage(file: $file, size: $size) {
+            id
+            firstName
+            lastName
+            photo {
+              uri
+            }
+          }
         }
-      }
-    `,
-    variables: { file, size: image.fileSize },
-  });
+      `,
+      variables: { file, size: image.fileSize },
+      update: (
+        cache,
+        {
+          data: {
+            uploadProfileImage: { photo },
+          },
+        }
+      ) => {
+        const data = cache.readQuery({ query: getUserProfile });
+
+        cache.writeQuery({
+          query: getUserProfile,
+          data: {
+            currentUser: {
+              ...data.currentUser,
+              profile: {
+                ...data.currentUser.profile,
+                photo,
+              },
+            },
+          },
+        });
+      },
+    });
+  } catch (e) {
+    return null;
+  }
 };
diff --git a/apolloschurchapp/src/user-settings/ChangePassword.js b/apolloschurchapp/src/user-settings/ChangePassword.js
index 5db5101..3b016cc 100644
--- a/apolloschurchapp/src/user-settings/ChangePassword.js
+++ b/apolloschurchapp/src/user-settings/ChangePassword.js
@@ -1,38 +1,29 @@
 import React, { PureComponent } from 'react';
 import PropTypes from 'prop-types';
-import { ScrollView } from 'react-native';
+import { SafeAreaView } from 'react-native';
 import { Mutation } from 'react-apollo';
 import { Formik } from 'formik';
 import * as Yup from 'yup';
 
+import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
+import Button, { ButtonLink } from 'apolloschurchapp/src/ui/Button';
 import { Text as TextInput } from 'apolloschurchapp/src/ui/inputs';
 import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
 import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
-import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
-import { H4 } from 'apolloschurchapp/src/ui/typography';
-import styled from 'apolloschurchapp/src/ui/styled';
-import ActivityIndicator from 'apolloschurchapp/src/ui/ActivityIndicator';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
 
 import getAuthToken from '../store/getAuthToken';
 import changePassword from './passwordChange';
 
-const Header = styled(({ theme }) => ({
-  paddingTop: theme.sizing.baseUnit * 1.75,
-  flexDirection: 'row',
-  alignItems: 'flex-end',
-  justifyContent: 'space-between',
-  backgroundColor: theme.colors.background.paper,
-}))(PaddedView);
-
-const SpaceHolder = PaddedView;
-
-const DoneButton = styled(() => ({
-  fontWeight: '800',
-}))(ButtonLink);
-
 class ChangePassword extends PureComponent {
-  static navigationOptions = () => ({
-    title: 'Personal Details',
+  static navigationOptions = ({ navigation }) => ({
+    title: 'Change Password',
+    headerLeft: null,
+    headerRight: (
+      <PaddedView vertical={false}>
+        <ButtonLink onPress={() => navigation.goBack()}>Cancel</ButtonLink>
+      </PaddedView>
+    ),
   });
 
   static propTypes = {
@@ -43,6 +34,46 @@ class ChangePassword extends PureComponent {
     }),
   };
 
+  renderForm = (props) => (
+    <FlexedView>
+      <KeyboardAwareScrollView>
+        <BackgroundView>
+          <PaddedView>
+            <TextInput
+              label="New Password"
+              type="password"
+              value={props.values.password}
+              error={props.touched.password && props.errors.password}
+              onChangeText={(text) => props.setFieldValue('password', text)}
+            />
+            <TextInput
+              label="Confirm Password"
+              type="password"
+              value={props.values.confirmPassword}
+              error={
+                props.touched.confirmPassword && props.errors.confirmPassword
+              }
+              onChangeText={(text) =>
+                props.setFieldValue('confirmPassword', text)
+              }
+            />
+          </PaddedView>
+        </BackgroundView>
+      </KeyboardAwareScrollView>
+
+      <SafeAreaView>
+        <PaddedView>
+          <Button
+            disabled={!props.isValid || props.isSubmitting}
+            onPress={props.handleSubmit}
+            title="Save"
+            loading={props.isSubmitting}
+          />
+        </PaddedView>
+      </SafeAreaView>
+    </FlexedView>
+  );
+
   render() {
     return (
       <Mutation
@@ -86,54 +117,7 @@ class ChangePassword extends PureComponent {
               setSubmitting(false);
             }}
           >
-            {(props) => {
-              if (props.isSubmitting) return <ActivityIndicator />;
-
-              return (
-                <ScrollView>
-                  <Header>
-                    <SpaceHolder />
-                    <H4>Change Password</H4>
-                    {props.dirty &&
-                    props.values.password &&
-                    props.values.confirmPassword ? (
-                      <DoneButton onPress={props.handleSubmit}>Done</DoneButton>
-                    ) : (
-                      <DoneButton
-                        onPress={() => this.props.navigation.goBack()}
-                      >
-                        Back
-                      </DoneButton>
-                    )}
-                  </Header>
-                  <BackgroundView>
-                    <PaddedView>
-                      <TextInput
-                        label="New Password"
-                        type="password"
-                        value={props.values.password}
-                        error={props.touched.password && props.errors.password}
-                        onChangeText={(text) =>
-                          props.setFieldValue('password', text)
-                        }
-                      />
-                      <TextInput
-                        label="Confirm Password"
-                        type="password"
-                        value={props.values.confirmPassword}
-                        error={
-                          props.touched.confirmPassword &&
-                          props.errors.confirmPassword
-                        }
-                        onChangeText={(text) =>
-                          props.setFieldValue('confirmPassword', text)
-                        }
-                      />
-                    </PaddedView>
-                  </BackgroundView>
-                </ScrollView>
-              );
-            }}
+            {this.renderForm}
           </Formik>
         )}
       </Mutation>
diff --git a/apolloschurchapp/src/user-settings/PersonalDetails.js b/apolloschurchapp/src/user-settings/PersonalDetails.js
index bc3008a..3eb828d 100644
--- a/apolloschurchapp/src/user-settings/PersonalDetails.js
+++ b/apolloschurchapp/src/user-settings/PersonalDetails.js
@@ -1,39 +1,29 @@
 import React, { PureComponent } from 'react';
 import PropTypes from 'prop-types';
-import { ScrollView } from 'react-native';
+import { SafeAreaView } from 'react-native';
 import { Query, Mutation } from 'react-apollo';
 import { Formik } from 'formik';
 import * as Yup from 'yup';
+import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
 
 import { Text as TextInput } from 'apolloschurchapp/src/ui/inputs';
-import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
 import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
-import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
-import { H4 } from 'apolloschurchapp/src/ui/typography';
-import styled from 'apolloschurchapp/src/ui/styled';
-import ActivityIndicator from 'apolloschurchapp/src/ui/ActivityIndicator';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import Button, { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+import TableView from 'apolloschurchapp/src/ui/TableView';
 
 import getUserProfile from '../tabs/connect/getUserProfile';
 import updateCurrentUser from './updateCurrentUser';
 
-const Header = styled(({ theme }) => ({
-  paddingTop: theme.sizing.baseUnit * 1.75,
-  paddingRight: theme.sizing.baseUnit,
-  flexDirection: 'row',
-  alignItems: 'flex-end',
-  justifyContent: 'space-between',
-  backgroundColor: theme.colors.background.paper,
-}))(PaddedView);
-
-const SpaceHolder = styled(() => ({}))(PaddedView);
-
-const DoneButton = styled(() => ({
-  fontWeight: '800',
-}))(ButtonLink);
-
 class PersonalDetails extends PureComponent {
-  static navigationOptions = () => ({
+  static navigationOptions = ({ navigation }) => ({
     title: 'Personal Details',
+    headerLeft: null,
+    headerRight: (
+      <PaddedView vertical={false}>
+        <ButtonLink onPress={() => navigation.goBack()}>Cancel</ButtonLink>
+      </PaddedView>
+    ),
   });
 
   static propTypes = {
@@ -44,6 +34,59 @@ class PersonalDetails extends PureComponent {
     }),
   };
 
+  renderForm = (props) => (
+    <FlexedView>
+      <KeyboardAwareScrollView>
+        <TableView>
+          <PaddedView>
+            <TextInput
+              label="Nick Name"
+              type="text"
+              value={props.values.nickName}
+              error={props.touched.nickName && props.errors.nickName}
+              onChangeText={(text) => props.setFieldValue('nickName', text)}
+            />
+            <TextInput
+              label="First Name"
+              type="text"
+              value={props.values.firstName}
+              error={props.touched.firstName && props.errors.firstName}
+              onChangeText={(text) => props.setFieldValue('firstName', text)}
+            />
+            <TextInput
+              label="Last Name"
+              type="text"
+              value={props.values.lastName}
+              error={props.touched.lastName && props.errors.lastName}
+              onChangeText={(text) => props.setFieldValue('lastName', text)}
+            />
+          </PaddedView>
+        </TableView>
+        <TableView>
+          <PaddedView>
+            <TextInput
+              label="Email"
+              type="email"
+              value={props.values.email}
+              error={props.touched.email && props.errors.email}
+              onChangeText={(text) => props.setFieldValue('email', text)}
+            />
+          </PaddedView>
+        </TableView>
+      </KeyboardAwareScrollView>
+      <SafeAreaView>
+        <PaddedView>
+          <Button
+            disabled={!props.isValid || props.isSubmitting}
+            onPress={props.handleSubmit}
+            title="Save"
+            loading={props.isSubmitting}
+          />
+        </PaddedView>
+      </SafeAreaView>
+    </FlexedView>
+  );
+
   render() {
     return (
       <Query query={getUserProfile} fetchPolicy="cache-and-network">
@@ -111,78 +154,7 @@ class PersonalDetails extends PureComponent {
                     setSubmitting(false);
                   }}
                 >
-                  {(props) => {
-                    if (props.isSubmitting) return <ActivityIndicator />;
-
-                    return (
-                      <ScrollView>
-                        <Header>
-                          <SpaceHolder />
-                          <H4>Personal Details</H4>
-                          {props.dirty ? (
-                            <DoneButton onPress={props.handleSubmit}>
-                              Done
-                            </DoneButton>
-                          ) : (
-                            <DoneButton
-                              onPress={() => this.props.navigation.goBack()}
-                            >
-                              Back
-                            </DoneButton>
-                          )}
-                        </Header>
-                        <BackgroundView>
-                          <PaddedView>
-                            <TextInput
-                              label="Nick Name"
-                              type="text"
-                              value={props.values.nickName}
-                              error={
-                                props.touched.nickName && props.errors.nickName
-                              }
-                              onChangeText={(text) =>
-                                props.setFieldValue('nickName', text)
-                              }
-                            />
-                            <TextInput
-                              label="First Name"
-                              type="text"
-                              value={props.values.firstName}
-                              error={
-                                props.touched.firstName &&
-                                props.errors.firstName
-                              }
-                              onChangeText={(text) =>
-                                props.setFieldValue('firstName', text)
-                              }
-                            />
-                            <TextInput
-                              label="Last Name"
-                              type="text"
-                              value={props.values.lastName}
-                              error={
-                                props.touched.lastName && props.errors.lastName
-                              }
-                              onChangeText={(text) =>
-                                props.setFieldValue('lastName', text)
-                              }
-                            />
-                          </PaddedView>
-                          <PaddedView>
-                            <TextInput
-                              label="Email"
-                              type="email"
-                              value={props.values.email}
-                              error={props.touched.email && props.errors.email}
-                              onChangeText={(text) =>
-                                props.setFieldValue('email', text)
-                              }
-                            />
-                          </PaddedView>
-                        </BackgroundView>
-                      </ScrollView>
-                    );
-                  }}
+                  {this.renderForm}
                 </Formik>
               )}
             </Mutation>
diff --git a/apolloschurchapp/src/user-settings/index.js b/apolloschurchapp/src/user-settings/index.js
index da76427..9ddbc0a 100644
--- a/apolloschurchapp/src/user-settings/index.js
+++ b/apolloschurchapp/src/user-settings/index.js
@@ -16,14 +16,19 @@ import Touchable from 'apolloschurchapp/src/ui/Touchable';
 import AvatarForm from 'apolloschurchapp/src/ui/UserAvatarView/AvatarForm';
 import styled from 'apolloschurchapp/src/ui/styled';
 import ActivityIndicator from 'apolloschurchapp/src/ui/ActivityIndicator';
-import logout from '../auth/logout';
+
 import getLoginState from '../auth/getLoginState';
+import logout from '../auth/logout';
 
 const AvatarView = styled({
   alignItems: 'center',
   justifyContent: 'center',
 })(PaddedView);
 
+const BackgroundContainer = styled(({ theme }) => ({
+  paddingTop: theme.sizing.baseUnit * 1.75,
+}))(BackgroundView);
+
 class UserSettings extends PureComponent {
   static navigationOptions = () => ({
     title: 'Settings',
@@ -38,12 +43,12 @@ class UserSettings extends PureComponent {
 
   render() {
     return (
-      <Query query={getLoginState}>
+      <Query query={getLoginState} fetchPolicy="cache-and-network">
         {({ data: { isLoggedIn = false, loading } }) => {
           if (loading) return <ActivityIndicator />;
           if (!isLoggedIn) return null;
           return (
-            <BackgroundView>
+            <BackgroundContainer>
               <AvatarView>
                 <AvatarForm
                   text
@@ -136,7 +141,7 @@ class UserSettings extends PureComponent {
                   </BackgroundView>
                 )}
               </WebBrowserConsumer>
-            </BackgroundView>
+            </BackgroundContainer>
           );
         }}
       </Query>
