diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
index da8779fea2539a7bf4f9b4eb033362030d70f06d..8ab6712e8ddeb583aee033ee46ad21379b5f0a44 100644
GIT binary patch
literal 6976
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
Spxk2`ulxB33HRn~6DbLc9<2!g

literal 6928
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
Wldsp=UA~rEXwC4+UkBNDuK#n1wtL6`

diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index 30117522..93c0f8f5 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -97,4 +97,5 @@ packages/**/docs/generated/*
 # shared secrets
 .env.shared
 
-development.db
\ No newline at end of file
+# development database
+development.db
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 75f4715d..9a9267b2 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.0.0-beta.1",
+  "version": "2.13.0",
   "environment": "api"
 }
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index db1f3805..02feca1c 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -14,11 +14,20 @@ APP:
   ROOT_API_URL: ${ROOT_URL}
   JOBS_USERNAME: ${JOBS_USERNAME}
   JOBS_PASSWORD: ${JOBS_PASSWORD}
+  FLAG_LIMIT: 1
+DATABASE:
+  URL: ${DATABASE_URL}
+  OPTIONS:
+    dialectOptions:
+      ssl:
+        require: false
+        rejectUnauthorized: false
 BUGSNAG:
   ## Optional, but you'll need to remove references to @apollosproject/bugsnag if you don't wish to use.
   API_KEY: ${BUGSNAG_KEY}
 ROCK:
-  API_URL: https://rock.apollos.app/api
+  URL: ${ROCK_URL}
+  API_URL: ${ROCK_API}
   API_TOKEN: ${ROCK_TOKEN}
   IMAGE_URL: https://rock.apollos.app/GetImage.ashx
   SHARE_URL: https://rock.apollos.app
@@ -26,25 +35,31 @@ ROCK:
   TIMEZONE: 'America/New_York'
   USE_PLUGIN: true
   SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
+  VERSION: 10
 UNIVERSAL_LINKS:
   # This should be your app's bundle ID, as found in your info.plist.
-  APPLE_APP_ID: org.reactjs.native.apolloschurchapp
+  APPLE_APP_ID: ${APPLE_APP_ID}
   # This should be your app's team ID, as found in Xcode
-  APPLE_TEAM_ID: 7TM8C6252Z
+  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
   # Where should a user be redirected if they don't have your app installed?
-  APP_STORE_LINK: https://apollos.app/ios
-  PLAY_STORE_LINK: https://apollos.app/android
+  APP_STORE_LINK: ${IOS_REDIRECT}
+  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
   # Your app Id, as found in your app/build.gradle.
-  GOOGLE_APP_ID: com.differential.apollos
+  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
   # https://docs.getsocial.im/knowledge-base/android-signing-key-sha256/
-  GOOGLE_KEYSTORE_SHA256: EC:6E:B5:5A:62:53:1E:53:FF:C4:BA:A7:CB:29:77:57:71:9D:65:2F:AF:69:41:A3:AD:2B:C4:55:A1:7A:07:03
+  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
 ONE_SIGNAL:
-  APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
+  APP_ID: ${ONE_SIGNAL_APP_ID}
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
-  URL: https://apollos.online.church/
+  URL: ${CHURCH_ONLINE_URL}
   MEDIA_URLS: []
   WEB_VIEW_URL: https://apollos.online.church/
+SUGGESTED_FOLLOWS:
+  - michael.neeley@differential.com
+  -
+    email: vince@classyh.at
+    campusId: 45893d11-cd72-4a42-b3ee-08814a937e1a
 ALGOLIA:
   APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
   API_KEY: ${ALGOLIASEARCH_API_KEY}
@@ -78,7 +93,7 @@ ANALYTICS:
   # on the accompanying service
   SEGMENT_KEY:
   GA_ID:
-  USE_ROCK: true
+  USE_ROCK: false
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
   BIBLE_ID:
@@ -126,12 +141,14 @@ ROCK_MAPPINGS:
     # Id of the category used to store all persona dataviews
     PersonaId: 210
 
-  # Apollos will pull these content channels and expose them in the app on the discover screen.
+  # TODO deprecated
+  # used for the contentChannels root level query
   DISCOVER_CONTENT_CHANNEL_IDS:
     - 3
     - 5
     - 6
     - 8
+
   # Apollos will pull content items from these channels and expose them on the user feed
   # However, it will not expose the channel itself.
   # These channels are also pulled when indexing searchable content.
@@ -152,15 +169,15 @@ ROCK_MAPPINGS:
 HOME_FEATURES:
   - type: ActionBar
     title: Welcome to Apollos
-    actions: [{
-      title: Check In,
-      icon: check,
-      action: OPEN_URL,
-      relatedNode: {
-        __typename: Url,
-        url: 'https://www.google.com'
-      }
-    }]
+    actions:
+      [
+        {
+          title: Check In,
+          icon: check,
+          action: OPEN_URL,
+          relatedNode: { __typename: Url, url: 'https://www.google.com' },
+        },
+      ]
   - algorithms: [USER_FEED]
     type: HeroList
     primaryAction:
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index a4369d35..31d4dfdb 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -5,55 +5,54 @@
   "main": "lib/index.js",
   "scripts": {
     "setup": "./scripts/init.sh",
-    "start": "yarn start:prod",
+    "start": "NODE_ENV=production node ./lib/index.js",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
-    "start:prod": "NODE_ENV=production node ./lib/index.js",
     "postinstall": "yarn build",
     "link-packages": "node ./scripts/link-packages && yarn yalc update",
     "unlink-packages": "node ./scripts/link-packages remove && rm -rf ./node_modules",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
-    "lint": "eslint ./src --ext .js"
+    "lint": "eslint ./src --ext .js",
+    "translate": "node scripts/translate.js"
   },
   "engines": {
-    "node": ">=10.x.x"
+    "node": ">=12.x.x"
   },
   "dependencies": {
-    "@apollosproject/bugsnag": "^2.0.0-beta.1",
-    "@apollosproject/config": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-algolia-search": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-analytics": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-bible": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-church-online": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-cloudinary": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-onesignal": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-passes": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-postgres": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-redis-cache": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-rock": "^2.0.0-beta.1",
-    "@apollosproject/data-connector-twilio": "^2.0.0-beta.1",
-    "@apollosproject/data-schema": "^2.0.0-beta.1",
-    "@apollosproject/rock-apollo-data-source": "^2.0.0-beta.1",
-    "@apollosproject/server-core": "^2.0.0-beta.1",
+    "@apollosproject/bugsnag": "^2.13.0",
+    "@apollosproject/config": "^2.13.0",
+    "@apollosproject/data-connector-algolia-search": "^2.13.0",
+    "@apollosproject/data-connector-analytics": "^2.13.0",
+    "@apollosproject/data-connector-bible": "^2.13.0",
+    "@apollosproject/data-connector-church-online": "^2.13.0",
+    "@apollosproject/data-connector-cloudinary": "^2.13.0",
+    "@apollosproject/data-connector-onesignal": "^2.13.0",
+    "@apollosproject/data-connector-passes": "^2.13.0",
+    "@apollosproject/data-connector-postgres": "^2.13.0",
+    "@apollosproject/data-connector-redis-cache": "^2.13.0",
+    "@apollosproject/data-connector-rock": "^2.13.0",
+    "@apollosproject/data-connector-twilio": "^2.13.0",
+    "@apollosproject/data-schema": "^2.13.0",
+    "@apollosproject/rock-apollo-data-source": "^2.13.0",
+    "@apollosproject/server-core": "^2.13.0",
     "apollo-server": "^2.14.2",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
-    "cors": "^2.8.5",
     "dotenv": "6.0.0",
     "express": "^4.17.0",
     "graphql": "14.6.0",
     "prettier": "1.12.1",
-    "randomcolor": "0.5.3"
+    "randomcolor": "0.5.3",
+    "umzug": "^3.0.0-beta.15"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.0.0-beta.1",
-    "@apollosproject/babel-preset-apollos": "^2.0.0-beta.1",
-    "@apollosproject/eslint-config": "^2.0.0-beta.1",
+    "@apollosproject/apollo-server-env-mock": "^2.13.0",
+    "@apollosproject/babel-preset-apollos": "^2.13.0",
+    "@apollosproject/eslint-config": "^2.13.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
     "babel-eslint": "^10.0.3",
-    "babel-plugin-module-resolver": "^3.2.0",
     "eslint": "^5.16.0",
     "eslint-config-airbnb-base": "^14.0.0",
     "eslint-config-prettier": "^2.9.0",
diff --git a/apollos-church-api/scripts/translate.js b/apollos-church-api/scripts/translate.js
new file mode 100644
index 00000000..af1db91d
--- /dev/null
+++ b/apollos-church-api/scripts/translate.js
@@ -0,0 +1,15 @@
+const {
+  createGlobalId,
+  parseGlobalId,
+} = require('@apollosproject/server-core');
+
+const [id] = process.argv.slice(2);
+if (!id) {
+  console.log(
+    'Pass Rock or Apollos ID: translate.js AuthenticatedUser:8sad98fd89sadf98uasdf'
+  );
+  process.exit(1);
+}
+
+if (id.includes(':')) console.log(parseGlobalId(id).id);
+else console.log(createGlobalId(id, 'Generic').split(':')[1]);
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index aef8f86d..b9886fb3 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -18,7 +18,6 @@ import {
   Followings,
   Interactions,
   RockConstants,
-  Person,
   ContentItem,
   ContentChannel,
   Sharable,
@@ -28,28 +27,31 @@ import {
   AuthSms,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
   FeatureFeed,
   ActionAlgorithm,
   Event,
   PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
 } from '@apollosproject/data-connector-rock';
 
-import { Comment } from '@apollosproject/data-connector-postgres';
-
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
+// This is to mock any postgres resolvers so we don't throw API errors for unresolved
+// typedefs
+import NoPostgres from './noPostgres';
+
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
-  Person,
   Cloudinary,
   Auth,
   AuthSms,
@@ -69,14 +71,16 @@ const data = {
   Template,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
   FeatureFeed,
   ActionAlgorithm,
   Event,
   Cache,
   PrayerRequest,
-  Comment,
+  Persona,
+  Person,
+  BinaryFiles,
+  NoPostgres,
 };
 
 const {
@@ -86,6 +90,7 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -95,6 +100,7 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
new file mode 100644
index 00000000..63052d6f
--- /dev/null
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -0,0 +1,121 @@
+import { gql } from 'apollo-server';
+
+import {
+  createApolloServerConfig,
+  Interfaces,
+} from '@apollosproject/server-core';
+
+import * as Analytics from '@apollosproject/data-connector-analytics';
+import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
+import * as Search from '@apollosproject/data-connector-algolia-search';
+import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
+import * as Sms from '@apollosproject/data-connector-twilio';
+import {
+  Followings,
+  Interactions,
+  RockConstants,
+  ContentItem,
+  ContentChannel,
+  Sharable,
+  Auth,
+  PersonalDevice,
+  Template,
+  AuthSms,
+  Campus,
+  Group,
+  BinaryFiles,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  PrayerRequest,
+  Persona,
+  Person as RockPerson,
+} from '@apollosproject/data-connector-rock';
+
+import {
+  Comment,
+  UserFlag,
+  UserLike,
+  Follow,
+  Campus as PostgresCampus,
+  Person as PostgresPerson,
+} from '@apollosproject/data-connector-postgres';
+
+import * as Theme from './theme';
+
+// This modules ties together certain updates so they occurs in both Rock and Postgres.
+// Will be eliminated in the future through an enhancement to the Shovel
+import { Person, OneSignal } from './rockWithPostgres';
+
+const data = {
+  Interfaces,
+  Followings,
+  ContentChannel,
+  ContentItem,
+  RockPerson, // This entry needs to come before (postgres) Person
+  BinaryFiles, // This entry needs to come before (postgres) Person
+  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
+  Cloudinary,
+  Auth,
+  AuthSms,
+  Sms,
+  LiveStream,
+  Theme,
+  Scripture,
+  Interactions,
+  RockConstants,
+  Sharable,
+  Analytics,
+  OneSignal,
+  PersonalDevice,
+  Pass,
+  Search,
+  Template,
+  Campus,
+  Group,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  Cache,
+  PrayerRequest,
+  Comment,
+  UserLike,
+  UserFlag,
+  Follow,
+  PostgresCampus,
+  Persona,
+  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
+};
+
+const {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+} = createApolloServerConfig(data);
+
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+};
+
+// the upload Scalar is added
+export const testSchema = [
+  gql`
+    scalar Upload
+  `,
+  ...schema,
+];
diff --git a/apollos-church-api/src/data/noPostgres.js b/apollos-church-api/src/data/noPostgres.js
new file mode 100644
index 00000000..bd292eac
--- /dev/null
+++ b/apollos-church-api/src/data/noPostgres.js
@@ -0,0 +1,46 @@
+// The purpose of this file is to mock the postgres resolvers to null so the API doesn't fail when
+// there's no database. This will not be necessary when Postgres is required by all Apollos APIs.
+import gql from 'graphql-tag';
+import { Comment, Follow } from '@apollosproject/data-connector-postgres';
+
+export default {
+  schema: gql`
+    ${Comment.schema}
+    ${Follow.schema}
+  `,
+  resolver: {
+    Query: {
+      followRequests: () => [],
+      suggestedFollows: () => [],
+      searchPeople: () => {},
+    },
+    Mutation: {
+      addComment: () => null,
+      flagComment: () => null,
+      requestFollow: () => null,
+      acceptFollowRequest: () => null,
+      ignoreFollowRequest: () => null,
+    },
+    Comment: {
+      person: () => null,
+      id: () => null,
+    },
+    CommentListFeature: {
+      id: () => null,
+    },
+    AddCommentFeature: {
+      id: () => null,
+      initialPrompt: () => null,
+      addPrompt: () => null,
+      relatedNode: () => null,
+    },
+    Person: {
+      currentUserFollowing: () => null,
+      followingCurrentUser: () => null,
+    },
+    SearchPeopleResultsConnection: {
+      edges: () => [],
+      pageInfo: () => null,
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
new file mode 100644
index 00000000..cc1696f0
--- /dev/null
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -0,0 +1,127 @@
+/* eslint-disable import/prefer-default-export, max-classes-per-file */
+import { parseGlobalId } from '@apollosproject/server-core';
+import { Person as postgresPerson } from '@apollosproject/data-connector-postgres';
+import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
+
+class personDataSource extends postgresPerson.dataSource {
+  async create(attributes) {
+    const rockPersonId = await this.context.dataSources.RockPerson.create(
+      attributes
+    );
+    super.create({
+      ...attributes,
+      originType: 'rock',
+      originId: String(rockPersonId),
+    });
+    return rockPersonId;
+  }
+}
+
+// These resolvers make sure that calls to updating profile fields update both the
+const personResolver = {
+  Mutation: {
+    updateProfileField: async (
+      root,
+      { input: { field, value } },
+      { dataSources }
+    ) => {
+      await dataSources.RockPerson.updateProfile([{ field, value }]); // Update in Rock
+      return dataSources.Person.updateProfile([{ field, value }]); // updates in Postgres
+    },
+    updateProfileFields: async (root, { input }, { dataSources }) => {
+      await dataSources.RockPerson.updateProfile(input); // Update in Rock
+      return dataSources.Person.updateProfile(input); // updates in Postgres
+    },
+    uploadProfileImage: async (root, { file, size }, { dataSources }) => {
+      const person = await dataSources.RockPerson.uploadProfileImage(
+        file,
+        size
+      ); // Update in Rock
+      return dataSources.Person.updateProfile([
+        { field: 'profileImageUrl', value: person.photo.url },
+      ]); // updates in Postgres. Reuses already uploaded imageUrl
+      // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
+    },
+    updateUserCampus: async (root, { campusId }, { dataSources }) => {
+      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+
+      const { id: rockCampusId } = parseGlobalId(campusId);
+      const campus = await dataSources.PostgresCampus.getFromId(
+        rockCampusId,
+        null,
+        {
+          originType: 'rock',
+        }
+      ); // finds the postgres campus id
+      return dataSources.Person.updateProfile([
+        { field: 'campusId', value: campus.id },
+      ]); // updates in Postgres
+    },
+    updateUserPushSettings: async (root, { input }, { dataSources }) => {
+      // register the changes w/ one signal
+      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
+
+      // if the pushProviderUserId is changing, we need ot register the device with rock.
+      if (input.pushProviderUserId != null) {
+        await dataSources.PersonalDevice.addPersonalDevice({
+          pushId: input.pushProviderUserId,
+        });
+      }
+
+      try {
+        await dataSources.Person.updateProfile([
+          {
+            field: 'apollosUser',
+            value: true,
+          },
+        ]);
+      } catch (e) {
+        console.warn(e);
+      }
+
+      // return the original return value (which is currentPerson)
+      return returnValue;
+    },
+  },
+};
+
+export const Person = {
+  dataSource: personDataSource,
+  resolver: personResolver,
+};
+
+class oneSignalDataSource extends OneSignalOriginal.dataSource {
+  async createNotification({
+    toUserIds = [],
+    to,
+    content = '',
+    heading,
+    subtitle,
+    ...args
+  }) {
+    if (to && to.originId && to.originType === 'rock') {
+      const person = await this.context.dataSources.RockPerson.getFromId(
+        to.originId
+      );
+      return super.createNotification({
+        toUserIds: [person.primaryAliasId],
+        content,
+        heading,
+        subtitle,
+        ...args,
+      });
+    }
+    return super.createNotification({
+      toUserIds,
+      content,
+      heading,
+      subtitle,
+      ...args,
+    });
+  }
+}
+
+export const OneSignal = {
+  ...OneSignalOriginal,
+  dataSource: oneSignalDataSource,
+};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 3acfad03..613e7219 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,4 +1,5 @@
 import dotenv from 'dotenv/config'; // eslint-disable-line
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
 import config from './config'; // eslint-disable-line
 import server from './server';
 
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 8b6d732e..1982c1ae 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -1,6 +1,3 @@
-import fs from 'fs';
-import path from 'path';
-import cors from 'cors';
 import { ApolloServer } from 'apollo-server-express';
 import ApollosConfig from '@apollosproject/config';
 import express from 'express';
@@ -8,9 +5,17 @@ import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
 import { BugsnagPlugin } from '@apollosproject/bugsnag';
-import { sync } from '@apollosproject/data-connector-postgres';
-// import { seed } from '../seeds';
-import {
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const {
   resolvers,
   schema,
   testSchema,
@@ -18,7 +23,8 @@ import {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-} from './data';
+  migrations,
+} = dataObj;
 
 export { resolvers, schema, testSchema };
 
@@ -65,22 +71,6 @@ const apolloServer = new ApolloServer({
 
 const app = express();
 
-// health check
-app.get('/health', cors(), (req, res) => {
-  res.send('ok');
-});
-
-// apollos version
-app.get('/version', cors(), (req, res) => {
-  try {
-    const data = fs.readFileSync(path.join(__dirname, '..', 'apollos.json'));
-    const { version } = JSON.parse(data);
-    res.send(version);
-  } catch (e) {
-    res.send('unknown');
-  }
-});
-
 applyServerMiddleware({ app, dataSources, context });
 setupJobs({ app, dataSources, context });
 // Comment out if you don't want the API serving apple-app-site-association or assetlinks manifests.
@@ -92,8 +82,10 @@ apolloServer.applyMiddleware({ app, path: '/' });
 // make sure this is called last.
 // (or at least after the apollos server setup)
 (async () => {
-  await sync();
-  // await seed();
+  if (ApollosConfig?.DATABASE?.URL) {
+    const migrationRunner = await createMigrationRunner({ migrations });
+    await migrationRunner.up();
+  }
 })();
 
 export default app;
