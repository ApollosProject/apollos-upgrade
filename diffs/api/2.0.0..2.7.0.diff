diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
index da8779fea2539a7bf4f9b4eb033362030d70f06d..89bdaacce634fec6ce65cec8b8717d2709cafc42 100644
GIT binary patch
literal 6928
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
Wb9Zzu%HEvMNov&#F5FV$JAe@jw1P_j

literal 6928
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
Wldsp=UA~rEXwC4+UkBNDuK#n1wtL6`

diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index 30117522..93c0f8f5 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -97,4 +97,5 @@ packages/**/docs/generated/*
 # shared secrets
 .env.shared
 
-development.db
\ No newline at end of file
+# development database
+development.db
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index d7e5c7ee..83803aa6 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.0.0",
+  "version": "2.7.0",
   "environment": "api"
 }
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index db1f3805..84013a9e 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -14,11 +14,19 @@ APP:
   ROOT_API_URL: ${ROOT_URL}
   JOBS_USERNAME: ${JOBS_USERNAME}
   JOBS_PASSWORD: ${JOBS_PASSWORD}
+  FLAG_LIMIT: 1
+DATABASE:
+  URL: ${DATABASE_URL}
+  OPTIONS:
+    dialectOptions:
+      ssl:
+        require: false
+        rejectUnauthorized: false
 BUGSNAG:
   ## Optional, but you'll need to remove references to @apollosproject/bugsnag if you don't wish to use.
   API_KEY: ${BUGSNAG_KEY}
 ROCK:
-  API_URL: https://rock.apollos.app/api
+  API_URL: ${ROCK_API}
   API_TOKEN: ${ROCK_TOKEN}
   IMAGE_URL: https://rock.apollos.app/GetImage.ashx
   SHARE_URL: https://rock.apollos.app
@@ -26,25 +34,31 @@ ROCK:
   TIMEZONE: 'America/New_York'
   USE_PLUGIN: true
   SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
+  VERSION: 10
 UNIVERSAL_LINKS:
   # This should be your app's bundle ID, as found in your info.plist.
-  APPLE_APP_ID: org.reactjs.native.apolloschurchapp
+  APPLE_APP_ID: ${APPLE_APP_ID}
   # This should be your app's team ID, as found in Xcode
-  APPLE_TEAM_ID: 7TM8C6252Z
+  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
   # Where should a user be redirected if they don't have your app installed?
-  APP_STORE_LINK: https://apollos.app/ios
-  PLAY_STORE_LINK: https://apollos.app/android
+  APP_STORE_LINK: ${IOS_REDIRECT}
+  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
   # Your app Id, as found in your app/build.gradle.
-  GOOGLE_APP_ID: com.differential.apollos
+  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
   # https://docs.getsocial.im/knowledge-base/android-signing-key-sha256/
-  GOOGLE_KEYSTORE_SHA256: EC:6E:B5:5A:62:53:1E:53:FF:C4:BA:A7:CB:29:77:57:71:9D:65:2F:AF:69:41:A3:AD:2B:C4:55:A1:7A:07:03
+  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
 ONE_SIGNAL:
-  APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
+  APP_ID: ${ONE_SIGNAL_APP_ID}
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
-  URL: https://apollos.online.church/
+  URL: ${CHURCH_ONLINE_URL}
   MEDIA_URLS: []
   WEB_VIEW_URL: https://apollos.online.church/
+SUGGESTED_FOLLOWS:
+  - michael.neeley@differential.com
+  - 
+    email: vince@classyh.at
+    campusId: 45893d11-cd72-4a42-b3ee-08814a937e1a
 ALGOLIA:
   APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
   API_KEY: ${ALGOLIASEARCH_API_KEY}
@@ -78,7 +92,7 @@ ANALYTICS:
   # on the accompanying service
   SEGMENT_KEY:
   GA_ID:
-  USE_ROCK: true
+  USE_ROCK: false
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
   BIBLE_ID:
@@ -126,12 +140,14 @@ ROCK_MAPPINGS:
     # Id of the category used to store all persona dataviews
     PersonaId: 210
 
-  # Apollos will pull these content channels and expose them in the app on the discover screen.
+  # TODO deprecated
+  # used for the contentChannels root level query
   DISCOVER_CONTENT_CHANNEL_IDS:
     - 3
     - 5
     - 6
     - 8
+
   # Apollos will pull content items from these channels and expose them on the user feed
   # However, it will not expose the channel itself.
   # These channels are also pulled when indexing searchable content.
@@ -152,15 +168,15 @@ ROCK_MAPPINGS:
 HOME_FEATURES:
   - type: ActionBar
     title: Welcome to Apollos
-    actions: [{
-      title: Check In,
-      icon: check,
-      action: OPEN_URL,
-      relatedNode: {
-        __typename: Url,
-        url: 'https://www.google.com'
-      }
-    }]
+    actions:
+      [
+        {
+          title: Check In,
+          icon: check,
+          action: OPEN_URL,
+          relatedNode: { __typename: Url, url: 'https://www.google.com' },
+        },
+      ]
   - algorithms: [USER_FEED]
     type: HeroList
     primaryAction:
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 6c4087b7..e94e6b85 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -5,36 +5,36 @@
   "main": "lib/index.js",
   "scripts": {
     "setup": "./scripts/init.sh",
-    "start": "yarn start:prod",
+    "start": "NODE_ENV=production node ./lib/index.js",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
-    "start:prod": "NODE_ENV=production node ./lib/index.js",
     "postinstall": "yarn build",
     "link-packages": "node ./scripts/link-packages && yarn yalc update",
     "unlink-packages": "node ./scripts/link-packages remove && rm -rf ./node_modules",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
-    "lint": "eslint ./src --ext .js"
+    "lint": "eslint ./src --ext .js",
+    "translate": "node scripts/translate.js"
   },
   "engines": {
-    "node": ">=11.x.x"
+    "node": ">=12.x.x"
   },
   "dependencies": {
-    "@apollosproject/bugsnag": "^2.0.0",
-    "@apollosproject/config": "^2.0.0",
-    "@apollosproject/data-connector-algolia-search": "^2.0.0",
-    "@apollosproject/data-connector-analytics": "^2.0.0",
-    "@apollosproject/data-connector-bible": "^2.0.0",
-    "@apollosproject/data-connector-church-online": "^2.0.0",
-    "@apollosproject/data-connector-cloudinary": "^2.0.0",
-    "@apollosproject/data-connector-onesignal": "^2.0.0",
-    "@apollosproject/data-connector-passes": "^2.0.0",
-    "@apollosproject/data-connector-postgres": "^2.0.0",
-    "@apollosproject/data-connector-redis-cache": "^2.0.0",
-    "@apollosproject/data-connector-rock": "^2.0.0",
-    "@apollosproject/data-connector-twilio": "^2.0.0",
-    "@apollosproject/data-schema": "^2.0.0",
-    "@apollosproject/rock-apollo-data-source": "^2.0.0",
-    "@apollosproject/server-core": "^2.0.0",
+    "@apollosproject/bugsnag": "^2.7.0",
+    "@apollosproject/config": "^2.7.0",
+    "@apollosproject/data-connector-algolia-search": "^2.7.0",
+    "@apollosproject/data-connector-analytics": "^2.7.0",
+    "@apollosproject/data-connector-bible": "^2.7.0",
+    "@apollosproject/data-connector-church-online": "^2.7.0",
+    "@apollosproject/data-connector-cloudinary": "^2.7.0",
+    "@apollosproject/data-connector-onesignal": "^2.7.0",
+    "@apollosproject/data-connector-passes": "^2.7.0",
+    "@apollosproject/data-connector-postgres": "^2.7.0",
+    "@apollosproject/data-connector-redis-cache": "^2.7.0",
+    "@apollosproject/data-connector-rock": "^2.7.0",
+    "@apollosproject/data-connector-twilio": "^2.7.0",
+    "@apollosproject/data-schema": "^2.7.0",
+    "@apollosproject/rock-apollo-data-source": "^2.7.0",
+    "@apollosproject/server-core": "^2.7.0",
     "apollo-server": "^2.14.2",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
@@ -44,17 +44,17 @@
     "graphql": "14.6.0",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3",
-    "sqlite3": "^5.0.1"
+    "sqlite3": "^5.0.1",
+    "umzug": "^3.0.0-beta.15"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.0.0",
-    "@apollosproject/babel-preset-apollos": "^2.0.0",
-    "@apollosproject/eslint-config": "^2.0.0",
+    "@apollosproject/apollo-server-env-mock": "^2.7.0",
+    "@apollosproject/babel-preset-apollos": "^2.7.0",
+    "@apollosproject/eslint-config": "^2.7.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
     "babel-eslint": "^10.0.3",
-    "babel-plugin-module-resolver": "^3.2.0",
     "eslint": "^5.16.0",
     "eslint-config-airbnb-base": "^14.0.0",
     "eslint-config-prettier": "^2.9.0",
diff --git a/apollos-church-api/scripts/translate.js b/apollos-church-api/scripts/translate.js
new file mode 100644
index 00000000..af1db91d
--- /dev/null
+++ b/apollos-church-api/scripts/translate.js
@@ -0,0 +1,15 @@
+const {
+  createGlobalId,
+  parseGlobalId,
+} = require('@apollosproject/server-core');
+
+const [id] = process.argv.slice(2);
+if (!id) {
+  console.log(
+    'Pass Rock or Apollos ID: translate.js AuthenticatedUser:8sad98fd89sadf98uasdf'
+  );
+  process.exit(1);
+}
+
+if (id.includes(':')) console.log(parseGlobalId(id).id);
+else console.log(createGlobalId(id, 'Generic').split(':')[1]);
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index de1d76aa..b9886fb3 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -18,7 +18,6 @@ import {
   Followings,
   Interactions,
   RockConstants,
-  Person,
   ContentItem,
   ContentChannel,
   Sharable,
@@ -28,28 +27,31 @@ import {
   AuthSms,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
   FeatureFeed,
   ActionAlgorithm,
   Event,
   PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
 } from '@apollosproject/data-connector-rock';
 
-import { Comment, UserFlag } from '@apollosproject/data-connector-postgres';
-
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
+// This is to mock any postgres resolvers so we don't throw API errors for unresolved
+// typedefs
+import NoPostgres from './noPostgres';
+
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
-  Person,
   Cloudinary,
   Auth,
   AuthSms,
@@ -69,15 +71,16 @@ const data = {
   Template,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
   FeatureFeed,
   ActionAlgorithm,
   Event,
   Cache,
   PrayerRequest,
-  Comment,
-  UserFlag,
+  Persona,
+  Person,
+  BinaryFiles,
+  NoPostgres,
 };
 
 const {
@@ -87,6 +90,7 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -96,6 +100,7 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
new file mode 100644
index 00000000..46b7ca3b
--- /dev/null
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -0,0 +1,119 @@
+import { gql } from 'apollo-server';
+
+import {
+  createApolloServerConfig,
+  Interfaces,
+} from '@apollosproject/server-core';
+
+import * as Analytics from '@apollosproject/data-connector-analytics';
+import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
+import * as Search from '@apollosproject/data-connector-algolia-search';
+import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
+import * as Sms from '@apollosproject/data-connector-twilio';
+import {
+  Followings,
+  Interactions,
+  RockConstants,
+  ContentItem,
+  ContentChannel,
+  Sharable,
+  Auth,
+  PersonalDevice,
+  Template,
+  AuthSms,
+  Campus,
+  Group,
+  BinaryFiles,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  PrayerRequest,
+  Persona,
+  Person as RockPerson,
+} from '@apollosproject/data-connector-rock';
+
+import {
+  Comment,
+  UserFlag,
+  Follow,
+  Campus as PostgresCampus,
+  Person as PostgresPerson,
+} from '@apollosproject/data-connector-postgres';
+
+import * as Theme from './theme';
+
+// This modules ties together certain updates so they occurs in both Rock and Postgres.
+// Will be eliminated in the future through an enhancement to the Shovel
+import { Person, OneSignal } from './rockWithPostgres';
+
+const data = {
+  Interfaces,
+  Followings,
+  ContentChannel,
+  ContentItem,
+  RockPerson, // This entry needs to come before (postgres) Person
+  BinaryFiles, // This entry needs to come before (postgres) Person
+  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
+  Cloudinary,
+  Auth,
+  AuthSms,
+  Sms,
+  LiveStream,
+  Theme,
+  Scripture,
+  Interactions,
+  RockConstants,
+  Sharable,
+  Analytics,
+  OneSignal,
+  PersonalDevice,
+  Pass,
+  Search,
+  Template,
+  Campus,
+  Group,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  Cache,
+  PrayerRequest,
+  Comment,
+  UserFlag,
+  Follow,
+  PostgresCampus,
+  Persona,
+  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
+};
+
+const {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+} = createApolloServerConfig(data);
+
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+};
+
+// the upload Scalar is added
+export const testSchema = [
+  gql`
+    scalar Upload
+  `,
+  ...schema,
+];
diff --git a/apollos-church-api/src/data/noPostgres.js b/apollos-church-api/src/data/noPostgres.js
new file mode 100644
index 00000000..bd292eac
--- /dev/null
+++ b/apollos-church-api/src/data/noPostgres.js
@@ -0,0 +1,46 @@
+// The purpose of this file is to mock the postgres resolvers to null so the API doesn't fail when
+// there's no database. This will not be necessary when Postgres is required by all Apollos APIs.
+import gql from 'graphql-tag';
+import { Comment, Follow } from '@apollosproject/data-connector-postgres';
+
+export default {
+  schema: gql`
+    ${Comment.schema}
+    ${Follow.schema}
+  `,
+  resolver: {
+    Query: {
+      followRequests: () => [],
+      suggestedFollows: () => [],
+      searchPeople: () => {},
+    },
+    Mutation: {
+      addComment: () => null,
+      flagComment: () => null,
+      requestFollow: () => null,
+      acceptFollowRequest: () => null,
+      ignoreFollowRequest: () => null,
+    },
+    Comment: {
+      person: () => null,
+      id: () => null,
+    },
+    CommentListFeature: {
+      id: () => null,
+    },
+    AddCommentFeature: {
+      id: () => null,
+      initialPrompt: () => null,
+      addPrompt: () => null,
+      relatedNode: () => null,
+    },
+    Person: {
+      currentUserFollowing: () => null,
+      followingCurrentUser: () => null,
+    },
+    SearchPeopleResultsConnection: {
+      edges: () => [],
+      pageInfo: () => null,
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
new file mode 100644
index 00000000..cc1696f0
--- /dev/null
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -0,0 +1,127 @@
+/* eslint-disable import/prefer-default-export, max-classes-per-file */
+import { parseGlobalId } from '@apollosproject/server-core';
+import { Person as postgresPerson } from '@apollosproject/data-connector-postgres';
+import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
+
+class personDataSource extends postgresPerson.dataSource {
+  async create(attributes) {
+    const rockPersonId = await this.context.dataSources.RockPerson.create(
+      attributes
+    );
+    super.create({
+      ...attributes,
+      originType: 'rock',
+      originId: String(rockPersonId),
+    });
+    return rockPersonId;
+  }
+}
+
+// These resolvers make sure that calls to updating profile fields update both the
+const personResolver = {
+  Mutation: {
+    updateProfileField: async (
+      root,
+      { input: { field, value } },
+      { dataSources }
+    ) => {
+      await dataSources.RockPerson.updateProfile([{ field, value }]); // Update in Rock
+      return dataSources.Person.updateProfile([{ field, value }]); // updates in Postgres
+    },
+    updateProfileFields: async (root, { input }, { dataSources }) => {
+      await dataSources.RockPerson.updateProfile(input); // Update in Rock
+      return dataSources.Person.updateProfile(input); // updates in Postgres
+    },
+    uploadProfileImage: async (root, { file, size }, { dataSources }) => {
+      const person = await dataSources.RockPerson.uploadProfileImage(
+        file,
+        size
+      ); // Update in Rock
+      return dataSources.Person.updateProfile([
+        { field: 'profileImageUrl', value: person.photo.url },
+      ]); // updates in Postgres. Reuses already uploaded imageUrl
+      // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
+    },
+    updateUserCampus: async (root, { campusId }, { dataSources }) => {
+      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+
+      const { id: rockCampusId } = parseGlobalId(campusId);
+      const campus = await dataSources.PostgresCampus.getFromId(
+        rockCampusId,
+        null,
+        {
+          originType: 'rock',
+        }
+      ); // finds the postgres campus id
+      return dataSources.Person.updateProfile([
+        { field: 'campusId', value: campus.id },
+      ]); // updates in Postgres
+    },
+    updateUserPushSettings: async (root, { input }, { dataSources }) => {
+      // register the changes w/ one signal
+      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
+
+      // if the pushProviderUserId is changing, we need ot register the device with rock.
+      if (input.pushProviderUserId != null) {
+        await dataSources.PersonalDevice.addPersonalDevice({
+          pushId: input.pushProviderUserId,
+        });
+      }
+
+      try {
+        await dataSources.Person.updateProfile([
+          {
+            field: 'apollosUser',
+            value: true,
+          },
+        ]);
+      } catch (e) {
+        console.warn(e);
+      }
+
+      // return the original return value (which is currentPerson)
+      return returnValue;
+    },
+  },
+};
+
+export const Person = {
+  dataSource: personDataSource,
+  resolver: personResolver,
+};
+
+class oneSignalDataSource extends OneSignalOriginal.dataSource {
+  async createNotification({
+    toUserIds = [],
+    to,
+    content = '',
+    heading,
+    subtitle,
+    ...args
+  }) {
+    if (to && to.originId && to.originType === 'rock') {
+      const person = await this.context.dataSources.RockPerson.getFromId(
+        to.originId
+      );
+      return super.createNotification({
+        toUserIds: [person.primaryAliasId],
+        content,
+        heading,
+        subtitle,
+        ...args,
+      });
+    }
+    return super.createNotification({
+      toUserIds,
+      content,
+      heading,
+      subtitle,
+      ...args,
+    });
+  }
+}
+
+export const OneSignal = {
+  ...OneSignalOriginal,
+  dataSource: oneSignalDataSource,
+};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 3acfad03..613e7219 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,4 +1,5 @@
 import dotenv from 'dotenv/config'; // eslint-disable-line
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
 import config from './config'; // eslint-disable-line
 import server from './server';
 
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 8b6d732e..a62d5e24 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -8,9 +8,17 @@ import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
 import { BugsnagPlugin } from '@apollosproject/bugsnag';
-import { sync } from '@apollosproject/data-connector-postgres';
-// import { seed } from '../seeds';
-import {
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const {
   resolvers,
   schema,
   testSchema,
@@ -18,7 +26,8 @@ import {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-} from './data';
+  migrations,
+} = dataObj;
 
 export { resolvers, schema, testSchema };
 
@@ -92,8 +101,10 @@ apolloServer.applyMiddleware({ app, path: '/' });
 // make sure this is called last.
 // (or at least after the apollos server setup)
 (async () => {
-  await sync();
-  // await seed();
+  if (ApollosConfig?.DATABASE?.URL) {
+    const migrationRunner = await createMigrationRunner({ migrations });
+    await migrationRunner.up();
+  }
 })();
 
 export default app;
