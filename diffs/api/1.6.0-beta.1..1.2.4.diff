diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
deleted file mode 100644
index 0c933e637c776b0bb7e804685a51fc751cd58260..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6928
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
W#>rZ{@Af23@9JA>FP=8a)Tl%otW2%|

diff --git a/apollos-church-api/.eslintrc.js b/apollos-church-api/.eslintrc.js
deleted file mode 100644
index 7681348..0000000
--- a/apollos-church-api/.eslintrc.js
+++ /dev/null
@@ -1,5 +0,0 @@
-module.exports = {
-  extends: [
-    '@apollosproject/eslint-config/api',
-  ],
-}
\ No newline at end of file
diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index 901ae9c..a65b417 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -1,98 +1 @@
 lib
-# Logs
-logs
-*.log
-npm-debug.log*
-yarn-debug.log*
-yarn-error.log*
-coverage*
-
-# operating system files
-.DS_Store
-.DS_Store?
-.Spotlight-V100
-.Trashes
-ehthumbs.db
-Thumbs.db
-*.swp
-
-# Runtime data
-pids
-*.pid
-*.seed
-*.pid.lock
-
-
-# Directory for instrumented libs generated by jscoverage/JSCover
-lib-cov
-
-# Coverage directory used by tools like istanbul
-coverage
-
-# nyc test coverage
-.nyc_output
-
-# node-waf configuration
-.lock-wscript
-
-# Compiled binary addons (https://nodejs.org/api/addons.html)
-build/Release
-
-# Dependency directories
-node_modules/
-jspm_packages/
-
-# TypeScript v1 declaration files
-typings/
-
-# Optional npm cache directory
-.npm
-
-# Optional terraform
-.terraform
-source-*.tar.gz
-terraform.tfstate
-terraform.tfstate.backup
-terraform.tfvars
-
-# Optional eslint cache
-.eslintcache
-
-# Optional REPL history
-.node_repl_history
-
-# Output of 'npm pack'
-*.tgz
-
-# Yarn Integrity file
-.yarn-integrity
-
-# dotenv environment variables file
-.env
-.env.storybook
-
-# next.js build output
-.next
-
-# xcode
-build/
-
-# storybook
-storyLoader.js
-*.xcworkspacedata
-
-# sublime text settings
-*.sublime-project
-*.sublime-workspace
-
-# compiled code
-
-**/lib
-
-.watchmanconfig
-
-# generated markdown docs
-packages/**/docs/generated/*
-
-# shared secrets
-.env.shared
diff --git a/apollos-church-api/.nvmrc b/apollos-church-api/.nvmrc
deleted file mode 100644
index 5b7269c..0000000
--- a/apollos-church-api/.nvmrc
+++ /dev/null
@@ -1 +0,0 @@
-10.19.0
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 47c4536..e6473d5 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.6.0-beta.1",
+    "version": "1.2.4",
     "environment": "api"
-}
+}
\ No newline at end of file
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 0a47e70..602eb3a 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -14,53 +14,27 @@ APP:
   ROOT_API_URL: ${ROOT_URL}
   JOBS_USERNAME: ${JOBS_USERNAME}
   JOBS_PASSWORD: ${JOBS_PASSWORD}
-BUGSNAG:
-  ## Optional, but you'll need to remove references to @apollosproject/bugsnag if you don't wish to use.
-  API_KEY: ${BUGSNAG_KEY}
 ROCK:
-  API_URL: https://rock.apollos.app/api
+  API_URL: https://apollosrock.newspring.cc/api
   API_TOKEN: ${ROCK_TOKEN}
-  IMAGE_URL: https://rock.apollos.app/GetImage.ashx
-  SHARE_URL: https://rock.apollos.app
+  IMAGE_URL: https://apollosrock.newspring.cc/GetImage.ashx
+  SHARE_URL: https://apollosrock.newspring.cc
   # This should match the timezone of the Rock server
   TIMEZONE: 'America/New_York'
   USE_PLUGIN: true
   SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
-UNIVERSAL_LINKS:
-  # This should be your app's bundle ID, as found in your info.plist.
-  APPLE_APP_ID: org.reactjs.native.apolloschurchapp
-  # This should be your app's team ID, as found in Xcode
-  APPLE_TEAM_ID: 7TM8C6252Z
-  # Where should a user be redirected if they don't have your app installed?
-  APP_STORE_LINK: https://apollos.app/ios
-  PLAY_STORE_LINK: https://apollos.app/android
-  # Your app Id, as found in your app/build.gradle.
-  GOOGLE_APP_ID: com.apolloschurch.app
-  # https://docs.getsocial.im/knowledge-base/android-signing-key-sha256/
-  GOOGLE_KEYSTORE_SHA256: EC:6E:B5:5A:62:53:1E:53:FF:C4:BA:A7:CB:29:77:57:71:9D:65:2F:AF:69:41:A3:AD:2B:C4:55:A1:7A:07:03
 ONE_SIGNAL:
   APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
-  URL: https://apollos.online.church/
+  URL: https://apollos.churchonline.org/api/v1/
   MEDIA_URLS: []
-  WEB_VIEW_URL: https://apollos.online.church/
+  WEB_VIEW_URL: https://apollos.churchonline.org/
 ALGOLIA:
-  APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
-  API_KEY: ${ALGOLIASEARCH_API_KEY}
-  SEARCH_INDEX: prod_ContentItem
-  # Configure Algolia custom settings here
-  # https://www.algolia.com/doc/api-reference/settings-api-parameters/
-  CONFIGURATION:
-    searchableAttributes:
-      - title
-      - unordered(summary)
-    #customRankings:
-    # NOT CURRENTLY INCLUDED
-    # This just demonstrates what's possible
-    # To include likedCount (or any other field) override search package
-    # and add field to config below
-    #- desc(likedCount)
+  APPLICATION_ID: ${ALGOLIA_APP_ID}
+  API_KEY: ${ALGOLIA_API_KEY}
+  # TODO: should we support multiple indices? how?
+  SEARCH_INDEX: test_ContentItems
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -96,10 +70,10 @@ ENGINE:
 # This key holds various properties that allow our GraphQL server to map to your Rock Instance
 ROCK_MAPPINGS:
   INTERACTIONS:
-    # Name of the InteractionChannel that will be created per EntityType
+    # Name of the InteractionChannel that will be created
     CHANNEL_NAME: Apollos App
-    # Prefix for the name of the InteractionComponent that will be created per Entity
-    COMPONENT_NAME: Apollos App Component
+    # Name of the InteractionComponent that will be created for Content Items
+    COMPONENT_NAME: Apollos Content Item
     # 512 is "Mobile App"
     CHANNEL_MEDIUM_TYPE_ID: 512
 
@@ -108,16 +82,16 @@ ROCK_MAPPINGS:
       # When resolving "ContentSeriesContentItem" look in rock for a "ContentChannelItem"
       EntityType: ContentChannelItem
       # Used to define the subset of content channels types that use this specific type.
-      ContentChannelTypeId: [6]
+      ContentChannelTypeId: [6, 7]
     DevotionalContentItem:
       EntityType: ContentChannelItem
-      ContentChannelTypeId: []
+      ContentChannelTypeId: [1]
     MediaContentItem:
       EntityType: ContentChannelItem
     UniversalContentItem:
       EntityType: ContentChannelItem
     WeekendContentItem:
-      ContentChannelId: []
+      ContentChannelId: [5]
       EntityType: ContentChannelItem
     ContentItem:
       EntityType: ContentChannelItem
@@ -128,15 +102,22 @@ ROCK_MAPPINGS:
 
   # Apollos will pull these content channels and expose them in the app on the discover screen.
   DISCOVER_CONTENT_CHANNEL_IDS:
+    - 2
     - 3
-    - 5
+    - 4
     - 6
     - 8
   # Apollos will pull content items from these channels and expose them on the user feed
   # However, it will not expose the channel itself.
   # These channels are also pulled when indexing searchable content.
   FEED_CONTENT_CHANNEL_IDS:
+    - 1
+    - 2
+    - 3
+    - 4
+    - 5
     - 6
+    - 8
 
   CAMPAIGN_CHANNEL_IDS:
     - 11
@@ -147,46 +128,19 @@ ROCK_MAPPINGS:
   COMMUNITY_GROUP_TYPE_ID: 25
   FAMILY_GROUP_TYPE_ID: 10
 
-  MOBILE_DEVICE_TYPE_ID: 671
-
 HOME_FEATURES:
-  - algorithms: [USER_FEED]
-    type: HeroList
-    primaryAction:
-      # Right now, you hardcode exactly what GraphQL should return.
-      # Long term, we hope to have a more sophisticated mechanism for driving this field
-      action: OPEN_NODE
-      title: 'Read More'
-      relatedNode:
-        __typename: UniversalContentItem
-        id: 21
-  - algorithms: [DAILY_PRAYER]
-    isCard: false
-    type: PrayerList
-    title: Daily Prayer
-  - algorithms: [CAMPAIGN_ITEMS]
-    type: HeroList
-    isFeatured: true
   - title: FOR YOU
     algorithms: [SERMON_CHILDREN, PERSONA_FEED]
     subtitle: Explore what God calls you to today
-    type: ActionList
-  - algorithms: [PERSONA_FEED]
-    subtitle: Continue
-    type: HorizontalCardList
-  - title: RECOMMENDED
-    algorithms: [SERMON_CHILDREN]
-    subtitle: For Him
-    type: VerticalCardList
   - title: BULLETIN
     subtitle: What's happening at apollos?
-    type: ActionList
     algorithms:
       - type: CONTENT_CHANNEL
         arguments:
           contentChannelId: 13
       - type: UPCOMING_EVENTS
 
+
 # Default mapping of field types -> ids. There's probably no reason to edit this.
 ROCK_CONSTANTS:
   TEXT: 1
diff --git a/apollos-church-api/load-tests/Apollos App Testing.jmx b/apollos-church-api/load-tests/Apollos App Testing.jmx
deleted file mode 100644
index e81ef7b..0000000
--- a/apollos-church-api/load-tests/Apollos App Testing.jmx	
+++ /dev/null
@@ -1,774 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
-  <hashTree>
-    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Apollos App Testing" enabled="true">
-      <stringProp name="TestPlan.comments"></stringProp>
-      <boolProp name="TestPlan.functional_mode">false</boolProp>
-      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
-      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
-      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
-        <collectionProp name="Arguments.arguments">
-          <elementProp name="ApollosTestUser" elementType="Argument">
-            <stringProp name="Argument.name">ApollosTestUser</stringProp>
-            <stringProp name="Argument.value">vincent@differential.com</stringProp>
-            <stringProp name="Argument.metadata">=</stringProp>
-          </elementProp>
-          <elementProp name="ApollosTestPassword" elementType="Argument">
-            <stringProp name="Argument.name">ApollosTestPassword</stringProp>
-            <stringProp name="Argument.value">password</stringProp>
-            <stringProp name="Argument.metadata">=</stringProp>
-          </elementProp>
-          <elementProp name="ServerUrl" elementType="Argument">
-            <stringProp name="Argument.name">ServerUrl</stringProp>
-            <stringProp name="Argument.value">apollos-church-api.herokuapp.com</stringProp>
-            <stringProp name="Argument.metadata">=</stringProp>
-          </elementProp>
-        </collectionProp>
-      </elementProp>
-      <stringProp name="TestPlan.user_define_classpath"></stringProp>
-    </TestPlan>
-    <hashTree>
-      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Home Feed" enabled="true">
-        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
-        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
-          <boolProp name="LoopController.continue_forever">false</boolProp>
-          <stringProp name="LoopController.loops">1</stringProp>
-        </elementProp>
-        <stringProp name="ThreadGroup.num_threads">3</stringProp>
-        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
-        <boolProp name="ThreadGroup.scheduler">false</boolProp>
-        <stringProp name="ThreadGroup.duration"></stringProp>
-        <stringProp name="ThreadGroup.delay"></stringProp>
-      </ThreadGroup>
-      <hashTree>
-        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
-          <collectionProp name="HeaderManager.headers">
-            <elementProp name="" elementType="Header">
-              <stringProp name="Header.name">Content-Type</stringProp>
-              <stringProp name="Header.value">application/json</stringProp>
-            </elementProp>
-          </collectionProp>
-        </HeaderManager>
-        <hashTree/>
-        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
-          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
-            <collectionProp name="Arguments.arguments">
-              <elementProp name="" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;login&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation login {\n  authenticate(identity: \&quot;${ApollosTestUser}\&quot;, password: \&quot;${ApollosTestPassword}\&quot;) {\n    token\n  }\n}\n&quot;}</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-              </elementProp>
-            </collectionProp>
-          </elementProp>
-          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.protocol">https</stringProp>
-          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
-          <stringProp name="HTTPSampler.path">/graphql</stringProp>
-          <stringProp name="HTTPSampler.method">POST</stringProp>
-          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
-          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
-          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
-          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
-          <stringProp name="HTTPSampler.response_timeout"></stringProp>
-        </HTTPSamplerProxy>
-        <hashTree>
-          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
-            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
-            <stringProp name="JSONPostProcessor.jsonPathExprs">data.authenticate.token</stringProp>
-            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
-          </JSONPostProcessor>
-          <hashTree/>
-        </hashTree>
-        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Feed" enabled="true">
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
-            <collectionProp name="Arguments.arguments">
-              <elementProp name="query" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">query%20getUserFeed(%24first%3A%20Int%2C%20%24after%3A%20String)%20%7B%0A%20%20userFeed(first%3A%20%24first%2C%20after%3A%20%24after)%20%7B%0A%20%20%20%20pageInfo%20%7B%0A%20%20%20%20%20%20endCursor%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20...largeCardFragment%0A%20%20%20%20%20%20%20%20...contentItemFragment%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20contentItemFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20title%0A%20%20isLiked%0A%20%20likedCount%0A%20%20summary%0A%20%20coverImage%20%7B%0A%20%20%20%20name%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20parentChannel%20%7B%0A%20%20%20%20id%0A%20%20%20%20name%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20videos%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20audios%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20largeCardFragment%20on%20ContentItem%20%7B%0A%20%20...baseCardFragment%0A%20%20__typename%0A%7D%0A%0Afragment%20baseCardFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20__typename%0A%20%20...coverImageFragment%0A%20%20...themeFragment%0A%20%20title%0A%20%20summary%0A%20%20isLiked%0A%20%20...%20on%20MediaContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20DevotionalContentItem%20%7B%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20coverImageFragment%20on%20ContentItem%20%7B%0A%20%20coverImage%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20themeFragment%20on%20ContentItem%20%7B%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">query</stringProp>
-              </elementProp>
-              <elementProp name="operationName" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">getUserFeed</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">operationName</stringProp>
-              </elementProp>
-              <elementProp name="variables" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">%7B%22first%22%3A10%2C%22after%22%3Anull%7D</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">variables</stringProp>
-              </elementProp>
-            </collectionProp>
-          </elementProp>
-          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.protocol">https</stringProp>
-          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
-          <stringProp name="HTTPSampler.path">/graphql</stringProp>
-          <stringProp name="HTTPSampler.method">GET</stringProp>
-          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
-          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
-          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
-          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
-          <stringProp name="HTTPSampler.response_timeout"></stringProp>
-        </HTTPSamplerProxy>
-        <hashTree>
-          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
-            <objProp>
-              <name>saveConfig</name>
-              <value class="SampleSaveConfiguration">
-                <time>true</time>
-                <latency>true</latency>
-                <timestamp>true</timestamp>
-                <success>true</success>
-                <label>true</label>
-                <code>true</code>
-                <message>true</message>
-                <threadName>true</threadName>
-                <dataType>true</dataType>
-                <encoding>false</encoding>
-                <assertions>true</assertions>
-                <subresults>true</subresults>
-                <responseData>false</responseData>
-                <samplerData>false</samplerData>
-                <xml>false</xml>
-                <fieldNames>true</fieldNames>
-                <responseHeaders>false</responseHeaders>
-                <requestHeaders>false</requestHeaders>
-                <responseDataOnError>false</responseDataOnError>
-                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-                <assertionsResultsToSave>0</assertionsResultsToSave>
-                <bytes>true</bytes>
-                <sentBytes>true</sentBytes>
-                <url>true</url>
-                <threadCounts>true</threadCounts>
-                <idleTime>true</idleTime>
-                <connectTime>true</connectTime>
-              </value>
-            </objProp>
-            <stringProp name="filename"></stringProp>
-          </ResultCollector>
-          <hashTree/>
-          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
-            <collectionProp name="HeaderManager.headers">
-              <elementProp name="" elementType="Header">
-                <stringProp name="Header.name">Authorization</stringProp>
-                <stringProp name="Header.value">${authToken}</stringProp>
-              </elementProp>
-            </collectionProp>
-          </HeaderManager>
-          <hashTree/>
-        </hashTree>
-        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
-          <objProp>
-            <name>saveConfig</name>
-            <value class="SampleSaveConfiguration">
-              <time>true</time>
-              <latency>true</latency>
-              <timestamp>true</timestamp>
-              <success>true</success>
-              <label>true</label>
-              <code>true</code>
-              <message>true</message>
-              <threadName>true</threadName>
-              <dataType>true</dataType>
-              <encoding>false</encoding>
-              <assertions>true</assertions>
-              <subresults>true</subresults>
-              <responseData>false</responseData>
-              <samplerData>false</samplerData>
-              <xml>false</xml>
-              <fieldNames>true</fieldNames>
-              <responseHeaders>false</responseHeaders>
-              <requestHeaders>false</requestHeaders>
-              <responseDataOnError>false</responseDataOnError>
-              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-              <assertionsResultsToSave>0</assertionsResultsToSave>
-              <bytes>true</bytes>
-              <sentBytes>true</sentBytes>
-              <url>true</url>
-              <threadCounts>true</threadCounts>
-              <idleTime>true</idleTime>
-              <connectTime>true</connectTime>
-            </value>
-          </objProp>
-          <stringProp name="filename"></stringProp>
-        </ResultCollector>
-        <hashTree/>
-      </hashTree>
-      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Discover Feed" enabled="true">
-        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
-        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
-          <boolProp name="LoopController.continue_forever">false</boolProp>
-          <stringProp name="LoopController.loops">1</stringProp>
-        </elementProp>
-        <stringProp name="ThreadGroup.num_threads">3</stringProp>
-        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
-        <boolProp name="ThreadGroup.scheduler">false</boolProp>
-        <stringProp name="ThreadGroup.duration"></stringProp>
-        <stringProp name="ThreadGroup.delay"></stringProp>
-      </ThreadGroup>
-      <hashTree>
-        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
-          <collectionProp name="HeaderManager.headers">
-            <elementProp name="" elementType="Header">
-              <stringProp name="Header.name">Content-Type</stringProp>
-              <stringProp name="Header.value">application/json</stringProp>
-            </elementProp>
-          </collectionProp>
-        </HeaderManager>
-        <hashTree/>
-        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
-            <collectionProp name="Arguments.arguments">
-              <elementProp name="" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;login&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation login {\n  authenticate(identity: \&quot;${ApollosTestUser}\&quot;, password: \&quot;${ApollosTestPassword}\&quot;) {\n    token\n  }\n}\n&quot;}</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-              </elementProp>
-            </collectionProp>
-          </elementProp>
-          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
-          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.protocol">https</stringProp>
-          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
-          <stringProp name="HTTPSampler.path">/graphql</stringProp>
-          <stringProp name="HTTPSampler.method">POST</stringProp>
-          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
-          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
-          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
-          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
-          <stringProp name="HTTPSampler.response_timeout"></stringProp>
-        </HTTPSamplerProxy>
-        <hashTree>
-          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
-            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
-            <stringProp name="JSONPostProcessor.jsonPathExprs">data.authenticate.token</stringProp>
-            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
-          </JSONPostProcessor>
-          <hashTree/>
-        </hashTree>
-        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Discover Feed" enabled="true">
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
-            <collectionProp name="Arguments.arguments">
-              <elementProp name="query" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">query%20getContentChannels%20%7B%0A%20%20contentChannels%20%7B%0A%20%20%20%20id%0A%20%20%20%20name%0A%20%20%20%20childContentItemsConnection(first%3A%203)%20%7B%0A%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%0A%20%20%20%20%20%20%20%20%20%20...contentItemFragment%0A%20%20%20%20%20%20%20%20%20%20...largeCardFragment%0A%20%20%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20contentItemFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20title%0A%20%20isLiked%0A%20%20likedCount%0A%20%20summary%0A%20%20coverImage%20%7B%0A%20%20%20%20name%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20parentChannel%20%7B%0A%20%20%20%20id%0A%20%20%20%20name%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20videos%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20audios%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20largeCardFragment%20on%20ContentItem%20%7B%0A%20%20...baseCardFragment%0A%20%20__typename%0A%7D%0A%0Afragment%20baseCardFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20__typename%0A%20%20...coverImageFragment%0A%20%20...themeFragment%0A%20%20title%0A%20%20summary%0A%20%20isLiked%0A%20%20...%20on%20MediaContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20DevotionalContentItem%20%7B%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20coverImageFragment%20on%20ContentItem%20%7B%0A%20%20coverImage%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20themeFragment%20on%20ContentItem%20%7B%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">query</stringProp>
-              </elementProp>
-              <elementProp name="operationName" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">getContentChannels</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">operationName</stringProp>
-              </elementProp>
-              <elementProp name="variables" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">%7B%7D</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">variables</stringProp>
-              </elementProp>
-            </collectionProp>
-          </elementProp>
-          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.protocol">https</stringProp>
-          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
-          <stringProp name="HTTPSampler.path">/graphql</stringProp>
-          <stringProp name="HTTPSampler.method">GET</stringProp>
-          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
-          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
-          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
-          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
-          <stringProp name="HTTPSampler.response_timeout"></stringProp>
-        </HTTPSamplerProxy>
-        <hashTree>
-          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
-            <objProp>
-              <name>saveConfig</name>
-              <value class="SampleSaveConfiguration">
-                <time>true</time>
-                <latency>true</latency>
-                <timestamp>true</timestamp>
-                <success>true</success>
-                <label>true</label>
-                <code>true</code>
-                <message>true</message>
-                <threadName>true</threadName>
-                <dataType>true</dataType>
-                <encoding>false</encoding>
-                <assertions>true</assertions>
-                <subresults>true</subresults>
-                <responseData>false</responseData>
-                <samplerData>false</samplerData>
-                <xml>false</xml>
-                <fieldNames>true</fieldNames>
-                <responseHeaders>false</responseHeaders>
-                <requestHeaders>false</requestHeaders>
-                <responseDataOnError>false</responseDataOnError>
-                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-                <assertionsResultsToSave>0</assertionsResultsToSave>
-                <bytes>true</bytes>
-                <sentBytes>true</sentBytes>
-                <url>true</url>
-                <threadCounts>true</threadCounts>
-                <idleTime>true</idleTime>
-                <connectTime>true</connectTime>
-              </value>
-            </objProp>
-            <stringProp name="filename"></stringProp>
-          </ResultCollector>
-          <hashTree/>
-          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
-            <collectionProp name="HeaderManager.headers">
-              <elementProp name="" elementType="Header">
-                <stringProp name="Header.name">Authorization</stringProp>
-                <stringProp name="Header.value">${authToken}</stringProp>
-              </elementProp>
-            </collectionProp>
-          </HeaderManager>
-          <hashTree/>
-        </hashTree>
-        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
-          <objProp>
-            <name>saveConfig</name>
-            <value class="SampleSaveConfiguration">
-              <time>true</time>
-              <latency>true</latency>
-              <timestamp>true</timestamp>
-              <success>true</success>
-              <label>true</label>
-              <code>true</code>
-              <message>true</message>
-              <threadName>true</threadName>
-              <dataType>true</dataType>
-              <encoding>false</encoding>
-              <assertions>true</assertions>
-              <subresults>true</subresults>
-              <responseData>false</responseData>
-              <samplerData>false</samplerData>
-              <xml>false</xml>
-              <fieldNames>true</fieldNames>
-              <responseHeaders>false</responseHeaders>
-              <requestHeaders>false</requestHeaders>
-              <responseDataOnError>false</responseDataOnError>
-              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-              <assertionsResultsToSave>0</assertionsResultsToSave>
-              <bytes>true</bytes>
-              <sentBytes>true</sentBytes>
-              <url>true</url>
-              <threadCounts>true</threadCounts>
-              <idleTime>true</idleTime>
-              <connectTime>true</connectTime>
-            </value>
-          </objProp>
-          <stringProp name="filename"></stringProp>
-        </ResultCollector>
-        <hashTree/>
-      </hashTree>
-      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Register " enabled="true">
-        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
-        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
-          <boolProp name="LoopController.continue_forever">false</boolProp>
-          <stringProp name="LoopController.loops">1</stringProp>
-        </elementProp>
-        <stringProp name="ThreadGroup.num_threads">3</stringProp>
-        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
-        <boolProp name="ThreadGroup.scheduler">false</boolProp>
-        <stringProp name="ThreadGroup.duration"></stringProp>
-        <stringProp name="ThreadGroup.delay"></stringProp>
-      </ThreadGroup>
-      <hashTree>
-        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
-          <collectionProp name="HeaderManager.headers">
-            <elementProp name="" elementType="Header">
-              <stringProp name="Header.name">Content-Type</stringProp>
-              <stringProp name="Header.value">application/json</stringProp>
-            </elementProp>
-          </collectionProp>
-        </HeaderManager>
-        <hashTree/>
-        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register" enabled="true">
-          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
-            <collectionProp name="Arguments.arguments">
-              <elementProp name="" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;register&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation register {\n  registerPerson(email: \&quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}@jmeter-test.com\&quot;, password: \&quot;password\&quot;) {\n    token\n  }\n}\n&quot;}</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-              </elementProp>
-            </collectionProp>
-          </elementProp>
-          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.protocol">https</stringProp>
-          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
-          <stringProp name="HTTPSampler.path">/graphql</stringProp>
-          <stringProp name="HTTPSampler.method">POST</stringProp>
-          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
-          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
-          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
-          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
-          <stringProp name="HTTPSampler.response_timeout"></stringProp>
-        </HTTPSamplerProxy>
-        <hashTree>
-          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
-            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
-            <stringProp name="JSONPostProcessor.jsonPathExprs">data.registerPerson.token</stringProp>
-            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
-          </JSONPostProcessor>
-          <hashTree/>
-          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
-            <objProp>
-              <name>saveConfig</name>
-              <value class="SampleSaveConfiguration">
-                <time>true</time>
-                <latency>true</latency>
-                <timestamp>true</timestamp>
-                <success>true</success>
-                <label>true</label>
-                <code>true</code>
-                <message>true</message>
-                <threadName>true</threadName>
-                <dataType>true</dataType>
-                <encoding>false</encoding>
-                <assertions>true</assertions>
-                <subresults>true</subresults>
-                <responseData>false</responseData>
-                <samplerData>false</samplerData>
-                <xml>false</xml>
-                <fieldNames>true</fieldNames>
-                <responseHeaders>false</responseHeaders>
-                <requestHeaders>false</requestHeaders>
-                <responseDataOnError>false</responseDataOnError>
-                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-                <assertionsResultsToSave>0</assertionsResultsToSave>
-                <bytes>true</bytes>
-                <sentBytes>true</sentBytes>
-                <url>true</url>
-                <threadCounts>true</threadCounts>
-                <idleTime>true</idleTime>
-                <connectTime>true</connectTime>
-              </value>
-            </objProp>
-            <stringProp name="filename"></stringProp>
-          </ResultCollector>
-          <hashTree/>
-        </hashTree>
-        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Profile Field" enabled="true">
-          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
-            <collectionProp name="Arguments.arguments">
-              <elementProp name="" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;update&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation update {\n  updateProfileFields(input: [{field: FirstName, value: \&quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}\&quot;}]) {\n    firstName\n  }\n}\n&quot;}</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-              </elementProp>
-            </collectionProp>
-          </elementProp>
-          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.protocol">https</stringProp>
-          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
-          <stringProp name="HTTPSampler.path">/graphql</stringProp>
-          <stringProp name="HTTPSampler.method">POST</stringProp>
-          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
-          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
-          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
-          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
-          <stringProp name="HTTPSampler.response_timeout"></stringProp>
-        </HTTPSamplerProxy>
-        <hashTree>
-          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
-            <objProp>
-              <name>saveConfig</name>
-              <value class="SampleSaveConfiguration">
-                <time>true</time>
-                <latency>true</latency>
-                <timestamp>true</timestamp>
-                <success>true</success>
-                <label>true</label>
-                <code>true</code>
-                <message>true</message>
-                <threadName>true</threadName>
-                <dataType>true</dataType>
-                <encoding>false</encoding>
-                <assertions>true</assertions>
-                <subresults>true</subresults>
-                <responseData>false</responseData>
-                <samplerData>false</samplerData>
-                <xml>false</xml>
-                <fieldNames>true</fieldNames>
-                <responseHeaders>false</responseHeaders>
-                <requestHeaders>false</requestHeaders>
-                <responseDataOnError>false</responseDataOnError>
-                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-                <assertionsResultsToSave>0</assertionsResultsToSave>
-                <bytes>true</bytes>
-                <sentBytes>true</sentBytes>
-                <url>true</url>
-                <threadCounts>true</threadCounts>
-                <idleTime>true</idleTime>
-                <connectTime>true</connectTime>
-              </value>
-            </objProp>
-            <stringProp name="filename"></stringProp>
-          </ResultCollector>
-          <hashTree/>
-          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
-            <collectionProp name="HeaderManager.headers">
-              <elementProp name="" elementType="Header">
-                <stringProp name="Header.name">Authorization</stringProp>
-                <stringProp name="Header.value">${authToken}</stringProp>
-              </elementProp>
-            </collectionProp>
-          </HeaderManager>
-          <hashTree/>
-        </hashTree>
-        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Campuses" enabled="true">
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
-            <collectionProp name="Arguments.arguments">
-              <elementProp name="query" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">query%20getAllCampuses(%24latitude%3A%20Float!%2C%20%24longitude%3A%20Float!)%20%7B%0A%20%20campuses(location%3A%20%7Blatitude%3A%20%24latitude%2C%20longitude%3A%20%24longitude%7D)%20%7B%0A%20%20%20%20...CampusParts%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20CampusParts%20on%20Campus%20%7B%0A%20%20id%0A%20%20name%0A%20%20latitude%0A%20%20longitude%0A%20%20distanceFromLocation%0A%20%20street1%0A%20%20street2%0A%20%20city%0A%20%20state%0A%20%20postalCode%0A%20%20image%20%7B%0A%20%20%20%20uri%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">query</stringProp>
-              </elementProp>
-              <elementProp name="operationName" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">getAllCampuses</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">operationName</stringProp>
-              </elementProp>
-              <elementProp name="variables" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">%7B%22latitude%22%3A39.103119%2C%22longitude%22%3A-84.512016%7D</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">variables</stringProp>
-              </elementProp>
-            </collectionProp>
-          </elementProp>
-          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.protocol">https</stringProp>
-          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
-          <stringProp name="HTTPSampler.path">/graphql</stringProp>
-          <stringProp name="HTTPSampler.method">GET</stringProp>
-          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
-          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
-          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
-          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
-          <stringProp name="HTTPSampler.response_timeout"></stringProp>
-        </HTTPSamplerProxy>
-        <hashTree>
-          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
-            <objProp>
-              <name>saveConfig</name>
-              <value class="SampleSaveConfiguration">
-                <time>true</time>
-                <latency>true</latency>
-                <timestamp>true</timestamp>
-                <success>true</success>
-                <label>true</label>
-                <code>true</code>
-                <message>true</message>
-                <threadName>true</threadName>
-                <dataType>true</dataType>
-                <encoding>false</encoding>
-                <assertions>true</assertions>
-                <subresults>true</subresults>
-                <responseData>false</responseData>
-                <samplerData>false</samplerData>
-                <xml>false</xml>
-                <fieldNames>true</fieldNames>
-                <responseHeaders>false</responseHeaders>
-                <requestHeaders>false</requestHeaders>
-                <responseDataOnError>false</responseDataOnError>
-                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-                <assertionsResultsToSave>0</assertionsResultsToSave>
-                <bytes>true</bytes>
-                <sentBytes>true</sentBytes>
-                <url>true</url>
-                <threadCounts>true</threadCounts>
-                <idleTime>true</idleTime>
-                <connectTime>true</connectTime>
-              </value>
-            </objProp>
-            <stringProp name="filename"></stringProp>
-          </ResultCollector>
-          <hashTree/>
-          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
-            <collectionProp name="HeaderManager.headers">
-              <elementProp name="" elementType="Header">
-                <stringProp name="Header.name">Authorization</stringProp>
-                <stringProp name="Header.value">${authToken}</stringProp>
-              </elementProp>
-            </collectionProp>
-          </HeaderManager>
-          <hashTree/>
-        </hashTree>
-        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Feed" enabled="true">
-          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
-            <collectionProp name="Arguments.arguments">
-              <elementProp name="query" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">query%20getUserFeed(%24first%3A%20Int%2C%20%24after%3A%20String)%20%7B%0A%20%20userFeed(first%3A%20%24first%2C%20after%3A%20%24after)%20%7B%0A%20%20%20%20pageInfo%20%7B%0A%20%20%20%20%20%20endCursor%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20...largeCardFragment%0A%20%20%20%20%20%20%20%20...contentItemFragment%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20contentItemFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20title%0A%20%20isLiked%0A%20%20likedCount%0A%20%20summary%0A%20%20coverImage%20%7B%0A%20%20%20%20name%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20parentChannel%20%7B%0A%20%20%20%20id%0A%20%20%20%20name%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20videos%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20audios%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20largeCardFragment%20on%20ContentItem%20%7B%0A%20%20...baseCardFragment%0A%20%20__typename%0A%7D%0A%0Afragment%20baseCardFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20__typename%0A%20%20...coverImageFragment%0A%20%20...themeFragment%0A%20%20title%0A%20%20summary%0A%20%20isLiked%0A%20%20...%20on%20MediaContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20DevotionalContentItem%20%7B%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20coverImageFragment%20on%20ContentItem%20%7B%0A%20%20coverImage%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20themeFragment%20on%20ContentItem%20%7B%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">query</stringProp>
-              </elementProp>
-              <elementProp name="operationName" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">getUserFeed</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">operationName</stringProp>
-              </elementProp>
-              <elementProp name="variables" elementType="HTTPArgument">
-                <boolProp name="HTTPArgument.always_encode">false</boolProp>
-                <stringProp name="Argument.value">%7B%22first%22%3A10%2C%22after%22%3Anull%7D</stringProp>
-                <stringProp name="Argument.metadata">=</stringProp>
-                <boolProp name="HTTPArgument.use_equals">true</boolProp>
-                <stringProp name="Argument.name">variables</stringProp>
-              </elementProp>
-            </collectionProp>
-          </elementProp>
-          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
-          <stringProp name="HTTPSampler.protocol">https</stringProp>
-          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
-          <stringProp name="HTTPSampler.path">/graphql</stringProp>
-          <stringProp name="HTTPSampler.method">GET</stringProp>
-          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
-          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
-          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
-          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
-          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
-          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
-          <stringProp name="HTTPSampler.response_timeout"></stringProp>
-        </HTTPSamplerProxy>
-        <hashTree>
-          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
-            <boolProp name="ResultCollector.error_logging">false</boolProp>
-            <objProp>
-              <name>saveConfig</name>
-              <value class="SampleSaveConfiguration">
-                <time>true</time>
-                <latency>true</latency>
-                <timestamp>true</timestamp>
-                <success>true</success>
-                <label>true</label>
-                <code>true</code>
-                <message>true</message>
-                <threadName>true</threadName>
-                <dataType>true</dataType>
-                <encoding>false</encoding>
-                <assertions>true</assertions>
-                <subresults>true</subresults>
-                <responseData>false</responseData>
-                <samplerData>false</samplerData>
-                <xml>false</xml>
-                <fieldNames>true</fieldNames>
-                <responseHeaders>false</responseHeaders>
-                <requestHeaders>false</requestHeaders>
-                <responseDataOnError>false</responseDataOnError>
-                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-                <assertionsResultsToSave>0</assertionsResultsToSave>
-                <bytes>true</bytes>
-                <sentBytes>true</sentBytes>
-                <url>true</url>
-                <threadCounts>true</threadCounts>
-                <idleTime>true</idleTime>
-                <connectTime>true</connectTime>
-              </value>
-            </objProp>
-            <stringProp name="filename"></stringProp>
-          </ResultCollector>
-          <hashTree/>
-          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
-            <collectionProp name="HeaderManager.headers">
-              <elementProp name="" elementType="Header">
-                <stringProp name="Header.name">Authorization</stringProp>
-                <stringProp name="Header.value">${authToken}</stringProp>
-              </elementProp>
-            </collectionProp>
-          </HeaderManager>
-          <hashTree/>
-        </hashTree>
-        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
-          <boolProp name="ResultCollector.error_logging">false</boolProp>
-          <objProp>
-            <name>saveConfig</name>
-            <value class="SampleSaveConfiguration">
-              <time>true</time>
-              <latency>true</latency>
-              <timestamp>true</timestamp>
-              <success>true</success>
-              <label>true</label>
-              <code>true</code>
-              <message>true</message>
-              <threadName>true</threadName>
-              <dataType>true</dataType>
-              <encoding>false</encoding>
-              <assertions>true</assertions>
-              <subresults>true</subresults>
-              <responseData>false</responseData>
-              <samplerData>false</samplerData>
-              <xml>false</xml>
-              <fieldNames>true</fieldNames>
-              <responseHeaders>false</responseHeaders>
-              <requestHeaders>false</requestHeaders>
-              <responseDataOnError>false</responseDataOnError>
-              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
-              <assertionsResultsToSave>0</assertionsResultsToSave>
-              <bytes>true</bytes>
-              <sentBytes>true</sentBytes>
-              <url>true</url>
-              <threadCounts>true</threadCounts>
-              <idleTime>true</idleTime>
-              <connectTime>true</connectTime>
-            </value>
-          </objProp>
-          <stringProp name="filename"></stringProp>
-        </ResultCollector>
-        <hashTree/>
-      </hashTree>
-    </hashTree>
-  </hashTree>
-</jmeterTestPlan>
\ No newline at end of file
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
index cdd6308..3fce66e 100644
--- a/apollos-church-api/local.graphql
+++ b/apollos-church-api/local.graphql
@@ -1,10 +1,6 @@
-directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE
-
 enum ACTION_FEATURE_ACTION {
   READ_CONTENT
   READ_EVENT
-  OPEN_URL
-  OPEN_NODE
 }
 
 type ActionListAction {
@@ -22,7 +18,6 @@ type ActionListFeature implements Feature & Node {
   title: String
   subtitle: String
   actions: [ActionListAction]
-  primaryAction: FeatureAction
 }
 
 input AnalyticsDeviceInfo {
@@ -72,10 +67,6 @@ type AudioMediaSource implements MediaSource {
   uri: String
 }
 
-interface AudioNode {
-  audios: [AudioMedia]
-}
-
 type AuthenticatedUser {
   id: ID!
   profile: Person
@@ -109,26 +100,8 @@ type Campus implements Node {
 }
 
 input CampusLocationInput {
-  latitude: Float
-  longitude: Float
-}
-
-interface Card {
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  summary: String
-}
-
-type CardListItem {
-  id: ID!
-  hasAction: Boolean
-  actionIcon: String
-  labelText: String
-  summary: String
-  coverImage: ImageMedia
-  title(hyphenated: Boolean): String
-  relatedNode: Node
-  action: ACTION_FEATURE_ACTION
+  latitude: Float!
+  longitude: Float!
 }
 
 """A rgb color string"""
@@ -143,11 +116,6 @@ type ContentChannel implements Node {
   iconName: String
 }
 
-interface ContentChildNode {
-  parentChannel: ContentChannel
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-}
-
 interface ContentItem {
   id: ID!
   title(hyphenated: Boolean): String
@@ -182,17 +150,7 @@ input ContentItemsConnectionInput {
   after: String
 }
 
-interface ContentNode {
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  htmlContent: String
-}
-
-interface ContentParentNode {
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-}
-
-type ContentSeriesContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ProgressNode & LikableNode & ShareableNode & FeaturesNode {
+type ContentSeriesContentItem implements ContentItem & Node {
   id: ID!
   title(hyphenated: Boolean): String
   coverImage: ImageMedia
@@ -205,8 +163,6 @@ type ContentSeriesContentItem implements ContentItem & Node & ContentNode & Card
   siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
   parentChannel: ContentChannel
   theme: Theme
-  percentComplete: Float
-  upNext: ContentItem
   scriptures: [Scripture]
   isLiked: Boolean
   likedCount: Int
@@ -214,13 +170,7 @@ type ContentSeriesContentItem implements ContentItem & Node & ContentNode & Card
   features: [Feature]
 }
 
-type Device implements Node {
-  id: ID!
-  pushId: String!
-  notificationsEnabled: Boolean!
-}
-
-type DevotionalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
+type DevotionalContentItem implements ContentItem & Node {
   id: ID!
   title(hyphenated: Boolean): String
   coverImage: ImageMedia
@@ -254,16 +204,6 @@ interface Feature {
   order: Int
 }
 
-type FeatureAction {
-  relatedNode: Node
-  action: ACTION_FEATURE_ACTION
-  title: String
-}
-
-interface FeaturesNode {
-  features: [Feature]
-}
-
 enum GENDER {
   Male
   Female
@@ -284,24 +224,6 @@ enum GROUP_TYPE {
   Family
 }
 
-type HeroListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  actions: [ActionListAction]
-  heroCard: CardListItem
-  primaryAction: FeatureAction
-}
-
-type HorizontalCardListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  cards: [CardListItem]
-}
-
 type ImageMedia implements Media {
   name: String
   key: String
@@ -312,29 +234,6 @@ type ImageMediaSource implements MediaSource {
   uri: String
 }
 
-enum InteractionAction {
-  VIEW
-  COMPLETE
-  PRAY
-}
-
-input InteractionDataField {
-  field: String!
-  value: InteractionValue
-}
-
-type InteractionResult {
-  success: Boolean
-  node: Node
-}
-
-scalar InteractionValue
-
-interface LikableNode {
-  isLiked: Boolean
-  likedCount: Int
-}
-
 enum LIKE_OPERATION {
   Like
   Unlike
@@ -345,10 +244,6 @@ input LikeEntityInput {
   operation: LIKE_OPERATION!
 }
 
-interface LiveNode {
-  liveStream: LiveStream
-}
-
 type LiveStream {
   isLive: Boolean
   eventStartTime: String
@@ -363,7 +258,7 @@ interface Media {
   sources: [MediaSource]
 }
 
-type MediaContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
+type MediaContentItem implements ContentItem & Node {
   id: ID!
   title(hyphenated: Boolean): String
   coverImage: ImageMedia
@@ -394,23 +289,19 @@ interface MediaSource {
 
 type Mutation {
   _placeholder: Boolean
-  updateLikeEntity(input: LikeEntityInput!): ContentItem @deprecated(reason: "Use the more general updateLikeNode instead")
-  updateLikeNode(input: LikeEntityInput!): Node
+  updateLikeEntity(input: LikeEntityInput!): ContentItem
   updateProfileField(input: UpdateProfileInput!): Person
   updateProfileFields(input: [UpdateProfileInput]!): Person
   uploadProfileImage(file: Upload!, size: Int!): Person
   authenticate(identity: String!, password: String!): Authentication
   changePassword(password: String!): Authentication
-  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
+  registerPerson(email: String!, password: String!): Authentication
   requestSmsLoginPin(phoneNumber: String!): SmsPinResult
   authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
-  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
-  interactWithNode(action: InteractionAction!, nodeId: ID!, data: [InteractionDataField]): InteractionResult
   identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
   trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
   updateUserPushSettings(input: PushSettingsInput!): Person
   updateUserCampus(campusId: String!): Person
-  addPrayer(text: String!, isAnonymous: Boolean): PrayerRequest
 }
 
 interface Node {
@@ -465,33 +356,10 @@ type Person implements Node {
   gender: GENDER
   birthDate: String
   photo: ImageMediaSource
-  devices: [Device]
   campus: Campus
   groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
 }
 
-type PrayerListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  isCard: Boolean
-  title: String
-  subtitle: String
-  prayers: [PrayerRequest]
-}
-
-type PrayerRequest implements Node {
-  id: ID!
-  text: String!
-  requestor: Person
-  isAnonymous: Boolean
-  isPrayed: Boolean
-}
-
-interface ProgressNode {
-  percentComplete: Float
-  upNext: ContentItem
-}
-
 input PushSettingsInput {
   enabled: Boolean
   pushProviderUserId: String
@@ -506,7 +374,6 @@ type Query {
   userFeed(first: Int, after: String): ContentItemsConnection
   personaFeed(first: Int, after: String): ContentItemsConnection
   currentUser: AuthenticatedUser
-  userExists(identity: String): USER_AUTH_STATUS
   liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
   liveStreams: [LiveStream]
   scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
@@ -537,10 +404,6 @@ type ScriptureFeature implements Feature & Node {
   sharing: SharableFeature
 }
 
-interface ScriptureNode {
-  scriptures: [Scripture]
-}
-
 type SearchResult {
   cursor: String
   title: String
@@ -572,13 +435,8 @@ type SharableFeature implements Sharable {
   url: String @deprecated(reason: "Not supported on a feature")
 }
 
-interface ShareableNode {
-  sharing: SharableContentItem
-}
-
 type SmsPinResult {
   success: Boolean
-  userAuthStatus: USER_AUTH_STATUS
 }
 
 type TextFeature implements Feature & Node {
@@ -601,16 +459,12 @@ type ThemeColors {
   alert: Color
 }
 
-interface ThemedNode {
-  theme: Theme
-}
-
 enum ThemeType {
   LIGHT
   DARK
 }
 
-type UniversalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & ShareableNode {
+type UniversalContentItem implements ContentItem & Node {
   id: ID!
   title(hyphenated: Boolean): String
   coverImage: ImageMedia
@@ -645,31 +499,11 @@ input UpdateProfileInput {
 """The `Upload` scalar type represents a file upload."""
 scalar Upload
 
-type Url implements Node {
-  url: String
-  id: ID!
-}
-
-enum USER_AUTH_STATUS {
-  NONE
-  NEW_APP_USER
-  EXISTING_APP_USER
-}
-
 enum VERSION {
   WEB
   KJV
 }
 
-type VerticalCardListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  isFeatured: Boolean
-  cards: [CardListItem]
-}
-
 type VideoMedia implements Media {
   name: String
   key: String
@@ -681,19 +515,7 @@ type VideoMediaSource implements MediaSource {
   uri: String
 }
 
-interface VideoNode {
-  videos: [VideoMedia]
-}
-
-type WebviewFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  linkText: String
-  title: String
-  url: String
-}
-
-type WeekendContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & LiveNode & ShareableNode & FeaturesNode {
+type WeekendContentItem implements ContentItem & Node {
   id: ID!
   title(hyphenated: Boolean): String
   coverImage: ImageMedia
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 4751996..4c34073 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,26 +1,20 @@
 {
   "name": "apollos-church-api",
-  "version": "1.0.0",
+  "version": "1.2.4",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
-    "setup": "./scripts/init.sh",
     "start": "./scripts/generateLocalSchema.sh & yarn start:dev",
-    "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
+    "start:dev": "nodemon ./src/index.js --exec babel-node --delay 2",
     "start:prod": "NODE_ENV=production node ./lib/index.js",
-    "postinstall": "yarn build",
-    "link-packages": "node ./scripts/link-packages",
-    "unlink-packages": "node ./scripts/link-packages remove",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
     "lint": "eslint ./src --ext .js",
     "fixlint": "eslint ./src --ext .js --fix",
     "codecov": "cat ./coverage/lcov.info | codecov",
     "version": "node ../../scripts/update-apollos-version.js && git add apollos.json",
-    "upgrade": "npx @apollosproject/upgrade-tools upgrade",
-    "latest": "./scripts/add-packages.sh latest",
-    "beta": "./scripts/add-packages.sh beta",
-    "canary": "./scripts/add-packages.sh canary"
+    "schema-diff": "./scripts/schemaDiff.sh",
+    "schema-lint": "graphql-schema-linter local.graphql"
   },
   "engines": {
     "node": ">=8.11.x"
@@ -40,52 +34,38 @@
     ]
   },
   "dependencies": {
-    "@apollosproject/bugsnag": "^1.6.0-beta.0",
-    "@apollosproject/config": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-algolia-search": "^1.6.0-beta.1",
-    "@apollosproject/data-connector-analytics": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-bible": "^1.6.0-beta.1",
-    "@apollosproject/data-connector-church-online": "^1.6.0-beta.1",
-    "@apollosproject/data-connector-cloudinary": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-onesignal": "^1.6.0-beta.1",
-    "@apollosproject/data-connector-passes": "^1.6.0-beta.1",
-    "@apollosproject/data-connector-redis-cache": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-rock": "^1.6.0-beta.1",
-    "@apollosproject/data-connector-twilio": "^1.6.0-beta.0",
-    "@apollosproject/data-schema": "^1.6.0-beta.0",
-    "@apollosproject/rock-apollo-data-source": "^1.6.0-beta.1",
-    "@apollosproject/server-core": "^1.6.0-beta.1",
-    "apollo-server": "^2.14.2",
-    "apollo-server-express": "2.14.2",
+    "@apollosproject/config": "^1.2.4",
+    "@apollosproject/data-connector-algolia-search": "^1.2.4",
+    "@apollosproject/data-connector-analytics": "^1.2.4",
+    "@apollosproject/data-connector-bible": "^1.2.4",
+    "@apollosproject/data-connector-church-online": "^1.2.4",
+    "@apollosproject/data-connector-cloudinary": "^1.2.4",
+    "@apollosproject/data-connector-onesignal": "^1.2.4",
+    "@apollosproject/data-connector-passes": "^1.2.4",
+    "@apollosproject/data-connector-redis-cache": "^1.2.4",
+    "@apollosproject/data-connector-rock": "^1.2.4",
+    "@apollosproject/data-connector-twilio": "^1.2.4",
+    "@apollosproject/data-schema": "^1.2.4",
+    "@apollosproject/rock-apollo-data-source": "^1.2.4",
+    "@apollosproject/server-core": "^1.2.4",
+    "apollo-server": "^2.0.5",
+    "apollo-server-express": "2.4.8",
     "color": "3.0.0",
     "dotenv": "6.0.0",
     "express": "^4.17.0",
-    "graphql": "14.6.0",
+    "graphql": "0.13.2",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^1.6.0-beta.0",
-    "@apollosproject/babel-preset-apollos": "^1.6.0-beta.0",
-    "@apollosproject/eslint-config": "^1.6.0-beta.1",
+    "@apollosproject/apollo-server-env-mock": "^1.2.4",
+    "@apollosproject/babel-preset-apollos": "^1.2.4",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
-    "@babel/node": "^7.7.4",
     "@entria/graphql-findbreakingchanges": "^1.0.1",
-    "babel-eslint": "^10.0.3",
-    "babel-jest": "^24.9.0",
-    "babel-plugin-module-resolver": "^3.2.0",
-    "codecov": "3.7.1",
-    "eslint": "^5.16.0",
-    "eslint-config-airbnb-base": "^14.0.0",
-    "eslint-config-prettier": "^2.9.0",
-    "eslint-import-resolver-babel-module": "^5.0.0-beta.0",
-    "eslint-plugin-babel": "^5.1.0",
-    "eslint-plugin-import": "^2.12.0",
-    "eslint-plugin-jest": "^21.15.2",
-    "eslint-plugin-prettier": "^2.6.0",
+    "codecov": "3.0.2",
     "get-graphql-schema": "^2.1.2",
-    "linkemon": "^0.1.1",
-    "nodemon": "^2.0.2"
+    "graphql-schema-linter": "^0.2.0",
+    "nodemon": "1.18.7"
   }
 }
diff --git a/apollos-church-api/scripts/add-packages.sh b/apollos-church-api/scripts/add-packages.sh
deleted file mode 100755
index 22587da..0000000
--- a/apollos-church-api/scripts/add-packages.sh
+++ /dev/null
@@ -1,30 +0,0 @@
-# get list of apollosproject packages to update
-
-# get devDependencies line number
-DEVDEPSLINE=$(grep -n "devDependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
-
-# get dependecies line number
-DEPSLINE=$(grep -n "dependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
-
-# determine what npm tag to update to
-if [ "$#" -ne 1 ]; then
-	echo "pass npm tag like this: ./add-packages.sh <TAG>"
-	exit 1
-else
-	TAG=$1
-fi;
-
-# replace package names with version tag
-JSON=$(sed -E "s/^.*\"(@apollosproject\/[a-z\-]+)\".*$/\1@$TAG /g" package.json)
-
-# if packages are listed first and dev packages second...
-if [ $DEVDEPSLINE -gt $DEPSLINE ]
-then
-		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE","$DEVDEPSLINE"p | grep "@apollosproject" | tr -d "\n")
-		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
-else
-		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
-		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE","$DEPSLINE"p | grep "@apollosproject" | tr -d "\n")
-fi
-yarn add --dev $DEVPKGS --ignore-scripts
-yarn add $PKGS --ignore-scripts
diff --git a/apollos-church-api/scripts/generateLocalSchema.sh b/apollos-church-api/scripts/generateLocalSchema.sh
index 59be766..869e5a8 100755
--- a/apollos-church-api/scripts/generateLocalSchema.sh
+++ b/apollos-church-api/scripts/generateLocalSchema.sh
@@ -5,6 +5,13 @@ if eval "$PING_SERVER"; then
   ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
   echo 'Done. Check local.graphql'
 else
+  echo $*
+  if [ "$*" = "--start-server" ]; then
+    echo 'Server not running, starting server'
+    PORT=4000 TWILIO_ACCOUNT_SID=ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX npm run start:prod > /tmp/server-log.txt &
+    SERVER_PID=$!
+    echo "Server running... (PID $SERVER_PID)"
+  fi
   sleep 1
   until eval "$PING_SERVER"; do
       sleep 1
@@ -12,4 +19,10 @@ else
   done
   echo 'Curling Server for most recent schema.'
   ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
+  echo 'Publishing Schema to Apollo Engine.'
+  npx apollo server:publish --endpoint=http://localhost:4000
+  if [ "$*" = "--start-server" ]; then
+    echo "Killing Server (PID $SERVER_PID)"
+    kill -9 $SERVER_PID
+  fi
 fi
diff --git a/apollos-church-api/scripts/init.sh b/apollos-church-api/scripts/init.sh
deleted file mode 100755
index 474bfae..0000000
--- a/apollos-church-api/scripts/init.sh
+++ /dev/null
@@ -1,7 +0,0 @@
-# create .env file
-if test -f .env; then
-	echo ".env file already exists!"
-	exit 1
-fi
-echo "ROCK_API=
-ROCK_TOKEN=" > .env
diff --git a/apollos-church-api/scripts/link-packages.js b/apollos-church-api/scripts/link-packages.js
deleted file mode 100644
index 7778c0a..0000000
--- a/apollos-church-api/scripts/link-packages.js
+++ /dev/null
@@ -1,16 +0,0 @@
-const fs = require('fs');
-const { execSync } = require('child_process');
-
-const direction = process.argv[2] || 'link';
-
-const packageJson = JSON.parse(fs.readFileSync(`${__dirname}/../package.json`));
-
-const dependencies = [
-  ...Object.keys(packageJson.dependencies),
-  ...Object.keys(packageJson.devDependencies),
-].filter((d) => d.includes('@apollosproject'));
-
-dependencies.forEach((dep) => {
-  const output = execSync(`yalc ${direction} ${dep}`, { encoding: 'utf8' });
-  console.log(output);
-});
diff --git a/apollos-church-api/scripts/schemaDiff.sh b/apollos-church-api/scripts/schemaDiff.sh
new file mode 100755
index 0000000..67404e4
--- /dev/null
+++ b/apollos-church-api/scripts/schemaDiff.sh
@@ -0,0 +1,13 @@
+#!/usr/bin/env bash
+sh ./scripts/generateLocalSchema.sh --start-server
+./node_modules/.bin/get-graphql-schema https://apollos-church-api-herokuapp-com.global.ssl.fastly.net > prod.graphql
+DIFF=$(graphql-findbreakingchanges prod.graphql local.graphql)
+rm prod.graphql
+echo "$DIFF"
+
+if [[ ! $DIFF = *"NO BREAKING CHANGES"* ]]
+then
+  exit 1
+else
+  exit 0
+fi
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index feab7bb..50d8d41 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -1,9 +1,6 @@
 import { gql } from 'apollo-server';
 
-import {
-  createApolloServerConfig,
-  Interfaces,
-} from '@apollosproject/server-core';
+import { createApolloServerConfig } from '@apollosproject/server-core';
 
 import * as Analytics from '@apollosproject/data-connector-analytics';
 import * as Scripture from '@apollosproject/data-connector-bible';
@@ -29,9 +26,8 @@ import {
   Campus,
   Group,
   BinaryFiles,
-  Feature,
+  Features,
   Event,
-  PrayerRequest,
 } from '@apollosproject/data-connector-rock';
 import * as Theme from './theme';
 
@@ -40,7 +36,6 @@ import * as Theme from './theme';
 import * as OneSignalWithRock from './oneSignalWithRock';
 
 const data = {
-  Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
@@ -65,10 +60,9 @@ const data = {
   Campus,
   Group,
   BinaryFiles,
-  Feature,
+  Features,
   Event,
   Cache,
-  PrayerRequest,
 };
 
 const {
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 3acfad0..796ad4d 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -8,9 +8,9 @@ export { testSchema } from './server'; // eslint-disable-line import/prefer-defa
 const { PORT } = process.env;
 if (!PORT && process.env.NODE_ENV !== 'test')
   console.warn(
-    'Add `PORT=XXXX` if you are having trouble connecting to the server. By default, PORT is 4000.'
+    'Add `ENV=4000` if you are having trouble connecting to the server. By default, PORT is random.'
   );
 
-server.listen({ port: PORT || 4000 }, () => {
-  console.log(`🚀 Server ready at http://0.0.0.0:${PORT || 4000}`);
+server.listen({ port: PORT }, () => {
+  console.log(`🚀 Server ready at http://0.0.0.0:${PORT}`);
 });
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index e0106a6..8652945 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -2,9 +2,7 @@ import { ApolloServer } from 'apollo-server-express';
 import ApollosConfig from '@apollosproject/config';
 import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
-import { get } from 'lodash';
-import { setupUniversalLinks } from '@apollosproject/server-core';
-import { BugsnagPlugin } from '@apollosproject/bugsnag';
+
 import {
   resolvers,
   schema,
@@ -28,7 +26,7 @@ const cacheOptions = isDev
       cacheControl: {
         stripFormattedExtensions: false,
         calculateHttpHeaders: true,
-        defaultMaxAge: 3600,
+        defaultMaxAge: 600,
       },
     };
 
@@ -41,9 +39,8 @@ const apolloServer = new ApolloServer({
   context,
   introspection: true,
   extensions,
-  plugins: [new BugsnagPlugin()],
   formatError: (error) => {
-    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
+    console.error(error.extensions.exception.stacktrace.join('\n'));
     return error;
   },
   playground: {
@@ -60,15 +57,8 @@ const apolloServer = new ApolloServer({
 
 const app = express();
 
-// health check
-app.get('/health', (req, res) => {
-  res.send('ok');
-});
-
 applyServerMiddleware({ app, dataSources, context });
 setupJobs({ app, dataSources, context });
-// Comment out if you don't want the API serving apple-app-site-association or assetlinks manifests.
-setupUniversalLinks({ app });
 
 apolloServer.applyMiddleware({ app });
 apolloServer.applyMiddleware({ app, path: '/' });
