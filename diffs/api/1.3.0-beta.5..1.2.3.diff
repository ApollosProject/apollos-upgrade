diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 508442d..c4fd80b 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.3.0-beta.5",
+    "version": "1.2.3",
     "environment": "api"
 }
\ No newline at end of file
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index c8754e4..602eb3a 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -33,20 +33,8 @@ CHURCH_ONLINE:
 ALGOLIA:
   APPLICATION_ID: ${ALGOLIA_APP_ID}
   API_KEY: ${ALGOLIA_API_KEY}
-  # TODO: should we support multiple indices? how
-  SEARCH_INDEX: test_ContentItem
-  # Configure Algolia custom settings here
-  # https://www.algolia.com/doc/api-reference/settings-api-parameters/
-  CONFIGURATION:
-    searchableAttributes:
-      - title
-      - unordered(summary)
-    #customRankings:
-      # NOT CURRENTLY INCLUDED
-      # This just demonstrates what's possible
-      # To include likedCount (or any other field) override search package
-      # and add field to config below
-      #- desc(likedCount)
+  # TODO: should we support multiple indices? how?
+  SEARCH_INDEX: test_ContentItems
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
index 7438b56..5974ba9 100644
--- a/apollos-church-api/local.graphql
+++ b/apollos-church-api/local.graphql
@@ -1,5 +1,3 @@
-directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE
-
 enum ACTION_FEATURE_ACTION {
   READ_CONTENT
   READ_EVENT
@@ -102,8 +100,8 @@ type Campus implements Node {
 }
 
 input CampusLocationInput {
-  latitude: Float
-  longitude: Float
+  latitude: Float!
+  longitude: Float!
 }
 
 """A rgb color string"""
@@ -138,7 +136,6 @@ interface ContentItem {
 
 type ContentItemsConnection {
   edges: [ContentItemsConnectionEdge]
-  totalCount: Int
   pageInfo: PaginationInfo
 }
 
@@ -297,10 +294,9 @@ type Mutation {
   uploadProfileImage(file: Upload!, size: Int!): Person
   authenticate(identity: String!, password: String!): Authentication
   changePassword(password: String!): Authentication
-  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
+  registerPerson(email: String!, password: String!): Authentication
   requestSmsLoginPin(phoneNumber: String!): SmsPinResult
   authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
-  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
   identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
   trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
   updateUserPushSettings(input: PushSettingsInput!): Person
@@ -377,10 +373,9 @@ type Query {
   userFeed(first: Int, after: String): ContentItemsConnection
   personaFeed(first: Int, after: String): ContentItemsConnection
   currentUser: AuthenticatedUser
-  userExists(identity: String): USER_AUTH_STATUS
   liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
   liveStreams: [LiveStream]
-  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
+  scripture(query: String!, version: VERSION): Scripture
   scriptures(query: String!, version: VERSION): [Scripture]
   userPass: Pass
   search(query: String!, first: Int, after: String): SearchResultsConnection
@@ -441,7 +436,6 @@ type SharableFeature implements Sharable {
 
 type SmsPinResult {
   success: Boolean
-  userAuthStatus: USER_AUTH_STATUS
 }
 
 type TextFeature implements Feature & Node {
@@ -504,12 +498,6 @@ input UpdateProfileInput {
 """The `Upload` scalar type represents a file upload."""
 scalar Upload
 
-enum USER_AUTH_STATUS {
-  NONE
-  NEW_APP_USER
-  EXISTING_APP_USER
-}
-
 enum VERSION {
   WEB
   KJV
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 0b887f8..b93955f 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apollos-church-api",
-  "version": "1.3.0-beta.5",
+  "version": "1.2.3",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
@@ -34,20 +34,20 @@
     ]
   },
   "dependencies": {
-    "@apollosproject/config": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-algolia-search": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-analytics": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-bible": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-church-online": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-cloudinary": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-onesignal": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-passes": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-redis-cache": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-rock": "^1.3.0-beta.5",
-    "@apollosproject/data-connector-twilio": "^1.3.0-beta.5",
-    "@apollosproject/data-schema": "^1.3.0-beta.5",
-    "@apollosproject/rock-apollo-data-source": "^1.3.0-beta.5",
-    "@apollosproject/server-core": "^1.3.0-beta.5",
+    "@apollosproject/config": "^1.2.3",
+    "@apollosproject/data-connector-algolia-search": "^1.2.3",
+    "@apollosproject/data-connector-analytics": "^1.2.3",
+    "@apollosproject/data-connector-bible": "^1.2.3",
+    "@apollosproject/data-connector-church-online": "^1.2.3",
+    "@apollosproject/data-connector-cloudinary": "^1.2.3",
+    "@apollosproject/data-connector-onesignal": "^1.2.3",
+    "@apollosproject/data-connector-passes": "^1.2.3",
+    "@apollosproject/data-connector-redis-cache": "^1.2.3",
+    "@apollosproject/data-connector-rock": "^1.2.3",
+    "@apollosproject/data-connector-twilio": "^1.2.3",
+    "@apollosproject/data-schema": "^1.2.3",
+    "@apollosproject/rock-apollo-data-source": "^1.2.3",
+    "@apollosproject/server-core": "^1.2.3",
     "apollo-server": "^2.0.5",
     "apollo-server-express": "2.4.8",
     "color": "3.0.0",
@@ -58,8 +58,8 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^1.3.0-beta.5",
-    "@apollosproject/babel-preset-apollos": "^1.3.0-beta.5",
+    "@apollosproject/apollo-server-env-mock": "^1.2.3",
+    "@apollosproject/babel-preset-apollos": "^1.2.3",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@entria/graphql-findbreakingchanges": "^1.0.1",
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 88a6902..8652945 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -2,7 +2,6 @@ import { ApolloServer } from 'apollo-server-express';
 import ApollosConfig from '@apollosproject/config';
 import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
-import { get } from 'lodash';
 
 import {
   resolvers,
@@ -27,7 +26,7 @@ const cacheOptions = isDev
       cacheControl: {
         stripFormattedExtensions: false,
         calculateHttpHeaders: true,
-        defaultMaxAge: 3600,
+        defaultMaxAge: 600,
       },
     };
 
@@ -41,7 +40,7 @@ const apolloServer = new ApolloServer({
   introspection: true,
   extensions,
   formatError: (error) => {
-    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
+    console.error(error.extensions.exception.stacktrace.join('\n'));
     return error;
   },
   playground: {
