diff --git a/apollos-church-api/.babelrc b/apollos-church-api/.babelrc
index 5cb8e6ac..f644de5f 100644
--- a/apollos-church-api/.babelrc
+++ b/apollos-church-api/.babelrc
@@ -1,5 +1,5 @@
 {
-  "presets": ["apollos"],
+  "presets": ["@apollosproject/apollos"],
   "env": {
     "development": {
       "sourceMaps": "inline"
diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
new file mode 100644
index 0000000000000000000000000000000000000000..a53c0b2ac539ebb24bd08ccd25b71d818a314b21
GIT binary patch
literal 6880
zcmV<68Xx6TVQh3|WM5ykTBlsFrGNqw)|w_>J!g}@I}DMEkU_GAB)M47ZKv-Z+(cx&
z`o~tyWGi4sB&8D@wZtv3b=euKAqdx_l;2osBst#lE~o~6t_=+bo#yFV;2AQ+O@d@}
zh7aKA)y<zZ<%UXYxlNEkN)l_i=01J1Db}U&RjWmwU2fUiJb!#rn#hLZSzewZ;Z?O%
z3@^!c0)Q0@lP{L8K1A(k;a38|36yiaTa2RyAILN45m24No2n})czI+s0!#dFNkLOp
zs)4S_9DKibP1@*=1hQNojqtp{Y@VnC=<s{gWVkJ^k9?c7ac7W1=o(R`;}+@UQXmRz
z91iA+FiJ;TVG%Uhsm*@}Uey*#TUGbX?r9aP={XwmfBbNZknsU{c%-GX|2<!YoP0m_
zRNf+dOHywGAIYb{+*c8-nsGLrE8%m4dWFMjdwujwA~61NQbm5Dvx0)fi>f_o_6d$z
z`|Her!%4FH&A;72Cjj+d##^kKge`k@8i(;u_?+&nCJ;rXk=Lv@!tq|m&Kq?ugp5}>
zv0%m)_a~nyyLi_&9fQE97B9er4wss+k?CUkgEuPzOVow}JORka9E;bqP@(>Z*+Hy?
z3l$`Qx!sfFFm&Po$tJi<D;BGFPGq9{VtlCRILXkEr8!6!>1_!;l~$j4W>BPB#te%Y
zhnjV-BqZObD}+%{au+u6a?4_IR9a&xpmAS9B4p!XTNFkYLR!jtilBbnGqssJAKB%X
zce)ITgG2XwQWv3OsU#-TMIbf*TN@M|RNw*ejU(G2zp*1odQn19<f)=wsbR@k{T77W
zT<V!XO%2?Ycet8c(SBu>-RPR#VFt`ejrk*n3qQwDr6=rAfz;|Ebd2Z_Kuw*329_@Y
z<0X4AoJx5d@XoH=c@xz&5;FAl$(sPU!R$GlSrOrIvxgch4Soh_+#1f)I3;9^O(>p?
z04$rzn`OieRrkB9DSxFx#B#CxzcSM>zt)vg=W_7t+ZH(A!2<$Ps_ojfRFh;Yx*$oN
z=~Xgd*J>?>=awutZ`6-Q+K)ZgmU{hN!~mU2r1+~<<`4qqeC*qZ#-s_NuDI1`9>~f)
zldl-Q$4J9TeVDlFlXxi+E8*Q}v8v_!ROF9<3=<^=zt{Z1RFzD?l50J?=rhM^p?Rcv
z<{XS7l~g?BWHzdBZlHT1@onsTC~aiyUN~CpbNOA^$zM+>WR-d3KPA(kyy=|-GG5sA
zBM-Q*OH_S-x>yHOx0v2eS%4k>h{gFQ#qS4t>8H)5D~bdaYNeJjR3;gTeJ?doc+YF9
z^?7&1QC4N`H;V5jC(9YYaFOc7@&sjlP*y|+*>s^-AFUxcUpvvGyo~Cil4&H;(~vU=
zWXNFdI;H^_V~T38>i#>rJ2y3=2`}dTmczjO{W@7;BB2t76*Cb0ie1r7Ku}P<pf2=#
zbn(E|0B~9Nc98cB2K(V1>OsNSv)REb5=6B=q@u$sUPk+%t~QTLTPYvb?ON-qdyXJ%
zqWP~C1E_mk^vP<Jd@N8;t@4MU-gOAjbkB)ybh@&tkeA|eaM=Bl)8DTvOJ$S8TGQa-
zJiR`o+1`6z1~ZjUc+OB%%6QY}oWsk!#YbL1ll0BXahQB?K&Mrei{X1nWS#eQGJX1t
zD3uTu5|GA9bHuzfn*Lnfi^#Rfu2rwpt-4h*2Dz~0ED2HXMClvKB?n-@%gbtw4gOLQ
z)Y;-w;SWM_I<#Hy1llml{>g8qCF&bTTwV)L<usndwj`h|yx=1WfNUH_y8`O&-8r=1
z{#v=8^%mMV<+)V4DlB`gZ?10=?1gy$y$mF^3RIKXZVGvBa@z1P=tiL21@t8tj}Z<A
zR5UX5W@2GsuE0E$!r-wR_uo%j<Y0y2fIJO#KA}KZ%|6l`zlY)wpc0*_oWd*`$a<(n
zRZ=;-Q$l8h<P#El>AE_jInZu0#M^h=te6ZI9A{{SRIfCFuG8p@)WnYfm;?k|;zs27
zl^4_r?0{_%7COjHDz>R1c`8H1A%VoEnivAr51<#F-(x|zUo?`fyEmUH+S{$~P-s6j
z1IZUDZ8Cv|HjS)O`CR=E%>>%q;oxBMO$pL9^%~q9y@4uRoa_YmFb-*26k3VdVkO(F
zKe2CVklI{ub~B7l!)!lSHN%2Ff+V(EqfR*DYHt_U!Ph44?p6%3wcgD^=ZaTFI;{Im
z!9`U<BC40ru7V*IUaojht+v3KYs;#{CKW_$3mE{!de=#bJ|5T75KT)m`3BZxBHTO+
zHfC9K2)C}HxPp{3M5G|F>lvhj_?Q`0i7+mJ3l82VgcF#MshqYM3v=dshYjOVG!H0~
zK+<sL$KkckiVe$@6hvJ3@NwsNZ#K&a<Misk6?oe(mZ+ba`xFt;SR3ZTJX!=!5b0IR
zz#wjos;DOn(pUlJGEInSTVfItYo5Q!No1PQAZ%s=YS(oU1%=ZE@ZzDhCKK9Gyk8;H
zeY0E%@qq2r-cTuX@Jo;*Se?on1T$fu)KZ?h5WVs@QFeYMnO}qL3+ZBY{fI&_V%sN{
zh{#K6kV1RK`O6Jr0%@eggVQ{HA^JF|s(h_pn~dPqiN4noM0XIsBrCY&R^ICVan{*$
zmR&@$<(a_@m9_Tdbb_2#B2)_vN{C8(Lqf{82^@ev2)^)YC^8=}IG=8M6j3NnuNz7)
zi}{6~&w@saO0bg}V`OHH(p4;wrYVT30}2w>dBsIN$8D6d+{1p~8-gJr6WODsAx6wk
z-Mf~r>e~Z|=pjBcVab^^67AAPK39FOmc`#qwK^HBwmhWqh}1#{eJssFUJT{of0AQ8
zQ~h1|rF8K9g)0vlXYRBa0)dTuZ~T@Z!L|6{FDg?<g$BrEd?XXW>c@}T3;s3g;Wc7g
zxJzIZFkDly9ft%7eJzru%|)2p%fVKN`<s3G8zs}{z3W%&TAP}9rTyxD1UTQ!Ck(S_
zP*6D*12Waosy2w~hU_UUhiJuT6eHBM)WaUM@onm;rM}dQz360LK}{Kz!PQ;dx&S3y
zNlsR<3mje{`4)6MY9(dNZ<8f<ET|W`^z}C@<bj~j&!K(H7Y^kgJDKN#hB_i@11k`+
z4Hq^gsO~uTrxlmb{?(fd9wvj2D&3-Le47;9j6Q;upU(!c5X2FFyx#~iJ=DmNHd~bQ
zQ_UMIhy7$y#UDg;x-j2pQz}~8^+?@Ww1I6qGQ4Wi9`)deie|c2=|2YAQ(GHpS?DiD
zlUZSq#u+v7Qo`gIh6VK0<qLnW1ndi`6~1D~J%M>cR;G)_V(CSgro7-u`VI1#&DVAd
zujL^UK6x!MY0kc^gjlHB0HuI^5e#<rzN;LBjFnOW4M1XLIXwmPCs}Xy(+ppq^0mNt
z@csogc{PCCf<7oibFATFj(vcZAiEs^L&t%!zPj{02-A-$n3-xLiH~$JjJ~;JZgRS^
zi0p_T#C;MDPnsI|>ULTI_Ojs<8(Rs>p@=806X$MbIb4{!5JrC%3B@rYt}D9N=Z@g=
z*ed*2(EHw&w99f9xm8E?x9Zl0iF8os^TWMD9zw)XZI?s(5cG3g^wpRark*bvkCSX)
zvb8lXZ5m-E=nsVb2?$>gr{MHG$oV3~;>C!xzoNc(ejk6y>bJIg!Rn%Zu^r<S6nrDD
zRN)phQw{0f`6?TpM>3-(El3&*Xwz1cktFDC_&?8~8x4Pd7dEp|E-7AqQ>qy1+2WK!
z@d|>%Ef<U-z5uV{ldEdD-ek#&2TKgCYG(qHFJgcUHt+l9+GMz86g+-Y`t*^4(!BRr
zE;?|>06rYtcDizPy$Y1H*TImJm==fmE4^TLps%>!B=eBBRK+^trqiN}#25t7YXqPf
ztCJ>iS7K`5#F6kHPigz`tkW7C8T69$Gc7n94sy1uza}ng@YxFy%F#fpFlm*Pb5=Jh
zfpiW*Rmy7N5RQQ_(yooYsxg*f<7aSFSup?Z*r{ROehOp^6{iCcWH-%J3rf6P$`EdN
z<Uy#F+WFy{FR6!&t^BdXm>SP&t(+r0l-Zh0<+!$Azl|e)!%ry<G9PxLO=9V(sv@~L
z2;8`5Bv`LK1YL0ElRJsbO57Zvga>;Sm(Vb&i)TbJ#~~I@q&72f#ClASqvpi$|JZb%
zTvjJ1n~}i3>?E;BfLX;QynbGH7}~MWF&71Q`e?vG?weC&`X)uGz&)VVqg@!K(w8g+
za>e?q-zctd-3QrX3^7I#&??Olz0J_lPl_iiz7Ow8Ltb&LulOhKcG8xU&q!6&YL>oJ
zsnDxFO4lMmiY(7VleoiWORgmQh~p-G?v;Y3b|kjfzGRhlgdQTZq|1+7w%kpYfCZne
zf195M&OHv}r$q~z`{x+wBv{V=vbj^CqJ(;q+jYS_=z;@NnnjWfZm#MVYK^fKj8QgR
z@{ri2bGz@A`|H)tSM=LKXmi|O!hI~OAo`E-nG1fe6(^mh0)@fB`U5?6^>ei`U&OSA
zzZ*g5@exx9Lp}1{Q_`1D5m21OTwBidtgD3%gSBF=QLO|=&)B!AfsD#{6^nwWaco@C
z@il6tiHQjjm?Q-p|4efi176Yfs=n%j5K~pb^`OLkn(YRu@!LDNKSP<?#JM^!z(*Zm
zeKQJg5-i!glBV4NQ0EZ8zfbvRGJkXml#9eEs7uYYUEgHgD`DMdr2c}2gw?`xmq{L3
zq1QT7s?5e@E*X3%KiL5*n*=Z_IKWLYtY+9QBMh(U?^`t$^^HWXht=m{ay?bpfPB?#
z?ldC<lUdQeL=5%_VUO9Gu8RWz)jujGa-muSrKeeY=LxBz&s6q>5_iHUaVpw**=<_a
zteDSvNtk3hd9O$!whhy(w<p}D+4yn&X@zxxAN|LL2V|mBcXAitE}16$E6hTiuZJpK
z4F2y^u-TRipz!~#-i<9K`4UeWajiYgahOx$qQtSKlW*jsxy674Vrc0?MM+!w{#xRD
zDD?Vyoi_N+w=KEk0m|?CgJ{YUK(nAkMWIp###EwjTdhDIdVrDXLR%f1xs@+l64GFM
z@$}AB@y2ZhF`Vj+DO+hN`%h8ok~NiFFIZ<>`#M4){fiJ%TSz+gE-G{eWbt1Y*#$}Z
zlC;610>n#Hm~8zfUZcPSLDonNh(!^mb^c3Pw9q|5p_Wp?QbtrQ4j`G?XzB;=GDhmg
zP-&%ESzd0rH7s&;DD3p;(jlp%atGlf3qZmd^h+6;4gP-E>;olBH|ow^@LcmFRPv{-
zD-!b(*7_QoEdu&%fpn>dwO%2P9Md>eVQgJOP$O#zEY?eSO6ycyPN_ex#I1IOH(^S0
zox-mFndXos>yDs(5AuVYm2qkOQrl?U<tFDw{kabK4?z6LOldOshS?L3rHYS+FEugB
zzhKpPFdwwdkB4s)p1pN=>?1oBH8cEdbLKXy^2RVy3A=^#V#voi9My)XY*~As@{d_F
z%VvS@o_``UGm(6-k7$d5vNpHrsIUxFMfs#zvGB3-pZi%*<jUqPQmd06yUFB7WPN0v
zBZ+N~tLaf8;(c`Qw9`rfQ3E}c#{;s`DfatfSY5XH%ig2>wA?gD50i&V8qyw=hhkRV
zXI~jk-u(H@mV;Qa&rygzQpB|8>Fju?hMh3b*Vz|c_e!S?Mu)^qlrE@7u5z$&l;D#t
zhI{39b?SN8bJk6nCs!*G$bXTRp5F{>rBl!i2sNWOKmp=@{Cv5D>xw@;Q?nr*X21E<
zlx2urjxF0i09Re+ansnbAGvmnXHp=>5Lz{6+0O(ZId(_k?5|vTY)|njV4!@Mx;4J(
zR~@R&JI{JwdOU3S6;OOke$Vui>H+yNL1B;5YGHQUp(X~e)kJHc8J?DdQ|uisSOLr4
zyk24#CSZ`Ol}rQGN9PI6A3l;)EH+j8RezG>#W*5CFrUkMx+4pw=@7kav4Wqjw00r@
z-bd7h8)@biQH~*fBPkGi9|3|%X@VI(J{siDp+n#t0Ug1r%!jl2DNG%P9X`!kgaS$N
zsZpyDYyz<<v&F}ehT_W%wRvQIIICYz|Exjzv%Pg^2;Q0$&)tBA#ZDSPB~R&ZACd{&
z;0&IYK93jsRO1jN1%wd9j&`pc-34$3nB|t}4-wv?9jP{gaT=b@Dpnw>{uF1Ms=XMw
zaMn>a^MoH6sAlTjh>Lt)S>Lv8D+zuKHG|?)ec8h!*-OI<t)<p`TOa21QP}}i1dY@9
zUJ(dj6R*)*p38~NKn4~~4iHSfFOe2wm62&eQzDTW=Q#7U@D~k>(M#tBP1(?HgKYBZ
zbfJLmt_;bq$RswK&ZrN0yezINv@%bARj2X-U4LxHwWGG1GjnU0POs_#jpjp8H=9_C
zQaT|JJED6xaT7#y)*YB#0YLlNP=+cw?M>u|B`k~T2--v(WQrd8Zq9+?E>SRxtM(ID
z9xxZ&LYz0C8I>bkRM+G+x6UsEthhvgtIvt5Ny7@zvIcH-VTQO<QJQ77&qgq+%=?O=
zW0MqmSS_zKYJh<_es5!txj=bjs<p9@(4T0Yhae!3zPX}nJnPThMKKS2IeL&`j7$pC
zJ=~GEB*{BnNuA=P@csm8LJ2--<=OC$w;qc64RO);sCbf$3_8!;gKjSjt0rVT@^+i7
zm@yZ`;ov|zkV~ADxJB$IalA)Vn+be(qWd?<r-ve^_whHU+J%?*oxB;<S{Srj&5U#f
zE?ACUN`F4>jhQ(hXlP*uG|S<fKO3x)i0oBhXHc1YE1xxYIH%Y+r<NU3H3A|DJU{zE
zR~qr|;g_wOrgEHN)wdm?(?ok=H<z1_S_M9(i(T-=WHN^SS?gUa4mkPsMzH30g_Ylq
zewuWsv|3QWHFn`LqO*ka`Ik6@ySnDFV-&*CktFtloQfKAnatsFz)Ia&gnW9BTO_eR
z0>}1jYnm3<BBjA)7g5!7b?;X2YU?#OQyWUo<v@4cu@+UJhDe6=fL|c|+GzsbpQYMO
zay~VyN9r977IC5w{dv&0{$ak?SzE-O0~bE_I*O}|)O%A(RjO*Q+%3(@VaR*|BPY)S
z&$VQZ4qz2@OKX#uF<peo@0Ano9)vZ(tqJ=~vv$`FOVH=Eq4F(({-vs(QpUQ$PDUl?
z*gbi6z(zxuL2eJ5o_$W0%6B8wj4Vs{7y!F86i$6_F5asN8z3mX>;pne@CIXve=UEE
z%j!%GyAyw>DIp7;T{z|3Zkm#}8j>5|^D)m|IT}f{A=El^?>Cajy&-SsV@;Z%6m@2v
zy{od(v&;DP%V98y1;_BPe*e<J!B9vNuVce0g$_;zxKV04w5IqV)wUd{LMNG(>67C!
zY2RYUS*mDrC057V?L88HVc+HlC+rMtAHYq7-aOmMV``P1{f%~--{dxZBd=`;*)T5U
ztARK!AkT@Ho{h5MMOBio1n%)nyb-tCBNXk`6<x1>F7v!20Gh<8aii+`h7GBVPbaKx
zrAyun_&KR<tU)TWU#9oBf)&FZ-gFYkOm{dy5~ejskQafO;XtPX8~V~|)HvhwcIoyp
z%1tLH=3a}4cW7<}Y6qr;OgO*~B^q^3qWHL|@VbI}U*m^T!fxt)W8SD|sa@K!r41PQ
zfM;fxle%8QnLf4)4N1AAW$_e=1eEcJKoee48gj$?@zwtMtey1dJyAty-Be1iK0r&A
zW`c!+W!g)_z$Kcg3!~SXN&BxEG^abz^~Q;K(u)3&pK3Lh#JNQxnCuqDv??<7_e2HF
zUh~`)6)cH>Q?^SsofZ+DTG2EobVp31HH}QGK!z=D1q~uOQoi-~&@ObGZLwn4GCGsQ
z1x^tx9R+v&;B=qU^6JlX#?7FKiNl_ShF<BkDG*9|8NJJX%!B!guPgL|Av_!zEExA3
zsksN?4qLFpT$+uweN?v?+;Q>t&!Rz+KO3bYT!%l6U^ZseUF9jt5Z-m++m(*#qa#jj
zAv#XF@xSNV&U9fqfTgTP5M4^?vY50tZW8p=T5pkj94pA5;S(<KD!kd~lkg%>^!|M-
zSrhOEg82#Uzu0NnWSgPH>k>{}XGFoH#)x;8?Wl#l(<xi=e2tlbQ;4HE&f2S$%=f23
ztwjNzy)NHBc{1;%9zjuh9xU;>j1_lP7+-#d-jrOy?^J{vT`-5YTCML+26~|>aW@gD
zG*+LdO)~ZI>}{owoXEfSRjzwt!eAkU{eCls*zdOG#SNL`E3}&4YJ{LD2xsQxteM<5
z3r|LpYikrqCNrf4-TBN6KCf-3riZ%kclf>GcA|Lyo^1DuERlT99)|y_w)SQtcIhS3
zv^qw8H2rAA`(CPlUPm8KkI&z&QhgUYm)?*~QXW}l)hRly!?V|l`&LwZY$#hQL!AUY
zE=B)g253URXvZuE$WVE>jqu|mzWau@^tGaB0T{y5m^i0;nu{)``T%oL6V0i8Xs-3k
z%98@yNy%WSnJZ@_%BFcYHfrm?DKlc*Xx3+EhCM}Hi~oa_kyy4vIVD->M;g5c+~wcV
z+;+rXZEhZ;E2frW7`>kvU~GhldG?n)$L$>?OY*a39WVdeimGNls30Gw?RhwmRTSql
z)H9ltAzzP+v1TFKu)jtS1;wwM>>4JUd+>e#lr}E$-u2a-j=qf}I|k6QmpA0w!A|{_
zq!0$vw~U|hf*z(}$2Yx}(f)0!{|-tOO)6gOQZKzq5pwWC#ikb-v;XB~N*5v$zz-id
zGStuQG|00B<-C)BbsFc7&Y@skR(|-y_{g{&k<}SMw#26ZK@-|Jmp`M@*vJ<`xQ|*o
zmg{(7Nm@p*F$e|%2VS@T?k6Y$@e(eB0y;e9o1|g!=@5Ddqx`D2(!Gz*?UAq);FOSN
zjAcy|jfM^b*~im)>`$QtyvEjdwtQE$)!5DZk&{`fD1`6+zL0|Fcw$i$&JZ0PgCg@8
zU#E|~92J95;Y(E~GNLS;7dyi9id}WN3KUcq5?X*bcZWil!EbeU+JVtOaFMyLaB{MG
zhDIh|dR&|_k;HZtJ!=$g8jAB(40bsJQWJa8RWg7DJM8G8ba#&5!@1A8`o-iwy)_1z
zaoxoz*tM@JCheX3@YTIYuG|`8?A_#IxvQjI7u^K{LO05ae&(@G`~&~Lbi{0qQ%CNM
ac#}^zHvUGgJ-mK5&odOISQ4zf@QxMU-c<qs

literal 0
HcmV?d00001

diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
deleted file mode 100644
index 33c14f50..00000000
--- a/apollos-church-api/.envExample
+++ /dev/null
@@ -1,3 +0,0 @@
-ROCK_API=
-ROCK_TOKEN=
-ESV_KEY=
diff --git a/apollos-church-api/.eslintrc.js b/apollos-church-api/.eslintrc.js
new file mode 100644
index 00000000..7681348f
--- /dev/null
+++ b/apollos-church-api/.eslintrc.js
@@ -0,0 +1,5 @@
+module.exports = {
+  extends: [
+    '@apollosproject/eslint-config/api',
+  ],
+}
\ No newline at end of file
diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index a65b4177..93c0f8f5 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -1 +1,101 @@
 lib
+# Logs
+logs
+*.log
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+coverage*
+
+# operating system files
+.DS_Store
+.DS_Store?
+.Spotlight-V100
+.Trashes
+ehthumbs.db
+Thumbs.db
+*.swp
+
+# Runtime data
+pids
+*.pid
+*.seed
+*.pid.lock
+
+
+# Directory for instrumented libs generated by jscoverage/JSCover
+lib-cov
+
+# Coverage directory used by tools like istanbul
+coverage
+
+# nyc test coverage
+.nyc_output
+
+# node-waf configuration
+.lock-wscript
+
+# Compiled binary addons (https://nodejs.org/api/addons.html)
+build/Release
+
+# Dependency directories
+node_modules/
+jspm_packages/
+
+# TypeScript v1 declaration files
+typings/
+
+# Optional npm cache directory
+.npm
+
+# Optional terraform
+.terraform
+source-*.tar.gz
+terraform.tfstate
+terraform.tfstate.backup
+terraform.tfvars
+
+# Optional eslint cache
+.eslintcache
+
+# Optional REPL history
+.node_repl_history
+
+# Output of 'npm pack'
+*.tgz
+
+# Yarn Integrity file
+.yarn-integrity
+
+# dotenv environment variables file
+.env
+.env.storybook
+
+# next.js build output
+.next
+
+# xcode
+build/
+
+# storybook
+storyLoader.js
+*.xcworkspacedata
+
+# sublime text settings
+*.sublime-project
+*.sublime-workspace
+
+# compiled code
+
+**/lib
+
+.watchmanconfig
+
+# generated markdown docs
+packages/**/docs/generated/*
+
+# shared secrets
+.env.shared
+
+# development database
+development.db
diff --git a/apollos-church-api/__mocks__/analytics-node.js b/apollos-church-api/__mocks__/analytics-node.js
deleted file mode 100644
index 97db17df..00000000
--- a/apollos-church-api/__mocks__/analytics-node.js
+++ /dev/null
@@ -1,7 +0,0 @@
-export const mockTrack = jest.fn();
-export const mockIdentify = jest.fn();
-const mock = jest
-  .fn()
-  .mockImplementation(() => ({ track: mockTrack, identify: mockIdentify }));
-
-export default mock;
diff --git a/apollos-church-api/__mocks__/apollo-datasource-mocks/bible.js b/apollos-church-api/__mocks__/apollo-datasource-mocks/bible.js
deleted file mode 100644
index 921d98db..00000000
--- a/apollos-church-api/__mocks__/apollo-datasource-mocks/bible.js
+++ /dev/null
@@ -1,17 +0,0 @@
-export default () => ({
-  data: {
-    passages: [
-      {
-        id: 'SNG.1.1',
-        orgId: 'SNG.1.1',
-        bibleId: '9879dbb7cfe39e4d-01',
-        bookId: 'SNG',
-        chapterIds: ['SNG.1'],
-        reference: 'Song of Solomon 1:1',
-        content:
-          '<p class="p"><span data-number="1" class="v">1</span>The Song of songs, which is Solomon’s.</p>',
-        copyright: 'PUBLIC DOMAIN',
-      },
-    ],
-  },
-});
diff --git a/apollos-church-api/__mocks__/apollo-datasource-mocks/index.js b/apollos-church-api/__mocks__/apollo-datasource-mocks/index.js
deleted file mode 100644
index f53054e5..00000000
--- a/apollos-church-api/__mocks__/apollo-datasource-mocks/index.js
+++ /dev/null
@@ -1,2 +0,0 @@
-export { default as liveStreamLive } from './live-stream';
-export { default as Scripture } from './bible';
diff --git a/apollos-church-api/__mocks__/apollo-datasource-mocks/live-stream.js b/apollos-church-api/__mocks__/apollo-datasource-mocks/live-stream.js
deleted file mode 100644
index 13fe0d18..00000000
--- a/apollos-church-api/__mocks__/apollo-datasource-mocks/live-stream.js
+++ /dev/null
@@ -1,6 +0,0 @@
-export default () => ({
-  meta: { status: 200 },
-  response: {
-    item: { isLive: true, eventStartTime: '2018-08-06T17:00:00Z' },
-  },
-});
diff --git a/apollos-church-api/__mocks__/apollo-server-env.js b/apollos-church-api/__mocks__/apollo-server-env.js
index 0bc8c918..5ec2ff74 100644
--- a/apollos-church-api/__mocks__/apollo-server-env.js
+++ b/apollos-church-api/__mocks__/apollo-server-env.js
@@ -1,217 +1,5 @@
-import fetch from 'jest-fetch-mock';
-
-import { Constants } from 'apollos-church-api/src/connectors/rock';
-import * as apolloDatasourceMocks from './apollo-datasource-mocks';
-import * as rockMocks from './rock-api-mocks';
+import createMock from '@apollosproject/apollo-server-env-mock';
 
 const apolloServerEnv = require.requireActual('apollo-server-env');
 
-// eslint-disable-next-line
-const Response = apolloServerEnv.Response;
-
-const resolveWith = (data, url) =>
-  Promise.resolve(
-    new Response(JSON.stringify(data), {
-      url,
-      status: 200,
-      statusText: 'OK',
-      headers: new apolloServerEnv.Headers({
-        'Content-Type': 'application/json',
-      }),
-    })
-  );
-
-fetch.mockLiveDataSourceApis = () => {
-  fetch.mockImplementation((request) => {
-    if (request.url.match('/api/v1/events/current')) {
-      return resolveWith(apolloDatasourceMocks.liveStreamLive(), request.url);
-    }
-    if (request.url.match('api.scripture.api.bible')) {
-      return resolveWith(apolloDatasourceMocks.Scripture(), request.url);
-    }
-    return Promise.reject();
-  });
-};
-
-fetch.mockRockDataSourceAPI = () => {
-  fetch.mockImplementation((request) => {
-    let { url } = request;
-    url = decodeURI(url);
-    if (!url.match(Constants.ROCK_API)) {
-      if (request.url.match('/api.scripture.api.bible/v1')) {
-        return resolveWith(apolloDatasourceMocks.Scripture());
-      }
-      return Promise.reject();
-    }
-
-    if (url.match('api/EntityTypes')) {
-      return resolveWith(
-        [
-          {
-            Id: 201,
-          },
-        ],
-        url
-      );
-    }
-
-    if (url.match('api/InteractionChannels')) {
-      return resolveWith(
-        [
-          {
-            Id: 10,
-          },
-        ],
-        url
-      );
-    }
-
-    if (url.match('api/InteractionComponents')) {
-      return resolveWith(
-        [
-          {
-            Id: 101,
-          },
-        ],
-        url
-      );
-    }
-
-    if (url.match('api/ContentChannels/\\d')) {
-      return resolveWith(rockMocks.contentChannel());
-    }
-
-    if (url.match('api/ContentChannels')) {
-      return resolveWith([rockMocks.contentChannel()]);
-    }
-
-    if (url.match('api/ContentChannelItems/test-case-no-attributes')) {
-      const mock = rockMocks.contentItem();
-      mock.AttributeValues = {};
-      mock.Attributes = {};
-      return resolveWith(mock);
-    }
-
-    if (url.match('api/ContentChannelItems/123')) {
-      const contentItem = rockMocks.contentItem();
-      contentItem.AttributeValues.Scriptures = { Value: 'John 3:16' };
-      return resolveWith(contentItem);
-    }
-
-    if (url.match('api/ContentChannelItems/\\d')) {
-      return resolveWith(rockMocks.contentItem());
-    }
-
-    if (url.match('api/ContentChannelItems')) {
-      return resolveWith([rockMocks.contentItem()]);
-    }
-
-    if (url.match('api/ContentChannelItemAssociations')) {
-      return resolveWith([rockMocks.contentChannelItemAssociation()]);
-    }
-
-    if (url.match('api/Auth/Login')) {
-      const body = JSON.parse(request.body);
-      const response = new Response('');
-      if (body.Password === 'good') {
-        response.headers.set('set-cookie', 'some cookie');
-        return Promise.resolve(response);
-      }
-      return Promise.reject({ ...response, status: 401 });
-    }
-
-    if (url.match('api/People/GetCurrentPerson')) {
-      return resolveWith(rockMocks.people());
-    }
-
-    if (url.match('api/People/\\d')) {
-      return resolveWith(rockMocks.people());
-    }
-
-    if (url.match('api/People')) {
-      if (request.method === 'POST') {
-        const { Email } = JSON.parse(request.body);
-        if (!Email) {
-          const response = new Response('');
-          response.status = 400;
-          return Promise.reject(response);
-        }
-        return resolveWith({ personId: 35 });
-      }
-
-      return resolveWith([rockMocks.people()]);
-    }
-
-    if (url.match('api/Interactions/\\d')) {
-      return resolveWith(rockMocks.interaction());
-    }
-
-    if (url.match('api/Interactions')) {
-      if (request.method === 'GET') {
-        return resolveWith([rockMocks.interaction()]);
-      }
-      if (request.method === 'POST') {
-        const response = new Response('456', {
-          status: 200,
-          statusText: 'OK',
-          headers: new apolloServerEnv.Headers({
-            'Content-Type': 'application/json',
-          }),
-        });
-        return Promise.resolve(response);
-      }
-    }
-
-    if (url.match('api/InteractionSessions')) {
-      if (request.method === 'GET') {
-        return resolveWith(rockMocks.session());
-      }
-      if (request.method === 'POST') {
-        const response = new Response('123', {
-          status: 200,
-          statusText: 'OK',
-          headers: new apolloServerEnv.Headers({
-            'Content-Type': 'application/json',
-          }),
-        });
-        return Promise.resolve(response);
-      }
-    }
-
-    if (url.match('api/UserLogins')) {
-      if (request.method === 'POST') {
-        const { UserName } = JSON.parse(request.body);
-        if (!UserName) {
-          const response = new Response('');
-          response.status = 400;
-          return Promise.reject(response);
-        }
-        return resolveWith({ id: 21 });
-      }
-      const identity = url // identity = UserName
-        .split('eq')
-        .pop()
-        .trim(' '); // EXAMPLE URL: /api/UserLogins?$filter=UserName eq 'isaac.hardy@newspring.cc'
-
-      if (!identity) {
-        const response = new Response('');
-        response.status = 400;
-        return Promise.reject(response);
-      }
-      if (identity === `'isaac.hardy@newspring.cc'`)
-        return resolveWith([rockMocks.userLogins()]);
-
-      return resolveWith([]);
-    }
-    console.log(`No route matching ${url}`);
-    return Promise.reject(`No route matching ${url}`);
-  });
-};
-
-const apolloServerEnvMocked = {
-  ...apolloServerEnv,
-  Response: fetch.Response,
-  fetch,
-};
-
-module.exports = apolloServerEnvMocked;
+module.exports = createMock(apolloServerEnv);
diff --git a/apollos-church-api/__mocks__/dotenv/config.js b/apollos-church-api/__mocks__/dotenv/config.js
new file mode 100644
index 00000000..c312228c
--- /dev/null
+++ b/apollos-church-api/__mocks__/dotenv/config.js
@@ -0,0 +1 @@
+// console.log('Disable reading from `env` file in test env.');
diff --git a/apollos-church-api/__mocks__/isomorphic-fetch.js b/apollos-church-api/__mocks__/isomorphic-fetch.js
deleted file mode 100644
index 727d6c0c..00000000
--- a/apollos-church-api/__mocks__/isomorphic-fetch.js
+++ /dev/null
@@ -1,104 +0,0 @@
-import 'isomorphic-fetch';
-import fetch from 'jest-fetch-mock';
-
-import { Constants } from 'apollos-church-api/src/connectors/rock';
-
-import * as rockMocks from './rock-api-mocks';
-
-const resolveWith = (data) =>
-  Promise.resolve(new fetch.Response(JSON.stringify(data)));
-
-fetch.mockRockAPI = () => {
-  fetch.mockImplementation((url, options) => {
-    if (!url.match(Constants.ROCK_API)) return Promise.reject();
-
-    if (url.match('api/ContentChannels/\\d')) {
-      return resolveWith(rockMocks.contentChannel());
-    }
-
-    if (url.match('api/ContentChannels')) {
-      return resolveWith([rockMocks.contentChannel()]);
-    }
-
-    if (url.match('api/ContentChannelItems/test-case-no-attributes')) {
-      const mock = rockMocks.contentItem();
-      mock.AttributeValues = {};
-      mock.Attributes = {};
-      return resolveWith(mock);
-    }
-
-    if (url.match('api/ContentChannelItems/\\d')) {
-      return resolveWith(rockMocks.contentItem());
-    }
-
-    if (url.match('api/ContentChannelItems')) {
-      return resolveWith([rockMocks.contentItem()]);
-    }
-
-    if (url.match('api/ContentChannelItemAssociations')) {
-      return resolveWith([rockMocks.contentChannelItemAssociation()]);
-    }
-
-    if (url.match('api/Auth/Login')) {
-      const body = JSON.parse(options.body);
-      const response = new fetch.Response('');
-      if (body.Password === 'good') {
-        response.headers.set('set-cookie', 'some cookie');
-        return Promise.resolve(response);
-      }
-      response.status = 401;
-      return Promise.reject(response);
-    }
-
-    if (url.match('api/People/GetCurrentPerson')) {
-      return resolveWith(rockMocks.people());
-    }
-
-    if (url.match('api/People/\\d')) {
-      return resolveWith(rockMocks.people());
-    }
-
-    if (url.match('api/People')) {
-      if (options.method === 'POST') {
-        const { Email } = JSON.parse(options.body);
-        if (!Email) {
-          const response = new fetch.Response('');
-          response.status = 400;
-          return Promise.reject(response);
-        }
-        return resolveWith({ personId: 35 });
-      }
-
-      return resolveWith([rockMocks.people()]);
-    }
-
-    if (url.match('api/UserLogins')) {
-      if (options.method === 'POST') {
-        const { UserName } = JSON.parse(options.body);
-        if (!UserName) {
-          const response = new fetch.Response('');
-          response.status = 400;
-          return Promise.reject(response);
-        }
-        return resolveWith({ id: 21 });
-      }
-      const identity = url // identity = UserName
-        .split('eq')
-        .pop()
-        .trim(' '); // EXAMPLE URL: /api/UserLogins?$filter=UserName eq 'isaac.hardy@newspring.cc'
-      if (!identity) {
-        const response = new fetch.Response('');
-        response.status = 400;
-        return Promise.reject(response);
-      }
-      if (identity === `'isaac.hardy@newspring.cc'`)
-        return resolveWith([rockMocks.userLogins()]);
-
-      return resolveWith([]);
-    }
-
-    return Promise.reject();
-  });
-};
-
-export default fetch;
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/content-channel-item-association.js b/apollos-church-api/__mocks__/rock-api-mocks/content-channel-item-association.js
deleted file mode 100644
index b59aadbc..00000000
--- a/apollos-church-api/__mocks__/rock-api-mocks/content-channel-item-association.js
+++ /dev/null
@@ -1,18 +0,0 @@
-export default () => ({
-  ContentChannelItemId: 1,
-  ChildContentChannelItemId: 1,
-  Order: 0,
-  ChildContentChannelItem: null,
-  CreatedDateTime: null,
-  ModifiedDateTime: null,
-  CreatedByPersonAliasId: null,
-  ModifiedByPersonAliasId: null,
-  ModifiedAuditValuesAlreadyUpdated: false,
-  Attributes: null,
-  AttributeValues: null,
-  Id: 1,
-  Guid: 'some-really-long-guid-yo',
-  ForeignId: null,
-  ForeignGuid: null,
-  ForeignKey: null,
-});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/content-channel.js b/apollos-church-api/__mocks__/rock-api-mocks/content-channel.js
deleted file mode 100644
index c3f88a38..00000000
--- a/apollos-church-api/__mocks__/rock-api-mocks/content-channel.js
+++ /dev/null
@@ -1,27 +0,0 @@
-export default () => ({
-  ContentChannelTypeId: 6,
-  Name: 'My super cool content channel',
-  Description: 'Some description',
-  IconCssClass: 'fa fa-star',
-  RequiresApproval: false,
-  ItemsManuallyOrdered: false,
-  ChildItemsManuallyOrdered: false,
-  EnableRss: false,
-  ChannelUrl: '',
-  ItemUrl: '',
-  TimeToLive: 0,
-  ContentControlType: 0,
-  RootImageDirectory: '',
-  IsIndexEnabled: false,
-  IsTaggingEnabled: false,
-  ItemTagCategoryId: null,
-  CreatedDateTime: null,
-  ModifiedDateTime: '2018-01-01T01:01:01.001',
-  CreatedByPersonAliasId: null,
-  ModifiedByPersonAliasId: 61,
-  Id: 'some-id',
-  Guid: 'some-sort-of-long-guid',
-  ForeignId: null,
-  ForeignGuid: null,
-  ForeignKey: null,
-});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/content-item.js b/apollos-church-api/__mocks__/rock-api-mocks/content-item.js
deleted file mode 100644
index f42515bf..00000000
--- a/apollos-church-api/__mocks__/rock-api-mocks/content-item.js
+++ /dev/null
@@ -1,494 +0,0 @@
-export default () => ({
-  ContentChannelId: 1,
-  ContentChannelTypeId: 1,
-  Title: 'SAMPLE: Easter',
-  Content:
-    '<p>\r\n\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sollicitudin condimentum aliquet. In est nulla, lacinia ac dictum et, laoreet vitae elit. Proin tempus tellus ligula, a consequat diam consectetur a. Phasellus luctus velit sed lorem mollis commodo. Nunc sit amet blandit velit. Donec tincidunt congue facilisis. Sed iaculis at neque non porttitor. Phasellus ultrices egestas erat feugiat pellentesque. Duis venenatis, dolor quis fringilla tempus, sem lorem euismod lectus, sed egestas felis magna at felis. Pellentesque ut rhoncus erat, a pulvinar purus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Ut sit amet consequat est. Maecenas et porta dui, non condimentum lectus.</p>\r\n<p>\r\n\tSuspendisse vel nibh odio. Pellentesque porta sapien ligula, in laoreet diam tempus sed. Morbi nunc erat, mattis eu pulvinar blandit, adipiscing quis magna. Ut quis dui lobortis velit suscipit consectetur. Nulla iaculis fermentum egestas. Aenean venenatis sagittis mauris, sed rhoncus purus accumsan ac. Suspendisse potenti. Sed sed tempor turpis. Duis sit amet nisi nec purus fringilla condimentum. Phasellus non lacus arcu. Donec scelerisque, erat sed tempor elementum, nulla risus scelerisque ante, ac imperdiet velit magna ut quam. Nam tristique orci auctor consequat laoreet. Quisque malesuada metus sed sodales eleifend. Aenean rhoncus, mi sit amet ullamcorper tincidunt, sem sem rutrum felis, in semper enim massa ut sem.</p>\r\n<p>\r\n\tVivamus diam urna, cursus in sapien in, porta gravida enim. Cras non fringilla arcu, tincidunt laoreet lacus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Aliquam volutpat felis quis augue faucibus ultrices. Morbi lobortis vestibulum sodales. Sed tincidunt urna vitae felis ultrices, pharetra placerat quam dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel adipiscing tellus. In vitae sodales diam. Aliquam pharetra orci a porta molestie. In et neque bibendum, viverra leo sit amet, auctor magna. Morbi posuere massa sed metus euismod, et adipiscing sem dictum. Cras eget elementum risus, non imperdiet ligula.</p>\r\n',
-  Priority: 100,
-  Status: 2,
-  ApprovedByPersonAliasId: 10,
-  ApprovedDateTime: '2013-08-01T00:00:00',
-  StartDateTime: '2013-08-01T00:00:00',
-  ExpireDateTime: '2020-08-02T00:00:00',
-  Permalink: null,
-  Order: 0,
-  ContentChannel: null,
-  ContentChannelType: null,
-  CreatedDateTime: null,
-  ModifiedDateTime: null,
-  CreatedByPersonAliasId: null,
-  ModifiedByPersonAliasId: null,
-  ModifiedAuditValuesAlreadyUpdated: false,
-  Attributes: {
-    SummaryText: {
-      IsSystem: false,
-      FieldTypeId: 21,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelTypeId',
-      EntityTypeQualifierValue: '1',
-      Key: 'SummaryText',
-      Name: 'Summary Text',
-      Description: 'Short description',
-      Order: 0,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {
-        allowhtml: {
-          Name: null,
-          Description: null,
-          Value: 'True',
-        },
-      },
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1265,
-      Guid: '35993d3b-57d3-4f41-88a5-a83ee380d2dd',
-    },
-    Image: {
-      IsSystem: false,
-      FieldTypeId: 10,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelTypeId',
-      EntityTypeQualifierValue: '1',
-      Key: 'Image',
-      Name: 'Image',
-      Description: '',
-      Order: 1,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {
-        binaryFileType: {
-          Name: null,
-          Description: null,
-          Value: '8DBF874C-F3C2-4848-8137-C963C431EB0B',
-        },
-      },
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1266,
-      Guid: 'ffdf621c-ecff-4199-ab90-d678c36dce38',
-    },
-    DetailImage: {
-      IsSystem: false,
-      FieldTypeId: 10,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelTypeId',
-      EntityTypeQualifierValue: '1',
-      Key: 'DetailImage',
-      Name: 'Detail Image',
-      Description: '',
-      Order: 2,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {
-        binaryFileType: {
-          Name: null,
-          Description: null,
-          Value: '8DBF874C-F3C2-4848-8137-C963C431EB0B',
-        },
-      },
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1267,
-      Guid: '43758fc4-906e-46cd-a6fb-8f21176c1cc5',
-    },
-    ImageByUrlTest: {
-      IsSystem: false,
-      FieldTypeId: 1,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelId',
-      EntityTypeQualifierValue: '5',
-      Key: 'ImageByUrlTest',
-      Name: 'Image By Url Test',
-      Description: '',
-      Order: 1001,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {},
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1923,
-      Guid: '9293638a-a176-d7a0-4916-b57e6cde94d2',
-    },
-    ImageBySchemalessUrlTest: {
-      IsSystem: false,
-      FieldTypeId: 10,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelId',
-      EntityTypeQualifierValue: '5',
-      Key: 'ImageBySchemalessUrlTest',
-      Name: 'Image By Schemaless Url Test',
-      Description: '',
-      Order: 1001,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {},
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1923,
-      Guid: '9293638a-a176-d7a0-4916-b57e6cde94d2',
-    },
-    ImageUnknownFormat: {
-      IsSystem: false,
-      FieldTypeId: 10,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelId',
-      EntityTypeQualifierValue: '5',
-      Key: 'ImageUnknownFormat',
-      Name: 'Image Of Unknown format',
-      Description: '',
-      Order: 1001,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {},
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1923,
-      Guid: '9293638a-a176-d7a0-4916-b57e6cde94d2',
-    },
-    Campuses: {
-      IsSystem: false,
-      FieldTypeId: 26,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelTypeId',
-      EntityTypeQualifierValue: '1',
-      Key: 'Campuses',
-      Name: 'Campuses',
-      Description: 'The campus or campuses that the item is associated with',
-      Order: 3,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {},
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1268,
-      Guid: 'fd8df8ac-0af2-4738-8dda-3b1030c3e0ce',
-    },
-    PrimaryAudience: {
-      IsSystem: false,
-      FieldTypeId: 16,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelTypeId',
-      EntityTypeQualifierValue: '1',
-      Key: 'PrimaryAudience',
-      Name: 'Primary Audience',
-      Description: 'The primary audience that the item is targeted towards.',
-      Order: 4,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {
-        allowmultiple: {
-          Name: null,
-          Description: null,
-          Value: 'False',
-        },
-        definedtype: {
-          Name: null,
-          Description: null,
-          Value: '16',
-        },
-      },
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1269,
-      Guid: 'ca97aadd-9795-434a-b924-250cc15cd7a5',
-    },
-    SecondaryAudiences: {
-      IsSystem: false,
-      FieldTypeId: 16,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelTypeId',
-      EntityTypeQualifierValue: '1',
-      Key: 'SecondaryAudiences',
-      Name: 'Secondary Audiences',
-      Description: 'Any secondary audiences that the item is targeted towards.',
-      Order: 5,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {
-        allowmultiple: {
-          Name: null,
-          Description: null,
-          Value: 'True',
-        },
-        definedtype: {
-          Name: null,
-          Description: null,
-          Value: '16',
-        },
-      },
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1270,
-      Guid: '95e68a40-c987-4b53-8d9a-0c5605284e4c',
-    },
-    AudioLink: {
-      IsSystem: false,
-      FieldTypeId: 1,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelId',
-      EntityTypeQualifierValue: '5',
-      Key: 'AudioLink',
-      Name: 'Audio Link',
-      Description: '',
-      Order: 1000,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {},
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1925,
-      Guid: 'b9ed0214-752e-f289-43b6-9cda40c1aba9',
-    },
-    Speaker: {
-      IsSystem: false,
-      FieldTypeId: 1,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelId',
-      EntityTypeQualifierValue: '5',
-      Key: 'Speaker',
-      Name: 'Speaker',
-      Description: '',
-      Order: 1001,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {},
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1923,
-      Guid: '9293638a-a176-d7a0-4916-b57e6cde94d2',
-    },
-    VideoLink: {
-      IsSystem: false,
-      FieldTypeId: 1,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelId',
-      EntityTypeQualifierValue: '5',
-      Key: 'VideoLink',
-      Name: 'Video Link',
-      Description: '',
-      Order: 1002,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {},
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1924,
-      Guid: 'dd8b4442-ca91-2780-4ffe-c3d97e95dfa4',
-    },
-    VideoEmbed: {
-      IsSystem: false,
-      FieldTypeId: 51,
-      EntityTypeId: 208,
-      EntityTypeQualifierColumn: 'ContentChannelId',
-      EntityTypeQualifierValue: '5',
-      Key: 'VideoEmbed',
-      Name: 'VideoEmbed',
-      Description: '',
-      Order: 1003,
-      IsGridColumn: false,
-      DefaultValue: '',
-      IsMultiValue: false,
-      IsRequired: false,
-      AllowSearch: false,
-      IsIndexEnabled: false,
-      IsAnalytic: false,
-      IsAnalyticHistory: false,
-      QualifierValues: {
-        editorHeight: {
-          Name: null,
-          Description: null,
-          Value: '200',
-        },
-        editorMode: {
-          Name: null,
-          Description: null,
-          Value: '2',
-        },
-        editorTheme: {
-          Name: null,
-          Description: null,
-          Value: '0',
-        },
-      },
-      CategoryIds: [],
-      TypeId: 49,
-      TypeName: 'Rock.Model.Attribute',
-      AttributeValues: {},
-      Id: 1926,
-      Guid: '0a7c6ae7-7236-029c-4487-4413921b21ee',
-    },
-  },
-  AttributeValues: {
-    SummaryText: {
-      AttributeId: 1265,
-      EntityId: 1,
-      Value:
-        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sollicitudin condimentum aliquet. In est nulla, lacinia ac dictum et, laoreet vitae elit. Proin tempus tellus ligula, a consequat diam consectetur a.',
-    },
-    Image: {
-      AttributeId: 1266,
-      EntityId: 1,
-      Value: '0241ED2F-B527-424C-917C-1142A398711F',
-    },
-    DetailImage: {
-      AttributeId: 1267,
-      EntityId: 1,
-      Value: '3DA90982-118A-4BFE-9A32-58D9F610090A',
-    },
-    ImageByUrlTest: {
-      AttributeId: 1267,
-      EntityId: 1,
-      Value: 'https://some-domain.com/some/path/to/image.jpg',
-    },
-    ImageBySchemalessUrlTest: {
-      AttributeId: 1267,
-      EntityId: 1,
-      Value: '//some-domain.com/some/path/to/image.jpg',
-    },
-    ImageUnknownFormat: {
-      AttributeId: 1267,
-      EntityId: 1,
-      Value: 'ftp://some-domain.com/some/path/to/image.jpg',
-    },
-    Campuses: {
-      AttributeId: 1268,
-      EntityId: null,
-      Value: '',
-    },
-    PrimaryAudience: {
-      AttributeId: 1269,
-      EntityId: 1,
-      Value: 'B364CDEE-F000-4965-AE67-0C80DDA365DC',
-    },
-    SecondaryAudiences: {
-      AttributeId: 1270,
-      EntityId: null,
-      Value: '',
-    },
-    AudioLink: {
-      AttributeId: 1925,
-      EntityId: 33,
-      Value:
-        'https://rockrms.blob.core.windows.net/sampledata/podcasting/sample.mp3',
-    },
-    Speaker: {
-      AttributeId: 1923,
-      EntityId: 33,
-      Value: 'Pete Foster',
-    },
-    VideoLink: {
-      AttributeId: 1924,
-      EntityId: 33,
-      Value:
-        'https://rockrms.blob.core.windows.net/sampledata/podcasting/money-wise.mp4',
-    },
-    VideoEmbed: {
-      AttributeId: 1926,
-      EntityId: 33,
-      Value:
-        '<script src="//fast.wistia.com/embed/medias/kqykx8xbzq.jsonp" async></script><script src="//fast.wistia.com/assets/external/E-v1.js" async></script><div class="wistia_responsive_padding" style="padding:56.25% 0 0 0;position:relative;"><div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"><div class="wistia_embed wistia_async_kqykx8xbzq videoFoam=true" style="height:100%;width:100%">&nbsp;</div></div></div>',
-    },
-  },
-  Id: 1,
-  Guid: '3b8e1859-e42f-4f01-9007-d3e04429f17d',
-  ForeignId: null,
-  ForeignGuid: null,
-  ForeignKey: null,
-});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/index.js b/apollos-church-api/__mocks__/rock-api-mocks/index.js
deleted file mode 100644
index 0698b04b..00000000
--- a/apollos-church-api/__mocks__/rock-api-mocks/index.js
+++ /dev/null
@@ -1,9 +0,0 @@
-export {
-  default as contentChannelItemAssociation,
-} from './content-channel-item-association';
-export { default as contentChannel } from './content-channel';
-export { default as contentItem } from './content-item';
-export { default as people } from './people';
-export { default as userLogins } from './user-logins';
-export { default as session } from './session';
-export { default as interaction } from './interaction';
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/interaction.js b/apollos-church-api/__mocks__/rock-api-mocks/interaction.js
deleted file mode 100644
index fb31c98c..00000000
--- a/apollos-church-api/__mocks__/rock-api-mocks/interaction.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default () => ({
-  Id: 456,
-  RelatedEntityId: 1,
-  Operation: 'Like',
-  InteractionDateTime: new Date(
-    'Tue Aug 21 2018 09:55:01 GMT-0500 (Central Daylight Time)'
-  ).toJSON(),
-});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/people.js b/apollos-church-api/__mocks__/rock-api-mocks/people.js
deleted file mode 100644
index e5f24741..00000000
--- a/apollos-church-api/__mocks__/rock-api-mocks/people.js
+++ /dev/null
@@ -1,11 +0,0 @@
-export default () => ({
-  Id: 51,
-  FirstName: 'Isaac',
-  LastName: 'Hardy',
-  NickName: 'Isaac',
-  Email: 'isaac.hardy@newspring.cc',
-  Photo: {
-    Url:
-      'https://apollosrock.newspring.cc:443/GetImage.ashx?guid=60fd5f35-3167-4c26-9a30-d44937287b87',
-  },
-});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/session.js b/apollos-church-api/__mocks__/rock-api-mocks/session.js
deleted file mode 100644
index 8ffdfb42..00000000
--- a/apollos-church-api/__mocks__/rock-api-mocks/session.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export default () => ({
-  Id: 123,
-});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/user-logins.js b/apollos-church-api/__mocks__/rock-api-mocks/user-logins.js
deleted file mode 100644
index 9bc8c101..00000000
--- a/apollos-church-api/__mocks__/rock-api-mocks/user-logins.js
+++ /dev/null
@@ -1,5 +0,0 @@
-export default () => ({
-  UserName: 'isaac.hardy@newspring.cc',
-  PersonId: 35,
-  Id: 21,
-});
diff --git a/apollos-church-api/__mocks__/universal-analytics.js b/apollos-church-api/__mocks__/universal-analytics.js
deleted file mode 100644
index c3e0c99f..00000000
--- a/apollos-church-api/__mocks__/universal-analytics.js
+++ /dev/null
@@ -1,15 +0,0 @@
-export const mockUA = jest.fn();
-export const mockEvent = jest.fn();
-export const mockSend = jest.fn();
-
-function event(...args) {
-  mockEvent(args);
-  return { send: mockSend };
-}
-
-export default function(...args) {
-  mockUA(args);
-  return {
-    event,
-  };
-}
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
new file mode 100644
index 00000000..f2270944
--- /dev/null
+++ b/apollos-church-api/apollos.json
@@ -0,0 +1,4 @@
+{
+  "version": "2.15.0",
+  "environment": "api"
+}
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
new file mode 100644
index 00000000..b727a567
--- /dev/null
+++ b/apollos-church-api/config.yml
@@ -0,0 +1,243 @@
+# This file, in conjuction with your .env file,
+# should be used to configure the apollos server.
+
+# Any values you wish to keep secret should be placed in `.env`
+# You can access those values (and any other values in your environment)
+# using the ${VARIABLE_NAME} syntax
+
+# This file should be checked into version control.
+# `.env` should NOT be checked into version control.
+APP:
+  # This variable is used for generating deep links.
+  # It should match whatver is in your Info.plist `CFBundleURLTypes`
+  DEEP_LINK_HOST: ${DEEP_LINK_HOST}
+  UNIVERSAL_LINK_HOST: ${UNIVERSAL_LINK_HOST}
+  ROOT_API_URL: ${ROOT_URL}
+  JOBS_USERNAME: ${JOBS_USERNAME}
+  JOBS_PASSWORD: ${JOBS_PASSWORD}
+DATABASE:
+  URL: ${DATABASE_URL}
+  OPTIONS:
+    dialectOptions:
+      ssl:
+        require: false
+        rejectUnauthorized: false
+BUGSNAG:
+  API_KEY: ${BUGSNAG_KEY}
+ROCK:
+  URL: ${ROCK_URL}
+  API_TOKEN: ${ROCK_TOKEN}
+UNIVERSAL_LINKS:
+  APPLE_APP_ID: ${APPLE_APP_ID}
+  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
+  APP_STORE_LINK: ${IOS_REDIRECT}
+  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
+  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
+  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
+ONE_SIGNAL:
+  APP_ID: ${ONE_SIGNAL_APP_ID}
+  REST_KEY: ${ONE_SIGNAL_REST_KEY}
+CHURCH_ONLINE:
+  URL: ${CHURCH_ONLINE_URL}
+  WEB_VIEW_URL: https://apollos.online.church/
+ALGOLIA:
+  APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
+  API_KEY: ${ALGOLIASEARCH_API_KEY}
+TWILIO:
+  ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
+  AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
+  FROM_NUMBER: ${TWILIO_FROM_NUMBER}
+PASS:
+  TEMPLATES:
+    CHECKIN: ${PWD}/wallet-passes/checkin.pass
+  CERTIFICATES:
+    WWDR: ${PASS_WWDR_CERT}
+    SIGNER_CERT: ${PASS_SIGNER_CERT}
+    SIGNER_KEY: ${PASS_SIGNER_KEY}
+    SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
+BIBLE_API:
+  KEY: ${BIBLE_API_KEY}
+  BIBLE_ID:
+    WEB: '9879dbb7cfe39e4d-01'
+    KJV: 'de4e12af7f28f599-02'
+CLOUDINARY:
+  URL: ${CLOUDINARY_URL}
+
+# This key holds various properties that allow our GraphQL server to map to your Rock Instance
+ROCK_MAPPINGS:
+  CONTENT_ITEM:
+    ContentSeriesContentItem:
+      # When resolving "ContentSeriesContentItem" look in rock for a "ContentChannelItem"
+      EntityType: ContentChannelItem
+      # Used to define the subset of content channels types that use this specific type.
+      ContentChannelTypeId: [6]
+    DevotionalContentItem:
+      EntityType: ContentChannelItem
+      ContentChannelId: [7]
+    MediaContentItem:
+      EntityType: ContentChannelItem
+    UniversalContentItem:
+      EntityType: ContentChannelItem
+    WeekendContentItem:
+      ContentChannelId: [5]
+      EntityType: ContentChannelItem
+    ContentItem:
+      EntityType: ContentChannelItem
+
+  DATAVIEW_CATEGORIES:
+    # Id of the category used to store all persona dataviews
+    PersonaId: 210
+
+  ALL_CONTENT_CHANNELS:
+    - 3
+    - 5
+    - 6
+    - 8
+
+  SERMON_CHANNEL_ID: 5
+
+TABS:
+  HOME:
+    - type: ActionBar
+      title: Welcome to Apollos
+      actions:
+        [
+          {
+            title: Check In,
+            icon: check,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+        ]
+    - algorithms:
+      - type: CONTENT_FEED
+        arguments:
+          channelIds:
+            - 6
+      type: HeroList
+      primaryAction:
+        # Right now, you hardcode exactly what GraphQL should return.
+        # Long term, we hope to have a more sophisticated mechanism for driving this field
+        action: OPEN_NODE
+        title: 'Read More'
+        relatedNode:
+          __typename: UniversalContentItem
+          id: 21
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - algorithms:
+        - type: CAMPAIGN_ITEMS
+          channelIds:
+            - 9
+      type: HeroList
+      isFeatured: true
+      subtitle: Featured
+    - title: FOR YOU
+      algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+      subtitle: Explore what God calls you to today
+      type: ActionList
+    - algorithms: [PERSONA_FEED]
+      subtitle: Continue
+      type: HorizontalCardList
+    - title: RECOMMENDED
+      algorithms: [SERMON_CHILDREN]
+      subtitle: For Him
+      type: VerticalCardList
+    - title: BULLETIN
+      subtitle: What's happening at apollos?
+      type: ActionList
+      algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 13
+        - type: UPCOMING_EVENTS
+
+  READ:
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 7
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Devotionals
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 7
+          name: Devotionals
+
+  WATCH:
+    - algorithms:
+        - type: LATEST_SERIES_CHILDREN
+          arguments:
+            channelId: 4
+      type: HeroList
+      title: Catch up
+      subtitle: Latest Series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 4
+      type: VerticalCardList
+      subtitle: All series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 3
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Sermons
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 5
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Podcasts
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 5
+          name: Podcasts
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 6
+            limit: 3
+      type: HorizontalCardList
+      title: Videos
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 6
+          name: Videos
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 8
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Something Else
+
+  PRAY:
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - type: VerticalPrayerList
+      title: Your Prayers
diff --git a/apollos-church-api/index.js b/apollos-church-api/index.js
deleted file mode 100644
index f97f0e38..00000000
--- a/apollos-church-api/index.js
+++ /dev/null
@@ -1,5 +0,0 @@
-import server from './src';
-
-server.listen().then(({ url }) => {
-  console.log(`🚀 Server ready at ${url}`);
-});
diff --git a/apollos-church-api/load-tests/Apollos App Testing.jmx b/apollos-church-api/load-tests/Apollos App Testing.jmx
new file mode 100644
index 00000000..e81ef7b3
--- /dev/null
+++ b/apollos-church-api/load-tests/Apollos App Testing.jmx	
@@ -0,0 +1,774 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
+  <hashTree>
+    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Apollos App Testing" enabled="true">
+      <stringProp name="TestPlan.comments"></stringProp>
+      <boolProp name="TestPlan.functional_mode">false</boolProp>
+      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
+      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
+      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+        <collectionProp name="Arguments.arguments">
+          <elementProp name="ApollosTestUser" elementType="Argument">
+            <stringProp name="Argument.name">ApollosTestUser</stringProp>
+            <stringProp name="Argument.value">vincent@differential.com</stringProp>
+            <stringProp name="Argument.metadata">=</stringProp>
+          </elementProp>
+          <elementProp name="ApollosTestPassword" elementType="Argument">
+            <stringProp name="Argument.name">ApollosTestPassword</stringProp>
+            <stringProp name="Argument.value">password</stringProp>
+            <stringProp name="Argument.metadata">=</stringProp>
+          </elementProp>
+          <elementProp name="ServerUrl" elementType="Argument">
+            <stringProp name="Argument.name">ServerUrl</stringProp>
+            <stringProp name="Argument.value">apollos-church-api.herokuapp.com</stringProp>
+            <stringProp name="Argument.metadata">=</stringProp>
+          </elementProp>
+        </collectionProp>
+      </elementProp>
+      <stringProp name="TestPlan.user_define_classpath"></stringProp>
+    </TestPlan>
+    <hashTree>
+      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Home Feed" enabled="true">
+        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
+        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
+          <stringProp name="LoopController.loops">1</stringProp>
+        </elementProp>
+        <stringProp name="ThreadGroup.num_threads">3</stringProp>
+        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
+        <boolProp name="ThreadGroup.scheduler">false</boolProp>
+        <stringProp name="ThreadGroup.duration"></stringProp>
+        <stringProp name="ThreadGroup.delay"></stringProp>
+      </ThreadGroup>
+      <hashTree>
+        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
+          <collectionProp name="HeaderManager.headers">
+            <elementProp name="" elementType="Header">
+              <stringProp name="Header.name">Content-Type</stringProp>
+              <stringProp name="Header.value">application/json</stringProp>
+            </elementProp>
+          </collectionProp>
+        </HeaderManager>
+        <hashTree/>
+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
+          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
+            <collectionProp name="Arguments.arguments">
+              <elementProp name="" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;login&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation login {\n  authenticate(identity: \&quot;${ApollosTestUser}\&quot;, password: \&quot;${ApollosTestPassword}\&quot;) {\n    token\n  }\n}\n&quot;}</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+              </elementProp>
+            </collectionProp>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">https</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/graphql</stringProp>
+          <stringProp name="HTTPSampler.method">POST</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+          <stringProp name="HTTPSampler.response_timeout"></stringProp>
+        </HTTPSamplerProxy>
+        <hashTree>
+          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
+            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
+            <stringProp name="JSONPostProcessor.jsonPathExprs">data.authenticate.token</stringProp>
+            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
+          </JSONPostProcessor>
+          <hashTree/>
+        </hashTree>
+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Feed" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+            <collectionProp name="Arguments.arguments">
+              <elementProp name="query" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">query%20getUserFeed(%24first%3A%20Int%2C%20%24after%3A%20String)%20%7B%0A%20%20userFeed(first%3A%20%24first%2C%20after%3A%20%24after)%20%7B%0A%20%20%20%20pageInfo%20%7B%0A%20%20%20%20%20%20endCursor%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20...largeCardFragment%0A%20%20%20%20%20%20%20%20...contentItemFragment%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20contentItemFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20title%0A%20%20isLiked%0A%20%20likedCount%0A%20%20summary%0A%20%20coverImage%20%7B%0A%20%20%20%20name%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20parentChannel%20%7B%0A%20%20%20%20id%0A%20%20%20%20name%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20videos%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20audios%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20largeCardFragment%20on%20ContentItem%20%7B%0A%20%20...baseCardFragment%0A%20%20__typename%0A%7D%0A%0Afragment%20baseCardFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20__typename%0A%20%20...coverImageFragment%0A%20%20...themeFragment%0A%20%20title%0A%20%20summary%0A%20%20isLiked%0A%20%20...%20on%20MediaContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20DevotionalContentItem%20%7B%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20coverImageFragment%20on%20ContentItem%20%7B%0A%20%20coverImage%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20themeFragment%20on%20ContentItem%20%7B%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">query</stringProp>
+              </elementProp>
+              <elementProp name="operationName" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">getUserFeed</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">operationName</stringProp>
+              </elementProp>
+              <elementProp name="variables" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">%7B%22first%22%3A10%2C%22after%22%3Anull%7D</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">variables</stringProp>
+              </elementProp>
+            </collectionProp>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">https</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/graphql</stringProp>
+          <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+          <stringProp name="HTTPSampler.response_timeout"></stringProp>
+        </HTTPSamplerProxy>
+        <hashTree>
+          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
+            <objProp>
+              <name>saveConfig</name>
+              <value class="SampleSaveConfiguration">
+                <time>true</time>
+                <latency>true</latency>
+                <timestamp>true</timestamp>
+                <success>true</success>
+                <label>true</label>
+                <code>true</code>
+                <message>true</message>
+                <threadName>true</threadName>
+                <dataType>true</dataType>
+                <encoding>false</encoding>
+                <assertions>true</assertions>
+                <subresults>true</subresults>
+                <responseData>false</responseData>
+                <samplerData>false</samplerData>
+                <xml>false</xml>
+                <fieldNames>true</fieldNames>
+                <responseHeaders>false</responseHeaders>
+                <requestHeaders>false</requestHeaders>
+                <responseDataOnError>false</responseDataOnError>
+                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+                <assertionsResultsToSave>0</assertionsResultsToSave>
+                <bytes>true</bytes>
+                <sentBytes>true</sentBytes>
+                <url>true</url>
+                <threadCounts>true</threadCounts>
+                <idleTime>true</idleTime>
+                <connectTime>true</connectTime>
+              </value>
+            </objProp>
+            <stringProp name="filename"></stringProp>
+          </ResultCollector>
+          <hashTree/>
+          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
+            <collectionProp name="HeaderManager.headers">
+              <elementProp name="" elementType="Header">
+                <stringProp name="Header.name">Authorization</stringProp>
+                <stringProp name="Header.value">${authToken}</stringProp>
+              </elementProp>
+            </collectionProp>
+          </HeaderManager>
+          <hashTree/>
+        </hashTree>
+        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
+          <objProp>
+            <name>saveConfig</name>
+            <value class="SampleSaveConfiguration">
+              <time>true</time>
+              <latency>true</latency>
+              <timestamp>true</timestamp>
+              <success>true</success>
+              <label>true</label>
+              <code>true</code>
+              <message>true</message>
+              <threadName>true</threadName>
+              <dataType>true</dataType>
+              <encoding>false</encoding>
+              <assertions>true</assertions>
+              <subresults>true</subresults>
+              <responseData>false</responseData>
+              <samplerData>false</samplerData>
+              <xml>false</xml>
+              <fieldNames>true</fieldNames>
+              <responseHeaders>false</responseHeaders>
+              <requestHeaders>false</requestHeaders>
+              <responseDataOnError>false</responseDataOnError>
+              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+              <assertionsResultsToSave>0</assertionsResultsToSave>
+              <bytes>true</bytes>
+              <sentBytes>true</sentBytes>
+              <url>true</url>
+              <threadCounts>true</threadCounts>
+              <idleTime>true</idleTime>
+              <connectTime>true</connectTime>
+            </value>
+          </objProp>
+          <stringProp name="filename"></stringProp>
+        </ResultCollector>
+        <hashTree/>
+      </hashTree>
+      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Discover Feed" enabled="true">
+        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
+        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
+          <stringProp name="LoopController.loops">1</stringProp>
+        </elementProp>
+        <stringProp name="ThreadGroup.num_threads">3</stringProp>
+        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
+        <boolProp name="ThreadGroup.scheduler">false</boolProp>
+        <stringProp name="ThreadGroup.duration"></stringProp>
+        <stringProp name="ThreadGroup.delay"></stringProp>
+      </ThreadGroup>
+      <hashTree>
+        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
+          <collectionProp name="HeaderManager.headers">
+            <elementProp name="" elementType="Header">
+              <stringProp name="Header.name">Content-Type</stringProp>
+              <stringProp name="Header.value">application/json</stringProp>
+            </elementProp>
+          </collectionProp>
+        </HeaderManager>
+        <hashTree/>
+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
+            <collectionProp name="Arguments.arguments">
+              <elementProp name="" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;login&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation login {\n  authenticate(identity: \&quot;${ApollosTestUser}\&quot;, password: \&quot;${ApollosTestPassword}\&quot;) {\n    token\n  }\n}\n&quot;}</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+              </elementProp>
+            </collectionProp>
+          </elementProp>
+          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
+          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">https</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/graphql</stringProp>
+          <stringProp name="HTTPSampler.method">POST</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+          <stringProp name="HTTPSampler.response_timeout"></stringProp>
+        </HTTPSamplerProxy>
+        <hashTree>
+          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
+            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
+            <stringProp name="JSONPostProcessor.jsonPathExprs">data.authenticate.token</stringProp>
+            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
+          </JSONPostProcessor>
+          <hashTree/>
+        </hashTree>
+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Discover Feed" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+            <collectionProp name="Arguments.arguments">
+              <elementProp name="query" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">query%20getContentChannels%20%7B%0A%20%20contentChannels%20%7B%0A%20%20%20%20id%0A%20%20%20%20name%0A%20%20%20%20childContentItemsConnection(first%3A%203)%20%7B%0A%20%20%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20%20%20id%0A%20%20%20%20%20%20%20%20%20%20...contentItemFragment%0A%20%20%20%20%20%20%20%20%20%20...largeCardFragment%0A%20%20%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20contentItemFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20title%0A%20%20isLiked%0A%20%20likedCount%0A%20%20summary%0A%20%20coverImage%20%7B%0A%20%20%20%20name%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20parentChannel%20%7B%0A%20%20%20%20id%0A%20%20%20%20name%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20videos%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20audios%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20largeCardFragment%20on%20ContentItem%20%7B%0A%20%20...baseCardFragment%0A%20%20__typename%0A%7D%0A%0Afragment%20baseCardFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20__typename%0A%20%20...coverImageFragment%0A%20%20...themeFragment%0A%20%20title%0A%20%20summary%0A%20%20isLiked%0A%20%20...%20on%20MediaContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20DevotionalContentItem%20%7B%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20coverImageFragment%20on%20ContentItem%20%7B%0A%20%20coverImage%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20themeFragment%20on%20ContentItem%20%7B%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">query</stringProp>
+              </elementProp>
+              <elementProp name="operationName" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">getContentChannels</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">operationName</stringProp>
+              </elementProp>
+              <elementProp name="variables" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">%7B%7D</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">variables</stringProp>
+              </elementProp>
+            </collectionProp>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">https</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/graphql</stringProp>
+          <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+          <stringProp name="HTTPSampler.response_timeout"></stringProp>
+        </HTTPSamplerProxy>
+        <hashTree>
+          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
+            <objProp>
+              <name>saveConfig</name>
+              <value class="SampleSaveConfiguration">
+                <time>true</time>
+                <latency>true</latency>
+                <timestamp>true</timestamp>
+                <success>true</success>
+                <label>true</label>
+                <code>true</code>
+                <message>true</message>
+                <threadName>true</threadName>
+                <dataType>true</dataType>
+                <encoding>false</encoding>
+                <assertions>true</assertions>
+                <subresults>true</subresults>
+                <responseData>false</responseData>
+                <samplerData>false</samplerData>
+                <xml>false</xml>
+                <fieldNames>true</fieldNames>
+                <responseHeaders>false</responseHeaders>
+                <requestHeaders>false</requestHeaders>
+                <responseDataOnError>false</responseDataOnError>
+                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+                <assertionsResultsToSave>0</assertionsResultsToSave>
+                <bytes>true</bytes>
+                <sentBytes>true</sentBytes>
+                <url>true</url>
+                <threadCounts>true</threadCounts>
+                <idleTime>true</idleTime>
+                <connectTime>true</connectTime>
+              </value>
+            </objProp>
+            <stringProp name="filename"></stringProp>
+          </ResultCollector>
+          <hashTree/>
+          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
+            <collectionProp name="HeaderManager.headers">
+              <elementProp name="" elementType="Header">
+                <stringProp name="Header.name">Authorization</stringProp>
+                <stringProp name="Header.value">${authToken}</stringProp>
+              </elementProp>
+            </collectionProp>
+          </HeaderManager>
+          <hashTree/>
+        </hashTree>
+        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
+          <objProp>
+            <name>saveConfig</name>
+            <value class="SampleSaveConfiguration">
+              <time>true</time>
+              <latency>true</latency>
+              <timestamp>true</timestamp>
+              <success>true</success>
+              <label>true</label>
+              <code>true</code>
+              <message>true</message>
+              <threadName>true</threadName>
+              <dataType>true</dataType>
+              <encoding>false</encoding>
+              <assertions>true</assertions>
+              <subresults>true</subresults>
+              <responseData>false</responseData>
+              <samplerData>false</samplerData>
+              <xml>false</xml>
+              <fieldNames>true</fieldNames>
+              <responseHeaders>false</responseHeaders>
+              <requestHeaders>false</requestHeaders>
+              <responseDataOnError>false</responseDataOnError>
+              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+              <assertionsResultsToSave>0</assertionsResultsToSave>
+              <bytes>true</bytes>
+              <sentBytes>true</sentBytes>
+              <url>true</url>
+              <threadCounts>true</threadCounts>
+              <idleTime>true</idleTime>
+              <connectTime>true</connectTime>
+            </value>
+          </objProp>
+          <stringProp name="filename"></stringProp>
+        </ResultCollector>
+        <hashTree/>
+      </hashTree>
+      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Register " enabled="true">
+        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
+        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
+          <boolProp name="LoopController.continue_forever">false</boolProp>
+          <stringProp name="LoopController.loops">1</stringProp>
+        </elementProp>
+        <stringProp name="ThreadGroup.num_threads">3</stringProp>
+        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
+        <boolProp name="ThreadGroup.scheduler">false</boolProp>
+        <stringProp name="ThreadGroup.duration"></stringProp>
+        <stringProp name="ThreadGroup.delay"></stringProp>
+      </ThreadGroup>
+      <hashTree>
+        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
+          <collectionProp name="HeaderManager.headers">
+            <elementProp name="" elementType="Header">
+              <stringProp name="Header.name">Content-Type</stringProp>
+              <stringProp name="Header.value">application/json</stringProp>
+            </elementProp>
+          </collectionProp>
+        </HeaderManager>
+        <hashTree/>
+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register" enabled="true">
+          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
+            <collectionProp name="Arguments.arguments">
+              <elementProp name="" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;register&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation register {\n  registerPerson(email: \&quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}@jmeter-test.com\&quot;, password: \&quot;password\&quot;) {\n    token\n  }\n}\n&quot;}</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+              </elementProp>
+            </collectionProp>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">https</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/graphql</stringProp>
+          <stringProp name="HTTPSampler.method">POST</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+          <stringProp name="HTTPSampler.response_timeout"></stringProp>
+        </HTTPSamplerProxy>
+        <hashTree>
+          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
+            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
+            <stringProp name="JSONPostProcessor.jsonPathExprs">data.registerPerson.token</stringProp>
+            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
+          </JSONPostProcessor>
+          <hashTree/>
+          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
+            <objProp>
+              <name>saveConfig</name>
+              <value class="SampleSaveConfiguration">
+                <time>true</time>
+                <latency>true</latency>
+                <timestamp>true</timestamp>
+                <success>true</success>
+                <label>true</label>
+                <code>true</code>
+                <message>true</message>
+                <threadName>true</threadName>
+                <dataType>true</dataType>
+                <encoding>false</encoding>
+                <assertions>true</assertions>
+                <subresults>true</subresults>
+                <responseData>false</responseData>
+                <samplerData>false</samplerData>
+                <xml>false</xml>
+                <fieldNames>true</fieldNames>
+                <responseHeaders>false</responseHeaders>
+                <requestHeaders>false</requestHeaders>
+                <responseDataOnError>false</responseDataOnError>
+                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+                <assertionsResultsToSave>0</assertionsResultsToSave>
+                <bytes>true</bytes>
+                <sentBytes>true</sentBytes>
+                <url>true</url>
+                <threadCounts>true</threadCounts>
+                <idleTime>true</idleTime>
+                <connectTime>true</connectTime>
+              </value>
+            </objProp>
+            <stringProp name="filename"></stringProp>
+          </ResultCollector>
+          <hashTree/>
+        </hashTree>
+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Profile Field" enabled="true">
+          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
+            <collectionProp name="Arguments.arguments">
+              <elementProp name="" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;update&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;mutation update {\n  updateProfileFields(input: [{field: FirstName, value: \&quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}\&quot;}]) {\n    firstName\n  }\n}\n&quot;}</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+              </elementProp>
+            </collectionProp>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">https</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/graphql</stringProp>
+          <stringProp name="HTTPSampler.method">POST</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+          <stringProp name="HTTPSampler.response_timeout"></stringProp>
+        </HTTPSamplerProxy>
+        <hashTree>
+          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
+            <objProp>
+              <name>saveConfig</name>
+              <value class="SampleSaveConfiguration">
+                <time>true</time>
+                <latency>true</latency>
+                <timestamp>true</timestamp>
+                <success>true</success>
+                <label>true</label>
+                <code>true</code>
+                <message>true</message>
+                <threadName>true</threadName>
+                <dataType>true</dataType>
+                <encoding>false</encoding>
+                <assertions>true</assertions>
+                <subresults>true</subresults>
+                <responseData>false</responseData>
+                <samplerData>false</samplerData>
+                <xml>false</xml>
+                <fieldNames>true</fieldNames>
+                <responseHeaders>false</responseHeaders>
+                <requestHeaders>false</requestHeaders>
+                <responseDataOnError>false</responseDataOnError>
+                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+                <assertionsResultsToSave>0</assertionsResultsToSave>
+                <bytes>true</bytes>
+                <sentBytes>true</sentBytes>
+                <url>true</url>
+                <threadCounts>true</threadCounts>
+                <idleTime>true</idleTime>
+                <connectTime>true</connectTime>
+              </value>
+            </objProp>
+            <stringProp name="filename"></stringProp>
+          </ResultCollector>
+          <hashTree/>
+          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
+            <collectionProp name="HeaderManager.headers">
+              <elementProp name="" elementType="Header">
+                <stringProp name="Header.name">Authorization</stringProp>
+                <stringProp name="Header.value">${authToken}</stringProp>
+              </elementProp>
+            </collectionProp>
+          </HeaderManager>
+          <hashTree/>
+        </hashTree>
+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Campuses" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+            <collectionProp name="Arguments.arguments">
+              <elementProp name="query" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">query%20getAllCampuses(%24latitude%3A%20Float!%2C%20%24longitude%3A%20Float!)%20%7B%0A%20%20campuses(location%3A%20%7Blatitude%3A%20%24latitude%2C%20longitude%3A%20%24longitude%7D)%20%7B%0A%20%20%20%20...CampusParts%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20CampusParts%20on%20Campus%20%7B%0A%20%20id%0A%20%20name%0A%20%20latitude%0A%20%20longitude%0A%20%20distanceFromLocation%0A%20%20street1%0A%20%20street2%0A%20%20city%0A%20%20state%0A%20%20postalCode%0A%20%20image%20%7B%0A%20%20%20%20uri%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">query</stringProp>
+              </elementProp>
+              <elementProp name="operationName" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">getAllCampuses</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">operationName</stringProp>
+              </elementProp>
+              <elementProp name="variables" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">%7B%22latitude%22%3A39.103119%2C%22longitude%22%3A-84.512016%7D</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">variables</stringProp>
+              </elementProp>
+            </collectionProp>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">https</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/graphql</stringProp>
+          <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+          <stringProp name="HTTPSampler.response_timeout"></stringProp>
+        </HTTPSamplerProxy>
+        <hashTree>
+          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
+            <objProp>
+              <name>saveConfig</name>
+              <value class="SampleSaveConfiguration">
+                <time>true</time>
+                <latency>true</latency>
+                <timestamp>true</timestamp>
+                <success>true</success>
+                <label>true</label>
+                <code>true</code>
+                <message>true</message>
+                <threadName>true</threadName>
+                <dataType>true</dataType>
+                <encoding>false</encoding>
+                <assertions>true</assertions>
+                <subresults>true</subresults>
+                <responseData>false</responseData>
+                <samplerData>false</samplerData>
+                <xml>false</xml>
+                <fieldNames>true</fieldNames>
+                <responseHeaders>false</responseHeaders>
+                <requestHeaders>false</requestHeaders>
+                <responseDataOnError>false</responseDataOnError>
+                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+                <assertionsResultsToSave>0</assertionsResultsToSave>
+                <bytes>true</bytes>
+                <sentBytes>true</sentBytes>
+                <url>true</url>
+                <threadCounts>true</threadCounts>
+                <idleTime>true</idleTime>
+                <connectTime>true</connectTime>
+              </value>
+            </objProp>
+            <stringProp name="filename"></stringProp>
+          </ResultCollector>
+          <hashTree/>
+          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
+            <collectionProp name="HeaderManager.headers">
+              <elementProp name="" elementType="Header">
+                <stringProp name="Header.name">Authorization</stringProp>
+                <stringProp name="Header.value">${authToken}</stringProp>
+              </elementProp>
+            </collectionProp>
+          </HeaderManager>
+          <hashTree/>
+        </hashTree>
+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Feed" enabled="true">
+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+            <collectionProp name="Arguments.arguments">
+              <elementProp name="query" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">query%20getUserFeed(%24first%3A%20Int%2C%20%24after%3A%20String)%20%7B%0A%20%20userFeed(first%3A%20%24first%2C%20after%3A%20%24after)%20%7B%0A%20%20%20%20pageInfo%20%7B%0A%20%20%20%20%20%20endCursor%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20edges%20%7B%0A%20%20%20%20%20%20node%20%7B%0A%20%20%20%20%20%20%20%20...largeCardFragment%0A%20%20%20%20%20%20%20%20...contentItemFragment%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20contentItemFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20title%0A%20%20isLiked%0A%20%20likedCount%0A%20%20summary%0A%20%20coverImage%20%7B%0A%20%20%20%20name%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20parentChannel%20%7B%0A%20%20%20%20id%0A%20%20%20%20name%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20videos%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20audios%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20largeCardFragment%20on%20ContentItem%20%7B%0A%20%20...baseCardFragment%0A%20%20__typename%0A%7D%0A%0Afragment%20baseCardFragment%20on%20ContentItem%20%7B%0A%20%20id%0A%20%20__typename%0A%20%20...coverImageFragment%0A%20%20...themeFragment%0A%20%20title%0A%20%20summary%0A%20%20isLiked%0A%20%20...%20on%20MediaContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20WeekendContentItem%20%7B%0A%20%20%20%20videos%20%7B%0A%20%20%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20%20%20uri%0A%20%20%20%20%20%20%20%20__typename%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20liveStream%20%7B%0A%20%20%20%20%20%20isLive%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20...%20on%20DevotionalContentItem%20%7B%0A%20%20%20%20parentChannel%20%7B%0A%20%20%20%20%20%20id%0A%20%20%20%20%20%20name%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%7D%0A%0Afragment%20coverImageFragment%20on%20ContentItem%20%7B%0A%20%20coverImage%20%7B%0A%20%20%20%20sources%20%7B%0A%20%20%20%20%20%20uri%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A%0Afragment%20themeFragment%20on%20ContentItem%20%7B%0A%20%20theme%20%7B%0A%20%20%20%20type%0A%20%20%20%20colors%20%7B%0A%20%20%20%20%20%20primary%0A%20%20%20%20%20%20secondary%0A%20%20%20%20%20%20screen%0A%20%20%20%20%20%20paper%0A%20%20%20%20%20%20__typename%0A%20%20%20%20%7D%0A%20%20%20%20__typename%0A%20%20%7D%0A%20%20__typename%0A%7D%0A</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">query</stringProp>
+              </elementProp>
+              <elementProp name="operationName" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">getUserFeed</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">operationName</stringProp>
+              </elementProp>
+              <elementProp name="variables" elementType="HTTPArgument">
+                <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                <stringProp name="Argument.value">%7B%22first%22%3A10%2C%22after%22%3Anull%7D</stringProp>
+                <stringProp name="Argument.metadata">=</stringProp>
+                <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                <stringProp name="Argument.name">variables</stringProp>
+              </elementProp>
+            </collectionProp>
+          </elementProp>
+          <stringProp name="HTTPSampler.domain">${ServerUrl}</stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
+          <stringProp name="HTTPSampler.protocol">https</stringProp>
+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+          <stringProp name="HTTPSampler.path">/graphql</stringProp>
+          <stringProp name="HTTPSampler.method">GET</stringProp>
+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+          <stringProp name="HTTPSampler.response_timeout"></stringProp>
+        </HTTPSamplerProxy>
+        <hashTree>
+          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
+            <boolProp name="ResultCollector.error_logging">false</boolProp>
+            <objProp>
+              <name>saveConfig</name>
+              <value class="SampleSaveConfiguration">
+                <time>true</time>
+                <latency>true</latency>
+                <timestamp>true</timestamp>
+                <success>true</success>
+                <label>true</label>
+                <code>true</code>
+                <message>true</message>
+                <threadName>true</threadName>
+                <dataType>true</dataType>
+                <encoding>false</encoding>
+                <assertions>true</assertions>
+                <subresults>true</subresults>
+                <responseData>false</responseData>
+                <samplerData>false</samplerData>
+                <xml>false</xml>
+                <fieldNames>true</fieldNames>
+                <responseHeaders>false</responseHeaders>
+                <requestHeaders>false</requestHeaders>
+                <responseDataOnError>false</responseDataOnError>
+                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+                <assertionsResultsToSave>0</assertionsResultsToSave>
+                <bytes>true</bytes>
+                <sentBytes>true</sentBytes>
+                <url>true</url>
+                <threadCounts>true</threadCounts>
+                <idleTime>true</idleTime>
+                <connectTime>true</connectTime>
+              </value>
+            </objProp>
+            <stringProp name="filename"></stringProp>
+          </ResultCollector>
+          <hashTree/>
+          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
+            <collectionProp name="HeaderManager.headers">
+              <elementProp name="" elementType="Header">
+                <stringProp name="Header.name">Authorization</stringProp>
+                <stringProp name="Header.value">${authToken}</stringProp>
+              </elementProp>
+            </collectionProp>
+          </HeaderManager>
+          <hashTree/>
+        </hashTree>
+        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
+          <objProp>
+            <name>saveConfig</name>
+            <value class="SampleSaveConfiguration">
+              <time>true</time>
+              <latency>true</latency>
+              <timestamp>true</timestamp>
+              <success>true</success>
+              <label>true</label>
+              <code>true</code>
+              <message>true</message>
+              <threadName>true</threadName>
+              <dataType>true</dataType>
+              <encoding>false</encoding>
+              <assertions>true</assertions>
+              <subresults>true</subresults>
+              <responseData>false</responseData>
+              <samplerData>false</samplerData>
+              <xml>false</xml>
+              <fieldNames>true</fieldNames>
+              <responseHeaders>false</responseHeaders>
+              <requestHeaders>false</requestHeaders>
+              <responseDataOnError>false</responseDataOnError>
+              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
+              <assertionsResultsToSave>0</assertionsResultsToSave>
+              <bytes>true</bytes>
+              <sentBytes>true</sentBytes>
+              <url>true</url>
+              <threadCounts>true</threadCounts>
+              <idleTime>true</idleTime>
+              <connectTime>true</connectTime>
+            </value>
+          </objProp>
+          <stringProp name="filename"></stringProp>
+        </ResultCollector>
+        <hashTree/>
+      </hashTree>
+    </hashTree>
+  </hashTree>
+</jmeterTestPlan>
\ No newline at end of file
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 7fc020ff..a86f68d1 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,57 +1,66 @@
 {
   "name": "apollos-church-api",
-  "version": "0.5.0",
+  "version": "1.0.0",
   "private": true,
-  "main": "src/index.js",
+  "main": "lib/index.js",
   "scripts": {
-    "start": "if test \"$NOW_ENV\" = \"true\" ; then yarn start:now ; else yarn start:dev ; fi",
-    "start:dev": "nodemon ./index.js --exec babel-node",
-    "start:now": "babel-node ./index.js",
-    "test": "jest",
-    "test:watch": "jest --maxWorkers=2 --watch",
+    "setup": "./scripts/init.sh",
+    "start": "NODE_ENV=production node ./lib/index.js",
+    "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
+    "postinstall": "yarn build",
+    "link-packages": "node ./scripts/link-packages && yarn yalc update",
+    "unlink-packages": "node ./scripts/link-packages remove && rm -rf ./node_modules",
+    "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
+    "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
     "lint": "eslint ./src --ext .js",
-    "fixlint": "eslint ./src --ext .js --fix",
-    "codecov": "cat ./coverage/lcov.info | codecov",
-    "release": "standard-version --release-as minor"
+    "translate": "node scripts/translate.js"
   },
   "engines": {
-    "node": ">=8.11.x"
-  },
-  "jest": {
-    "collectCoverage": true,
-    "testMatch": [
-      "<rootDir>/**/__tests__/**/*.{js,jsx,mjs}",
-      "<rootDir>/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
-    ],
-    "testEnvironment": "node"
+    "node": ">=12.x.x"
   },
   "dependencies": {
-    "analytics-node": "^3.3.0",
-    "apollo-datasource-rest": "0.1.1",
-    "apollo-server": "^2.0.5",
-    "casual": "1.5.19",
+    "@apollosproject/config": "^2.15.0",
+    "@apollosproject/data-connector-algolia-search": "^2.15.0",
+    "@apollosproject/data-connector-analytics": "^2.15.0",
+    "@apollosproject/data-connector-bible": "^2.15.0",
+    "@apollosproject/data-connector-church-online": "^2.15.0",
+    "@apollosproject/data-connector-cloudinary": "^2.15.0",
+    "@apollosproject/data-connector-onesignal": "^2.15.0",
+    "@apollosproject/data-connector-passes": "^2.15.0",
+    "@apollosproject/data-connector-postgres": "^2.15.0",
+    "@apollosproject/data-connector-redis-cache": "^2.15.0",
+    "@apollosproject/data-connector-rock": "^2.15.0",
+    "@apollosproject/data-connector-twilio": "^2.15.0",
+    "@apollosproject/data-schema": "^2.15.0",
+    "@apollosproject/rock-apollo-data-source": "^2.15.0",
+    "@apollosproject/server-core": "^2.15.0",
+    "apollo-server": "^2.24.1",
+    "apollo-server-express": "2.14.2",
     "color": "3.0.0",
-    "crypto": "1.0.1",
-    "dataloader": "1.4.0",
     "dotenv": "6.0.0",
-    "form-data": "^2.3.2",
-    "graphql": "0.13.2",
-    "isomorphic-fetch": "2.2.1",
-    "jsonwebtoken": "8.3.0",
-    "lodash": "4.17.10",
-    "prettier": "1.12.1",
-    "randomcolor": "0.5.3",
-    "sanitize-html": "1.18.2",
-    "universal-analytics": "^0.4.17",
-    "url-join": "4.0.0",
-    "with-query": "1.0.2"
+    "express": "^4.17.0",
+    "graphql": "14.6.0",
+    "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "babel-preset-apollos": "link:../babel-preset-apollos",
-    "codecov": "3.0.2",
-    "coveralls": "3.0.1",
-    "jest": "23.0.0",
-    "jest-fetch-mock": "1.6.2",
-    "nodemon": "1.17.5"
+    "@apollosproject/apollo-server-env-mock": "^2.15.0",
+    "@apollosproject/babel-preset-apollos": "^2.15.0",
+    "@apollosproject/eslint-config": "^2.15.0",
+    "@babel/cli": "^7.4.5",
+    "@babel/core": "^7.4.5",
+    "@babel/node": "^7.7.4",
+    "babel-eslint": "^10.0.3",
+    "eslint": "^5.16.0",
+    "eslint-config-airbnb-base": "^14.0.0",
+    "eslint-config-prettier": "^2.9.0",
+    "eslint-import-resolver-babel-module": "^5.0.0-beta.0",
+    "eslint-plugin-babel": "^5.1.0",
+    "eslint-plugin-import": "^2.12.0",
+    "eslint-plugin-jest": "^21.15.2",
+    "eslint-plugin-prettier": "^2.6.0",
+    "linkemon": "^0.1.1",
+    "nodemon": "1.18.7",
+    "prettier": "1.12.1",
+    "yalc": "^1.0.0-pre.47"
   }
 }
diff --git a/apollos-church-api/scripts/init.sh b/apollos-church-api/scripts/init.sh
new file mode 100755
index 00000000..b0a810e5
--- /dev/null
+++ b/apollos-church-api/scripts/init.sh
@@ -0,0 +1,26 @@
+# create .env file
+if test -f .env; then
+	echo ".env file already exists!"
+	exit 1
+fi
+
+echo "You will need the following before beginning:
+Rock URL
+Rock API Token
+
+Are you ready to proceed? [y/n]: "
+read -r ANSWER
+if $ANSWER != "y"; then
+	exit 1
+fi
+
+echo "Rock URL: "
+read -r ROCK_URL
+echo "Rock API Token: "
+read -r ROCK_TOKEN
+
+echo "ROCK_URL=$ROCK_URL
+ROCK_TOKEN=$ROCK_TOKEN" >.env
+
+# remove template encrypted files
+rm .env.shared.enc
diff --git a/apollos-church-api/scripts/link-packages.js b/apollos-church-api/scripts/link-packages.js
new file mode 100644
index 00000000..7778c0a4
--- /dev/null
+++ b/apollos-church-api/scripts/link-packages.js
@@ -0,0 +1,16 @@
+const fs = require('fs');
+const { execSync } = require('child_process');
+
+const direction = process.argv[2] || 'link';
+
+const packageJson = JSON.parse(fs.readFileSync(`${__dirname}/../package.json`));
+
+const dependencies = [
+  ...Object.keys(packageJson.dependencies),
+  ...Object.keys(packageJson.devDependencies),
+].filter((d) => d.includes('@apollosproject'));
+
+dependencies.forEach((dep) => {
+  const output = execSync(`yalc ${direction} ${dep}`, { encoding: 'utf8' });
+  console.log(output);
+});
diff --git a/apollos-church-api/scripts/translate.js b/apollos-church-api/scripts/translate.js
new file mode 100644
index 00000000..af1db91d
--- /dev/null
+++ b/apollos-church-api/scripts/translate.js
@@ -0,0 +1,15 @@
+const {
+  createGlobalId,
+  parseGlobalId,
+} = require('@apollosproject/server-core');
+
+const [id] = process.argv.slice(2);
+if (!id) {
+  console.log(
+    'Pass Rock or Apollos ID: translate.js AuthenticatedUser:8sad98fd89sadf98uasdf'
+  );
+  process.exit(1);
+}
+
+if (id.includes(':')) console.log(parseGlobalId(id).id);
+else console.log(createGlobalId(id, 'Generic').split(':')[1]);
diff --git a/apollos-church-api/src/config.js b/apollos-church-api/src/config.js
new file mode 100644
index 00000000..21c96867
--- /dev/null
+++ b/apollos-church-api/src/config.js
@@ -0,0 +1,40 @@
+import path from 'path';
+import fetch from 'node-fetch';
+import dotenv from "dotenv/config"; // eslint-disable-line
+import ApollosConfig from '@apollosproject/config';
+
+ApollosConfig.loadYaml({
+  configPath: path.join(__dirname, '..', 'config.yml'),
+});
+
+// defaults
+ApollosConfig.loadJs({
+  ROCK: { TIMEZONE: ApollosConfig?.ROCK?.TIMEZONE || 'America/New_York' },
+});
+
+// autodetect some settings
+(async () => {
+  if (!ApollosConfig.ROCK) return;
+
+  let res;
+
+  // plugin
+  res = await fetch(
+    `${ApollosConfig.ROCK.URL}/api/RestControllers?$select=Name`,
+    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
+  );
+  const hasPlugin = (await res.json())
+    .map(({ Name }) => Name)
+    .includes('Apollos');
+  if (hasPlugin) console.log('Apollos Rock plugin detected!');
+  ApollosConfig.loadJs({ ROCK: { USE_PLUGIN: hasPlugin } });
+
+  // version
+  res = await fetch(
+    `${ApollosConfig.ROCK.URL}/api/Utility/GetRockSemanticVersionNumber`,
+    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
+  );
+  const version = (await res.text()).split('.');
+  console.log(`Rock Version: ${version[1]}`);
+  ApollosConfig.loadJs({ ROCK: { VERSION: version[1] } });
+})();
diff --git a/apollos-church-api/src/connectors/rock/RequestBuilder.js b/apollos-church-api/src/connectors/rock/RequestBuilder.js
deleted file mode 100644
index 6c60a65c..00000000
--- a/apollos-church-api/src/connectors/rock/RequestBuilder.js
+++ /dev/null
@@ -1,123 +0,0 @@
-import withQuery from 'with-query';
-
-// Simple request builder for querying the Rock API.
-// Would probably work against most OData APIs, but built to just
-// tackle the specific needs of Apollos on top of Rock.
-export default class RockRequestBuilder {
-  constructor({ connector, resource, defaultOptions = null }) {
-    this.connector = connector;
-    this.resource = resource;
-    if (defaultOptions) {
-      this.query = defaultOptions;
-    }
-  }
-
-  query = {};
-
-  transforms = [];
-
-  options = {};
-
-  get path() {
-    let path = [this.resource];
-    if (this.resourceId) path.push(this.resourceId);
-    path = path.join('/');
-    path = withQuery(path, this.query);
-    return path;
-  }
-
-  /**
-   * Sends a GET request to the server, resolves with results
-   * @returns promise
-   */
-  get = ({ options = {}, body = {} } = {}) =>
-    this.connector
-      .get(this.path, body, { ...options, ...this.options })
-      .then((results) => {
-        if (this.transforms.length)
-          return this.transforms.reduce(
-            (current, transformer) => transformer(current),
-            results
-          );
-        return results;
-      });
-
-  /**
-   * Find a single resource by ID
-   */
-  find = (id) => {
-    this.resourceId = id;
-    return this;
-  };
-
-  /**
-   * Filter resources by an odata string
-   */
-  filter = (filter) => {
-    const key = '$filter';
-    if (this.query[key]) {
-      this.query[key] = `(${this.query[key]}) or (${filter})`;
-    } else {
-      this.query[key] = filter;
-    }
-    return this;
-  };
-
-  cache = ({ ttl }) => {
-    this.options.ttl = ttl;
-    return this;
-  };
-
-  /**
-   * Expands resources inline
-   */
-  expand = (expand) => {
-    let { $expand } = this.query;
-    if (!$expand) {
-      $expand = [];
-    } else {
-      $expand = $expand.split(',');
-    }
-    $expand.push(expand);
-    this.query.$expand = $expand.join(',');
-    return this;
-  };
-
-  /**
-   * Order resources by a given attribute and direction
-   * @param {string} name The name of the attribute to order by
-   * @param {string} direction The direction to order results by. Defaults to 'asc'
-   */
-  orderBy = (name, direction = 'asc') => {
-    this.query.$orderby = `${name} ${direction}`;
-    return this;
-  };
-
-  /**
-   * Only return the top N results. Used for pagination
-   * @param {number} top
-   */
-  top = (top) => {
-    this.query.$top = top;
-    return this;
-  };
-
-  /**
-   * Skip the first N results. Used for pagination
-   * @param {number} skip
-   */
-  skip = (skip) => {
-    this.query.$skip = skip;
-    return this;
-  };
-
-  /**
-   * Transform the shape of the results.
-   * This is ran _after_ data is requested and not
-   * affected by other methods that are chained to the request
-   */
-  transform = (func) => {
-    this.transforms.push(func);
-    return this;
-  };
-}
diff --git a/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js b/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js
deleted file mode 100644
index 3d51b976..00000000
--- a/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js
+++ /dev/null
@@ -1,53 +0,0 @@
-import { createCursor } from 'apollos-church-api/src/utils/cursor';
-import RestDataSource from '../data-source';
-import RequestBuilder from '../RequestBuilder';
-
-describe('RestDataSource', () => {
-  it('constructs', () => {
-    expect(new RestDataSource()).toBeTruthy();
-  });
-
-  describe('the paginate method', () => {
-    let get;
-    let dataSource;
-    beforeEach(() => {
-      get = jest.fn();
-      get.mockReturnValue(new Promise((resolve) => resolve([1, 2, 3])));
-      dataSource = new RestDataSource();
-      dataSource.request = (resource) =>
-        new RequestBuilder({
-          resource,
-          connector: { get },
-        });
-    });
-
-    it('paginates a cursor', () => {
-      const cursor = dataSource.request('TestResource');
-      const result = dataSource.paginate({ cursor });
-      expect(result).toBeTruthy();
-      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=20&%24skip=0');
-    });
-
-    it('skips pages', () => {
-      const cursor = dataSource.request('TestResource');
-      const after = createCursor({ position: 25 });
-      const result = dataSource.paginate({ cursor, args: { after } });
-      expect(result).toBeTruthy();
-      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=20&%24skip=26');
-    });
-
-    it('throws on an invalid `after` cursor', () => {
-      const cursor = dataSource.request('TestResource');
-      const after = createCursor({ position: 25 });
-      const result = dataSource.paginate({ cursor, args: { after } });
-      expect(result).rejects.toThrow();
-    });
-
-    it('sets page size', () => {
-      const cursor = dataSource.request('TestResource');
-      const result = dataSource.paginate({ cursor, args: { first: 2 } });
-      expect(result).toBeTruthy();
-      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=2&%24skip=0');
-    });
-  });
-});
diff --git a/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js b/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js
deleted file mode 100644
index 56dd7479..00000000
--- a/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js
+++ /dev/null
@@ -1,104 +0,0 @@
-import RequestBuilder from '../RequestBuilder';
-
-describe('RequestBuilder', () => {
-  let request;
-  let connector;
-  let get;
-
-  beforeEach(() => {
-    get = jest.fn((...args) => new Promise((resolve) => resolve(args)));
-    connector = { get };
-    request = new RequestBuilder({
-      connector,
-      resource: 'SomeResource',
-    });
-  });
-
-  it('constructs', () => {
-    expect(request).toBeTruthy();
-  });
-
-  it('gets requests', () => {
-    expect(request.get()).resolves.toMatchSnapshot();
-  });
-
-  it('finds by id', () => {
-    expect(request.find(1).get()).resolves.toMatchSnapshot();
-  });
-
-  it('filters', () => {
-    expect(
-      request.filter('Something eq SomethingElse').get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('chains multiple filters', () => {
-    expect(
-      request
-        .filter('A eq Ab')
-        .filter('B eq Bc')
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('expands', () => {
-    expect(request.expand('Puppies').get()).resolves.toMatchSnapshot();
-  });
-
-  it('chains multiple expands', () => {
-    expect(
-      request
-        .expand('Puppies')
-        .expand('Cats')
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('chains mixed-format expands', () => {
-    expect(
-      request
-        .expand('Dogs/Puppies')
-        .expand('Cats,Kittens')
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('allows for pagination', () => {
-    expect(
-      request
-        .top(2)
-        .skip(5)
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-
-  it('caches', () => {
-    expect(request.cache({ ttl: 20 }).get()).resolves.toMatchSnapshot();
-  });
-
-  it('orders', () => {
-    expect(request.orderBy('MyField').get()).resolves.toMatchSnapshot();
-  });
-
-  it('orders in custom order', () => {
-    expect(request.orderBy('MyField', 'desc').get()).resolves.toMatchSnapshot();
-  });
-
-  it('transforms result shapes', () => {
-    get = jest.fn(() => new Promise((resolve) => resolve({ a: 'yo' })));
-    connector = { get };
-    request = new RequestBuilder({
-      connector,
-      resource: 'SomeResource',
-    });
-
-    expect(
-      request
-        .transform((input) => {
-          expect(input).toMatchSnapshot();
-          return { b: 'neigh' };
-        })
-        .get()
-    ).resolves.toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/connectors/rock/__tests__/rock-constants.tests.js b/apollos-church-api/src/connectors/rock/__tests__/rock-constants.tests.js
deleted file mode 100644
index eb1f935a..00000000
--- a/apollos-church-api/src/connectors/rock/__tests__/rock-constants.tests.js
+++ /dev/null
@@ -1,68 +0,0 @@
-import { fetch } from 'apollo-server-env';
-import { buildGetMock } from 'apollos-church-api/src/utils/testUtils';
-
-import RockConstants from '../rock-constants';
-
-describe('RockConstants', () => {
-  beforeEach(() => {
-    fetch.resetMocks();
-  });
-  it("creates a Channel if it doesn't exist", async () => {
-    const dataSource = new RockConstants();
-    dataSource.get = buildGetMock([[], { Id: 1 }], dataSource);
-    dataSource.post = buildGetMock('1', dataSource);
-    const result = await dataSource.interactionChannel();
-    expect(result).toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-    expect(dataSource.post.mock.calls).toMatchSnapshot();
-  });
-  it('finds the Channel if it exists', async () => {
-    const dataSource = new RockConstants();
-    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
-    dataSource.post = jest.fn();
-    const result = await dataSource.interactionChannel();
-    expect(result).toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-    expect(dataSource.post.mock.calls.length).toBe(0);
-  });
-  it("creates a Component if it doesn't exist", async () => {
-    const dataSource = new RockConstants();
-    dataSource.get = buildGetMock([[], { Id: 1 }], dataSource);
-    dataSource.post = buildGetMock('1', dataSource);
-    const result = await dataSource.interactionComponent();
-    expect(result).toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-    expect(dataSource.post.mock.calls).toMatchSnapshot();
-  });
-  it('finds the Component if it exists', async () => {
-    const dataSource = new RockConstants();
-    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
-    dataSource.post = jest.fn();
-    const result = await dataSource.interactionComponent();
-    expect(result).toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-    expect(dataSource.post.mock.calls.length).toBe(0);
-  });
-  it('finds a ContentItem model ID', async () => {
-    const dataSource = new RockConstants();
-    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
-    const result = await dataSource.modelTypeId('ContentItem');
-    expect(result).toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-  it('finds a UniversalContentItem model ID', async () => {
-    const dataSource = new RockConstants();
-    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
-    const result = await dataSource.modelTypeId('UniversalContentItem');
-    expect(result).toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-  it('Throws when finding an unknown model ', () => {
-    const dataSource = new RockConstants();
-    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
-    const prom = dataSource.modelTypeId('IDontExist');
-    expect(prom).rejects.toEqual(
-      new Error('IDontExist has not been mapped into a Rock type!')
-    );
-  });
-});
diff --git a/apollos-church-api/src/connectors/rock/constants.js b/apollos-church-api/src/connectors/rock/constants.js
deleted file mode 100644
index eeb9bae3..00000000
--- a/apollos-church-api/src/connectors/rock/constants.js
+++ /dev/null
@@ -1,121 +0,0 @@
-import url from 'url';
-
-export const {
-  ROCK_API = 'https://apollosrock.newspring.cc/api',
-  ROCK_TOKEN = 'some-rock-token',
-} = process.env;
-
-export const GET_IMAGE = url.resolve(ROCK_API, 'GetImage.ashx');
-
-export const FIELD_TYPES = {
-  TEXT: 1,
-  MULTI_SELECT: 2,
-  BOOLEAN: 3,
-  COLOR: 4,
-  SINGLE_SELECT: 6,
-  INTEGER: 7,
-  PAGE_REFERENCE: 8,
-  IMAGE: 10,
-  DATE: 11,
-  DECIMAL: 14,
-  DEFINED_TYPE: 15,
-  DEFINED_VALUE: 16,
-  PERSON: 18,
-  HTML: 20,
-  MEMO: 21,
-  GROUP_TYPES: 22,
-  GROUP: 23,
-  CAMPUSES: 26,
-  ENTITY_TYPE: 29,
-  CAMPUS: 30,
-  EMAIL_TEMPLATE: 31,
-  FILE: 32,
-  GROUP_TYPE: 33,
-  KEY_VALUE_LIST: 34,
-  BINARY_FILE_TYPE: 35,
-  WORKFLOW_TYPE: 36,
-  BINARY_FILE: 37,
-  FINANCIAL_ACCOUNT: 38,
-  FINANCIAL_ACCOUNTS: 39,
-  COMPONENT: 40,
-  COMPONENTS: 41,
-  CATEGORIES: 42,
-  GROUP_ROLE: 43,
-  CATEGORY: 44,
-  LOCATION: 45,
-  DATE_RANGE: 46,
-  DECIMAL_RANGE: 47,
-  INTEGER_RANGE: 48,
-  TIME: 49,
-  GROUP_LOCATION_TYPE: 50,
-  CODE_EDITOR: 51,
-  PERSON_BADGES: 52,
-  SITE: 53,
-  COMMUNICATION_TEMPLATE: 54,
-  DAY_OF_WEEK: 55,
-  DAYS_OF_WEEK: 56,
-  REMOTE_AUTHS: 57,
-  COMPARISON: 58,
-  METRIC_ENTITY: 59,
-  WORKFLOW_ACTIVITY: 60,
-  WORKFLOW_ATTRIBUTE: 61,
-  METRICS: 62,
-  ENTITY: 63,
-  METRIC_CATEGORIES: 64,
-  WORKFLOW_TEXT_OR_ATTRIBUTE: 65,
-  SLIDING_DATE_RANGE: 66,
-  GROUP_TYPE_GROUP: 67,
-  SECURITY_ROLE: 68,
-  VALUE_LIST: 69,
-  CURRENCY: 70,
-  EMAIL: 71,
-  URL_LINK: 72,
-  WORKFLOW_TYPES: 73,
-  ATTRIBUTE: 74,
-  SCHEDULES: 75,
-  CONTENT_CHANNEL: 76,
-  AUDIO_FILE: 77,
-  AUDIO_URL: 78,
-  VIDEO_FILE: 79,
-  VIDEO_URL: 80,
-  ENCRYPTED_TEXT: 81,
-  FILTER_DATE: 82,
-  DATE_TIME: 83,
-  DEFINED_VALUE_RANGE: 84,
-  RATING: 85,
-  SYSTEM_EMAIL: 86,
-  FINANCIAL_GATEWAY: 87,
-  GROUP_AND_ROLE: 88,
-  NOTE_TYPE: 89,
-  NOTE_TYPES: 90,
-  EVENT_CALENDAR: 91,
-  EVENT_ITEM: 92,
-  CONNECTION_ACTIVITY_TYPE: 93,
-  CONNECTION_OPPORTUNITY: 94,
-  CONNECTION_REQUEST: 95,
-  CONNECTION_STATE: 96,
-  CONNECTION_STATUS: 97,
-  CONNECTION_TYPE: 98,
-  CONNECTION_TYPES: 99,
-  MERGE_TEMPLATE: 100,
-  RANGE_SLIDER: 101,
-  BINARY_FILE_TYPES: 102,
-  MARKDOWN: 103,
-  DATA_VIEW: 104,
-  PHONE_NUMBER: 105,
-  SCHEDULE: 106,
-  LAVA_COMMANDS: 107,
-  ADDRESS: 108,
-  BENEVOLENCE_REQUEST: 109,
-  CONTENT_CHANNEL_TYPES: 110,
-  WORKFLOW: 111,
-  SSN: 112,
-  MATRIX: 113,
-  LAVA: 114,
-  DATA_VIEWS: 115,
-  COMMUNICATION_PREFERENCE: 116,
-  INTERACTION_CHANNEL: 117,
-  GROUP_MEMBER: 118,
-  TIME_ZONE: 119,
-  LABEL: 120,
-};
diff --git a/apollos-church-api/src/connectors/rock/data-source.js b/apollos-church-api/src/connectors/rock/data-source.js
deleted file mode 100644
index 00a9ab87..00000000
--- a/apollos-church-api/src/connectors/rock/data-source.js
+++ /dev/null
@@ -1,82 +0,0 @@
-/* eslint-disable class-methods-use-this */
-import { RESTDataSource } from 'apollo-datasource-rest';
-import { mapKeys, mapValues, camelCase } from 'lodash';
-import { fetch } from 'apollo-server-env';
-
-import { createCursor, parseCursor } from 'apollos-church-api/src/utils/cursor';
-
-import { ROCK_API, ROCK_TOKEN } from './constants'; // eslint-disable-line import/named
-import RequestBuilder from './RequestBuilder';
-
-export default class RockApolloDataSource extends RESTDataSource {
-  // Subclasses can set this to true to force all requests to turn extended responses.
-  expanded = false;
-
-  baseURL = ROCK_API;
-
-  get rockToken() {
-    if (process.env.NODE_ENV === 'test') {
-      return 'some-rock-token';
-    }
-    return ROCK_TOKEN;
-  }
-
-  nodeFetch = fetch;
-
-  didReceiveResponse(response, request) {
-    // Can't use await b/c of `super` keyword
-    return super
-      .didReceiveResponse(response, request)
-      .then((parsedResponse) => this.normalize(parsedResponse));
-  }
-
-  willSendRequest(request) {
-    request.headers.set('Authorization-Token', ROCK_TOKEN);
-    request.headers.set('user-agent', 'Apollos');
-    request.headers.set('Content-Type', 'application/json');
-  }
-
-  normalize = (data) => {
-    if (Array.isArray(data)) return data.map(this.normalize);
-    if (typeof data !== 'object') return data;
-    const normalizedValues = mapValues(data, this.normalize);
-    return mapKeys(normalizedValues, (value, key) => camelCase(key));
-  };
-
-  request(resource = this.resource) {
-    return new RequestBuilder({
-      resource,
-      connector: this,
-      defaultOptions: this.expanded ? { loadAttributes: 'expanded' } : null,
-    });
-  }
-
-  async paginate({ cursor, args: { after, first = 20 } = {} }) {
-    let skip = 0;
-    if (after) {
-      const parsed = parseCursor(after);
-      if (parsed && Object.hasOwnProperty.call(parsed, 'position')) {
-        skip = parsed.position + 1;
-      } else {
-        throw new Error(`An invalid 'after' cursor was provided: ${after}`);
-      }
-    }
-
-    const edges = cursor
-      ? cursor
-          .top(first)
-          .skip(skip)
-          .transform((result) =>
-            result.map((node, i) => ({
-              node,
-              cursor: createCursor({ position: i + skip }),
-            }))
-          )
-          .get()
-      : [];
-
-    return {
-      edges,
-    };
-  }
-}
diff --git a/apollos-church-api/src/connectors/rock/index.js b/apollos-church-api/src/connectors/rock/index.js
deleted file mode 100644
index cc53a6f4..00000000
--- a/apollos-church-api/src/connectors/rock/index.js
+++ /dev/null
@@ -1,3 +0,0 @@
-import * as Constants from './constants';
-
-export { Constants }; // eslint-disable-line import/prefer-default-export
diff --git a/apollos-church-api/src/connectors/rock/rock-constants.js b/apollos-church-api/src/connectors/rock/rock-constants.js
deleted file mode 100644
index 2320870d..00000000
--- a/apollos-church-api/src/connectors/rock/rock-constants.js
+++ /dev/null
@@ -1,81 +0,0 @@
-/* eslint-disable no-console */
-import RockApolloDataSource from './data-source';
-
-const mapApollosNameToRockName = (name) => {
-  switch (name) {
-    case 'ContentItem':
-    case 'UniversalContentItem':
-      return 'ContentChannelItem';
-    default:
-      throw new Error(`${name} has not been mapped into a Rock type!`);
-  }
-};
-
-export default class RockConstants extends RockApolloDataSource {
-  async findOrCreate({ model, objectAttributes }) {
-    // Turns {ChannelId: 7, Name: 'Something'} into '(ChannelId eq 7) and (Name eq 'Something')'
-    const filter = Object.keys(objectAttributes)
-      .map((key) => {
-        if (typeof objectAttributes[key] === 'string') {
-          return `(${key} eq '${objectAttributes[key]}')`;
-        }
-        return `(${key} eq ${objectAttributes[key]})`;
-      })
-      .join(' and ');
-
-    const objects = await this.request(model)
-      .filter(filter)
-      .cache({ ttl: 86400 })
-      .get();
-    if (objects.length) {
-      console.log('Found', objects[0]);
-      return objects[0];
-    }
-    const objectId = await this.post(`/${model}`, objectAttributes);
-    const ret = await this.get(`/${model}/${objectId}`);
-    console.log('Created', ret);
-    return ret;
-  }
-
-  async createOrFindInteractionComponent({ componentName, channelId }) {
-    return this.findOrCreate({
-      model: 'InteractionComponents',
-      objectAttributes: { Name: componentName, ChannelId: channelId },
-    });
-  }
-
-  async createOrFindInteractionChannel({ channelName }) {
-    return this.findOrCreate({
-      model: 'InteractionChannels',
-      objectAttributes: { Name: channelName, UsesSession: true },
-    });
-  }
-
-  async interactionChannel() {
-    return this.createOrFindInteractionChannel({
-      channelName: 'Apollos App',
-    });
-  }
-
-  async interactionComponent() {
-    const channel = await this.interactionChannel();
-    return this.createOrFindInteractionComponent({
-      componentName: 'Apollos Content Item',
-      channelId: channel.id,
-    });
-  }
-
-  async modelTypeId(nameInput) {
-    const name = mapApollosNameToRockName(nameInput);
-
-    const types = await this.request('EntityTypes')
-      .filter(`Name eq 'Rock.Model.${name}'`)
-      .cache({ ttl: 86400 })
-      .get();
-    if (types.length) {
-      return types[0];
-    }
-
-    return null;
-  }
-}
diff --git a/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js b/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js
deleted file mode 100644
index c74c2bd3..00000000
--- a/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js
+++ /dev/null
@@ -1,300 +0,0 @@
-import { mockUA, mockSend, mockEvent } from 'universal-analytics';
-import Analytics, { mockTrack, mockIdentify } from 'analytics-node';
-import { AuthenticationError } from 'apollo-server';
-import DataSource from '../data-source';
-import RockAnalytics from '../interfaces/rock_interactions';
-
-const mockCurrentPerson = jest.fn().mockImplementation(() => ({
-  id: 5,
-  email: 'test@test.com',
-  firstName: 'Rick',
-  lastName: 'Hampton',
-}));
-
-const mockNoPerson = () => {
-  throw new AuthenticationError();
-};
-const mockOtherError = () => {
-  throw new Error('Some other error');
-};
-
-const clearMocks = () => {
-  [mockUA, mockSend, mockEvent, Analytics, mockTrack, mockIdentify].forEach(
-    (mock) => {
-      mock.mockClear();
-    }
-  );
-};
-
-const AuthWithUser = {
-  getCurrentPerson: mockCurrentPerson,
-};
-
-const AuthWithoutUser = {
-  getCurrentPerson: mockNoPerson,
-};
-
-const buildDataSource = (Auth = AuthWithUser) => {
-  const dataSource = new DataSource();
-  dataSource.initialize({ context: { dataSources: { Auth } } });
-  return dataSource;
-};
-
-describe('Analytics Data Source', () => {
-  const OLD_ENV = process.env;
-
-  beforeEach(() => {
-    clearMocks();
-    process.env = { ...OLD_ENV };
-
-    process.env.APOLLOS_SEGMENT_KEY = 'something';
-    process.env.APOLLOS_GA_KEY = 'something-else';
-  });
-  afterEach(() => {
-    process.env = OLD_ENV;
-  });
-
-  it('must accept arbitrary interfaces', async () => {
-    const track = jest.fn();
-    const identify = jest.fn();
-    const fakeClient = {
-      track,
-      identify,
-      shouldTrack: true,
-      shouldIdentify: true,
-      eventWhitelist: null,
-      initialize: () => ({}),
-    };
-    const dataSource = new DataSource([fakeClient]);
-    dataSource.initialize({ context: { dataSources: { Auth: AuthWithUser } } });
-
-    const resultTrack = await dataSource.track({
-      anonymousId: 'deviceId5',
-      eventName: 'View Content',
-    });
-
-    const resultIdentify = await dataSource.identify({
-      anonymousId: 'deviceId5',
-    });
-
-    expect(resultTrack).toMatchSnapshot();
-    expect(track).toHaveBeenCalledTimes(1);
-    expect(track).toMatchSnapshot();
-
-    expect(resultIdentify).toMatchSnapshot();
-    expect(identify).toHaveBeenCalledTimes(1);
-    expect(identify).toMatchSnapshot();
-  });
-
-  describe('track', () => {
-    it('must track specific events using the Rock adapter', async () => {
-      const rockAnalytics = new RockAnalytics();
-      const dataSource = new DataSource([rockAnalytics]);
-      const mockCreateInteraction = jest.fn();
-      dataSource.initialize({
-        context: {
-          dataSources: {
-            Auth: AuthWithUser,
-            Interactions: {
-              createInteraction: mockCreateInteraction,
-            },
-          },
-        },
-      });
-
-      const result = await dataSource.track({
-        eventName: 'View Content',
-        properties: [
-          { field: 'ContentId', value: 'Content:123' },
-          { field: 'SessionId', value: 'Session:123' },
-        ],
-      });
-
-      expect(result).toMatchSnapshot();
-      expect(mockCreateInteraction).toHaveBeenCalledTimes(1);
-      expect(mockCreateInteraction.mock.calls).toMatchSnapshot();
-    });
-    it('must not track events using the Rock adapter without required attrs', async () => {
-      const rockAnalytics = new RockAnalytics();
-      const dataSource = new DataSource([rockAnalytics]);
-      const mockCreateInteraction = jest.fn();
-      dataSource.initialize({
-        context: {
-          dataSources: {
-            Auth: AuthWithUser,
-            Interactions: {
-              createInteraction: mockCreateInteraction,
-            },
-          },
-        },
-      });
-
-      // Without session id.
-      await dataSource.track({
-        eventName: 'View Content',
-        properties: [{ field: 'SessionId', value: 'Session:123' }],
-      });
-
-      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
-
-      // Without content id.
-      await dataSource.track({
-        eventName: 'View Content',
-        properties: [{ field: 'ContentId', value: 'Content:123' }],
-      });
-
-      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
-
-      // without a current user
-      dataSource.context.dataSources.Auth = AuthWithoutUser;
-      await dataSource.track({
-        eventName: 'View Content',
-        properties: [
-          { field: 'ContentId', value: 'Content:123' },
-          { field: 'SessionId', value: 'Session:123' },
-        ],
-      });
-
-      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
-      dataSource.context.dataSources.Auth = AuthWithUser;
-
-      // With an unhandled event
-      rockAnalytics.eventWhitelist = ['Some Event'];
-
-      await dataSource.track({
-        eventName: 'Some Event',
-        properties: [
-          { field: 'ContentId', value: 'Content:123' },
-          { field: 'SessionId', value: 'Session:123' },
-        ],
-      });
-
-      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
-    });
-    it('must track an event with a name and no properties', async () => {
-      const analytics = buildDataSource();
-      const result = await analytics.track({
-        eventName: 'View Content',
-        anonymousId: 'deviceId5',
-      });
-      expect(result).toMatchSnapshot();
-      expect(mockTrack).toHaveBeenCalledTimes(1);
-      expect(mockTrack.mock.calls).toMatchSnapshot();
-
-      expect(mockSend).toHaveBeenCalledTimes(1);
-      expect(mockUA).toHaveBeenCalledTimes(1);
-      expect(mockUA.mock.calls).toMatchSnapshot();
-    });
-
-    it('must not track segment without a key', async () => {
-      delete process.env.APOLLOS_SEGMENT_KEY;
-      const analytics = buildDataSource();
-      const result = await analytics.track({
-        eventName: 'View Content',
-      });
-      expect(result).toMatchSnapshot();
-      expect(mockTrack).toHaveBeenCalledTimes(0);
-
-      expect(mockSend).toHaveBeenCalledTimes(1);
-      expect(mockUA).toHaveBeenCalledTimes(1);
-      expect(mockUA.mock.calls).toMatchSnapshot();
-    });
-
-    it('must not track google analytics without a key', async () => {
-      delete process.env.APOLLOS_GA_KEY;
-      const analytics = buildDataSource();
-      const result = await analytics.track({
-        eventName: 'View Content',
-      });
-      expect(result).toMatchSnapshot();
-      expect(mockTrack).toHaveBeenCalledTimes(1);
-
-      expect(mockSend).toHaveBeenCalledTimes(0);
-      expect(mockUA).toHaveBeenCalledTimes(0);
-    });
-
-    it('must track an event with a name and properties', async () => {
-      const analytics = buildDataSource();
-      const result = await analytics.track({
-        eventName: 'View Content',
-        anonymousId: 'deviceId5',
-        properties: [{ field: 'ContentId', value: 7 }],
-      });
-      expect(result).toMatchSnapshot();
-      expect(mockTrack).toHaveBeenCalledTimes(1);
-      expect(mockTrack.mock.calls).toMatchSnapshot();
-
-      expect(mockSend).toHaveBeenCalledTimes(1);
-      expect(mockUA).toHaveBeenCalledTimes(1);
-      expect(mockUA.mock.calls).toMatchSnapshot();
-    });
-
-    it('must track without a user', async () => {
-      const analytics = buildDataSource(AuthWithoutUser);
-      const result = await analytics.track({
-        eventName: 'View Content',
-      });
-      expect(result).toMatchSnapshot();
-      expect(mockTrack).toHaveBeenCalledTimes(1);
-      expect(mockTrack.mock.calls).toMatchSnapshot();
-
-      expect(mockSend).toHaveBeenCalledTimes(1);
-      expect(mockUA).toHaveBeenCalledTimes(1);
-      expect(mockUA.mock.calls).toMatchSnapshot();
-    });
-
-    it('must reraise a non-auth Error', () => {
-      const analytics = buildDataSource({ getCurrentPerson: mockOtherError });
-      const result = analytics.track({
-        eventName: 'View Content',
-      });
-      expect(result).rejects.toThrow();
-
-      expect(mockSend).toHaveBeenCalledTimes(0);
-      expect(mockTrack).toHaveBeenCalledTimes(0);
-    });
-  });
-
-  describe('identify', () => {
-    it('must identify a user without traits', async () => {
-      const analytics = buildDataSource();
-      const result = await analytics.identify({
-        anonymousId: 'deviceId5',
-      });
-      expect(result).toMatchSnapshot();
-      expect(mockIdentify).toHaveBeenCalledTimes(1);
-      expect(mockIdentify.mock.calls).toMatchSnapshot();
-
-      expect(mockUA).toHaveBeenCalledTimes(0);
-    });
-    it('must identify a user with traits', async () => {
-      const analytics = buildDataSource();
-      const result = await analytics.identify({
-        anonymousId: 'deviceId5',
-        traits: [{ field: 'ChurchRole', value: 'Pastor' }],
-      });
-      expect(result).toMatchSnapshot();
-      expect(mockIdentify).toHaveBeenCalledTimes(1);
-      expect(mockIdentify.mock.calls).toMatchSnapshot();
-
-      expect(mockUA).toHaveBeenCalledTimes(0);
-    });
-    it('must identify a user with device info', async () => {
-      const analytics = buildDataSource();
-      const result = await analytics.identify({
-        anonymousId: 'deviceId5',
-        deviceInfo: {
-          platform: 'iOS',
-          deviceId: 'gibberish',
-          deviceMode: 'Latest iPhone',
-          appVersion: '72.0.1',
-        },
-      });
-      expect(result).toMatchSnapshot();
-      expect(mockIdentify).toHaveBeenCalledTimes(1);
-      expect(mockIdentify.mock.calls).toMatchSnapshot();
-
-      expect(mockUA).toHaveBeenCalledTimes(0);
-    });
-  });
-});
diff --git a/apollos-church-api/src/data/analytics/data-source.js b/apollos-church-api/src/data/analytics/data-source.js
deleted file mode 100644
index 8b6fc07d..00000000
--- a/apollos-church-api/src/data/analytics/data-source.js
+++ /dev/null
@@ -1,112 +0,0 @@
-import { AuthenticationError } from 'apollo-server';
-import { DataSource } from 'apollo-datasource';
-import GAInterface from './interfaces/ga';
-import SegmentInterface from './interfaces/segment';
-
-// Utility function to convert GQL array of key/values to Object.
-const mapArrayToObject = (array = []) =>
-  array.reduce((accum, { field, value }) => {
-    // eslint-disable-next-line no-param-reassign
-    accum[field] = value;
-    return accum;
-  }, {});
-
-// Add interfaces to this function to get picked up automatically.
-export const getInterfaces = () => {
-  const interfaces = [];
-  if (process.env.APOLLOS_SEGMENT_KEY) {
-    interfaces.push(new SegmentInterface(process.env.APOLLOS_SEGMENT_KEY));
-  }
-  if (process.env.APOLLOS_GA_KEY) {
-    interfaces.push(new GAInterface(process.env.APOLLOS_GA_KEY));
-  }
-  return interfaces;
-};
-
-export default class Analytics extends DataSource {
-  // Interfaces should extend BaseInterface in the interfaces folder.
-  // They should extend BaseAnalytics and implement
-  // track({ event: String, anonymousId: String, userId: String, properties: Obj, context: Obj })
-  // and
-  // track({ event: String, anonymousId: String, userId: String, traits: Obj, context: Obj })
-  constructor(interfaces = []) {
-    super();
-    this.interfaces = interfaces.length ? interfaces : getInterfaces();
-  }
-
-  // Called automatically b/c extends DataSource.
-  initialize({ context }) {
-    this.context = context;
-    this.interfaces.forEach((iface) => {
-      iface.initialize({ context });
-    });
-  }
-
-  get identifyInterfaces() {
-    return this.interfaces.filter((i) => i.shouldIdentify);
-  }
-
-  get trackInterfaces() {
-    return this.interfaces.filter((i) => i.shouldTrack);
-  }
-
-  // Shorthand to get Auth module.
-  get Auth() {
-    return this.context.dataSources.Auth;
-  }
-
-  async getCurrentPerson() {
-    let user;
-    try {
-      user = await this.Auth.getCurrentPerson();
-    } catch (e) {
-      if (!(e instanceof AuthenticationError)) {
-        throw e;
-      }
-    }
-    return user;
-  }
-
-  // Called via the `identify` mutation.
-  // traits is an array of objects matching the pattern [{ field: String, value: String}]
-  async identify({ anonymousId, deviceInfo, traits }) {
-    const currentUser = await this.getCurrentPerson();
-    this.identifyInterfaces.forEach(async (iface) => {
-      const parsedTraits = mapArrayToObject(traits);
-      iface.identify({
-        userId: currentUser && currentUser.id,
-        anonymousId,
-        traits: {
-          firstName: currentUser.firstName,
-          lastName: currentUser.lastName,
-          email: currentUser.email,
-          ...parsedTraits,
-        },
-        context: deviceInfo,
-      });
-    });
-    return { success: true };
-  }
-
-  // Called via the `track` mutation.
-  // properties is an array of objects matching the pattern [{ field: String, value: String}]
-  async track({ anonymousId, deviceInfo, eventName, properties }) {
-    const currentUser = await this.getCurrentPerson();
-    this.trackInterfaces.forEach(async (iface) => {
-      if (
-        iface.eventWhitelist === null ||
-        iface.eventWhitelist.includes(eventName)
-      ) {
-        const parsedProps = mapArrayToObject(properties);
-        iface.track({
-          userId: currentUser && currentUser.id,
-          anonymousId,
-          properties: parsedProps,
-          event: eventName,
-          context: deviceInfo,
-        });
-      }
-    });
-    return { success: true };
-  }
-}
diff --git a/apollos-church-api/src/data/analytics/index.js b/apollos-church-api/src/data/analytics/index.js
deleted file mode 100644
index 38d9e280..00000000
--- a/apollos-church-api/src/data/analytics/index.js
+++ /dev/null
@@ -1,5 +0,0 @@
-import resolver from './resolver';
-import schema from './schema';
-import dataSource from './data-source';
-
-export { resolver, schema, dataSource };
diff --git a/apollos-church-api/src/data/analytics/interfaces/base.js b/apollos-church-api/src/data/analytics/interfaces/base.js
deleted file mode 100644
index 972ef56d..00000000
--- a/apollos-church-api/src/data/analytics/interfaces/base.js
+++ /dev/null
@@ -1,33 +0,0 @@
-/* eslint-disable */
-/* istanbul ignore next */
-export default class BaseAnalytics {
-  shouldIdentify = false;
-
-  // override this property if you want `identify` to be called.
-  shouldTrack = true; // override this property if `track` shouldn't be called.
-
-  // override this property to only track specific events
-  eventWhitelist = null;
-
-  initialize({ context }) {
-    this.context = context;
-  }
-
-  // called when a user is identified.
-  identify({ anonymousId, userId, traits, context }) {
-    /* istanbul ignore next */
-    console.log({ anonymousId, userId, traits, context });
-  }
-
-  // called when an event is tracked
-  track({ event, anonymousId, userId, properties, context }) {
-    /* istanbul ignore next */
-    console.log({
-      event,
-      anonymousId,
-      userId,
-      properties,
-      context,
-    });
-  }
-}
diff --git a/apollos-church-api/src/data/analytics/interfaces/ga.js b/apollos-church-api/src/data/analytics/interfaces/ga.js
deleted file mode 100644
index 40310f44..00000000
--- a/apollos-church-api/src/data/analytics/interfaces/ga.js
+++ /dev/null
@@ -1,14 +0,0 @@
-import ua from 'universal-analytics';
-import BaseAnalytics from './base';
-
-export default class GoogleAnalytics extends BaseAnalytics {
-  constructor(accountId) {
-    super();
-    this.accountId = accountId;
-  }
-
-  track({ event, anonymousId }) {
-    const visitor = ua(this.accountId, anonymousId, { strictCidFormat: false });
-    visitor.event('Apollos App', event).send();
-  }
-}
diff --git a/apollos-church-api/src/data/analytics/interfaces/rock_interactions.js b/apollos-church-api/src/data/analytics/interfaces/rock_interactions.js
deleted file mode 100644
index 8692bc92..00000000
--- a/apollos-church-api/src/data/analytics/interfaces/rock_interactions.js
+++ /dev/null
@@ -1,34 +0,0 @@
-import BaseAnalytics from './base';
-
-export default class RockInteractionAnalytics extends BaseAnalytics {
-  eventWhitelist = ['View Content'];
-
-  track({ event, userId, properties }) {
-    if (!userId) {
-      return null;
-    }
-    switch (event) {
-      case 'View Content': {
-        return this.trackViewContent({
-          contentId: properties.ContentId,
-          sessionId: properties.SessionId,
-        });
-      }
-      default:
-        console.log(`${event} not supported by RockInteraction Analytics`);
-        return null;
-    }
-  }
-
-  trackViewContent({ contentId, sessionId }) {
-    if (!contentId || !sessionId) {
-      console.log('No ContentId or SessionId included in `track` call.');
-      return null;
-    }
-    return this.context.dataSources.Interactions.createInteraction({
-      nodeId: contentId,
-      sessionId,
-      operationName: 'View Content',
-    });
-  }
-}
diff --git a/apollos-church-api/src/data/analytics/interfaces/segment.js b/apollos-church-api/src/data/analytics/interfaces/segment.js
deleted file mode 100644
index 8c157adf..00000000
--- a/apollos-church-api/src/data/analytics/interfaces/segment.js
+++ /dev/null
@@ -1,30 +0,0 @@
-import Analytics from 'analytics-node';
-import BaseAnalytics from './base';
-
-export default class GoogleAnalytics extends BaseAnalytics {
-  constructor(writeKey) {
-    super();
-    this.client = new Analytics(writeKey);
-  }
-
-  shouldIdentify = true;
-
-  identify({ anonymousId, userId, traits, context }) {
-    this.client.identify({
-      anonymousId,
-      userId,
-      traits,
-      context,
-    });
-  }
-
-  track({ event, anonymousId, userId, properties, context }) {
-    this.client.track({
-      event,
-      anonymousId,
-      userId,
-      properties,
-      context,
-    });
-  }
-}
diff --git a/apollos-church-api/src/data/analytics/resolver.js b/apollos-church-api/src/data/analytics/resolver.js
deleted file mode 100644
index bf3585a9..00000000
--- a/apollos-church-api/src/data/analytics/resolver.js
+++ /dev/null
@@ -1,8 +0,0 @@
-export default {
-  Mutation: {
-    identifySelf: (root, { input }, { dataSources: { Analytics } }) =>
-      Analytics.identify({ ...input }),
-    trackEvent: (root, { input }, { dataSources: { Analytics } }) =>
-      Analytics.track({ ...input }),
-  },
-};
diff --git a/apollos-church-api/src/data/analytics/schema.js b/apollos-church-api/src/data/analytics/schema.js
deleted file mode 100644
index 48c38422..00000000
--- a/apollos-church-api/src/data/analytics/schema.js
+++ /dev/null
@@ -1,47 +0,0 @@
-import { gql } from 'apollo-server';
-
-export default gql`
-  # Not supported right now...
-  # union AnalyticsValue = String | Float | Boolean | Int
-  scalar AnalyticsValue
-
-  input AnalyticsMetaField {
-    field: String!
-    value: AnalyticsValue
-  }
-
-  enum AnalyticsPlatform {
-    iOS
-    Android
-  }
-
-  input AnalyticsDeviceInfo {
-    platform: AnalyticsPlatform
-    deviceId: String
-    deviceModel: String
-    osVersion: String
-    appVersion: String
-  }
-
-  input AnalyticsIdentifyInput {
-    traits: [AnalyticsMetaField]
-    anonymousId: String!
-    deviceInfo: AnalyticsDeviceInfo
-  }
-
-  input AnalyticsTrackInput {
-    eventName: String!
-    properties: [AnalyticsMetaField]
-    anonymousId: String
-    deviceInfo: AnalyticsDeviceInfo
-  }
-
-  type AnalyticsResult {
-    success: Boolean
-  }
-
-  extend type Mutation {
-    identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
-    trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
-  }
-`;
diff --git a/apollos-church-api/src/data/auth/__tests__/index.tests.js b/apollos-church-api/src/data/auth/__tests__/index.tests.js
deleted file mode 100644
index 3dd5fb4b..00000000
--- a/apollos-church-api/src/data/auth/__tests__/index.tests.js
+++ /dev/null
@@ -1,197 +0,0 @@
-import { graphql } from 'graphql';
-import { fetch } from 'apollo-server-env';
-import { makeExecutableSchema } from 'apollo-server';
-
-import { testSchema as typeDefs, resolvers } from 'apollos-church-api/src/data';
-import { getTestContext } from 'apollos-church-api/src/utils/testUtils';
-import { generateToken, registerToken } from '../token';
-
-// we import the root-level schema and resolver so we test the entire integration:
-
-describe('Auth', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    fetch.resetMocks();
-    fetch.mockRockDataSourceAPI();
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    context = getTestContext();
-  });
-
-  it('logs in a user', async () => {
-    const query = `
-      mutation {
-        authenticate(identity: "some-identity", password: "good") {
-          user {
-            id
-            profile {
-              id
-            }
-          }
-        }
-      }
-    `;
-    const rootValue = {};
-
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('throws invalid credentials error on bad password', async () => {
-    const query = `
-      mutation {
-        authenticate(identity: "some-identity", password: "bad") {
-          user {
-            id
-          }
-        }
-      }
-    `;
-    const rootValue = {};
-
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  describe('currentUser query', () => {
-    const query = `
-      query {
-        currentUser {
-          id
-          profile {
-            id
-          }
-        }
-      }
-    `;
-    it('requires you to be logged in', async () => {
-      const rootValue = {};
-
-      const result = await graphql(schema, query, rootValue, context);
-      expect(result).toMatchSnapshot();
-    });
-
-    it('queries current user when logged in', async () => {
-      const rootValue = {};
-      const { userToken, rockCookie } = registerToken(
-        generateToken({ cookie: 'some-cookie' })
-      );
-      context.userToken = userToken;
-      context.rockCookie = rockCookie;
-
-      const result = await graphql(schema, query, rootValue, context);
-      expect(result).toMatchSnapshot();
-    });
-
-    it('queries current user when logged in', async () => {
-      const rootValue = {};
-      try {
-        const { userToken, rockCookie } = registerToken('asdfasdfasdf');
-        context.userToken = userToken;
-        context.rockCookie = rockCookie;
-
-        await graphql(schema, query, rootValue, context);
-      } catch (e) {
-        expect(e.message).toEqual('Invalid token');
-      }
-    });
-  });
-
-  it('registers an auth token and passes the cookie on requests to rock', async () => {
-    const token = generateToken({ cookie: 'some-cookie' });
-    const secondContext = getTestContext({
-      req: {
-        headers: { authorization: token },
-      },
-    });
-    const query = `
-      query {
-        currentUser {
-          id
-        }
-      }
-    `;
-    const rootValue = {};
-    await graphql(schema, query, rootValue, secondContext);
-    expect(fetch.mock.calls[0][0].headers).toMatchSnapshot();
-  });
-
-  describe('User Registration', () => {
-    it('checks if user is already registered', async () => {
-      const result = await context.dataSources.Auth.personExists({
-        identity: 'isaac.hardy@newspring.cc',
-      });
-
-      expect(result).toEqual(true);
-    });
-
-    it('throws error in personExists', async () => {
-      const result = await context.dataSources.Auth.personExists({
-        identity: 'fake',
-      });
-
-      expect(result).toEqual(false);
-    });
-
-    it('creates user profile', async () => {
-      const result = await context.dataSources.Auth.createUserProfile({
-        email: 'isaac.hardy@newspring.cc',
-      });
-
-      expect(result).toEqual({ personId: 35 });
-    });
-
-    it('throws error in createUserProfile', async () => {
-      try {
-        await context.dataSources.Auth.createUserProfile({
-          email: '',
-        });
-      } catch (e) {
-        expect(e.message).toEqual('Unable to create profile!');
-      }
-    });
-
-    it('creates user login', async () => {
-      const result = await context.dataSources.Auth.createUserLogin({
-        email: 'isaac.hardy@newspring.cc',
-        password: 'password',
-        personId: 35,
-      });
-
-      expect(result).toEqual({ id: 21 });
-    });
-
-    it('throws error in createUserLogin', async () => {
-      try {
-        await context.dataSources.Auth.createUserLogin({
-          email: '',
-          password: 'password',
-          personId: 35,
-        });
-      } catch (e) {
-        expect(e.message).toEqual('Unable to create user login!');
-      }
-    });
-
-    it('creates new registration', async () => {
-      const query = `
-        mutation {
-          registerPerson(email: "hello.world@earth.org", password: "good") {
-            user {
-              id
-              profile {
-                id
-                email
-              }
-            }
-          }
-        }
-      `;
-
-      const rootValue = {};
-
-      const result = await graphql(schema, query, rootValue, context);
-      expect(result).toMatchSnapshot();
-    });
-  });
-});
diff --git a/apollos-church-api/src/data/auth/data-source.js b/apollos-church-api/src/data/auth/data-source.js
deleted file mode 100644
index 588fa7c8..00000000
--- a/apollos-church-api/src/data/auth/data-source.js
+++ /dev/null
@@ -1,119 +0,0 @@
-import { AuthenticationError } from 'apollo-server';
-import { fetch, Request } from 'apollo-server-env';
-import moment from 'moment';
-
-import RockApolloDataSource from 'apollos-church-api/src/connectors/rock/data-source';
-import { generateToken, registerToken } from './token';
-
-export default class AuthDataSource extends RockApolloDataSource {
-  resource = 'Auth';
-
-  rockCookie = null;
-
-  userToken = null;
-
-  getCurrentPerson = async () => {
-    const { rockCookie } = this.context;
-    if (rockCookie) {
-      const request = await this.request('People/GetCurrentPerson').get({
-        options: { headers: { cookie: rockCookie } },
-      });
-      return request;
-    }
-    throw new AuthenticationError('Must be logged in');
-  };
-
-  fetchUserCookie = async (Username, Password) => {
-    try {
-      // We use `new Response` rather than string/options b/c if conforms more closely with ApolloRESTDataSource
-      // (makes mocking in tests WAY easier to use `new Request` as an input in both places)
-      const response = await fetch(
-        new Request(`${this.baseURL}/Auth/Login`, {
-          method: 'POST',
-          body: JSON.stringify({
-            Username,
-            Password,
-          }),
-          headers: {
-            'Content-Type': 'Application/Json',
-          },
-        })
-      );
-      if (response.status >= 400) throw new AuthenticationError();
-      const cookie = response.headers.get('set-cookie');
-      return cookie;
-    } catch (err) {
-      throw new AuthenticationError('Invalid Credentials');
-    }
-  };
-
-  authenticate = async ({ identity, password }) => {
-    try {
-      const cookie = await this.fetchUserCookie(identity, password);
-      const token = generateToken({ cookie });
-      const { userToken, rockCookie } = registerToken(token);
-      this.context.userToken = userToken;
-      this.context.rockCookie = rockCookie;
-      return { token, rockCookie };
-    } catch (e) {
-      throw e;
-    }
-  };
-
-  personExists = async ({ identity }) => {
-    const hasUserName = await this.request(
-      `/UserLogins?$filter=UserName eq '${identity}'`
-    ).get();
-
-    if (hasUserName.length) {
-      return true;
-    }
-    return false;
-  };
-
-  createUserProfile = async (props = {}) => {
-    try {
-      const { email } = props;
-
-      return await this.post('/People', {
-        Email: email,
-        IsSystem: false, // Required by Rock
-        Gender: 0, // Required by Rock
-      });
-    } catch (err) {
-      throw new Error('Unable to create profile!');
-    }
-  };
-
-  createUserLogin = async (props = {}) => {
-    try {
-      const { email, password, personId } = props;
-
-      return await this.post('/UserLogins', {
-        PersonId: personId,
-        EntityTypeId: 27, // A default setting we use in Rock-person-creation-flow
-        UserName: email,
-        PlainTextPassword: password,
-        LastLoginDateTime: `${moment().toISOString()}`,
-      });
-    } catch (err) {
-      throw new Error('Unable to create user login!');
-    }
-  };
-
-  registerPerson = async ({ email, password }) => {
-    const personExists = await this.personExists({ identity: email });
-    if (personExists) throw new Error('User already exists!');
-
-    const { personId } = await this.createUserProfile({ email });
-
-    await this.createUserLogin({
-      email,
-      password,
-      personId,
-    });
-
-    const token = await this.authenticate({ identity: email, password });
-    return token;
-  };
-}
diff --git a/apollos-church-api/src/data/auth/index.js b/apollos-church-api/src/data/auth/index.js
deleted file mode 100644
index 53e9d225..00000000
--- a/apollos-church-api/src/data/auth/index.js
+++ /dev/null
@@ -1,47 +0,0 @@
-import { gql } from 'apollo-server';
-import { createGlobalId } from '../node';
-
-// export { default as model } from './model';
-export { default as dataSource } from './data-source';
-
-export const schema = gql`
-  type AuthenticatedUser {
-    id: ID!
-    profile: Person
-  }
-
-  type Authentication {
-    user: AuthenticatedUser
-    token: String
-  }
-
-  extend type Mutation {
-    authenticate(identity: String!, password: String!): Authentication
-    registerPerson(email: String!, password: String!): Authentication
-  }
-
-  extend type Query {
-    currentUser: AuthenticatedUser
-  }
-`;
-
-export const resolver = {
-  Query: {
-    currentUser: (root, args, { dataSources }) =>
-      dataSources.Auth.getCurrentPerson(),
-  },
-  AuthenticatedUser: {
-    id: ({ id }, args, context, { parentType }) =>
-      createGlobalId(id, parentType.name),
-    profile: (authUser) => authUser,
-  },
-  Authentication: {
-    user: (root, args, { dataSources }) => dataSources.Auth.getCurrentPerson(),
-  },
-  Mutation: {
-    authenticate: (root, { identity, password }, { dataSources }) =>
-      dataSources.Auth.authenticate({ identity, password }),
-    registerPerson: (root, args, { dataSources }) =>
-      dataSources.Auth.registerPerson(args),
-  },
-};
diff --git a/apollos-church-api/src/data/auth/token.js b/apollos-church-api/src/data/auth/token.js
deleted file mode 100644
index 5e925784..00000000
--- a/apollos-church-api/src/data/auth/token.js
+++ /dev/null
@@ -1,22 +0,0 @@
-import { AuthenticationError } from 'apollo-server';
-import jwt from 'jsonwebtoken';
-
-const secret = process.env.SECRET || 'ASea$2gadj#asd0';
-
-export const parseToken = (token) => jwt.verify(token, secret);
-
-export const registerToken = (token) => {
-  try {
-    const { cookie } = parseToken(token);
-
-    return {
-      userToken: token,
-      rockCookie: cookie,
-    };
-  } catch (e) {
-    throw new AuthenticationError('Invalid token');
-  }
-};
-
-export const generateToken = (params) =>
-  jwt.sign({ ...params }, secret, { expiresIn: '60d' });
diff --git a/apollos-church-api/src/data/bible/_tests_/resolver.tests.js b/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
deleted file mode 100644
index 5edbc7ab..00000000
--- a/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
+++ /dev/null
@@ -1,32 +0,0 @@
-import { graphql } from 'graphql';
-import { fetch } from 'apollo-server-env';
-import { makeExecutableSchema } from 'apollo-server';
-import { getTestContext } from 'apollos-church-api/src/utils/testUtils';
-
-import { testSchema as typeDefs, resolvers } from 'apollos-church-api/src/data';
-
-describe('Scripture', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    context = getTestContext();
-
-    fetch.resetMocks();
-    fetch.mockLiveDataSourceApis();
-  });
-
-  it('returns', async () => {
-    const query = `
-      query {
-        scripture (query: "SNG.1.1") {
-          html
-        }
-      }
-    `;
-    const rootValue = {};
-
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/bible/data-source.js b/apollos-church-api/src/data/bible/data-source.js
deleted file mode 100644
index 6ef562b2..00000000
--- a/apollos-church-api/src/data/bible/data-source.js
+++ /dev/null
@@ -1,18 +0,0 @@
-import { RESTDataSource } from 'apollo-datasource-rest';
-
-export default class Scripture extends RESTDataSource {
-  resource = 'Scripture';
-
-  baseURL = 'https://api.scripture.api.bible/v1/bibles/';
-
-  token = process.env.BIBLE_API_KEY;
-
-  willSendRequest(request) {
-    request.headers.set('api-key', `${this.token}`);
-  }
-
-  async getScripture(query) {
-    const bibleId = process.env.BIBLE_ID;
-    return this.get(`${bibleId}/search?query=${query}`);
-  }
-}
diff --git a/apollos-church-api/src/data/bible/index.js b/apollos-church-api/src/data/bible/index.js
deleted file mode 100644
index 5a772205..00000000
--- a/apollos-church-api/src/data/bible/index.js
+++ /dev/null
@@ -1,6 +0,0 @@
-import schema from './schema';
-import resolver from './resolver';
-import model from './model';
-import dataSource from './data-source';
-
-export { schema, resolver, model, dataSource };
diff --git a/apollos-church-api/src/data/bible/model.js b/apollos-church-api/src/data/bible/model.js
deleted file mode 100644
index 49b466c2..00000000
--- a/apollos-church-api/src/data/bible/model.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export default class {
-  resource = 'Scripture';
-}
diff --git a/apollos-church-api/src/data/bible/resolver.js b/apollos-church-api/src/data/bible/resolver.js
deleted file mode 100644
index 920369af..00000000
--- a/apollos-church-api/src/data/bible/resolver.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import { get } from 'lodash';
-
-export default {
-  Query: {
-    scripture: (root, { query }, { dataSources }) =>
-      dataSources.Scripture.getScripture(query),
-  },
-  Scripture: {
-    reference: ({ data: { reference } = {} }) => reference,
-    html: ({ data: { passages } = {} }) => get(passages, '[0].content'),
-  },
-};
diff --git a/apollos-church-api/src/data/bible/schema.js b/apollos-church-api/src/data/bible/schema.js
deleted file mode 100644
index 08c6455b..00000000
--- a/apollos-church-api/src/data/bible/schema.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import { gql } from 'apollo-server';
-
-export default gql`
-  type Scripture {
-    reference: String
-    html: String
-  }
-
-  extend type Query {
-    scripture(query: String!): Scripture
-  }
-`;
diff --git a/apollos-church-api/src/data/content-channels/__tests__/model.tests.js b/apollos-church-api/src/data/content-channels/__tests__/model.tests.js
deleted file mode 100644
index 86e1b4b0..00000000
--- a/apollos-church-api/src/data/content-channels/__tests__/model.tests.js
+++ /dev/null
@@ -1,23 +0,0 @@
-import { buildGetMock } from 'apollos-church-api/src/utils/testUtils';
-import ContentChannelDataSource from '../data-source';
-
-describe('ContentChannelModel', () => {
-  it('constructs', () => {
-    expect(new ContentChannelDataSource()).toBeTruthy();
-  });
-  it('gets all', () => {
-    const dataSource = new ContentChannelDataSource();
-    dataSource.get = buildGetMock([{ Id: 1 }, { Id: 2 }], dataSource);
-    const result = dataSource.all();
-    expect(result).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it('gets by id', () => {
-    const dataSource = new ContentChannelDataSource();
-    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
-    const result = dataSource.getFromId(1);
-    expect(result).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js b/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js
deleted file mode 100644
index 1eba7547..00000000
--- a/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js
+++ /dev/null
@@ -1,76 +0,0 @@
-import { graphql } from 'graphql';
-import { fetch } from 'apollo-server-env';
-import { makeExecutableSchema } from 'apollo-server';
-import { getTestContext } from 'apollos-church-api/src/utils/testUtils';
-// we import the root-level schema and resolver so we test the entire integration:
-import { testSchema as typeDefs, resolvers } from 'apollos-church-api/src/data';
-
-import { createGlobalId } from 'apollos-church-api/src/data/node/model';
-
-const contentChannelFragment = `
-  fragment ContentChannelFragment on ContentChannel {
-    id
-    __typename
-    name
-    description
-    childContentChannels {
-      id
-      __typename
-      name
-      description
-    }
-    iconName
-    childContentItemsConnection {
-      edges {
-        cursor
-        node {
-          id
-          __typename
-        }
-      }
-    }
-  }
-`;
-
-describe('ContentChannel', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    fetch.resetMocks();
-    fetch.mockRockDataSourceAPI();
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    context = getTestContext();
-  });
-
-  it('gets a list of content channels', async () => {
-    const query = `
-      query {
-        contentChannels {
-          ...ContentChannelFragment
-        }
-      }
-      ${contentChannelFragment}
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('gets a single content channel when querying by root node', async () => {
-    const query = `
-      query {
-        node(
-          id: "${createGlobalId(1, 'ContentChannel')}"
-        ) {
-          ...on ContentChannel {
-            ...ContentChannelFragment
-          }
-        }
-      }
-      ${contentChannelFragment}
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/content-channels/data-source.js b/apollos-church-api/src/data/content-channels/data-source.js
deleted file mode 100644
index a0aaf576..00000000
--- a/apollos-church-api/src/data/content-channels/data-source.js
+++ /dev/null
@@ -1,27 +0,0 @@
-import RockApolloDataSource from 'apollos-church-api/src/connectors/rock/data-source';
-
-export default class ContentChannel extends RockApolloDataSource {
-  resource = 'ContentChannels';
-
-  all = () =>
-    this.request()
-      .expand('ChildContentChannels')
-      .get();
-
-  getRootChannels = () =>
-    this.request()
-      .filter('Id eq 2')
-      .filter('Id eq 3')
-      .filter('Id eq 4')
-      .filter('Id eq 6')
-      .filter('Id eq 8')
-      .get();
-
-  getFromId = (id) =>
-    this.request()
-      .filter(`Id eq ${id}`)
-      .expand('ChildContentChannels')
-      .top(1)
-      .transform((list) => list[0])
-      .get();
-}
diff --git a/apollos-church-api/src/data/content-channels/index.js b/apollos-church-api/src/data/content-channels/index.js
deleted file mode 100644
index fe61ec4f..00000000
--- a/apollos-church-api/src/data/content-channels/index.js
+++ /dev/null
@@ -1,42 +0,0 @@
-import { gql } from 'apollo-server';
-import { createGlobalId } from '../node';
-
-// export { default as model } from './model';
-export { default as dataSource } from './data-source';
-
-export const schema = gql`
-  type ContentChannel implements Node {
-    id: ID!
-    name: String!
-    description: String
-
-    childContentChannels: [ContentChannel]
-    childContentItemsConnection(
-      first: Int
-      after: String
-    ): ContentItemsConnection
-
-    iconName: String
-  }
-
-  extend type Query {
-    contentChannels: [ContentChannel]
-  }
-`;
-
-export const resolver = {
-  Query: {
-    contentChannels: (root, args, context) =>
-      context.dataSources.ContentChannel.getRootChannels(),
-  },
-  ContentChannel: {
-    id: ({ id }, args, context, { parentType }) =>
-      createGlobalId(id, parentType.name),
-    childContentItemsConnection: ({ id }, args, { dataSources }) =>
-      dataSources.ContentItem.paginate({
-        cursor: dataSources.ContentItem.byContentChannelId(id),
-        args,
-      }),
-    iconName: () => 'text', // TODO
-  },
-};
diff --git a/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js b/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js
deleted file mode 100644
index d45415b7..00000000
--- a/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js
+++ /dev/null
@@ -1,93 +0,0 @@
-import { fetch } from 'apollo-server-env';
-import { buildGetMock } from 'apollos-church-api/src/utils/testUtils';
-
-import ContentItemsDataSource from '../data-source';
-
-describe('ContentItemsModel', () => {
-  beforeEach(() => {
-    fetch.resetMocks();
-  });
-  it('constructs', () => {
-    expect(new ContentItemsDataSource()).toBeTruthy();
-  });
-  it('filters by content channel id', () => {
-    const dataSource = new ContentItemsDataSource();
-    dataSource.get = buildGetMock([{ Id: 1 }, { Id: 2 }], dataSource);
-    const result = dataSource.byContentChannelId(1).get();
-    expect(result).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it('gets by id', () => {
-    const dataSource = new ContentItemsDataSource();
-    dataSource.get = buildGetMock({ Id: 1 }, dataSource);
-    const result = dataSource.getFromId(1);
-    expect(result).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it('gets a cursor finding child content items of a provided parent', async () => {
-    const dataSource = new ContentItemsDataSource();
-    dataSource.get = buildGetMock(
-      [
-        [
-          { ChildContentChannelItemId: 101 },
-          { ChildContentChannelItemId: 201 },
-        ],
-        [{ Id: 1 }, { Id: 2 }],
-      ],
-      dataSource
-    );
-    const cursor = await dataSource.getCursorByParentContentItemId(1);
-    expect(cursor.get()).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it('returns null when there are no child content items', async () => {
-    const dataSource = new ContentItemsDataSource();
-    dataSource.get = buildGetMock([], dataSource);
-    const cursor = await dataSource.getCursorByParentContentItemId(1);
-    expect(cursor).toBe(null);
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it('gets a cursor finding parent content items of a provided child', async () => {
-    const dataSource = new ContentItemsDataSource();
-    dataSource.get = buildGetMock(
-      [
-        [{ ContentChannelItemId: 101 }, { ContentChannelItemId: 201 }],
-        [{ Id: 1 }, { Id: 2 }],
-      ],
-      dataSource
-    );
-    const cursor = await dataSource.getCursorByChildContentItemId(1);
-    expect(cursor.get()).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it('gets a cursor finding sibling content items of a provided item', async () => {
-    const dataSource = new ContentItemsDataSource();
-    dataSource.get = buildGetMock(
-      [
-        [{ ContentChannelItemId: 101 }],
-        [
-          { ContentChannelId: 201, ChildContentChannelItemId: 1 },
-          { ContentChannelId: 202, ChildContentChannelItemId: 2 },
-        ],
-        [{ Id: 1 }, { Id: 2 }],
-      ],
-      dataSource
-    );
-    const cursor = await dataSource.getCursorBySiblingContentItemId(1);
-    expect(cursor.get()).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it('returns null when there are no parent content items', async () => {
-    const dataSource = new ContentItemsDataSource();
-    dataSource.get = buildGetMock([], dataSource);
-    const cursor = await dataSource.getCursorByChildContentItemId(1);
-    expect(cursor).toBe(null);
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js b/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js
deleted file mode 100644
index ed82fffd..00000000
--- a/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js
+++ /dev/null
@@ -1,201 +0,0 @@
-import { graphql } from 'graphql';
-import { fetch } from 'apollo-server-env';
-import { makeExecutableSchema } from 'apollo-server';
-
-import { createGlobalId } from 'apollos-church-api/src/data/node/model';
-import { getTestContext } from 'apollos-church-api/src/utils/testUtils';
-// we import the root-level schema and resolver so we test the entire integration:
-import { testSchema as typeDefs, resolvers } from 'apollos-church-api/src/data';
-
-const contentItemFragment = `
-  fragment ContentItemFragment on UniversalContentItem {
-    id
-    __typename
-    title
-    coverImage {
-      name
-      key
-      sources {
-        uri
-      }
-    }
-    images {
-      __typename # Typenames here to increase test coverage
-      name
-      key
-      sources {
-        __typename
-        uri
-      }
-    }
-    videos {
-      __typename
-      name
-      key
-      sources {
-        __typename
-        uri
-      }
-      embedHtml
-    }
-    audios {
-      __typename
-      name
-      key
-      sources {
-        __typename
-        uri
-      }
-    }
-    htmlContent
-    childContentItemsConnection {
-      edges {
-        node {
-          id
-          __typename
-        }
-        cursor
-      }
-    }
-    parentChannel {
-      id
-      __typename
-    }
-    terms {
-      key
-      value
-    }
-    sharing {
-      __typename
-      url
-      title
-      message
-    }
-  }
-`;
-
-describe('UniversalContentItem', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    fetch.resetMocks();
-    fetch.mockRockDataSourceAPI();
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    context = getTestContext();
-  });
-
-  it('gets a user feed', async () => {
-    const query = `
-      query {
-        userFeed {
-          edges {
-            node {
-              ...ContentItemFragment
-            }
-          }
-        }
-      }
-      ${contentItemFragment}
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('gets a content item', async () => {
-    const query = `
-      query {
-        node(id: "${createGlobalId(1, 'UniversalContentItem')}") {
-          ...ContentItemFragment
-        }
-      }
-      ${contentItemFragment}
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('gets a devotional item', async () => {
-    const query = `
-      query {
-        node(id: "${createGlobalId(123, 'DevotionalContentItem')}") {
-          id
-          ... on DevotionalContentItem {
-            id
-            title
-            scriptures {
-              html
-            }
-          }
-        }
-      }
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it("gets a content item and it's siblings", async () => {
-    const query = `
-      query {
-        userFeed {
-          edges {
-            node {
-              ...ContentItemFragment
-              ... on UniversalContentItem {
-                siblingContentItemsConnection {
-                        edges {
-                    node {
-                      id
-                      __typename
-                    }
-                    cursor
-                  }
-                }
-              }
-            }
-          }
-        }
-      }
-      ${contentItemFragment}
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('properly handles empty attribute values', async () => {
-    const query = `
-      query {
-        node(id: "${createGlobalId(
-          'test-case-no-attributes',
-          'UniversalContentItem'
-        )}") {
-          ...ContentItemFragment
-        }
-      }
-      ${contentItemFragment}
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('filters terms by a match string', async () => {
-    const query = `
-    query {
-      node(id: "${createGlobalId(1, 'UniversalContentItem')}") {
-        ...on UniversalContentItem {
-          terms(match: "speaker") {
-            value
-          }
-        }
-      }
-    }
-  `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/content-items/data-source.js b/apollos-church-api/src/data/content-items/data-source.js
deleted file mode 100644
index df6fdc32..00000000
--- a/apollos-church-api/src/data/content-items/data-source.js
+++ /dev/null
@@ -1,86 +0,0 @@
-import RockApolloDataSource from 'apollos-church-api/src/connectors/rock/data-source';
-
-export default class ContentItem extends RockApolloDataSource {
-  resource = 'ContentChannelItems';
-
-  expanded = true;
-
-  getCursorByParentContentItemId = async (id) => {
-    const associations = await this.request('ContentChannelItemAssociations')
-      .filter(`ContentChannelItemId eq ${id}`)
-      .get();
-
-    if (!associations || !associations.length) return null;
-    const request = this.request();
-    associations.forEach(({ childContentChannelItemId }) => {
-      request.filter(`Id eq ${childContentChannelItemId}`);
-    });
-
-    return request.orderBy('Order');
-  };
-
-  getCursorByChildContentItemId = async (id) => {
-    const associations = await this.request('ContentChannelItemAssociations')
-      .filter(`ChildContentChannelItemId eq ${id}`)
-      .get();
-
-    if (!associations || !associations.length) return null;
-    const request = this.request();
-    associations.forEach(({ contentChannelItemId }) => {
-      request.filter(`Id eq ${contentChannelItemId}`);
-    });
-
-    return request.orderBy('Order');
-  };
-
-  getCursorBySiblingContentItemId = async (id) => {
-    // Get all parents for the current item.
-    const parentAssociations = await this.request(
-      'ContentChannelItemAssociations'
-    )
-      .filter(`ChildContentChannelItemId eq ${id}`)
-      .get();
-
-    if (!parentAssociations || !parentAssociations.length) return null;
-
-    // Now, fetch all children relations for those parents (excluding the original item)
-    const siblingAssociationsRequest = await this.request(
-      'ContentChannelItemAssociations'
-    );
-    parentAssociations.forEach(({ contentChannelItemId }) => {
-      siblingAssociationsRequest.filter(
-        `(ContentChannelItemId eq ${contentChannelItemId}) and (ChildContentChannelItemId ne ${id})`
-      );
-    });
-    const siblingAssociations = await siblingAssociationsRequest.get();
-    if (!siblingAssociations || !siblingAssociations.length) return null;
-
-    const request = this.request();
-    siblingAssociations.forEach(({ childContentChannelItemId }) => {
-      request.filter(`Id eq ${childContentChannelItemId}`);
-    });
-
-    return request.orderBy('Order');
-  };
-
-  byUserFeed = () =>
-    this.request() // TODO: load these IDs dynamically
-      .filter(`ContentChannelId eq 1`)
-      .filter(`ContentChannelId eq 2`)
-      .filter(`ContentChannelId eq 3`)
-      .filter(`ContentChannelId eq 4`)
-      .filter(`ContentChannelId eq 5`)
-      .filter(`ContentChannelId eq 6`)
-      .filter(`ContentChannelId eq 8`)
-      .orderBy('StartDateTime', 'desc');
-
-  byContentChannelId = (id) =>
-    this.request()
-      .filter(`ContentChannelId eq ${id}`)
-      .orderBy('StartDateTime', 'desc');
-
-  getFromId = (id) =>
-    this.request()
-      .find(id)
-      .get();
-}
diff --git a/apollos-church-api/src/data/content-items/index.js b/apollos-church-api/src/data/content-items/index.js
deleted file mode 100644
index dc394a5f..00000000
--- a/apollos-church-api/src/data/content-items/index.js
+++ /dev/null
@@ -1,366 +0,0 @@
-import { gql } from 'apollo-server';
-import { get } from 'lodash';
-import flow from 'lodash/fp/flow';
-import omitBy from 'lodash/fp/omitBy';
-import pickBy from 'lodash/fp/pickBy';
-import mapValues from 'lodash/fp/mapValues';
-import values from 'lodash/fp/values';
-import sanitizeHtml from 'apollos-church-api/src/utils/sanitize-html';
-import { Constants } from 'apollos-church-api/src/connectors/rock';
-import { createGlobalId } from '../node';
-
-const mapValuesWithKey = mapValues.convert({ cap: false });
-
-// export { default as model } from './model';
-export { default as dataSource } from './data-source';
-
-export const schema = gql`
-  type SharableContentItem implements Sharable {
-    url: String
-    message: String
-    title: String
-  }
-
-  interface ContentItem {
-    id: ID!
-    title: String
-    coverImage: ImageMedia
-    images: [ImageMedia]
-    videos: [VideoMedia]
-    audios: [AudioMedia]
-    htmlContent: String
-    childContentItemsConnection(
-      first: Int
-      after: String
-    ): ContentItemsConnection
-    siblingContentItemsConnection(
-      first: Int
-      after: String
-    ): ContentItemsConnection
-    parentChannel: ContentChannel
-
-    sharing: SharableContentItem
-    theme: Theme
-    isLiked: Boolean
-  }
-
-  type UniversalContentItem implements ContentItem & Node {
-    id: ID!
-    title: String
-    coverImage: ImageMedia
-    images: [ImageMedia]
-    videos: [VideoMedia]
-    audios: [AudioMedia]
-    htmlContent: String
-    childContentItemsConnection(
-      first: Int
-      after: String
-    ): ContentItemsConnection
-    siblingContentItemsConnection(
-      first: Int
-      after: String
-    ): ContentItemsConnection
-    parentChannel: ContentChannel
-    terms(match: String): [Term]
-
-    sharing: SharableContentItem
-    theme: Theme
-    isLiked: Boolean
-  }
-
-  type DevotionalContentItem implements ContentItem & Node {
-    id: ID!
-    title: String
-    coverImage: ImageMedia
-    images: [ImageMedia]
-    videos: [VideoMedia]
-    audios: [AudioMedia]
-    htmlContent: String
-    childContentItemsConnection(
-      first: Int
-      after: String
-    ): ContentItemsConnection
-    siblingContentItemsConnection(
-      first: Int
-      after: String
-    ): ContentItemsConnection
-    parentChannel: ContentChannel
-
-    sharing: SharableContentItem
-    theme: Theme
-    isLiked: Boolean
-    scriptures: Scripture
-  }
-
-  type Term {
-    key: String
-    value: String
-  }
-
-  input ContentItemsConnectionInput {
-    first: Int
-    after: String
-  }
-
-  type ContentItemsConnection {
-    edges: [ContentItemsConnectionEdge]
-    # TODO totalCount: Int
-    # TODO pageInfo: PaginationInfo
-  }
-
-  type ContentItemsConnectionEdge {
-    node: ContentItem
-    cursor: String
-  }
-
-  extend type Query {
-    userFeed(first: Int, after: String): ContentItemsConnection
-    getAllLikedContent: [ContentItem]
-  }
-`;
-
-const hasScripture = ({ attributeValues }) =>
-  get(attributeValues, 'scriptures.value') != null;
-
-const isImage = ({ key, attributeValues, attributes }) =>
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.IMAGE ||
-  (key.toLowerCase().includes('image') &&
-    typeof attributeValues[key].value === 'string' &&
-    attributeValues[key].value.startsWith('http')); // looks like an image url
-
-const isVideo = ({ key, attributeValues, attributes }) =>
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.VIDEO_FILE ||
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.VIDEO_URL ||
-  (key.toLowerCase().includes('video') &&
-    typeof attributeValues[key].value === 'string' &&
-    attributeValues[key].value.startsWith('http')); // looks like a video url
-
-const isAudio = ({ key, attributeValues, attributes }) =>
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.AUDIO_FILE ||
-  attributes[key].fieldTypeId === Constants.FIELD_TYPES.AUDIO_URL ||
-  (key.toLowerCase().includes('audio') &&
-    typeof attributeValues[key].value === 'string' &&
-    attributeValues[key].value.startsWith('http')); // looks like an audio url
-
-export const defaultContentItemResolvers = {
-  id: ({ id }, args, context, { parentType }) =>
-    createGlobalId(id, parentType.name),
-  htmlContent: ({ content }) => sanitizeHtml(content),
-  childContentItemsConnection: async ({ id }, args, { dataSources }) =>
-    dataSources.ContentItem.paginate({
-      cursor: await dataSources.ContentItem.getCursorByParentContentItemId(id),
-      args,
-    }),
-
-  parentChannel: ({ contentChannelId }, args, { dataSources }) =>
-    dataSources.ContentChannel.getFromId(contentChannelId),
-
-  siblingContentItemsConnection: async ({ id }, args, { dataSources }) =>
-    dataSources.ContentItem.paginate({
-      cursor: await dataSources.ContentItem.getCursorBySiblingContentItemId(id),
-      args,
-    }),
-
-  images: ({ attributeValues, attributes }) => {
-    const imageKeys = Object.keys(attributes).filter((key) =>
-      isImage({
-        key,
-        attributeValues,
-        attributes,
-      })
-    );
-    return imageKeys.map((key) => ({
-      __typename: 'ImageMedia',
-      key,
-      name: attributes[key].name,
-      sources: attributeValues[key].value
-        ? [{ uri: attributeValues[key].value }]
-        : [],
-    }));
-  },
-
-  videos: ({ attributeValues, attributes }) => {
-    const videoKeys = Object.keys(attributes).filter((key) =>
-      isVideo({
-        key,
-        attributeValues,
-        attributes,
-      })
-    );
-    return videoKeys.map((key) => ({
-      __typename: 'VideoMedia',
-      key,
-      name: attributes[key].name,
-      embedHtml: get(attributeValues, 'videoEmbed.value', null), // TODO: this assumes that the key `VideoEmebed` is always used on Rock
-      sources: attributeValues[key].value
-        ? [{ uri: attributeValues[key].value }]
-        : [],
-    }));
-  },
-
-  audios: ({ attributeValues, attributes }) => {
-    const audioKeys = Object.keys(attributes).filter((key) =>
-      isAudio({
-        key,
-        attributeValues,
-        attributes,
-      })
-    );
-    return audioKeys.map((key) => ({
-      __typename: 'AudioMedia',
-      key,
-      name: attributes[key].name,
-      sources: attributeValues[key].value
-        ? [{ uri: attributeValues[key].value }]
-        : [],
-    }));
-  },
-
-  coverImage: async (root, args, { dataSources }) => {
-    const pickBestImage = (images) => {
-      // TODO: there's probably a _much_ more explicit and better way to handle this
-      const squareImage = images.find((image) =>
-        image.key.toLowerCase().includes('square')
-      );
-      if (squareImage) return { ...squareImage, __typename: 'ImageMedia' };
-      return { ...images[0], __typename: 'ImageMedia' };
-    };
-
-    let defaultImages = defaultContentItemResolvers.images(root) || [];
-    defaultImages = defaultImages.filter((image) => image.sources.length); // filter images w/o URLs
-    if (defaultImages.length) return pickBestImage(defaultImages);
-
-    // If no image, check parent for image:
-    const parentItemsCursor = await dataSources.ContentItem.getCursorByChildContentItemId(
-      root.id
-    );
-    if (!parentItemsCursor) return null;
-
-    const parentItems = await parentItemsCursor.get();
-
-    if (parentItems.length) {
-      const parentImages = parentItems
-        .map(defaultContentItemResolvers.images)
-        .find((images) => images.length)
-        .filter((image) => image.sources.length); // filter images w/o URLs
-
-      if (parentImages && parentImages.length)
-        return pickBestImage(parentImages);
-    }
-
-    return null;
-  },
-
-  // This resolver function is temporary, and is just used to get a seed to generate a random theme from
-  theme: (root) => {
-    if (![6, 5, 4].includes(root.contentChannelId)) return null; // todo: don't generate a theme for these content channel ids
-    return root.guid; // todo: this `guid` is just being used as a seed to generate colors for now
-  },
-  isLiked: async ({ id, isLiked }, args, { dataSources }) => {
-    if (isLiked != null) return isLiked;
-
-    const interactions = await dataSources.Interactions.getForContentItem({
-      contentItemId: id,
-    });
-
-    const likes = interactions.filter((i) => i.operation === 'Like').length;
-    const unlike = interactions.filter((i) => i.operation === 'Unlike').length;
-    // If likes / unlikes equal we have either unliked the content or haven't liked it yet (both are 0)
-    return likes > unlike;
-  },
-  sharing: (root) => ({ __type: 'SharableContentItem', ...root }),
-};
-
-export const resolver = {
-  Query: {
-    userFeed: (root, args, { dataSources }) =>
-      dataSources.ContentItem.paginate({
-        cursor: dataSources.ContentItem.byUserFeed(),
-        args,
-      }),
-    getAllLikedContent: async (root, args, { dataSources }) => {
-      // Get All Interactions from current user
-      const interactions = await dataSources.Interactions.getForContentItems();
-
-      const likeCounts = {};
-
-      // Iterate over the interactions and determine which pieces of content
-      // has more likes than unlikes
-      interactions.forEach(({ operation, relatedEntityId }) => {
-        if (!likeCounts[relatedEntityId]) {
-          likeCounts[relatedEntityId] = 0;
-        }
-        if (operation === 'Like') {
-          likeCounts[relatedEntityId] += 1;
-        }
-        if (operation === 'Unlike') {
-          likeCounts[relatedEntityId] -= 1;
-        }
-      });
-
-      const itemIds = [];
-      Object.keys(likeCounts).forEach((relatedEntityId) => {
-        if (likeCounts[relatedEntityId] > 0) {
-          itemIds.push(relatedEntityId);
-        }
-      });
-
-      // Grab content related to user's interactions
-      const getUserContentFromInteractions = itemIds.map((id) =>
-        dataSources.ContentItem.getFromId(id)
-      );
-
-      const resolveUserContentFromInteractions = await Promise.all(
-        getUserContentFromInteractions
-      );
-
-      // Determine the isLiked value on contentitems and create an obj that we
-      // can merge with our main set of data later
-      const calculateIsLikedOnContentItems = resolveUserContentFromInteractions.map(
-        (item) => ({ ...item, isLiked: true })
-      );
-
-      return calculateIsLikedOnContentItems;
-    },
-  },
-  DevotionalContentItem: {
-    ...defaultContentItemResolvers,
-    scriptures: ({ attributeValues }, args, { dataSources }) => {
-      const reference = get(attributeValues, 'scriptures.value');
-      if (reference && reference != null) {
-        return dataSources.Scripture.getScripture(reference);
-      }
-      return null;
-    },
-  },
-  UniversalContentItem: {
-    ...defaultContentItemResolvers,
-    terms: ({ attributeValues, attributes }, { match }) =>
-      flow([
-        omitBy((value, key) => isImage({ key, attributes, attributeValues })),
-        omitBy((value, key) => isVideo({ key, attributes, attributeValues })),
-        omitBy((value, key) => isAudio({ key, attributes, attributeValues })),
-        omitBy((value, key) => key === 'videoEmbed'),
-        pickBy((value, key) => (match ? key.match(match) : true)),
-        mapValuesWithKey(({ value }, key) => ({
-          key,
-          value,
-        })),
-        values,
-      ])(attributeValues),
-  },
-  ContentItem: {
-    ...defaultContentItemResolvers,
-    __resolveType: ({ attributeValues }) => {
-      if (hasScripture({ attributeValues })) {
-        return 'DevotionalContentItem';
-      }
-      return 'UniversalContentItem';
-    },
-  },
-  SharableContentItem: {
-    url: () => 'https://apollosrock.newspring.cc/', // todo: return a dynamic url that links to the content item
-    title: ({ title }) => title,
-    message: () => '',
-  },
-};
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 6560b7d0..b9886fb3 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -1,58 +1,106 @@
 import { gql } from 'apollo-server';
-import { mapValues, values, merge, compact } from 'lodash';
 
-import RockConstants from 'apollos-church-api/src/connectors/rock/rock-constants';
-import * as Node from './node';
-import * as ContentChannel from './content-channels';
-import * as ContentItem from './content-items';
-import * as Person from './people';
-import * as Media from './media';
-import * as Auth from './auth';
-import * as LiveStream from './live';
+import {
+  createApolloServerConfig,
+  Interfaces,
+} from '@apollosproject/server-core';
+
+import * as Analytics from '@apollosproject/data-connector-analytics';
+import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
+import * as OneSignal from '@apollosproject/data-connector-onesignal';
+import * as Search from '@apollosproject/data-connector-algolia-search';
+import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
+import * as Sms from '@apollosproject/data-connector-twilio';
+import {
+  Followings,
+  Interactions,
+  RockConstants,
+  ContentItem,
+  ContentChannel,
+  Sharable,
+  Auth,
+  PersonalDevice,
+  Template,
+  AuthSms,
+  Campus,
+  Group,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
+} from '@apollosproject/data-connector-rock';
+
 import * as Theme from './theme';
-import * as Scripture from './bible';
-import * as Interactions from './interactions';
-import * as Sharable from './sharable';
-import * as Analytics from './analytics';
+
+// This module is used to attach Rock User updating to the OneSignal module.
+// This module includes a Resolver that overides a resolver defined in `OneSignal`
+import * as OneSignalWithRock from './oneSignalWithRock';
+
+// This is to mock any postgres resolvers so we don't throw API errors for unresolved
+// typedefs
+import NoPostgres from './noPostgres';
 
 const data = {
-  Node,
+  Interfaces,
+  Followings,
   ContentChannel,
   ContentItem,
-  Person,
-  Media,
+  Cloudinary,
   Auth,
+  AuthSms,
+  Sms,
   LiveStream,
   Theme,
   Scripture,
   Interactions,
-  RockConstants: { dataSource: RockConstants },
+  RockConstants,
   Sharable,
   Analytics,
+  OneSignal,
+  PersonalDevice,
+  OneSignalWithRock,
+  Pass,
+  Search,
+  Template,
+  Campus,
+  Group,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  Cache,
+  PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
+  NoPostgres,
 };
 
-export const schema = [
-  gql`
-    type Query {
-      _placeholder: Boolean # needed, empty schema defs aren't supported
-    }
-
-    type Mutation {
-      _placeholder: Boolean # needed, empty schema defs aren't supported
-    }
-  `,
-  ...compact(values(data).map((datum) => datum.schema)),
-];
-
-export const resolvers = merge(
-  ...compact(values(data).map((datum) => datum.resolver))
-);
-
-export const dataSources = mapValues(data, (datum) => datum.dataSource);
+const {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+} = createApolloServerConfig(data);
 
-export const models = {
-  ...mapValues(data, (datum) => datum.model),
-  UniversalContentItem: ContentItem.model, // alias
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
new file mode 100644
index 00000000..63052d6f
--- /dev/null
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -0,0 +1,121 @@
+import { gql } from 'apollo-server';
+
+import {
+  createApolloServerConfig,
+  Interfaces,
+} from '@apollosproject/server-core';
+
+import * as Analytics from '@apollosproject/data-connector-analytics';
+import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
+import * as Search from '@apollosproject/data-connector-algolia-search';
+import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
+import * as Sms from '@apollosproject/data-connector-twilio';
+import {
+  Followings,
+  Interactions,
+  RockConstants,
+  ContentItem,
+  ContentChannel,
+  Sharable,
+  Auth,
+  PersonalDevice,
+  Template,
+  AuthSms,
+  Campus,
+  Group,
+  BinaryFiles,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  PrayerRequest,
+  Persona,
+  Person as RockPerson,
+} from '@apollosproject/data-connector-rock';
+
+import {
+  Comment,
+  UserFlag,
+  UserLike,
+  Follow,
+  Campus as PostgresCampus,
+  Person as PostgresPerson,
+} from '@apollosproject/data-connector-postgres';
+
+import * as Theme from './theme';
+
+// This modules ties together certain updates so they occurs in both Rock and Postgres.
+// Will be eliminated in the future through an enhancement to the Shovel
+import { Person, OneSignal } from './rockWithPostgres';
+
+const data = {
+  Interfaces,
+  Followings,
+  ContentChannel,
+  ContentItem,
+  RockPerson, // This entry needs to come before (postgres) Person
+  BinaryFiles, // This entry needs to come before (postgres) Person
+  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
+  Cloudinary,
+  Auth,
+  AuthSms,
+  Sms,
+  LiveStream,
+  Theme,
+  Scripture,
+  Interactions,
+  RockConstants,
+  Sharable,
+  Analytics,
+  OneSignal,
+  PersonalDevice,
+  Pass,
+  Search,
+  Template,
+  Campus,
+  Group,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  Cache,
+  PrayerRequest,
+  Comment,
+  UserLike,
+  UserFlag,
+  Follow,
+  PostgresCampus,
+  Persona,
+  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
+};
+
+const {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+} = createApolloServerConfig(data);
+
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+};
+
+// the upload Scalar is added
+export const testSchema = [
+  gql`
+    scalar Upload
+  `,
+  ...schema,
+];
diff --git a/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js b/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
deleted file mode 100644
index 98e3818d..00000000
--- a/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
+++ /dev/null
@@ -1,103 +0,0 @@
-import { graphql } from 'graphql';
-import { fetch } from 'apollo-server-env';
-import { makeExecutableSchema } from 'apollo-server';
-
-import { testSchema as typeDefs, resolvers } from 'apollos-church-api/src/data';
-import { getTestContext } from 'apollos-church-api/src/utils/testUtils';
-import { createGlobalId } from 'apollos-church-api/src/data/node/model';
-import { generateToken } from 'apollos-church-api/src/data/auth/token';
-
-describe('Interactions', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    fetch.resetMocks();
-    fetch.mockRockDataSourceAPI();
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    const token = generateToken({ cookie: 'some-cookie' });
-    context = getTestContext({
-      req: {
-        headers: { authorization: token },
-      },
-    });
-  });
-
-  it('creates a session', async () => {
-    const query = `
-      mutation createSession {
-        createSession {
-          id
-        }
-      }
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-  it('likes an entity', async () => {
-    const query = `
-      mutation likeEntity {
-        updateLikeEntity(
-          input: {
-            nodeId: "${createGlobalId(1, 'UniversalContentItem')}"
-            sessionId: "${createGlobalId(123, 'Session')}"
-            operation: Like
-          }
-        ) {
-          id
-          operation
-          interactionDateTime
-        }
-      }
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-  it('uses interactions to track if a user liked content', async () => {
-    const query = `
-      query getContent {
-        node(id: "${createGlobalId(1, 'UniversalContentItem')}") {
-          id
-          ... on UniversalContentItem {
-            isLiked
-          }
-        }
-      }
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('gets all user liked content', async () => {
-    const query = `
-      query {
-        getAllLikedContent {
-          id
-          title
-          isLiked
-        }
-      }
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('returns an empty array for liked content without a user logged in', async () => {
-    const query = `
-      query {
-        getAllLikedContent {
-          id
-          title
-          isLiked
-        }
-      }
-    `;
-    const contextWithoutUser = getTestContext();
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, contextWithoutUser);
-    expect(result).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/interactions/data-source.js b/apollos-church-api/src/data/interactions/data-source.js
deleted file mode 100644
index 1f1ce295..00000000
--- a/apollos-church-api/src/data/interactions/data-source.js
+++ /dev/null
@@ -1,81 +0,0 @@
-import RockApolloDataSource from 'apollos-church-api/src/connectors/rock/data-source';
-import { parseGlobalId } from 'apollos-church-api/src/data/node';
-import { AuthenticationError } from 'apollo-server';
-
-export default class Interactions extends RockApolloDataSource {
-  resource = 'Interactions';
-
-  async createSession() {
-    const currentUser = await this.context.dataSources.Auth.getCurrentPerson();
-    const interactionId = await this.post('/InteractionSessions', {
-      PersonAliasId: currentUser.primaryAliasId,
-    });
-    return this.get(`/InteractionSessions/${interactionId}`);
-  }
-
-  async createInteraction({ nodeId, operationName, sessionId }) {
-    const { dataSources } = this.context;
-    const { id, __type } = parseGlobalId(nodeId);
-    const parsedSessionId = parseGlobalId(sessionId).id;
-    const contentItemType = await dataSources.RockConstants.modelTypeId(__type);
-    const interactionComponent = await this.context.dataSources.RockConstants.interactionComponent();
-    const currentUser = await dataSources.Auth.getCurrentPerson();
-
-    const interactionId = await this.post('/Interactions', {
-      RelatedEntityId: id,
-      RelatedEntityTypeId: contentItemType.id,
-      PersonAliasId: currentUser.primaryAliasId,
-      InteractionComponentId: interactionComponent.id,
-      InteractionSessionId: parsedSessionId,
-      Operation: operationName,
-      InteractionDateTime: new Date().toJSON(),
-    });
-    return this.get(`/Interactions/${interactionId}`);
-  }
-
-  async getForContentItem({ contentItemId }) {
-    const { dataSources } = this.context;
-    const contentItemType = await dataSources.RockConstants.modelTypeId(
-      'ContentItem'
-    );
-    try {
-      const currentUser = await dataSources.Auth.getCurrentPerson();
-      return this.request('Interactions')
-        .filter(
-          // eslint-disable-next-line prettier/prettier
-          `(RelatedEntityId eq ${contentItemId}) and (RelatedEntityTypeId eq ${
-            contentItemType.id
-          }) and (PersonAliasId eq ${currentUser.primaryAliasId})`
-        )
-        .get();
-    } catch (e) {
-      if (e instanceof AuthenticationError) {
-        return [];
-      }
-      throw e;
-    }
-  }
-
-  async getForContentItems() {
-    const { dataSources } = this.context;
-    const contentItemType = await dataSources.RockConstants.modelTypeId(
-      'ContentItem'
-    );
-    try {
-      const currentUser = await dataSources.Auth.getCurrentPerson();
-      return this.request('Interactions')
-        .filter(
-          // eslint-disable-next-line prettier/prettier
-          `(RelatedEntityTypeId eq ${
-            contentItemType.id
-          }) and (PersonAliasId eq ${currentUser.primaryAliasId})`
-        )
-        .get();
-    } catch (e) {
-      if (e instanceof AuthenticationError) {
-        return [];
-      }
-      throw e;
-    }
-  }
-}
diff --git a/apollos-church-api/src/data/interactions/index.js b/apollos-church-api/src/data/interactions/index.js
deleted file mode 100644
index 47dcc059..00000000
--- a/apollos-church-api/src/data/interactions/index.js
+++ /dev/null
@@ -1,5 +0,0 @@
-import dataSource from './data-source';
-import schema from './schema';
-import resolver from './resolver';
-
-export { schema, resolver, dataSource };
diff --git a/apollos-church-api/src/data/interactions/resolver.js b/apollos-church-api/src/data/interactions/resolver.js
deleted file mode 100644
index 8fc7cc41..00000000
--- a/apollos-church-api/src/data/interactions/resolver.js
+++ /dev/null
@@ -1,24 +0,0 @@
-import { createGlobalId } from 'apollos-church-api/src/data/node/model';
-
-export default {
-  Mutation: {
-    createSession: (root, args, { dataSources }) =>
-      dataSources.Interactions.createSession(),
-    updateLikeEntity: async (
-      root,
-      { input: { nodeId, sessionId, operation } },
-      { dataSources }
-    ) =>
-      dataSources.Interactions.createInteraction({
-        nodeId,
-        sessionId,
-        operationName: operation,
-      }),
-  },
-  Session: {
-    id: (root) => createGlobalId(root.id, 'InteractionSession'),
-  },
-  Interaction: {
-    id: (root) => createGlobalId(root.id, 'Interaction'),
-  },
-};
diff --git a/apollos-church-api/src/data/interactions/schema.js b/apollos-church-api/src/data/interactions/schema.js
deleted file mode 100644
index b9f31326..00000000
--- a/apollos-church-api/src/data/interactions/schema.js
+++ /dev/null
@@ -1,29 +0,0 @@
-import { gql } from 'apollo-server';
-
-export default gql`
-  type Session implements Node {
-    id: ID!
-  }
-
-  type Interaction implements Node {
-    id: ID!
-    operation: LIKE_OPERATION!
-    interactionDateTime: String!
-  }
-
-  enum LIKE_OPERATION {
-    Like
-    Unlike
-  }
-
-  input LikeEntityInput {
-    nodeId: ID!
-    sessionId: ID!
-    operation: LIKE_OPERATION!
-  }
-
-  extend type Mutation {
-    updateLikeEntity(input: LikeEntityInput!): Interaction
-    createSession: Session
-  }
-`;
diff --git a/apollos-church-api/src/data/live/__tests__/resolver.tests.js b/apollos-church-api/src/data/live/__tests__/resolver.tests.js
deleted file mode 100644
index c6aa60f5..00000000
--- a/apollos-church-api/src/data/live/__tests__/resolver.tests.js
+++ /dev/null
@@ -1,34 +0,0 @@
-import { fetch } from 'apollo-server-env';
-
-import { graphql } from 'graphql';
-import { makeExecutableSchema } from 'apollo-server';
-import { getTestContext } from 'apollos-church-api/src/utils/testUtils';
-// we import the root-level schema and resolver so we test the entire integration:
-import { testSchema as typeDefs, resolvers } from 'apollos-church-api/src/data';
-
-describe('LiveStream', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    context = getTestContext();
-
-    fetch.resetMocks();
-    fetch.mockLiveDataSourceApis();
-  });
-
-  it('returns', async () => {
-    const query = `
-      query {
-        liveStream {
-          isLive
-          eventStartTime
-        }
-      }
-    `;
-    const rootValue = {};
-
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/live/data-source.js b/apollos-church-api/src/data/live/data-source.js
deleted file mode 100644
index d108c4bc..00000000
--- a/apollos-church-api/src/data/live/data-source.js
+++ /dev/null
@@ -1,11 +0,0 @@
-import { RESTDataSource } from 'apollo-datasource-rest';
-
-export default class LiveStream extends RESTDataSource {
-  resource = 'LiveStream';
-
-  baseURL = 'https://apollos.churchonline.org/api/v1/';
-
-  async getLiveStream() {
-    return this.get('events/current');
-  }
-}
diff --git a/apollos-church-api/src/data/live/index.js b/apollos-church-api/src/data/live/index.js
deleted file mode 100644
index 5a772205..00000000
--- a/apollos-church-api/src/data/live/index.js
+++ /dev/null
@@ -1,6 +0,0 @@
-import schema from './schema';
-import resolver from './resolver';
-import model from './model';
-import dataSource from './data-source';
-
-export { schema, resolver, model, dataSource };
diff --git a/apollos-church-api/src/data/live/model.js b/apollos-church-api/src/data/live/model.js
deleted file mode 100644
index 68710b2b..00000000
--- a/apollos-church-api/src/data/live/model.js
+++ /dev/null
@@ -1,3 +0,0 @@
-export default class LiveStream {
-  resource = 'LiveStream';
-}
diff --git a/apollos-church-api/src/data/live/resolver.js b/apollos-church-api/src/data/live/resolver.js
deleted file mode 100644
index 509df212..00000000
--- a/apollos-church-api/src/data/live/resolver.js
+++ /dev/null
@@ -1,11 +0,0 @@
-export default {
-  Query: {
-    liveStream: (root, args, { dataSources }) =>
-      dataSources.LiveStream.getLiveStream(),
-  },
-  LiveStream: {
-    isLive: ({ response: { item: { isLive } = {} } = {} }) => isLive,
-    eventStartTime: ({ response: { item: { eventStartTime } = {} } = {} }) =>
-      eventStartTime,
-  },
-};
diff --git a/apollos-church-api/src/data/live/schema.js b/apollos-church-api/src/data/live/schema.js
deleted file mode 100644
index fe8678d2..00000000
--- a/apollos-church-api/src/data/live/schema.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import { gql } from 'apollo-server';
-
-export default gql`
-  type LiveStream {
-    isLive: Boolean
-    eventStartTime: String
-  }
-
-  extend type Query {
-    liveStream: LiveStream
-  }
-`;
diff --git a/apollos-church-api/src/data/media/index.js b/apollos-church-api/src/data/media/index.js
deleted file mode 100644
index 88dbed17..00000000
--- a/apollos-church-api/src/data/media/index.js
+++ /dev/null
@@ -1,97 +0,0 @@
-import { gql } from 'apollo-server';
-import { Constants } from 'apollos-church-api/src/connectors/rock';
-
-export { default as model } from './model';
-
-export const schema = gql`
-  interface Media {
-    name: String
-    key: String
-    sources: [MediaSource]
-  }
-
-  interface MediaSource {
-    uri: String
-  }
-
-  type ImageMedia implements Media {
-    name: String
-    key: String
-    sources: [ImageMediaSource]
-  }
-
-  type VideoMedia implements Media {
-    name: String
-    key: String
-    sources: [VideoMediaSource]
-    # duration: Float
-    embedHtml: String
-  }
-
-  type AudioMedia implements Media {
-    name: String
-    key: String
-    # duration: Float
-    sources: [AudioMediaSource]
-  }
-
-  type AudioMediaSource implements MediaSource {
-    uri: String
-    # format: String
-    # size: String
-  }
-
-  type ImageMediaSource implements MediaSource {
-    uri: String
-    # width: Int
-    # height: Int
-  }
-
-  type VideoMediaSource implements MediaSource {
-    uri: String
-    # format: String
-    # size: String
-  }
-
-  enum MediaInputType {
-    IMAGE
-    VIDEO
-    AUDIO
-  }
-`;
-
-const addTypenameToSources = (__typename) => ({ sources }) =>
-  sources.map((s) => ({ __typename, ...s }));
-
-export const resolver = {
-  Media: {
-    // Implementors must attach __typename to root.
-    __resolveType: ({ __typename }) => __typename,
-  },
-  MediaSource: {
-    // Implementors must attach __typename to root.
-    __resolveType: ({ __typename }) => __typename,
-  },
-  ImageMedia: {
-    sources: addTypenameToSources('ImageMediaSource'),
-  },
-  AudioMedia: {
-    sources: addTypenameToSources('AudioMediaSource'),
-  },
-  VideoMedia: {
-    sources: addTypenameToSources('VideoMediaSource'),
-  },
-  ImageMediaSource: {
-    uri: ({ uri = '' }) => {
-      if (!uri || typeof uri !== 'string') return null;
-      if (uri.startsWith('http')) return uri;
-      if (uri.startsWith('//')) return `https:${uri}`;
-
-      // Handle Rock GUID:
-      if (uri.split('-').length === 5)
-        return `${Constants.GET_IMAGE}?guid=${uri}`;
-
-      return uri;
-    },
-  },
-};
diff --git a/apollos-church-api/src/data/media/model.js b/apollos-church-api/src/data/media/model.js
deleted file mode 100644
index c59adde1..00000000
--- a/apollos-church-api/src/data/media/model.js
+++ /dev/null
@@ -1 +0,0 @@
-export default class MediaModel {}
diff --git a/apollos-church-api/src/data/noPostgres.js b/apollos-church-api/src/data/noPostgres.js
new file mode 100644
index 00000000..bd292eac
--- /dev/null
+++ b/apollos-church-api/src/data/noPostgres.js
@@ -0,0 +1,46 @@
+// The purpose of this file is to mock the postgres resolvers to null so the API doesn't fail when
+// there's no database. This will not be necessary when Postgres is required by all Apollos APIs.
+import gql from 'graphql-tag';
+import { Comment, Follow } from '@apollosproject/data-connector-postgres';
+
+export default {
+  schema: gql`
+    ${Comment.schema}
+    ${Follow.schema}
+  `,
+  resolver: {
+    Query: {
+      followRequests: () => [],
+      suggestedFollows: () => [],
+      searchPeople: () => {},
+    },
+    Mutation: {
+      addComment: () => null,
+      flagComment: () => null,
+      requestFollow: () => null,
+      acceptFollowRequest: () => null,
+      ignoreFollowRequest: () => null,
+    },
+    Comment: {
+      person: () => null,
+      id: () => null,
+    },
+    CommentListFeature: {
+      id: () => null,
+    },
+    AddCommentFeature: {
+      id: () => null,
+      initialPrompt: () => null,
+      addPrompt: () => null,
+      relatedNode: () => null,
+    },
+    Person: {
+      currentUserFollowing: () => null,
+      followingCurrentUser: () => null,
+    },
+    SearchPeopleResultsConnection: {
+      edges: () => [],
+      pageInfo: () => null,
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/node/__tests__/model.js b/apollos-church-api/src/data/node/__tests__/model.js
deleted file mode 100644
index ae59c1f3..00000000
--- a/apollos-church-api/src/data/node/__tests__/model.js
+++ /dev/null
@@ -1,126 +0,0 @@
-import casual from 'casual';
-import Node, { createGlobalId, parseGlobalId } from '../model';
-
-describe('Node', () => {
-  it('`createGlobalId` should take two arguments and return a string', () => {
-    const id = casual.word;
-    const type = casual.word;
-
-    expect(typeof createGlobalId(id, type)).toEqual('string');
-  });
-
-  it('`createGlobalId` should be decodeable by `parseGlobalId`', () => {
-    const id = casual.word;
-    const __type = casual.word;
-    const globalId = createGlobalId(id, __type);
-
-    expect(parseGlobalId(globalId)).toEqual({
-      __type,
-      id,
-    });
-  });
-
-  it('`parseGlobalId` should take a global id and return the type and id', () => {
-    const id = casual.word;
-    const __type = casual.word;
-    const globalId = createGlobalId(id, __type);
-
-    expect(parseGlobalId(globalId)).toEqual({
-      __type,
-      id,
-    });
-  });
-
-  it('`parseGlobalId` should throw an error if ID is invalid', () => {
-    expect(() => parseGlobalId('blah-blah')).toThrow();
-  });
-
-  it('Node class should parse an encoded id to get the type to resolve', async () => {
-    const id = casual.word;
-    const __type = 'Test';
-    const globalId = createGlobalId(id, __type);
-
-    const dataSources = {
-      Test: {
-        getFromId(_id) {
-          expect(_id).toEqual(id);
-          return {};
-        },
-      },
-    };
-
-    const node = new Node();
-    node.get(globalId, dataSources);
-  });
-
-  it("Node class should throw error if it can't find a matching model", async () => {
-    const id = casual.word;
-    const __type = 'NoModel';
-    const globalId = createGlobalId(id, __type);
-
-    const node = new Node({});
-    expect(node.get(globalId)).rejects.toBeDefined();
-  });
-
-  it("Node class doesn't assign __type if model returns falsey", async () => {
-    const id = casual.word;
-    const __type = 'Test';
-    const globalId = createGlobalId(id, __type);
-
-    const dataSources = {
-      Test: {
-        getFromId() {
-          return '';
-        },
-      },
-    };
-
-    const node = new Node(dataSources);
-    const record = node.get(globalId);
-    expect(record).not.toHaveProperty('__type');
-  });
-
-  it('Node class should return data from the models `getFromId` method', async () => {
-    const id = casual.word;
-    const __type = 'Test';
-    const globalId = createGlobalId(id, __type);
-    const data = {
-      test: casual.word,
-    };
-
-    const dataSources = {
-      Test: {
-        getFromId() {
-          return Promise.resolve(data);
-        },
-      },
-    };
-
-    const node = new Node();
-    const result = await node.get(globalId, dataSources);
-
-    expect(result.test).toEqual(data.test);
-  });
-
-  it('Node class should attach the __type to the resulting data', async () => {
-    const id = casual.word;
-    const __type = 'Test';
-    const globalId = createGlobalId(id, __type);
-    const data = {
-      test: casual.word,
-    };
-
-    const dataSources = {
-      Test: {
-        getFromId() {
-          return Promise.resolve(data);
-        },
-      },
-    };
-
-    const node = new Node();
-    const result = await node.get(globalId, dataSources);
-
-    expect(result.__type).toEqual(__type);
-  });
-});
diff --git a/apollos-church-api/src/data/node/__tests__/resolver.js b/apollos-church-api/src/data/node/__tests__/resolver.js
deleted file mode 100644
index 65a69575..00000000
--- a/apollos-church-api/src/data/node/__tests__/resolver.js
+++ /dev/null
@@ -1,56 +0,0 @@
-import casual from 'casual';
-import Resolver from '../resolver';
-
-const sampleData = {
-  _id: casual.word,
-  __type: 'Test',
-};
-
-it('Node should only have a __resolveType on the resolver', () => {
-  const { Node } = Resolver;
-
-  expect(Node.__resolveType).toBeTruthy();
-  expect(Object.keys(Node).length).toEqual(1);
-  expect(Object.keys(Node)[0]).toEqual('__resolveType');
-});
-
-it('Node should return the type from the data passed to it', () => {
-  const { Node } = Resolver;
-
-  const schema = {
-    getType(type) {
-      expect(type).toEqual(sampleData.__type);
-      return type;
-    },
-  };
-
-  const __type = Node.__resolveType(sampleData, null, {
-    schema,
-  });
-  expect(__type).toEqual(sampleData.__type);
-});
-
-it('Query node should return the data via the `Node` class', () => {
-  const { Query } = Resolver;
-
-  const fakeId = casual.word;
-  const models = {
-    Node: {
-      get(id) {
-        expect(id).toEqual(fakeId);
-        return sampleData;
-      },
-    },
-  };
-
-  const data = Query.node(
-    null,
-    {
-      id: fakeId,
-    },
-    {
-      models,
-    }
-  );
-  expect(data).toEqual(sampleData);
-});
diff --git a/apollos-church-api/src/data/node/index.js b/apollos-church-api/src/data/node/index.js
deleted file mode 100644
index 8943216e..00000000
--- a/apollos-church-api/src/data/node/index.js
+++ /dev/null
@@ -1,5 +0,0 @@
-import schema from './schema';
-import resolver from './resolver';
-import model, { createGlobalId, parseGlobalId } from './model';
-
-export { schema, resolver, model, createGlobalId, parseGlobalId };
diff --git a/apollos-church-api/src/data/node/model.js b/apollos-church-api/src/data/node/model.js
deleted file mode 100644
index 13172731..00000000
--- a/apollos-church-api/src/data/node/model.js
+++ /dev/null
@@ -1,48 +0,0 @@
-/* eslint-disable class-methods-use-this */
-import Crypto from 'crypto';
-
-const secret = process.env.SECRET || 'LZEVhlgzFZKClu1r';
-
-export function createGlobalId(id, type) {
-  const cipher = Crypto.createCipher('aes192', secret);
-
-  let encrypted = cipher.update(`${id}`, 'utf8', 'hex');
-  encrypted += cipher.final('hex');
-
-  return `${type}:${encrypted}`;
-}
-
-export function parseGlobalId(encodedId) {
-  try {
-    const decipher = Crypto.createDecipher('aes192', secret);
-
-    const [__type, encryptedId] = encodedId.split(':');
-    let decrypted = decipher.update(encryptedId, 'hex', 'utf8');
-    decrypted += decipher.final('utf8');
-
-    const id = decrypted.toString();
-    return {
-      __type,
-      id,
-    };
-  } catch (e) {
-    throw new Error('Error parsing ID');
-  }
-}
-
-export default class Node {
-  async get(encodedId, dataSources) {
-    const { __type, id } = parseGlobalId(encodedId);
-    if (
-      !dataSources ||
-      !dataSources[__type] ||
-      !dataSources[__type].getFromId
-    ) {
-      throw new Error(`No dataSource found using ${__type}`);
-    }
-
-    const data = await dataSources[__type].getFromId(id, encodedId);
-    if (data) data.__type = __type;
-    return data;
-  }
-}
diff --git a/apollos-church-api/src/data/node/resolver.js b/apollos-church-api/src/data/node/resolver.js
deleted file mode 100644
index f7b4be43..00000000
--- a/apollos-church-api/src/data/node/resolver.js
+++ /dev/null
@@ -1,9 +0,0 @@
-export default {
-  Query: {
-    node: (root, { id }, { models, dataSources }) =>
-      models.Node.get(id, dataSources),
-  },
-  Node: {
-    __resolveType: ({ __type }, args, { schema }) => schema.getType(__type),
-  },
-};
diff --git a/apollos-church-api/src/data/node/schema.js b/apollos-church-api/src/data/node/schema.js
deleted file mode 100644
index 58f9fb18..00000000
--- a/apollos-church-api/src/data/node/schema.js
+++ /dev/null
@@ -1,11 +0,0 @@
-import { gql } from 'apollo-server';
-
-export default gql`
-  extend type Query {
-    node(id: ID!): Node
-  }
-
-  interface Node {
-    id: ID!
-  }
-`;
diff --git a/apollos-church-api/src/data/oneSignalWithRock.js b/apollos-church-api/src/data/oneSignalWithRock.js
new file mode 100644
index 00000000..e810c589
--- /dev/null
+++ b/apollos-church-api/src/data/oneSignalWithRock.js
@@ -0,0 +1,20 @@
+/* eslint-disable import/prefer-default-export */
+
+export const resolver = {
+  Mutation: {
+    updateUserPushSettings: async (root, { input }, { dataSources }) => {
+      // register the changes w/ one signal
+      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
+
+      // if the pushProviderUserId is changing, we need ot register the device with rock.
+      if (input.pushProviderUserId != null) {
+        await dataSources.PersonalDevice.addPersonalDevice({
+          pushId: input.pushProviderUserId,
+        });
+      }
+
+      // return the original return value (which is currentPerson)
+      return returnValue;
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/people/__tests__/data-source.tests.js b/apollos-church-api/src/data/people/__tests__/data-source.tests.js
deleted file mode 100644
index ee397f8e..00000000
--- a/apollos-church-api/src/data/people/__tests__/data-source.tests.js
+++ /dev/null
@@ -1,77 +0,0 @@
-import { buildGetMock } from 'apollos-church-api/src/utils/testUtils';
-import Person from '../data-source';
-
-const auth = (dataSource) => ({
-  getCurrentPerson: buildGetMock(
-    { Id: 51, FirstName: 'Vincent', LastName: 'Wilson' },
-    dataSource
-  ),
-});
-describe('Person', () => {
-  it('constructs', () => {
-    expect(new Person()).toBeTruthy();
-  });
-  it('gets person from email', () => {
-    const dataSource = new Person();
-    dataSource.get = buildGetMock(
-      { Email: 'isaac.hardy@newspring.cc' },
-      dataSource
-    );
-    const result = dataSource.getFromEmail('isaac.hardy@newspring.cc');
-    expect(result).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it('gets person from id', () => {
-    const dataSource = new Person();
-    dataSource.get = buildGetMock({ Id: 51 }, dataSource);
-    const result = dataSource.getFromId(51);
-    expect(result).resolves.toMatchSnapshot();
-    expect(dataSource.get.mock.calls).toMatchSnapshot();
-  });
-
-  it("updates a user's profile attributes", () => {
-    const dataSource = new Person();
-    const Auth = auth(dataSource);
-    dataSource.context = {
-      rockCookie: 'fakeCookie',
-      dataSource: { Auth },
-    };
-    dataSource.patch = buildGetMock({}, dataSource);
-    const result = dataSource.updateProfile({
-      field: 'FirstName',
-      value: 'Nick',
-    });
-    expect(result).resolves.toMatchSnapshot();
-    expect(Auth.getCurrentPerson.mock.calls).toMatchSnapshot();
-    expect(dataSource.patch.mock.calls).toMatchSnapshot();
-  });
-
-  it("uploads a user's profile picture", async () => {
-    const dataSource = new Person();
-    dataSource.context = { rockCookie: 'fakeCookie' };
-    dataSource.updateProfile = buildGetMock(
-      { Id: 51, FirstName: 'Vincent', LastName: 'Wilson' },
-      dataSource
-    );
-    dataSource.nodeFetch = buildGetMock({ text: () => '245' }, dataSource);
-
-    const result = await dataSource.uploadProfileImage({ stream: '123' }, 456);
-    expect(result).toMatchSnapshot();
-    const nodeFetchCalls = dataSource.nodeFetch.mock.calls;
-    // Remove randomly generated multipart boundary.
-    nodeFetchCalls[0][1].body._boundary = nodeFetchCalls[0][1].body._boundary.replace(
-      /\d+/,
-      ''
-    );
-    nodeFetchCalls[0][1].body._streams[0] = nodeFetchCalls[0][1].body._streams[0].replace(
-      /\d+/,
-      ''
-    );
-    nodeFetchCalls[0][1].headers['content-type'] = nodeFetchCalls[0][1].headers[
-      'content-type'
-    ].replace(/\d+/, '');
-    expect(nodeFetchCalls).toMatchSnapshot();
-    expect(dataSource.updateProfile.mock.calls).toMatchSnapshot({});
-  });
-});
diff --git a/apollos-church-api/src/data/people/__tests__/resolvers.test.js b/apollos-church-api/src/data/people/__tests__/resolvers.test.js
deleted file mode 100644
index 855fbc48..00000000
--- a/apollos-church-api/src/data/people/__tests__/resolvers.test.js
+++ /dev/null
@@ -1,101 +0,0 @@
-import { graphql } from 'graphql';
-import { fetch } from 'apollo-server-env';
-import { makeExecutableSchema } from 'apollo-server';
-
-import { createGlobalId } from 'apollos-church-api/src/data/node/model';
-import { getTestContext } from 'apollos-church-api/src/utils/testUtils';
-import {
-  generateToken,
-  registerToken,
-} from 'apollos-church-api/src/data/auth/token';
-// we import the root-level schema and resolver so we test the entire integration:
-import { testSchema as typeDefs, resolvers } from 'apollos-church-api/src/data';
-
-describe('Person', () => {
-  let schema;
-  let context;
-  beforeEach(() => {
-    fetch.resetMocks();
-    fetch.mockRockDataSourceAPI();
-    schema = makeExecutableSchema({ typeDefs, resolvers });
-    context = getTestContext();
-  });
-
-  it("updates a user's attributes, if there is a current user", async () => {
-    const query = `
-      mutation {
-        updateProfile(input: { field: FirstName, value: "Richard" }) {
-          firstName
-          id
-        }
-      }
-    `;
-    const { userToken, rockCookie } = registerToken(
-      generateToken({ cookie: 'some-cookie' })
-    );
-    context.userToken = userToken;
-    context.rockCookie = rockCookie;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it("fails to update a user's attributes, without a current user", async () => {
-    const query = `
-      mutation {
-        updateProfile(input: { field: FirstName, value: "Richard" }) {
-          firstName
-          id
-        }
-      }
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('gets people by an email', async () => {
-    const query = `
-      query {
-        people(email: "isaac.hardy@newspring.cc") {
-          id
-          firstName
-          lastName
-          nickName
-          email
-          photo {
-            uri
-          }
-        }
-      }
-    `;
-    const rootValue = {};
-
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-
-  it('gets a single person when querying by root node', async () => {
-    const query = `
-      query {
-        node(
-          id: "${createGlobalId(51, 'Person')}"
-        ) {
-          ... on Person {
-            id
-            firstName
-            lastName
-            nickName
-            email
-            photo {
-              uri
-            }
-          }
-        }
-      }
-    `;
-    const rootValue = {};
-    const result = await graphql(schema, query, rootValue, context);
-    expect(result).toMatchSnapshot();
-  });
-});
diff --git a/apollos-church-api/src/data/people/data-source.js b/apollos-church-api/src/data/people/data-source.js
deleted file mode 100644
index 5bb6930a..00000000
--- a/apollos-church-api/src/data/people/data-source.js
+++ /dev/null
@@ -1,54 +0,0 @@
-import { AuthenticationError } from 'apollo-server';
-import FormData from 'form-data';
-import { camelCase } from 'lodash';
-import RockApolloDataSource from 'apollos-church-api/src/connectors/rock/data-source';
-
-export default class Person extends RockApolloDataSource {
-  resource = 'People';
-
-  getFromId = (id) =>
-    this.request()
-      .find(id)
-      .get();
-
-  getFromEmail = (email) =>
-    this.request()
-      .filter(`Email eq '${email}'`)
-      .get();
-
-  updateProfile = async ({ field, value }) => {
-    const currentPerson = await this.context.dataSources.Auth.getCurrentPerson();
-
-    if (!currentPerson) throw new AuthenticationError('Invalid Credentials');
-
-    await this.patch(`/People/${currentPerson.id}`, {
-      [field]: value,
-    });
-    return {
-      ...currentPerson,
-      [camelCase(field)]: value,
-    };
-  };
-
-  uploadProfileImage = async (file, length) => {
-    const { stream, filename } = await file;
-    const data = new FormData();
-    data.append('file', stream, {
-      filename,
-      knownLength: length,
-    });
-    const response = await this.nodeFetch(
-      `${this.baseURL}/BinaryFiles/Upload?binaryFileTypeId=5`,
-      {
-        method: 'POST',
-        body: data,
-        headers: {
-          'Authorization-Token': this.rockToken,
-          ...data.getHeaders(),
-        },
-      }
-    );
-    const photoId = await response.text();
-    return this.updateProfile({ field: 'PhotoId', value: photoId });
-  };
-}
diff --git a/apollos-church-api/src/data/people/index.js b/apollos-church-api/src/data/people/index.js
deleted file mode 100644
index 9f2881cf..00000000
--- a/apollos-church-api/src/data/people/index.js
+++ /dev/null
@@ -1,6 +0,0 @@
-import schema from './schema';
-import resolver from './resolver';
-// import model from './model';
-import dataSource from './data-source';
-
-export { schema, resolver, dataSource };
diff --git a/apollos-church-api/src/data/people/resolver.js b/apollos-church-api/src/data/people/resolver.js
deleted file mode 100644
index 46bf07c7..00000000
--- a/apollos-church-api/src/data/people/resolver.js
+++ /dev/null
@@ -1,22 +0,0 @@
-import { createGlobalId } from '../node';
-
-export default {
-  Query: {
-    people: (root, { email }, { dataSources }) =>
-      dataSources.Person.getFromEmail(email),
-  },
-  Mutation: {
-    updateProfile: (root, { input: { field, value } }, { dataSources }) =>
-      dataSources.Person.updateProfile({ field, value }),
-    uploadProfileImage: async (root, { file, size }, { dataSources }) =>
-      dataSources.Person.uploadProfileImage(file, size),
-  },
-  Person: {
-    id: ({ id }, args, context, { parentType }) =>
-      createGlobalId(id, parentType.name),
-    photo: ({ photo: { url } }) => ({ uri: url }),
-    firstName: ({ firstName }) =>
-      typeof firstName === 'object' ? '' : firstName,
-    lastName: ({ lastName }) => (typeof lastName === 'object' ? '' : lastName),
-  },
-};
diff --git a/apollos-church-api/src/data/people/schema.js b/apollos-church-api/src/data/people/schema.js
deleted file mode 100644
index 0e11f62a..00000000
--- a/apollos-church-api/src/data/people/schema.js
+++ /dev/null
@@ -1,31 +0,0 @@
-import { gql } from 'apollo-server';
-
-export default gql`
-  enum UPDATEABLE_PROFILE_FIELDS {
-    FirstName
-    LastName
-  }
-
-  input UpdateProfileInput {
-    field: UPDATEABLE_PROFILE_FIELDS!
-    value: String!
-  }
-
-  type Person implements Node {
-    id: ID!
-    firstName: String!
-    lastName: String!
-    nickName: String
-    email: String
-    photo: ImageMediaSource
-  }
-
-  extend type Mutation {
-    updateProfile(input: UpdateProfileInput!): Person
-    uploadProfileImage(file: Upload!, size: Int!): Person
-  }
-
-  extend type Query {
-    people(email: String!): [Person]
-  }
-`;
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
new file mode 100644
index 00000000..cc1696f0
--- /dev/null
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -0,0 +1,127 @@
+/* eslint-disable import/prefer-default-export, max-classes-per-file */
+import { parseGlobalId } from '@apollosproject/server-core';
+import { Person as postgresPerson } from '@apollosproject/data-connector-postgres';
+import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
+
+class personDataSource extends postgresPerson.dataSource {
+  async create(attributes) {
+    const rockPersonId = await this.context.dataSources.RockPerson.create(
+      attributes
+    );
+    super.create({
+      ...attributes,
+      originType: 'rock',
+      originId: String(rockPersonId),
+    });
+    return rockPersonId;
+  }
+}
+
+// These resolvers make sure that calls to updating profile fields update both the
+const personResolver = {
+  Mutation: {
+    updateProfileField: async (
+      root,
+      { input: { field, value } },
+      { dataSources }
+    ) => {
+      await dataSources.RockPerson.updateProfile([{ field, value }]); // Update in Rock
+      return dataSources.Person.updateProfile([{ field, value }]); // updates in Postgres
+    },
+    updateProfileFields: async (root, { input }, { dataSources }) => {
+      await dataSources.RockPerson.updateProfile(input); // Update in Rock
+      return dataSources.Person.updateProfile(input); // updates in Postgres
+    },
+    uploadProfileImage: async (root, { file, size }, { dataSources }) => {
+      const person = await dataSources.RockPerson.uploadProfileImage(
+        file,
+        size
+      ); // Update in Rock
+      return dataSources.Person.updateProfile([
+        { field: 'profileImageUrl', value: person.photo.url },
+      ]); // updates in Postgres. Reuses already uploaded imageUrl
+      // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
+    },
+    updateUserCampus: async (root, { campusId }, { dataSources }) => {
+      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+
+      const { id: rockCampusId } = parseGlobalId(campusId);
+      const campus = await dataSources.PostgresCampus.getFromId(
+        rockCampusId,
+        null,
+        {
+          originType: 'rock',
+        }
+      ); // finds the postgres campus id
+      return dataSources.Person.updateProfile([
+        { field: 'campusId', value: campus.id },
+      ]); // updates in Postgres
+    },
+    updateUserPushSettings: async (root, { input }, { dataSources }) => {
+      // register the changes w/ one signal
+      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
+
+      // if the pushProviderUserId is changing, we need ot register the device with rock.
+      if (input.pushProviderUserId != null) {
+        await dataSources.PersonalDevice.addPersonalDevice({
+          pushId: input.pushProviderUserId,
+        });
+      }
+
+      try {
+        await dataSources.Person.updateProfile([
+          {
+            field: 'apollosUser',
+            value: true,
+          },
+        ]);
+      } catch (e) {
+        console.warn(e);
+      }
+
+      // return the original return value (which is currentPerson)
+      return returnValue;
+    },
+  },
+};
+
+export const Person = {
+  dataSource: personDataSource,
+  resolver: personResolver,
+};
+
+class oneSignalDataSource extends OneSignalOriginal.dataSource {
+  async createNotification({
+    toUserIds = [],
+    to,
+    content = '',
+    heading,
+    subtitle,
+    ...args
+  }) {
+    if (to && to.originId && to.originType === 'rock') {
+      const person = await this.context.dataSources.RockPerson.getFromId(
+        to.originId
+      );
+      return super.createNotification({
+        toUserIds: [person.primaryAliasId],
+        content,
+        heading,
+        subtitle,
+        ...args,
+      });
+    }
+    return super.createNotification({
+      toUserIds,
+      content,
+      heading,
+      subtitle,
+      ...args,
+    });
+  }
+}
+
+export const OneSignal = {
+  ...OneSignalOriginal,
+  dataSource: oneSignalDataSource,
+};
diff --git a/apollos-church-api/src/data/sharable/index.js b/apollos-church-api/src/data/sharable/index.js
deleted file mode 100644
index aab622a4..00000000
--- a/apollos-church-api/src/data/sharable/index.js
+++ /dev/null
@@ -1,14 +0,0 @@
-export const schema = `
-interface Sharable {
-  url: String
-  message: String
-  title: String
-}
-`;
-
-export const resolver = {
-  Sharable: {
-    // Implementors must attach __typename to root.
-    __resolveType: ({ __typename }) => __typename,
-  },
-};
diff --git a/apollos-church-api/src/getContext.js b/apollos-church-api/src/getContext.js
deleted file mode 100644
index 4f6164d5..00000000
--- a/apollos-church-api/src/getContext.js
+++ /dev/null
@@ -1,34 +0,0 @@
-import dotenv from 'dotenv/config'; // eslint-disable-line
-import { get } from 'lodash';
-
-import { registerToken } from 'apollos-church-api/src/data/auth/token';
-
-import { models } from './data';
-
-// Construct a context object for each request
-export default ({ req = {} } = {}) => {
-  // initialize connectors for every request so API fetches
-  // are deduplicated per-request only.
-  const connectors = {};
-
-  const initiatedModels = {};
-
-  const context = {
-    models: initiatedModels,
-    connectors,
-  };
-
-  Object.keys(models).forEach((modelName) => {
-    if (models[modelName]) {
-      initiatedModels[modelName] = new models[modelName](context);
-    }
-  });
-
-  if (get(req, 'headers.authorization')) {
-    const { userToken, rockCookie } = registerToken(req.headers.authorization);
-    context.userToken = userToken;
-    context.rockCookie = rockCookie;
-  }
-
-  return context;
-};
diff --git a/apollos-church-api/src/getDataSources.js b/apollos-church-api/src/getDataSources.js
deleted file mode 100644
index 100f28fc..00000000
--- a/apollos-church-api/src/getDataSources.js
+++ /dev/null
@@ -1,16 +0,0 @@
-import { dataSources } from './data';
-
-export default () => {
-  const sources = {};
-  Object.keys(dataSources).forEach((dataSourceName) => {
-    if (dataSources[dataSourceName]) {
-      sources[dataSourceName] = new dataSources[dataSourceName]();
-    }
-  });
-
-  return {
-    ...sources,
-    UniversalContentItem: sources.ContentItem, // alias
-    DevotionalContentItem: sources.ContentItem, // alias
-  };
-};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 6e138954..613e7219 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,24 +1,17 @@
 import dotenv from 'dotenv/config'; // eslint-disable-line
-import { ApolloServer } from 'apollo-server';
-import { resolvers, schema, testSchema } from './data';
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
+import config from './config'; // eslint-disable-line
+import server from './server';
 
-import getContext from './getContext';
-import getDataSources from './getDataSources';
+export { testSchema } from './server'; // eslint-disable-line import/prefer-default-export
 
-export { resolvers, schema, testSchema };
+// Use the port, if provided.
+const { PORT } = process.env;
+if (!PORT && process.env.NODE_ENV !== 'test')
+  console.warn(
+    'Add `PORT=XXXX` if you are having trouble connecting to the server. By default, PORT is 4000.'
+  );
 
-export default new ApolloServer({
-  typeDefs: schema,
-  resolvers,
-  dataSources: getDataSources,
-  context: getContext,
-  formatError: (error) => {
-    console.error(error.extensions.exception.stacktrace.join('\n'));
-    return error;
-  },
-  playground: {
-    settings: {
-      'editor.cursorShape': 'line',
-    },
-  },
+server.listen({ port: PORT || 4000 }, () => {
+  console.log(`🚀 Server ready at http://0.0.0.0:${PORT || 4000}`);
 });
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
new file mode 100644
index 00000000..b200cb5c
--- /dev/null
+++ b/apollos-church-api/src/server.js
@@ -0,0 +1,90 @@
+import { ApolloServer } from 'apollo-server-express';
+import ApollosConfig from '@apollosproject/config';
+import express from 'express';
+import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
+import { get } from 'lodash';
+import { setupUniversalLinks } from '@apollosproject/server-core';
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const {
+  resolvers,
+  schema,
+  testSchema,
+  context,
+  dataSources,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+} = dataObj;
+
+export { resolvers, schema, testSchema };
+
+const isDev =
+  process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';
+
+const extensions = isDev ? [() => new RockLoggingExtension()] : [];
+
+const cacheOptions = isDev
+  ? {}
+  : {
+      cacheControl: {
+        stripFormattedExtensions: false,
+        calculateHttpHeaders: true,
+        defaultMaxAge: 3600,
+      },
+    };
+
+const { ROCK, APP } = ApollosConfig;
+
+const apolloServer = new ApolloServer({
+  typeDefs: schema,
+  resolvers,
+  dataSources,
+  context,
+  introspection: true,
+  extensions,
+  formatError: (error) => {
+    console.error(get(error, 'extensions.exception.stacktrace', []).join('\n'));
+    return error;
+  },
+  playground: {
+    settings: {
+      'editor.cursorShape': 'line',
+    },
+  },
+  ...cacheOptions,
+});
+
+const app = express();
+
+// password reset
+app.get('/forgot-password', (req, res) => {
+  res.redirect(APP.FORGOT_PASSWORD_URL || `${ROCK.URL}/page/56`);
+});
+
+applyServerMiddleware({ app, dataSources, context });
+setupJobs({ app, dataSources, context });
+// Comment out if you don't want the API serving apple-app-site-association or assetlinks manifests.
+setupUniversalLinks({ app });
+
+apolloServer.applyMiddleware({ app });
+apolloServer.applyMiddleware({ app, path: '/' });
+
+// make sure this is called last.
+// (or at least after the apollos server setup)
+(async () => {
+  if (ApollosConfig?.DATABASE?.URL) {
+    const migrationRunner = await createMigrationRunner({ migrations });
+    await migrationRunner.up();
+  }
+})();
+
+export default app;
diff --git a/apollos-church-api/src/utils/cursor.js b/apollos-church-api/src/utils/cursor.js
deleted file mode 100644
index 8727100d..00000000
--- a/apollos-church-api/src/utils/cursor.js
+++ /dev/null
@@ -1,25 +0,0 @@
-import Crypto from 'crypto';
-
-const secret = process.env.SECRET || 'SEfjsvoSDFnvblaE';
-
-export function createCursor(obj) {
-  const str = JSON.stringify(obj);
-  const cipher = Crypto.createCipher('aes192', secret);
-  let encrypted = cipher.update(str, 'utf8', 'hex');
-  encrypted += cipher.final('hex');
-
-  return encodeURI(encrypted);
-}
-
-export function parseCursor(str) {
-  try {
-    const decipher = Crypto.createDecipher('aes192', secret);
-
-    let decrypted = decipher.update(decodeURI(str), 'hex', 'utf8');
-    decrypted += decipher.final('utf8');
-
-    return JSON.parse(decrypted);
-  } catch (e) {
-    throw new Error('Error parsing cursor');
-  }
-}
diff --git a/apollos-church-api/src/utils/cursor.tests.js b/apollos-church-api/src/utils/cursor.tests.js
deleted file mode 100644
index 2d9d958d..00000000
--- a/apollos-church-api/src/utils/cursor.tests.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import casual from 'casual';
-import { createCursor, parseCursor } from './cursor';
-
-describe('Node', () => {
-  it('`createCursor` should take a valid json shape and return a string', () => {
-    const id = casual.word;
-
-    expect(typeof createCursor({ id })).toEqual('string');
-  });
-
-  it('`createCursor` should be decodeable by `parseCursor`', () => {
-    const id = 'molestiae';
-    const cursor = createCursor({ id });
-
-    expect(parseCursor(cursor)).toMatchSnapshot();
-  });
-
-  it('`parseCursor` should throw an error if cursor is invalid', () => {
-    expect(() => parseCursor('blah-blah')).toThrow();
-  });
-});
diff --git a/apollos-church-api/src/utils/sanitize-html.js b/apollos-church-api/src/utils/sanitize-html.js
deleted file mode 100644
index 3e3478a1..00000000
--- a/apollos-church-api/src/utils/sanitize-html.js
+++ /dev/null
@@ -1,36 +0,0 @@
-import sanitizeHtml from 'sanitize-html';
-
-const allowedTags = [
-  'h1',
-  'h2',
-  'h3',
-  'h4',
-  'h5',
-  'h6',
-  'blockquote',
-  'p',
-  'a',
-  'ul',
-  'ol',
-  'li',
-  'b',
-  'i',
-  'strong',
-  'em',
-  'br',
-  'caption',
-  'img',
-];
-
-const allowedAttributes = {
-  a: ['href'],
-  img: ['src'],
-};
-
-// A very picky HTML sanitizer
-export default function(dirty) {
-  return sanitizeHtml(dirty, {
-    allowedTags,
-    allowedAttributes,
-  });
-}
diff --git a/apollos-church-api/src/utils/testUtils.js b/apollos-church-api/src/utils/testUtils.js
deleted file mode 100644
index fcaa1951..00000000
--- a/apollos-church-api/src/utils/testUtils.js
+++ /dev/null
@@ -1,32 +0,0 @@
-import getContext from 'apollos-church-api/src/getContext';
-import getDataSources from 'apollos-church-api/src/getDataSources';
-import { KeyValueCache } from 'apollo-server-caching';
-
-export function getTestContext(req) {
-  const context = getContext(req);
-
-  const dataSources = getDataSources();
-  // Apollo Server does this internally.
-  Object.values(dataSources).forEach((dataSource) => {
-    if (dataSource.initialize) {
-      dataSource.initialize({ context, cache: KeyValueCache });
-    }
-  });
-  context.dataSources = dataSources;
-  return context;
-}
-
-export const buildGetMock = (response, dataSource) => {
-  const get = jest.fn();
-  if (Array.isArray(response) && Array.isArray(response[0])) {
-    response.forEach((responseVal) => {
-      get.mockReturnValueOnce(
-        new Promise((resolve) => resolve(dataSource.normalize(responseVal)))
-      );
-    });
-  }
-  get.mockReturnValue(
-    new Promise((resolve) => resolve(dataSource.normalize(response)))
-  );
-  return get;
-};
diff --git a/apollos-church-api/wallet-passes/checkin.pass/icon.png b/apollos-church-api/wallet-passes/checkin.pass/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..eb025791d640b41889b0584085aec4f7540d9ed8
GIT binary patch
literal 658
zcmV;D0&V??P)<h;3K|Lk000e1NJLTq0012T0012b1^@s6R+DEB00001b5ch_0Itp)
z=>Px%Oi4sRR7eeDWJu5b&p>CuL}&ZJ){R<9(@<w2)pSQyWrpq9DR6D?zkOqnuWe)a
z_4hAaj1Yt5IE^wjLNQa2i;KZiTLVRm5Qij7xmZ~l0`;{q%#1;E2!;YQ0g^2B)6-_)
zVP{7(f`P$9OPxUo=wo65NtQ+<`RLKR4-EhQL&_CaW@d&kBRyj6WFXp72|gYMXLS|0
z!BY+$WjJ`}E}S1_VhCpwVi0X<xRD_P6C)$symc2YGpspx3C=fDkYi906@l~dF^IMl
zIk6nS_mJVqhmQ;!FI{8!`|lsz{AeP5OO&NLk`fHM(h_jP*PMs=@Xgn+4Et^&f;iID
zkO2`EaOD^bqAW%B<$qw}S$FX=+@Q5k2Y>_=gajF^l@;J}xEKU21;t~yu>oBFk-PU9
zo`3ob=Wo1xmEjLk5J#Dy79MbgNDP9OI;*KLNb>W-wX6juAY}0V+joY&H*Uj)LJV~o
zI9TwPt^_TO0>%>zfb!+Ki&tP=IKBG9ML3&}gM-0aM-$G+#=vVS4?7!!Kd=;nfkSuh
zF}(Wx1;&Nbn=f5w_>ENHBc}nlA|wW0O9O!AEEgLaTsd;SgbM;0AAkH{*meCDT*ysR
zjX{)$2hK-l;0=8AMB$~Q!C<ANfNlnuFC)MY7iVT-0vC%@4;_PxAv17VDlNdr0IEBY
zftNP^xI$J7DyMN-iZgg4fZ2o*sn|m{kQla+tTcm$xENNYI4un^&|~=Z=MP0V)DU~k
s!#LXR#Tpq@62uv&R5Bl{F#}>L06Dg??>EPstpET307*qoM6N<$f}#QyX#fBK

literal 0
HcmV?d00001

diff --git a/apollos-church-api/wallet-passes/checkin.pass/icon@2x.png b/apollos-church-api/wallet-passes/checkin.pass/icon@2x.png
new file mode 100644
index 0000000000000000000000000000000000000000..bc4e9a6c50da95a102613f00515da6e5f1504773
GIT binary patch
literal 1191
zcmV;Y1X%ltP)<h;3K|Lk000e1NJLTq0024w0024&1^@s6;k!yG00001b5ch_0Itp)
z=>Px(VM#<mRA>e5T1!t;K@>ja{b+ewd5MU;DHNzcTo?@oiBUp~1_bKDoh#S;1Al>u
zJ9n-qsECR|G#bOofRwj@8bgeUQ3;Py%F7u{YkNC0_s+d@A(fuZy)$Rd%=zY=Irq$I
z4RGuBE*t`iI0P8?AcledZ<Y>QG;Glj-GQ*{hN$7FY9AVlMp3swAmdtfB|Ny<Nu6<M
zb`CDzyHDkdVC;)UZ`9eCx;7LSLRONAIYui}cc5mY5iXP!Gxdxx7@(uJnmI-*Q+J?k
zHY-F$$S>1bTcZ^VQ(j&Jrno%QF5|Y|87i`~z?zfkZ3=(t3bf>?8Em;Zij|f-%Zeu=
z4Ad1Uui|aCYKTPVRS(h)C|0+fGr(k`$lF*_qz6vW4d}VT0?18G;a0k{PM@Hp8_>>r
zy25t`hG2DLgSZJTRtp$oV~9L0ow@*xkB)|`RTV_Nwsv;l?%QGLAD<%fS+Ya{g`K(p
zZLyXktHcsjcr`l@zg#Zp9vvt0ai_hWok>vz84O*3vc8>;(Xl;s24_CPvfE8m?QFqG
zbiR{`Jhh#|fo7QKk#lo<8~Vnl_jL8(cPH6>4d@foeoAagC>$tO5a+HWdO0%(OY7@C
zmg9rd_bz?03r-1z1GO_g58b1Iz=kkz*FWI?U`sPIxUwpLS<<^upq8vml&@xy)&bAf
z7W7a2bzAR%O%#D2k577=K~LVyDrf?~4xvC<ioKX72Oq~spq2e}gVq{lHy?i)+Pg5I
z_*`DMRngV~+If6Ew*Wua)`)UulM$L^?y^KdLZ>jG=TVg)J0*#*1b};U6P`-k);ka<
z5RaU6_Z1bCgaKt;oCl_6QOf7>VheiqjL?&Z=E`zNj*APD;q4FtG%+Ryu2fm5YfGc8
zbl{u$1^BVDD(&8D$3{f~F0N@MAwV(61O%2uE{_MEPtK57zP|0<U3lo6@U^8cB5pK7
zfU?~783O4-XH<?HjNJE3K|Y*FOO=~~$=3`tJJ|#{5YfmXNfKz|-YtBF@5?JRw&p6K
zW}rCb!?`Jm)=&V#fk+AMAouMZqX#9{MM25@nt`&Cg#L*saHEV!DfKYix6ph9>hp4y
zP8Bpx6VNJ@?v<mok4AFQRw_6A=?i>YT9$VE+FGot2`I~&E9kB{h>~_5!hetH9b>12
z(F%&;q%~Co#brrco}^Kqa~d`{+}1k}tMZVRm;e_orQV@jPu0JsHI^1ZMv{@b*y7TX
zs?sG6YuFo1lxzrl(GyC&iK+}@s0M1UwXx=fuBHa)f(GUoHOx!MqNxe-@SAdvrOm0z
zbxo-7g$rN@LD7+s&{}QfURo7UT*{0?CC!5(H7TJgpseEbet<unp9cl$>0C>31I1-X
z{By%W6R%adfp!S4&Z*rnUZC7jx7kugEj+7LT8&&f`li+%KL+o=E-Df?g#WLrXrDr7
z5ce4k9cY1?hJgm|N9ec077cwH1|kSsG;lvczjbIV`Uf@}0T|pBL$3e;002ovPDHLk
FV1lDsAjJRx

literal 0
HcmV?d00001

diff --git a/apollos-church-api/wallet-passes/checkin.pass/logo.png b/apollos-church-api/wallet-passes/checkin.pass/logo.png
new file mode 100644
index 0000000000000000000000000000000000000000..66c5d6acadd9847001564a64d3cef75337d6027b
GIT binary patch
literal 619
zcmV-x0+juUP)<h;3K|Lk000e1NJLTq0012T0012b1^@s6R+DEB00001b5ch_0Itp)
z=>Px%B}qg<R7ef&RLzRiKoG8KH)hPZ2n&KJ9z1y1gLrXa51zz>_yhjHs;ld>_zL<K
zs|(^y5J3?<`4WmCh$6zwB%Plwzo3=r>?WDSi<b#BRrRH-zN+f#CR%>W4*ZV}WN~~c
zi6^4V#*-f+a(GBCX2|ApuQP7P_YtDCG>xzM*dl!pDJqIc<j#ShB99JW9l#*cG)-=b
z&}u`xt4L_A0dIr`k%~C4BL2k8MH#g`)6CB9H8M1Sy-7tTCz$AR6@&SSki1nJ9jKkP
z;!UzQskLSs6&)&rph5{ldTxYwH7F9;Op@fR+Fi0YDbsvdP}K+K=u0q)ULb*730R6=
z)%GH_)}BL^=QX(DKNW)TJFd(d#f9l1_Tdz|zh0yyMKwSmazQA28rBFsQymj^CeM?L
zmEEE&Bt_;1Yg_%Hzh@qQRr_y?GqsDN{&*<v%Y~%5onm6;q&lIs^U46C@}Cf|^*_#j
z3yF=?ZjuX0op%*LPy}IAwN?YNk@*x09mBJDL;p3&PEuri6s6o!M_h|{ApWMd${-lO
z1fHsmv#n;J!aSvuG|Q&9K|I#|hUWKDu~LHY7sM+My8^%Co?TN{YSuo(x%w-E>v7%2
zvzF<U)9Mbw6>H=Bu%9aC%ho$3GCP%8`HTRa-SC6?Ium~kkBm2bO!d})Y3d&QD`6QN
z=YIi@%DNKyvc0{+Tg+tr&4YE9--XZP!G24JWe56n;5TEM+8QPN!ZiQ@002ovPDHLk
FV1lg7AM5}C

literal 0
HcmV?d00001

diff --git a/apollos-church-api/wallet-passes/checkin.pass/logo@2x.png b/apollos-church-api/wallet-passes/checkin.pass/logo@2x.png
new file mode 100644
index 0000000000000000000000000000000000000000..c47ad00a6c448de33f13033da23e6c089de00b67
GIT binary patch
literal 1207
zcmV;o1W5adP)<h;3K|Lk000e1NJLTq0024w0024&1^@s6;k!yG00001b5ch_0Itp)
z=>Px(aY;l$RA>e5S#66HM-c9w-J6@c^W}qRd_fTcA;@6_69geBh8XdKh$tpe^JDx6
z{)s>|CPt%T3?hi1{23AgA{x)z-I>|FE}vQ1b9bofo1W<r0==+IPrY>2Q(fI%-J?|a
zg$RTQgb0KPgb0KPgb0KPypMqX7=g&L{sl7Tx@b$Qhe@*Oq{#Qch&=SMaTi2C*@U#x
zCy08xY%)!Gtpg>Z?Qrrto1>8FWEowy$u#A)4m8UKKLE(wMvh_*{l9@~qAMGLEcis~
zV4kmjQAM_nOsgZBW!dMX=*!BE8D*WzmHS}?TLr4j$jNa-x=8a5<7Z=1Ye3<!CZ#U9
zc}TlPS?^mnoodpp0Uf33am>7Z)!g_XWk^+;(;qadwORveA|pDCee<f;>MiS{)@P9o
zn^;~0Vk<!5=mM6}^PFE=>tUQMUQ?uQbA0G74$~g1%gI-zwE{HH2N)H#S#aWSfPF<;
z|03{}(f(K8R)Atu#MKu2>bT~epI>}{^nJsDMQR@->hI-vb!py#0^}#Ca@ds<Bbm=7
zOScMVi?$*?ZkL@$A5oqg#}&KW%j~;%peXq+!BJ^1{0jj8o47z)$tN1mtFL#UT3Jdy
z9nH*3r0+wd@9PQh=_ls+fjsXWo~AWvdj*P;ZyBR`h;s-dnZ<E3v(kb#L=OMX$&YD9
zp6jBH!0-xG(VDmj!Tx;!TPgby5zUP9G#|yo_Xu2fnpU^%4QR1|;QyoOh}P_U?9MMe
zg3e1pZwGECP6<3GvNxckEc*r}-yY67Msg6x3wH$G2<iJ9$17-6k9m^*gzgQfA-Uv(
zv3mf!Ix$*)b|_*;dn~8*8Dz@VvX1M!7oc!t386nH8n;wIg-$m~9^>(%XqSKJI~k_^
z3uU_NyBDCtVei}+EMpxb*+bgiWmxMZ$gClKZ>|$c4P)D~O0v?c7of&ij#fl}0!UwS
zU_$S7X7|_$y?8?ZYZ?spPt#o6je+8tayM#IEJVUDvdq6Jm2NkA0!aT(k=C2Y7M(|?
z(dAiVptz<iN<Ow9jKnI^_TIY3mIh>v(&|@Hq~ax;q|Z7i33GH5@N$trbQ=ItPLHD@
zeZ|!mCE;gz-ao?WRiQNkitEWka9~+7WIJ<mI!NEANZ)@rUO_VrO2S4!mF0R8#rjHd
z=9HY~=oo#9G~M8M1r5c+MNE@9iEpFV1`30n;(Ai-9A`~9o{4;k5y`7BZWXs7eNRiO
zHhS%X88s-re$h@#=g)^}${xTiI>^rv;-gkDCAP3~G+q<_V0ji|?azkUVD)E2SRPS}
z(IzZJA&=)5cjC#OW2L@pr7qHTGj{Q_Qm1XwVLKjX{fn+PY5^^-BVlmC)tE1Nq_ucw
zEZL|96xWf?h9n2-(DC8wD5dGAF1pS@i)%=fe8*jkv>}_*np3cyf#MqSGSas8BIXM;
zJa7W)zP%WI2KzdD@$3skwSEYDYVWH!UV2tdK1hWKgb0KPgb0KPgb0KPgb2Kkz&jnu
VcU*cLS`+{P002ovPDHLkV1mczIo<#O

literal 0
HcmV?d00001

diff --git a/apollos-church-api/wallet-passes/checkin.pass/pass.json b/apollos-church-api/wallet-passes/checkin.pass/pass.json
new file mode 100644
index 00000000..a3916b31
--- /dev/null
+++ b/apollos-church-api/wallet-passes/checkin.pass/pass.json
@@ -0,0 +1,57 @@
+{
+  "description": "Apollos Church",
+  "formatVersion": 1,
+  "organizationName": "Apollos Church",
+  "passTypeIdentifier": "pass.com.apollos.testing",
+  "teamIdentifier": "7TM8C6252Z",
+  "logoText": "Apollos Church",
+  "backgroundColor": "rgb(0,103,109)",
+  "foregroundColor": "rgb(248,247,244)",
+  "labelColor": "rgb(248,247,244)",
+  "serialNumber": "checkinpass-{{ person | GetPersonAlternateId }}",
+  "thumbnail": {
+    "uri": "{{ person.Photo.Url }}&format=png&height=200"
+  },
+  "thumbnail@2x": {
+    "uri": "{{ person.Photo.Url }}&format=png&height=400"
+  },
+  "barcodes": [
+    {
+      "message": "{{ person | GetPersonAlternateId }}",
+      "format": "PKBarcodeFormatQR",
+      "messageEncoding": "iso-8859-1"
+    }
+  ],
+{% assign personCampus = person | Campus %}
+{% if personCampus.Location.Latitude %}
+  "locations": [
+    {
+      "latitude": {{ personCampus.Location.Latitude }},
+      "longitude": {{ personCampus.Location.Longitude }},
+      "relevantText": "Tap to check-in at {{ personCampus.Name }}"
+    }
+  ],
+{% endif %}
+  "generic": {
+    "primaryFields": [
+      {
+        "key": "member",
+        "value": "{{ person.FullName }}"
+      }
+    ],
+    "secondaryFields": [
+      {
+        "key": "home",
+        "label": "home",
+        "value": "{{ person | Address:'Home','[[City]], [[State]]' }}"
+      },
+      {
+        "key": "campus",
+        "label": "campus",
+        "textAlignment": "PKTextAlignmentRight",
+        "value":
+          "{% assign personCampus = person | Campus %}{{ personCampus.Name  }}"
+      }
+    ]
+  }
+}
