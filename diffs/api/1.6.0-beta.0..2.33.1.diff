diff --git a/apollos-church-api/.dockerignore b/apollos-church-api/.dockerignore
deleted file mode 100644
index 66a32251..00000000
--- a/apollos-church-api/.dockerignore
+++ /dev/null
@@ -1,4 +0,0 @@
-packages/apolloschurchapp
-packages/apollos-ui-kit
-packages/apollos-church-api/.env
-packages/*/node_modules
diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
new file mode 100644
index 0000000000000000000000000000000000000000..f5cafd12f57811ab30e1cbeb1f7fc96dc132b871
GIT binary patch
literal 7040
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

literal 0
HcmV?d00001

diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
deleted file mode 100644
index 85594681..00000000
--- a/apollos-church-api/.envExample
+++ /dev/null
@@ -1,18 +0,0 @@
-ROCK_API=
-ROCK_TOKEN=
-BIBLE_API_KEY=
-ENGINE_API_KEY=
-CLOUDINARY_URL=
-ONE_SIGNAL_REST_KEY=
-PORT=4000
-ROOT_URL=http://localhost:4000
-
-TWILIO_ACCOUNT_SID=
-TWILIO_AUTH_TOKEN=
-TWILIO_FROM_NUMBER=
-
-
-PASS_WWDR_CERT=
-PASS_SIGNER_CERT=
-PASS_SIGNER_KEY=
-PASS_SIGNER_PASSPHRASE=
\ No newline at end of file
diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index b15b989c..93c0f8f5 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -94,3 +94,8 @@ storyLoader.js
 # generated markdown docs
 packages/**/docs/generated/*
 
+# shared secrets
+.env.shared
+
+# development database
+development.db
diff --git a/apollos-church-api/.npmignore b/apollos-church-api/.npmignore
deleted file mode 100644
index 93f39291..00000000
--- a/apollos-church-api/.npmignore
+++ /dev/null
@@ -1,2 +0,0 @@
-*
-!lib/**
diff --git a/apollos-church-api/.nvmrc b/apollos-church-api/.nvmrc
deleted file mode 100644
index 5b7269c0..00000000
--- a/apollos-church-api/.nvmrc
+++ /dev/null
@@ -1 +0,0 @@
-10.19.0
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index aed13e64..4decd07a 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.6.0-beta.0",
-    "environment": "api"
+  "version": "2.33.1",
+  "environment": "api"
 }
diff --git a/apollos-church-api/config.postgres.yml b/apollos-church-api/config.postgres.yml
new file mode 100644
index 00000000..f8b68c10
--- /dev/null
+++ b/apollos-church-api/config.postgres.yml
@@ -0,0 +1,240 @@
+# This file, in conjuction with your .env file,
+# should be used to configure the apollos server.
+
+# Any values you wish to keep secret should be placed in `.env`
+# You can access those values (and any other values in your environment)
+# using the ${VARIABLE_NAME} syntax
+
+# This file should be checked into version control.
+# `.env` should NOT be checked into version control.
+APP:
+  # This variable is used for generating deep links.
+  # It should match whatver is in your Info.plist `CFBundleURLTypes`
+  DEEP_LINK_HOST: ${DEEP_LINK_HOST}
+  UNIVERSAL_LINK_HOST: ${UNIVERSAL_LINK_HOST}
+  ROOT_API_URL: ${ROOT_URL}
+  JOBS_USERNAME: ${JOBS_USERNAME}
+  JOBS_PASSWORD: ${JOBS_PASSWORD}
+DATABASE:
+  URL: ${DATABASE_URL}
+BUGSNAG:
+  API_KEY: ${BUGSNAG_KEY}
+ROCK:
+  URL: ${ROCK_URL}
+  API_TOKEN: ${ROCK_TOKEN}
+UNIVERSAL_LINKS:
+  APPLE_APP_ID: ${APPLE_APP_ID}
+  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
+  APP_STORE_LINK: ${IOS_REDIRECT}
+  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
+  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
+  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
+ONE_SIGNAL:
+  APP_ID: ${ONE_SIGNAL_APP_ID}
+  REST_KEY: ${ONE_SIGNAL_REST_KEY}
+CHURCH_ONLINE:
+  URL: ${CHURCH_ONLINE_URL}
+  WEB_VIEW_URL: https://apollos.online.church/
+ALGOLIA:
+  APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
+  API_KEY: ${ALGOLIASEARCH_API_KEY}
+TWILIO:
+  ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
+  AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
+  FROM_NUMBER: ${TWILIO_FROM_NUMBER}
+PASS:
+  TEMPLATES:
+    CHECKIN: ${PWD}/wallet-passes/checkin.pass
+  CERTIFICATES:
+    WWDR: ${PASS_WWDR_CERT}
+    SIGNER_CERT: ${PASS_SIGNER_CERT}
+    SIGNER_KEY: ${PASS_SIGNER_KEY}
+    SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
+BIBLE_API:
+  KEY: ${BIBLE_API_KEY}
+  BIBLE_ID:
+    WEB: '9879dbb7cfe39e4d-01'
+    KJV: 'de4e12af7f28f599-02'
+CLOUDINARY:
+  URL: ${CLOUDINARY_URL}
+
+CONTENT:
+  SERMON_CHANNEL_ID: cbc0994a-97f1-471a-a7d5-4eff59d8a389
+  TYPES:
+    - ContentSeriesContentItem
+    - DevotionalContentItem
+    - MediaContentItem
+    - UniversalContentItem
+    - WeekendContentItem
+    - ContentItem
+
+
+TABS:
+  HOME:
+    - type: ActionBar
+      title: Welcome to Apollos
+      actions:
+        [
+          {
+            title: Check In,
+            icon: check,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+        ]
+    - algorithms:
+      - type: CONTENT_FEED
+        arguments:
+          channelIds:
+            - c7f43eb9-2200-4267-ab28-871e0d5e785f
+            - 3dfe7149-136b-4134-bd91-fdd935ef2221
+      type: HeroList
+      primaryAction:
+        # Right now, you hardcode exactly what GraphQL should return.
+        # Long term, we hope to have a more sophisticated mechanism for driving this field
+        action: OPEN_NODE
+        title: 'Read More'
+        relatedNode:
+          __typename: UniversalContentItem
+          id: a2c42d1d-98c8-46fb-aeea-603bc569cf7d
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - algorithms:
+        - type: CAMPAIGN_ITEMS
+          channelIds:
+            - 4b23ebc9-248e-4092-99f9-8829e1b6f1cc
+      type: HeroList
+      isFeatured: true
+      subtitle: Featured
+    - title: FOR YOU
+      algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+      subtitle: Explore what God calls you to today
+      type: ActionList
+    - algorithms: [SERIES_IN_PROGRESS]
+      subtitle: Continue
+      type: HorizontalCardList
+    - title: RECOMMENDED
+      algorithms: [SERMON_CHILDREN]
+      subtitle: For Him
+      type: VerticalCardList
+    - title: BULLETIN
+      subtitle: What's happening at apollos?
+      type: ActionList
+      algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 13
+        - type: UPCOMING_EVENTS
+
+  READ:
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - c7f43eb9-2200-4267-ab28-871e0d5e785f
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Podcast Messages
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          apollosId: ContentChannel:f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+          title: Podcast Messages
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - d9da719f-84ef-4cf0-9875-22fea4bf09eb
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Devotionals
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          apollosId: ContentChannel:d9da719f-84ef-4cf0-9875-22fea4bf09eb
+          title: Devotionals
+
+  WATCH:
+    - algorithms:
+        - type: LATEST_SERIES_CHILDREN
+          arguments:
+            channelId: 8f0a93f5-ccec-4cc1-8fd8-06afe5982f7b
+      type: HeroList
+      title: Catch up
+      subtitle: Latest Series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+      type: VerticalCardList
+      subtitle: All series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 8f0a93f5-ccec-4cc1-8fd8-06afe5982f7b
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Sermons
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Podcasts
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          apollosId: ContentChannel:f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+          title: Podcasts
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+            limit: 3
+      type: HorizontalCardList
+      title: Videos
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          apollosId: ContentChannel:f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+          title: Videos
+
+  PRAY:
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - type: VerticalPrayerList
+      title: Your Prayers
+  CONNECT:
+    - type: ActionTable
+      title: Connect to Apollos
+      actions:
+        [
+          {
+            title: Google,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+          {
+            title: Facebook,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.facebook.com' },
+          },
+        ]
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 7a3896b8..5ac0d92a 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -10,58 +10,34 @@
 APP:
   # This variable is used for generating deep links.
   # It should match whatver is in your Info.plist `CFBundleURLTypes`
-  DEEP_LINK_HOST: apolloschurchapp
+  DEEP_LINK_HOST: ${DEEP_LINK_HOST}
+  UNIVERSAL_LINK_HOST: ${UNIVERSAL_LINK_HOST}
   ROOT_API_URL: ${ROOT_URL}
   JOBS_USERNAME: ${JOBS_USERNAME}
   JOBS_PASSWORD: ${JOBS_PASSWORD}
+DATABASE:
+  URL: ${DATABASE_URL}
 BUGSNAG:
-  ## Optional, but you'll need to remove references to @apollosproject/bugsnag if you don't wish to use.
   API_KEY: ${BUGSNAG_KEY}
 ROCK:
-  API_URL: https://rock.apollos.app/api
+  URL: ${ROCK_URL}
   API_TOKEN: ${ROCK_TOKEN}
-  IMAGE_URL: https://rock.apollos.app/GetImage.ashx
-  SHARE_URL: https://rock.apollos.app
-  # This should match the timezone of the Rock server
-  TIMEZONE: 'America/New_York'
-  USE_PLUGIN: true
-  SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
 UNIVERSAL_LINKS:
-  # This should be your app's bundle ID, as found in your info.plist.
-  APPLE_APP_ID: org.reactjs.native.apolloschurchapp
-  # This should be your app's team ID, as found in Xcode
-  APPLE_TEAM_ID: 7TM8C6252Z
-  # Where should a user be redirected if they don't have your app installed?
-  APP_STORE_LINK: https://apollos.app/ios
-  PLAY_STORE_LINK: https://apollos.app/android
-  # Your app Id, as found in your app/build.gradle.
-  GOOGLE_APP_ID: com.apolloschurch.app
-  # https://docs.getsocial.im/knowledge-base/android-signing-key-sha256/
-  GOOGLE_KEYSTORE_SHA256: EC:6E:B5:5A:62:53:1E:53:FF:C4:BA:A7:CB:29:77:57:71:9D:65:2F:AF:69:41:A3:AD:2B:C4:55:A1:7A:07:03
+  APPLE_APP_ID: ${APPLE_APP_ID}
+  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
+  APP_STORE_LINK: ${IOS_REDIRECT}
+  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
+  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
+  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
 ONE_SIGNAL:
-  APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
+  APP_ID: ${ONE_SIGNAL_APP_ID}
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
-  URL: https://apollos.online.church/
-  MEDIA_URLS: []
+  URL: ${CHURCH_ONLINE_URL}
   WEB_VIEW_URL: https://apollos.online.church/
 ALGOLIA:
-  APPLICATION_ID: ${ALGOLIA_APP_ID}
-  API_KEY: ${ALGOLIA_API_KEY}
-  # TODO: should we support multiple indices? how
-  SEARCH_INDEX: test_ContentItem
-  # Configure Algolia custom settings here
-  # https://www.algolia.com/doc/api-reference/settings-api-parameters/
-  CONFIGURATION:
-    searchableAttributes:
-      - title
-      - unordered(summary)
-    #customRankings:
-    # NOT CURRENTLY INCLUDED
-    # This just demonstrates what's possible
-    # To include likedCount (or any other field) override search package
-    # and add field to config below
-    #- desc(likedCount)
+  APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
+  API_KEY: ${ALGOLIASEARCH_API_KEY}
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -74,36 +50,16 @@ PASS:
     SIGNER_CERT: ${PASS_SIGNER_CERT}
     SIGNER_KEY: ${PASS_SIGNER_KEY}
     SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
-ANALYTICS:
-  # Filling out these fields will automatically enable analytics tracking
-  # on the accompanying service
-  SEGMENT_KEY:
-  GA_ID:
-  USE_ROCK: true
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
   BIBLE_ID:
     WEB: '9879dbb7cfe39e4d-01'
     KJV: 'de4e12af7f28f599-02'
 CLOUDINARY:
-  # Cloudinary is used to improve image loading
-  # value should look something like
-  # cloudinary://123123123:adkfnla_adASDv_adAS@test
   URL: ${CLOUDINARY_URL}
-ENGINE:
-  API_KEY: ${ENGINE_API_KEY}
-  SCHEMA_TAG: ${ENGINE_SCHEMA_TAG}
 
 # This key holds various properties that allow our GraphQL server to map to your Rock Instance
 ROCK_MAPPINGS:
-  INTERACTIONS:
-    # Name of the InteractionChannel that will be created per EntityType
-    CHANNEL_NAME: Apollos App
-    # Prefix for the name of the InteractionComponent that will be created per Entity
-    COMPONENT_NAME: Apollos App Component
-    # 512 is "Mobile App"
-    CHANNEL_MEDIUM_TYPE_ID: 512
-
   CONTENT_ITEM:
     ContentSeriesContentItem:
       # When resolving "ContentSeriesContentItem" look in rock for a "ContentChannelItem"
@@ -112,13 +68,13 @@ ROCK_MAPPINGS:
       ContentChannelTypeId: [6]
     DevotionalContentItem:
       EntityType: ContentChannelItem
-      ContentChannelTypeId: []
+      ContentChannelId: [7]
     MediaContentItem:
       EntityType: ContentChannelItem
     UniversalContentItem:
       EntityType: ContentChannelItem
     WeekendContentItem:
-      ContentChannelId: []
+      ContentChannelId: [5]
       EntityType: ContentChannelItem
     ContentItem:
       EntityType: ContentChannelItem
@@ -127,176 +83,172 @@ ROCK_MAPPINGS:
     # Id of the category used to store all persona dataviews
     PersonaId: 210
 
-  # Apollos will pull these content channels and expose them in the app on the discover screen.
-  DISCOVER_CONTENT_CHANNEL_IDS:
+  ALL_CONTENT_CHANNELS:
     - 3
     - 5
     - 6
     - 8
-  # Apollos will pull content items from these channels and expose them on the user feed
-  # However, it will not expose the channel itself.
-  # These channels are also pulled when indexing searchable content.
-  FEED_CONTENT_CHANNEL_IDS:
-    - 6
-
-  CAMPAIGN_CHANNEL_IDS:
-    - 11
 
   SERMON_CHANNEL_ID: 5
 
-  SERVING_GROUP_TYPE_ID: 23
-  COMMUNITY_GROUP_TYPE_ID: 25
-  FAMILY_GROUP_TYPE_ID: 10
+TABS:
+  HOME:
+    - type: ActionBar
+      title: Welcome to Apollos
+      actions:
+        [
+          {
+            title: Check In,
+            icon: check,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+        ]
+    - algorithms:
+      - type: CONTENT_FEED
+        arguments:
+          channelIds:
+            - 6
+      type: HeroList
+      primaryAction:
+        # Right now, you hardcode exactly what GraphQL should return.
+        # Long term, we hope to have a more sophisticated mechanism for driving this field
+        action: OPEN_NODE
+        title: 'Read More'
+        relatedNode:
+          __typename: UniversalContentItem
+          id: 21
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - algorithms:
+        - type: CAMPAIGN_ITEMS
+          channelIds:
+            - 9
+      type: HeroList
+      isFeatured: true
+      subtitle: Featured
+    - title: FOR YOU
+      algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+      subtitle: Explore what God calls you to today
+      type: ActionList
+    - algorithms: [PERSONA_FEED]
+      subtitle: Continue
+      type: HorizontalCardList
+    - title: RECOMMENDED
+      algorithms: [SERMON_CHILDREN]
+      subtitle: For Him
+      type: VerticalCardList
+    - title: BULLETIN
+      subtitle: What's happening at apollos?
+      type: ActionList
+      algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 13
+        - type: UPCOMING_EVENTS
 
-  MOBILE_DEVICE_TYPE_ID: 671
+  READ:
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 7
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Devotionals
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 7
+          name: Devotionals
 
-HOME_FEATURES:
-  - algorithms: [USER_FEED]
-    type: HeroList
-    primaryAction:
-      # Right now, you hardcode exactly what GraphQL should return.
-      # Long term, we hope to have a more sophisticated mechanism for driving this field
-      action: OPEN_NODE
-      title: 'Read More'
-      relatedNode:
-        __typename: UniversalContentItem
-        id: 21
-  - algorithms: [DAILY_PRAYER]
-    isCard: false
-    type: PrayerList
-    title: Daily Prayer
-  - algorithms: [CAMPAIGN_ITEMS]
-    type: HeroList
-    isFeatured: true
-  - title: FOR YOU
-    algorithms: [SERMON_CHILDREN, PERSONA_FEED]
-    subtitle: Explore what God calls you to today
-    type: ActionList
-  - algorithms: [PERSONA_FEED]
-    subtitle: Continue
-    type: HorizontalCardList
-  - title: RECOMMENDED
-    algorithms: [SERMON_CHILDREN]
-    subtitle: For Him
-    type: VerticalCardList
-  - title: BULLETIN
-    subtitle: What's happening at apollos?
-    type: ActionList
-    algorithms:
-      - type: CONTENT_CHANNEL
-        arguments:
-          contentChannelId: 13
-      - type: UPCOMING_EVENTS
+  WATCH:
+    - algorithms:
+        - type: LATEST_SERIES_CHILDREN
+          arguments:
+            channelId: 4
+      type: HeroList
+      title: Catch up
+      subtitle: Latest Series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 4
+      type: VerticalCardList
+      subtitle: All series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 3
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Sermons
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 5
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Podcasts
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 5
+          name: Podcasts
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 6
+            limit: 3
+      type: HorizontalCardList
+      title: Videos
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 6
+          name: Videos
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 8
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Something Else
 
-# Default mapping of field types -> ids. There's probably no reason to edit this.
-ROCK_CONSTANTS:
-  TEXT: 1
-  MULTI_SELECT: 2
-  BOOLEAN: 3
-  COLOR: 4
-  SINGLE_SELECT: 6
-  INTEGER: 7
-  PAGE_REFERENCE: 8
-  IMAGE: 10
-  DATE: 11
-  DECIMAL: 14
-  DEFINED_TYPE: 15
-  DEFINED_VALUE: 16
-  PERSON: 18
-  HTML: 20
-  MEMO: 21
-  GROUP_TYPES: 22
-  GROUP: 23
-  CAMPUSES: 26
-  ENTITY_TYPE: 29
-  CAMPUS: 30
-  EMAIL_TEMPLATE: 31
-  FILE: 32
-  GROUP_TYPE: 33
-  KEY_VALUE_LIST: 34
-  BINARY_FILE_TYPE: 35
-  WORKFLOW_TYPE: 36
-  BINARY_FILE: 37
-  FINANCIAL_ACCOUNT: 38
-  FINANCIAL_ACCOUNTS: 39
-  COMPONENT: 40
-  COMPONENTS: 41
-  CATEGORIES: 42
-  GROUP_ROLE: 43
-  CATEGORY: 44
-  LOCATION: 45
-  DATE_RANGE: 46
-  DECIMAL_RANGE: 47
-  INTEGER_RANGE: 48
-  TIME: 49
-  GROUP_LOCATION_TYPE: 50
-  CODE_EDITOR: 51
-  PERSON_BADGES: 52
-  SITE: 53
-  COMMUNICATION_TEMPLATE: 54
-  DAY_OF_WEEK: 55
-  DAYS_OF_WEEK: 56
-  REMOTE_AUTHS: 57
-  COMPARISON: 58
-  METRIC_ENTITY: 59
-  WORKFLOW_ACTIVITY: 60
-  WORKFLOW_ATTRIBUTE: 61
-  METRICS: 62
-  ENTITY: 63
-  METRIC_CATEGORIES: 64
-  WORKFLOW_TEXT_OR_ATTRIBUTE: 65
-  SLIDING_DATE_RANGE: 66
-  GROUP_TYPE_GROUP: 67
-  SECURITY_ROLE: 68
-  VALUE_LIST: 69
-  CURRENCY: 70
-  EMAIL: 71
-  URL_LINK: 72
-  WORKFLOW_TYPES: 73
-  ATTRIBUTE: 74
-  SCHEDULES: 75
-  CONTENT_CHANNEL: 76
-  AUDIO_FILE: 77
-  AUDIO_URL: 78
-  VIDEO_FILE: 79
-  VIDEO_URL: 80
-  ENCRYPTED_TEXT: 81
-  FILTER_DATE: 82
-  DATE_TIME: 83
-  DEFINED_VALUE_RANGE: 84
-  RATING: 85
-  SYSTEM_EMAIL: 86
-  FINANCIAL_GATEWAY: 87
-  GROUP_AND_ROLE: 88
-  NOTE_TYPE: 89
-  NOTE_TYPES: 90
-  EVENT_CALENDAR: 91
-  EVENT_ITEM: 92
-  CONNECTION_ACTIVITY_TYPE: 93
-  CONNECTION_OPPORTUNITY: 94
-  CONNECTION_REQUEST: 95
-  CONNECTION_STATE: 96
-  CONNECTION_STATUS: 97
-  CONNECTION_TYPE: 98
-  CONNECTION_TYPES: 99
-  MERGE_TEMPLATE: 100
-  RANGE_SLIDER: 101
-  BINARY_FILE_TYPES: 102
-  MARKDOWN: 103
-  DATA_VIEW: 104
-  PHONE_NUMBER: 105
-  SCHEDULE: 106
-  LAVA_COMMANDS: 107
-  ADDRESS: 108
-  BENEVOLENCE_REQUEST: 109
-  CONTENT_CHANNEL_TYPES: 110
-  WORKFLOW: 111
-  SSN: 112
-  MATRIX: 113
-  LAVA: 114
-  DATA_VIEWS: 115
-  COMMUNICATION_PREFERENCE: 116
-  INTERACTION_CHANNEL: 117
-  GROUP_MEMBER: 118
-  TIME_ZONE: 119
-  LABEL: 120
+  PRAY:
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - type: VerticalPrayerList
+      title: Your Prayers
+  CONNECT:
+    - type: ActionTable
+      title: Connect to Apollos
+      actions:
+        [
+          {
+            title: Google,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+          {
+            title: Facebook,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.facebook.com' },
+          },
+        ]
\ No newline at end of file
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
deleted file mode 100644
index cdd63087..00000000
--- a/apollos-church-api/local.graphql
+++ /dev/null
@@ -1,715 +0,0 @@
-directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE
-
-enum ACTION_FEATURE_ACTION {
-  READ_CONTENT
-  READ_EVENT
-  OPEN_URL
-  OPEN_NODE
-}
-
-type ActionListAction {
-  id: ID!
-  title: String
-  subtitle: String
-  image: ImageMedia
-  relatedNode: Node
-  action: ACTION_FEATURE_ACTION
-}
-
-type ActionListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  actions: [ActionListAction]
-  primaryAction: FeatureAction
-}
-
-input AnalyticsDeviceInfo {
-  platform: AnalyticsPlatform
-  deviceId: String
-  deviceModel: String
-  osVersion: String
-  appVersion: String
-}
-
-input AnalyticsIdentifyInput {
-  traits: [AnalyticsMetaField]
-  anonymousId: String!
-  deviceInfo: AnalyticsDeviceInfo
-}
-
-input AnalyticsMetaField {
-  field: String!
-  value: AnalyticsValue
-}
-
-enum AnalyticsPlatform {
-  iOS
-  Android
-}
-
-type AnalyticsResult {
-  success: Boolean
-}
-
-input AnalyticsTrackInput {
-  eventName: String!
-  properties: [AnalyticsMetaField]
-  anonymousId: String
-  deviceInfo: AnalyticsDeviceInfo
-}
-
-scalar AnalyticsValue
-
-type AudioMedia implements Media {
-  name: String
-  key: String
-  sources: [AudioMediaSource]
-}
-
-type AudioMediaSource implements MediaSource {
-  uri: String
-}
-
-interface AudioNode {
-  audios: [AudioMedia]
-}
-
-type AuthenticatedUser {
-  id: ID!
-  profile: Person
-  rock: RockPersonDetails
-  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
-}
-
-type Authentication {
-  user: AuthenticatedUser
-  token: String
-}
-
-enum CacheControlScope {
-  PUBLIC
-  PRIVATE
-}
-
-type Campus implements Node {
-  id: ID!
-  name: String
-  street1: String
-  street2: String
-  city: String
-  state: String
-  postalCode: String
-  latitude: Float
-  longitude: Float
-  image: ImageMediaSource
-  distanceFromLocation(location: CampusLocationInput): Float
-  events: [Event]
-}
-
-input CampusLocationInput {
-  latitude: Float
-  longitude: Float
-}
-
-interface Card {
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  summary: String
-}
-
-type CardListItem {
-  id: ID!
-  hasAction: Boolean
-  actionIcon: String
-  labelText: String
-  summary: String
-  coverImage: ImageMedia
-  title(hyphenated: Boolean): String
-  relatedNode: Node
-  action: ACTION_FEATURE_ACTION
-}
-
-"""A rgb color string"""
-scalar Color
-
-type ContentChannel implements Node {
-  id: ID!
-  name: String
-  description: String
-  childContentChannels: [ContentChannel]
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  iconName: String
-}
-
-interface ContentChildNode {
-  parentChannel: ContentChannel
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-}
-
-interface ContentItem {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-type ContentItemsConnection {
-  edges: [ContentItemsConnectionEdge]
-  totalCount: Int
-  pageInfo: PaginationInfo
-}
-
-type ContentItemsConnectionEdge {
-  node: ContentItem
-  cursor: String
-}
-
-input ContentItemsConnectionInput {
-  first: Int
-  after: String
-}
-
-interface ContentNode {
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  htmlContent: String
-}
-
-interface ContentParentNode {
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-}
-
-type ContentSeriesContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ProgressNode & LikableNode & ShareableNode & FeaturesNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  percentComplete: Float
-  upNext: ContentItem
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-  features: [Feature]
-}
-
-type Device implements Node {
-  id: ID!
-  pushId: String!
-  notificationsEnabled: Boolean!
-}
-
-type DevotionalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-type Event implements Node {
-  id: ID!
-  name: String
-  description: String
-  location: String
-  start: String
-  end: String
-  image: ImageMedia
-}
-
-interface Feature {
-  id: ID!
-  order: Int
-}
-
-type FeatureAction {
-  relatedNode: Node
-  action: ACTION_FEATURE_ACTION
-  title: String
-}
-
-interface FeaturesNode {
-  features: [Feature]
-}
-
-enum GENDER {
-  Male
-  Female
-  Unknown
-}
-
-type Group implements Node {
-  id: ID!
-  name: String
-  leader: Person @deprecated(reason: "No longer used, use 'leaders' instead")
-  leaders: [Person]
-  members: [Person]
-}
-
-enum GROUP_TYPE {
-  Serving
-  Community
-  Family
-}
-
-type HeroListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  actions: [ActionListAction]
-  heroCard: CardListItem
-  primaryAction: FeatureAction
-}
-
-type HorizontalCardListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  cards: [CardListItem]
-}
-
-type ImageMedia implements Media {
-  name: String
-  key: String
-  sources: [ImageMediaSource]
-}
-
-type ImageMediaSource implements MediaSource {
-  uri: String
-}
-
-enum InteractionAction {
-  VIEW
-  COMPLETE
-  PRAY
-}
-
-input InteractionDataField {
-  field: String!
-  value: InteractionValue
-}
-
-type InteractionResult {
-  success: Boolean
-  node: Node
-}
-
-scalar InteractionValue
-
-interface LikableNode {
-  isLiked: Boolean
-  likedCount: Int
-}
-
-enum LIKE_OPERATION {
-  Like
-  Unlike
-}
-
-input LikeEntityInput {
-  nodeId: ID!
-  operation: LIKE_OPERATION!
-}
-
-interface LiveNode {
-  liveStream: LiveStream
-}
-
-type LiveStream {
-  isLive: Boolean
-  eventStartTime: String
-  media: VideoMedia
-  webViewUrl: String
-  contentItem: ContentItem
-}
-
-interface Media {
-  name: String
-  key: String
-  sources: [MediaSource]
-}
-
-type MediaContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-enum MediaInputType {
-  IMAGE
-  VIDEO
-  AUDIO
-}
-
-interface MediaSource {
-  uri: String
-}
-
-type Mutation {
-  _placeholder: Boolean
-  updateLikeEntity(input: LikeEntityInput!): ContentItem @deprecated(reason: "Use the more general updateLikeNode instead")
-  updateLikeNode(input: LikeEntityInput!): Node
-  updateProfileField(input: UpdateProfileInput!): Person
-  updateProfileFields(input: [UpdateProfileInput]!): Person
-  uploadProfileImage(file: Upload!, size: Int!): Person
-  authenticate(identity: String!, password: String!): Authentication
-  changePassword(password: String!): Authentication
-  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
-  requestSmsLoginPin(phoneNumber: String!): SmsPinResult
-  authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
-  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
-  interactWithNode(action: InteractionAction!, nodeId: ID!, data: [InteractionDataField]): InteractionResult
-  identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
-  trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
-  updateUserPushSettings(input: PushSettingsInput!): Person
-  updateUserCampus(campusId: String!): Person
-  addPrayer(text: String!, isAnonymous: Boolean): PrayerRequest
-}
-
-interface Node {
-  id: ID!
-}
-
-type PaginationInfo {
-  startCursor: String
-  endCursor: String
-}
-
-type Pass implements Node {
-  id: ID!
-  type: PassType
-  description: String
-  logo: ImageMediaSource
-  thumbnail: ImageMediaSource
-  barcode: ImageMediaSource
-  primaryFields: [PassField]
-  secondaryFields: [PassField]
-  backgroundColor: Color
-  foregroundColor: Color
-  labelColor: Color
-  logoText: String
-  passkitFileUrl: String
-}
-
-type PassField {
-  key: String!
-  label: String
-  value: String!
-  textAlignment: PassFieldTextAlignment
-}
-
-enum PassFieldTextAlignment {
-  LEFT
-  CENTER
-  RIGHT
-  NATURAL
-}
-
-enum PassType {
-  GENERIC
-}
-
-type Person implements Node {
-  id: ID!
-  firstName: String
-  lastName: String
-  nickName: String
-  email: String
-  gender: GENDER
-  birthDate: String
-  photo: ImageMediaSource
-  devices: [Device]
-  campus: Campus
-  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
-}
-
-type PrayerListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  isCard: Boolean
-  title: String
-  subtitle: String
-  prayers: [PrayerRequest]
-}
-
-type PrayerRequest implements Node {
-  id: ID!
-  text: String!
-  requestor: Person
-  isAnonymous: Boolean
-  isPrayed: Boolean
-}
-
-interface ProgressNode {
-  percentComplete: Float
-  upNext: ContentItem
-}
-
-input PushSettingsInput {
-  enabled: Boolean
-  pushProviderUserId: String
-}
-
-type Query {
-  _placeholder: Boolean
-  node(id: ID!): Node
-  likedContent(first: Int, after: String): ContentItemsConnection
-  contentChannels: [ContentChannel]
-  campaigns: ContentItemsConnection
-  userFeed(first: Int, after: String): ContentItemsConnection
-  personaFeed(first: Int, after: String): ContentItemsConnection
-  currentUser: AuthenticatedUser
-  userExists(identity: String): USER_AUTH_STATUS
-  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
-  liveStreams: [LiveStream]
-  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
-  scriptures(query: String!, version: VERSION): [Scripture]
-  userPass: Pass
-  search(query: String!, first: Int, after: String): SearchResultsConnection
-  campuses(location: CampusLocationInput): [Campus]
-  userFeedFeatures: [Feature]
-}
-
-type RockPersonDetails {
-  authToken: String
-  authCookie: String
-}
-
-type Scripture implements Node {
-  id: ID!
-  html: String
-  reference: String
-  copyright: String
-  version: String
-}
-
-type ScriptureFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  scriptures: [Scripture]
-  sharing: SharableFeature
-}
-
-interface ScriptureNode {
-  scriptures: [Scripture]
-}
-
-type SearchResult {
-  cursor: String
-  title: String
-  summary: String
-  coverImage: ImageMedia
-  node: Node
-}
-
-type SearchResultsConnection {
-  edges: [SearchResult]
-  pageInfo: PaginationInfo
-}
-
-interface Sharable {
-  message: String
-  title: String
-  url: String @deprecated(reason: "Not supported on the interface")
-}
-
-type SharableContentItem implements Sharable {
-  message: String
-  title: String
-  url: String
-}
-
-type SharableFeature implements Sharable {
-  message: String
-  title: String
-  url: String @deprecated(reason: "Not supported on a feature")
-}
-
-interface ShareableNode {
-  sharing: SharableContentItem
-}
-
-type SmsPinResult {
-  success: Boolean
-  userAuthStatus: USER_AUTH_STATUS
-}
-
-type TextFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  body: String
-  sharing: SharableFeature
-}
-
-type Theme {
-  type: ThemeType
-  colors: ThemeColors
-}
-
-type ThemeColors {
-  primary: Color
-  secondary: Color
-  screen: Color
-  paper: Color
-  alert: Color
-}
-
-interface ThemedNode {
-  theme: Theme
-}
-
-enum ThemeType {
-  LIGHT
-  DARK
-}
-
-type UniversalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & ShareableNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-enum UPDATEABLE_PROFILE_FIELDS {
-  FirstName
-  LastName
-  Email
-  NickName
-  Gender
-  BirthDate
-}
-
-input UpdateProfileInput {
-  field: UPDATEABLE_PROFILE_FIELDS!
-  value: String!
-}
-
-"""The `Upload` scalar type represents a file upload."""
-scalar Upload
-
-type Url implements Node {
-  url: String
-  id: ID!
-}
-
-enum USER_AUTH_STATUS {
-  NONE
-  NEW_APP_USER
-  EXISTING_APP_USER
-}
-
-enum VERSION {
-  WEB
-  KJV
-}
-
-type VerticalCardListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  isFeatured: Boolean
-  cards: [CardListItem]
-}
-
-type VideoMedia implements Media {
-  name: String
-  key: String
-  sources: [VideoMediaSource]
-  embedHtml: String
-}
-
-type VideoMediaSource implements MediaSource {
-  uri: String
-}
-
-interface VideoNode {
-  videos: [VideoMedia]
-}
-
-type WebviewFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  linkText: String
-  title: String
-  url: String
-}
-
-type WeekendContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & LiveNode & ShareableNode & FeaturesNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  isLiked: Boolean
-  likedCount: Int
-  liveStream: LiveStream
-  sharing: SharableContentItem
-  features: [Feature]
-}
-
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index f3666174..de32f786 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -4,80 +4,51 @@
   "private": true,
   "main": "lib/index.js",
   "scripts": {
-    "init": "./scripts/init.sh",
-    "start": "./scripts/generateLocalSchema.sh & yarn start:dev",
+    "setup": "./scripts/init.sh",
+    "migrator": "node ./lib/migrator.js",
+    "start": "NODE_ENV=production node ./lib/index.js",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
-    "start:prod": "NODE_ENV=production node ./lib/index.js",
     "postinstall": "yarn build",
-    "link-packages": "node ./scripts/link-packages",
-    "unlink-packages": "node ./scripts/link-packages remove",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
     "lint": "eslint ./src --ext .js",
-    "fixlint": "eslint ./src --ext .js --fix",
-    "codecov": "cat ./coverage/lcov.info | codecov",
-    "version": "node ../../scripts/update-apollos-version.js && git add apollos.json",
-    "schema-diff": "./scripts/schemaDiff.sh",
-    "schema-lint": "graphql-schema-linter local.graphql",
-    "upgrade": "npx @apollosproject/upgrade-tools upgrade",
-    "latest": "./scripts/add-packages.sh",
-    "beta": "./scripts/add-packages.sh beta",
-    "canary": "./scripts/add-packages.sh canary"
+    "translate": "node scripts/translate.js"
   },
   "engines": {
-    "node": ">=8.11.x"
-  },
-  "jest": {
-    "collectCoverage": true,
-    "collectCoverageFrom": [
-      "src/**/*.{js,jsx}"
-    ],
-    "testMatch": [
-      "<rootDir>/src/**/__tests__/**/*.{js,jsx,mjs}",
-      "<rootDir>/src/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
-    ],
-    "testEnvironment": "node",
-    "reporters": [
-      "<rootDir>/../../scripts/fingers-crossed-reporter.js"
-    ]
+    "node": ">=14"
   },
   "dependencies": {
-    "@apollosproject/bugsnag": "^1.6.0-beta.0",
-    "@apollosproject/config": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-algolia-search": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-analytics": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-bible": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-church-online": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-cloudinary": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-onesignal": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-passes": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-redis-cache": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-rock": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-twilio": "^1.6.0-beta.0",
-    "@apollosproject/data-schema": "^1.6.0-beta.0",
-    "@apollosproject/rock-apollo-data-source": "^1.6.0-beta.0",
-    "@apollosproject/server-core": "^1.6.0-beta.0",
-    "apollo-server": "^2.14.2",
+    "@apollosproject/config": "^2.33.1",
+    "@apollosproject/data-connector-algolia-search": "^2.33.1",
+    "@apollosproject/data-connector-analytics": "^2.33.1",
+    "@apollosproject/data-connector-bible": "^2.33.1",
+    "@apollosproject/data-connector-church-online": "^2.33.1",
+    "@apollosproject/data-connector-cloudinary": "^2.33.1",
+    "@apollosproject/data-connector-onesignal": "^2.33.1",
+    "@apollosproject/data-connector-passes": "^2.33.1",
+    "@apollosproject/data-connector-postgres": "^2.33.1",
+    "@apollosproject/data-connector-redis-cache": "^2.33.1",
+    "@apollosproject/data-connector-rock": "^2.33.1",
+    "@apollosproject/data-connector-twilio": "^2.33.1",
+    "@apollosproject/data-schema": "^2.33.1",
+    "@apollosproject/rock-apollo-data-source": "^2.33.1",
+    "@apollosproject/server-core": "^2.33.1",
+    "apollo-server": "^2.24.1",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
     "dotenv": "6.0.0",
     "express": "^4.17.0",
     "graphql": "14.6.0",
-    "prettier": "1.12.1",
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^1.6.0-beta.0",
-    "@apollosproject/babel-preset-apollos": "^1.6.0-beta.0",
-    "@apollosproject/eslint-config": "^1.6.0-beta.0",
+    "@apollosproject/apollo-server-env-mock": "^2.33.0",
+    "@apollosproject/babel-preset-apollos": "^2.33.0",
+    "@apollosproject/eslint-config": "^2.33.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
-    "@entria/graphql-findbreakingchanges": "^1.0.1",
     "babel-eslint": "^10.0.3",
-    "babel-jest": "^24.9.0",
-    "babel-plugin-module-resolver": "^3.2.0",
-    "codecov": "3.7.1",
     "eslint": "^5.16.0",
     "eslint-config-airbnb-base": "^14.0.0",
     "eslint-config-prettier": "^2.9.0",
@@ -86,9 +57,8 @@
     "eslint-plugin-import": "^2.12.0",
     "eslint-plugin-jest": "^21.15.2",
     "eslint-plugin-prettier": "^2.6.0",
-    "get-graphql-schema": "^2.1.2",
-    "graphql-schema-linter": "^0.2.0",
     "linkemon": "^0.1.1",
-    "nodemon": "^2.0.2"
+    "nodemon": "1.18.7",
+    "prettier": "1.12.1"
   }
 }
diff --git a/apollos-church-api/scripts/add-packages.sh b/apollos-church-api/scripts/add-packages.sh
deleted file mode 100755
index ca37cb73..00000000
--- a/apollos-church-api/scripts/add-packages.sh
+++ /dev/null
@@ -1,25 +0,0 @@
-# get list of apollosproject packages to update
-
-# get devDependencies line number
-DEVDEPSLINE=$(grep -n "devDependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
-
-# get dependecies line number
-DEPSLINE=$(grep -n "dependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
-
-# determine what npm tag to update to
-[[ $1 = "canary" ]] && TAG=canary || [[ $1 = "beta" ]] && TAG=beta || TAG=latest
-
-# replace package names with version tag
-JSON=$(sed -E "s/^.*\"(@apollosproject\/[a-z\-]+)\".*$/\1@$TAG /g" package.json)
-
-# if packages are listed first and dev packages second...
-if [ $DEVDEPSLINE -gt $DEPSLINE ]
-then
-		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE","$DEVDEPSLINE"p | grep "@apollosproject" | tr -d "\n")
-		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
-else
-		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
-		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE","$DEPSLINE"p | grep "@apollosproject" | tr -d "\n")
-fi
-yarn add --dev $DEVPKGS --ignore-scripts
-yarn add $PKGS --ignore-scripts
diff --git a/apollos-church-api/scripts/generateLocalSchema.sh b/apollos-church-api/scripts/generateLocalSchema.sh
deleted file mode 100755
index d8008f25..00000000
--- a/apollos-church-api/scripts/generateLocalSchema.sh
+++ /dev/null
@@ -1,28 +0,0 @@
-PING_SERVER="curl 'http://localhost:4000/graphql' -H 'content-type: application/json' -H 'accept: application/json' --data-binary '{\"query\":\"{_placeholder}\"}' > /dev/null 2>&1"
-
-if eval "$PING_SERVER"; then
-  echo 'Server running, downloading schema from localhost:4000'
-  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
-  echo 'Done. Check local.graphql'
-else
-  echo $*
-  if [ "$*" = "--start-server" ]; then
-    echo 'Server not running, starting server'
-    PORT=4000 npm run start:prod > /tmp/server-log.txt &
-    SERVER_PID=$!
-    echo "Server running... (PID $SERVER_PID)"
-  fi
-  sleep 1
-  until eval "$PING_SERVER"; do
-      sleep 1
-      echo 'Waiting for server to boot....'
-  done
-  echo 'Curling Server for most recent schema.'
-  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
-  echo 'Publishing Schema to Apollo Engine.'
-  npx apollo schema:publish --endpoint=http://localhost:4000
-  if [ "$*" = "--start-server" ]; then
-    echo "Killing Server (PID $SERVER_PID)"
-    kill -9 $SERVER_PID
-  fi
-fi
diff --git a/apollos-church-api/scripts/init.sh b/apollos-church-api/scripts/init.sh
index 474bfae5..b0a810e5 100755
--- a/apollos-church-api/scripts/init.sh
+++ b/apollos-church-api/scripts/init.sh
@@ -3,5 +3,24 @@ if test -f .env; then
 	echo ".env file already exists!"
 	exit 1
 fi
-echo "ROCK_API=
-ROCK_TOKEN=" > .env
+
+echo "You will need the following before beginning:
+Rock URL
+Rock API Token
+
+Are you ready to proceed? [y/n]: "
+read -r ANSWER
+if $ANSWER != "y"; then
+	exit 1
+fi
+
+echo "Rock URL: "
+read -r ROCK_URL
+echo "Rock API Token: "
+read -r ROCK_TOKEN
+
+echo "ROCK_URL=$ROCK_URL
+ROCK_TOKEN=$ROCK_TOKEN" >.env
+
+# remove template encrypted files
+rm .env.shared.enc
diff --git a/apollos-church-api/scripts/link-packages.js b/apollos-church-api/scripts/link-packages.js
deleted file mode 100644
index 7778c0a4..00000000
--- a/apollos-church-api/scripts/link-packages.js
+++ /dev/null
@@ -1,16 +0,0 @@
-const fs = require('fs');
-const { execSync } = require('child_process');
-
-const direction = process.argv[2] || 'link';
-
-const packageJson = JSON.parse(fs.readFileSync(`${__dirname}/../package.json`));
-
-const dependencies = [
-  ...Object.keys(packageJson.dependencies),
-  ...Object.keys(packageJson.devDependencies),
-].filter((d) => d.includes('@apollosproject'));
-
-dependencies.forEach((dep) => {
-  const output = execSync(`yalc ${direction} ${dep}`, { encoding: 'utf8' });
-  console.log(output);
-});
diff --git a/apollos-church-api/scripts/schemaDiff.sh b/apollos-church-api/scripts/schemaDiff.sh
deleted file mode 100755
index 67404e4b..00000000
--- a/apollos-church-api/scripts/schemaDiff.sh
+++ /dev/null
@@ -1,13 +0,0 @@
-#!/usr/bin/env bash
-sh ./scripts/generateLocalSchema.sh --start-server
-./node_modules/.bin/get-graphql-schema https://apollos-church-api-herokuapp-com.global.ssl.fastly.net > prod.graphql
-DIFF=$(graphql-findbreakingchanges prod.graphql local.graphql)
-rm prod.graphql
-echo "$DIFF"
-
-if [[ ! $DIFF = *"NO BREAKING CHANGES"* ]]
-then
-  exit 1
-else
-  exit 0
-fi
diff --git a/apollos-church-api/scripts/translate.js b/apollos-church-api/scripts/translate.js
new file mode 100644
index 00000000..af1db91d
--- /dev/null
+++ b/apollos-church-api/scripts/translate.js
@@ -0,0 +1,15 @@
+const {
+  createGlobalId,
+  parseGlobalId,
+} = require('@apollosproject/server-core');
+
+const [id] = process.argv.slice(2);
+if (!id) {
+  console.log(
+    'Pass Rock or Apollos ID: translate.js AuthenticatedUser:8sad98fd89sadf98uasdf'
+  );
+  process.exit(1);
+}
+
+if (id.includes(':')) console.log(parseGlobalId(id).id);
+else console.log(createGlobalId(id, 'Generic').split(':')[1]);
diff --git a/apollos-church-api/src/config.js b/apollos-church-api/src/config.js
index 59a48535..53b6558c 100644
--- a/apollos-church-api/src/config.js
+++ b/apollos-church-api/src/config.js
@@ -1,7 +1,48 @@
 import path from 'path';
-import dotenv from 'dotenv/config'; // eslint-disable-line
+import fetch from 'node-fetch';
+import dotenv from "dotenv/config"; // eslint-disable-line
 import ApollosConfig from '@apollosproject/config';
 
 ApollosConfig.loadYaml({
-  configPath: path.join(__dirname, '..', 'config.yml'),
+  configPath: path.join(
+    __dirname,
+    '..',
+    process.env.DATABASE_CONTENT === 'true'
+      ? 'config.postgres.yml'
+      : 'config.yml'
+  ),
 });
+
+// defaults
+ApollosConfig.loadJs({
+  ROCK: { TIMEZONE: ApollosConfig?.ROCK?.TIMEZONE || 'America/New_York' },
+});
+
+// autodetect some settings
+(async () => {
+  if (!ApollosConfig.ROCK) return;
+  if (!ApollosConfig.ROCK.URL || !ApollosConfig.ROCK.API_TOKEN)
+    throw new Error('ROCK_URL and ROCK_TOKEN variables are required!');
+
+  let res;
+
+  // plugin
+  res = await fetch(
+    `${ApollosConfig.ROCK.URL}/api/RestControllers?$select=Name`,
+    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
+  );
+  const hasPlugin = (await res.json())
+    .map(({ Name }) => Name)
+    .includes('Apollos');
+  if (hasPlugin) console.log('Apollos Rock plugin detected!');
+  ApollosConfig.loadJs({ ROCK: { USE_PLUGIN: hasPlugin } });
+
+  // version
+  res = await fetch(
+    `${ApollosConfig.ROCK.URL}/api/Utility/GetRockSemanticVersionNumber`,
+    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
+  );
+  const version = (await res.text()).split('.');
+  console.log(`Rock Version: ${version[1]}`);
+  ApollosConfig.loadJs({ ROCK: { VERSION: version[1] } });
+})();
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index feab7bb1..b9886fb3 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -18,7 +18,6 @@ import {
   Followings,
   Interactions,
   RockConstants,
-  Person,
   ContentItem,
   ContentChannel,
   Sharable,
@@ -28,23 +27,31 @@ import {
   AuthSms,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
+  FeatureFeed,
+  ActionAlgorithm,
   Event,
   PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
 } from '@apollosproject/data-connector-rock';
+
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
+// This is to mock any postgres resolvers so we don't throw API errors for unresolved
+// typedefs
+import NoPostgres from './noPostgres';
+
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
-  Person,
   Cloudinary,
   Auth,
   AuthSms,
@@ -64,11 +71,16 @@ const data = {
   Template,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
+  FeatureFeed,
+  ActionAlgorithm,
   Event,
   Cache,
   PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
+  NoPostgres,
 };
 
 const {
@@ -78,6 +90,7 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -87,6 +100,7 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
new file mode 100644
index 00000000..1fdc489e
--- /dev/null
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -0,0 +1,161 @@
+import { gql } from 'apollo-server';
+
+import {
+  createApolloServerConfig,
+  Interfaces,
+} from '@apollosproject/server-core';
+
+import * as Analytics from '@apollosproject/data-connector-analytics';
+import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
+import * as Search from '@apollosproject/data-connector-algolia-search';
+import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
+import * as Sms from '@apollosproject/data-connector-twilio';
+import {
+  Followings,
+  Interactions as RockInteractions,
+  RockConstants,
+  Sharable,
+  Auth,
+  PersonalDevice,
+  Template,
+  AuthSms,
+  Group,
+  BinaryFiles,
+  FeatureFeed,
+  Event,
+  PrayerRequest,
+  Person as RockPerson,
+  ContentItem as RockContentItem,
+  Campus as RockCampus,
+  ContentChannel,
+  Feature as RockFeature,
+  ActionAlgorithm as RockActionAlgorithm,
+} from '@apollosproject/data-connector-rock';
+
+import {
+  Comment,
+  UserFlag,
+  UserLike,
+  Follow,
+  Interactions,
+  Likes,
+  Notification,
+  NotificationPreference,
+  Tag,
+  Campus,
+  Person as PostgresPerson,
+  Media as PostgresMedia,
+  Feature as PostgresFeature,
+  ContentItem as PostgresContentItem,
+  ContentItemsConnection,
+  ContentItemCategory,
+  ActionAlgorithm as PostgresActionAlgorithm,
+  PrayerRequest as PostgresPrayerRequest,
+} from '@apollosproject/data-connector-postgres';
+
+import * as Theme from './theme';
+
+// This modules ties together certain updates so they occurs in both Rock and Postgres.
+// Will be eliminated in the future through an enhancement to the Shovel
+import {
+  Person,
+  OneSignal,
+  PostgresDefaultCampusOverride,
+  RockDefaultCampusOverride,
+} from './rockWithPostgres';
+
+const postgresContentModules = {
+  Interactions,
+  Likes,
+  ActionAlgorithm: PostgresActionAlgorithm,
+  Feature: PostgresFeature,
+  PostgresMedia,
+  Tag,
+  ContentItem: PostgresContentItem,
+  ContentItemsConnection,
+  ContentChannel: ContentItemCategory,
+  PrayerRequest: PostgresPrayerRequest,
+  RockCampus: { dataSource: RockCampus.dataSource },
+  Campus,
+  PostgresDefaultCampusOverride,
+};
+
+const rockContentModules = {
+  Interactions: RockInteractions,
+  Followings,
+  ActionAlgorithm: RockActionAlgorithm,
+  Feature: RockFeature,
+  ContentItem: RockContentItem,
+  ContentChannel,
+  PrayerRequest,
+  PostgresCampus: { dataSource: Campus.dataSource },
+  Campus: RockCampus,
+  RockDefaultCampusOverride,
+};
+
+const data = {
+  Interfaces,
+  FeatureFeed,
+  RockPerson, // This entry needs to come before (postgres) Person
+  BinaryFiles, // This entry needs to come before (postgres) Person
+  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
+  ...(process.env.DATABASE_CONTENT
+    ? postgresContentModules
+    : rockContentModules),
+  Cloudinary,
+  Auth,
+  AuthSms,
+  Sms,
+  LiveStream,
+  Theme,
+  Scripture,
+  RockConstants,
+  Sharable,
+  Analytics,
+  PersonalDevice,
+  Pass,
+  Search,
+  Template,
+  Group,
+  Event,
+  Cache,
+  Comment,
+  UserLike,
+  UserFlag,
+  Follow,
+  Notification,
+  NotificationPreference,
+  OneSignal,
+  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
+};
+
+const {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+} = createApolloServerConfig(data);
+
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+};
+
+// the upload Scalar is added
+export const testSchema = [
+  gql`
+    scalar Upload
+  `,
+  ...schema,
+];
diff --git a/apollos-church-api/src/data/noPostgres.js b/apollos-church-api/src/data/noPostgres.js
new file mode 100644
index 00000000..bd292eac
--- /dev/null
+++ b/apollos-church-api/src/data/noPostgres.js
@@ -0,0 +1,46 @@
+// The purpose of this file is to mock the postgres resolvers to null so the API doesn't fail when
+// there's no database. This will not be necessary when Postgres is required by all Apollos APIs.
+import gql from 'graphql-tag';
+import { Comment, Follow } from '@apollosproject/data-connector-postgres';
+
+export default {
+  schema: gql`
+    ${Comment.schema}
+    ${Follow.schema}
+  `,
+  resolver: {
+    Query: {
+      followRequests: () => [],
+      suggestedFollows: () => [],
+      searchPeople: () => {},
+    },
+    Mutation: {
+      addComment: () => null,
+      flagComment: () => null,
+      requestFollow: () => null,
+      acceptFollowRequest: () => null,
+      ignoreFollowRequest: () => null,
+    },
+    Comment: {
+      person: () => null,
+      id: () => null,
+    },
+    CommentListFeature: {
+      id: () => null,
+    },
+    AddCommentFeature: {
+      id: () => null,
+      initialPrompt: () => null,
+      addPrompt: () => null,
+      relatedNode: () => null,
+    },
+    Person: {
+      currentUserFollowing: () => null,
+      followingCurrentUser: () => null,
+    },
+    SearchPeopleResultsConnection: {
+      edges: () => [],
+      pageInfo: () => null,
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
new file mode 100644
index 00000000..baf9d817
--- /dev/null
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -0,0 +1,158 @@
+/* eslint-disable import/prefer-default-export, max-classes-per-file */
+import { parseGlobalId } from '@apollosproject/server-core';
+import { Person as postgresPerson } from '@apollosproject/data-connector-postgres';
+import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
+
+class personDataSource extends postgresPerson.dataSource {
+  async create(attributes) {
+    const rockPersonId = await this.context.dataSources.RockPerson.create(
+      attributes
+    );
+    super.create({
+      ...attributes,
+      originType: 'rock',
+      originId: String(rockPersonId),
+    });
+    return rockPersonId;
+  }
+}
+
+// These resolvers make sure that calls to updating profile fields update both the
+const personResolver = {
+  Mutation: {
+    updateProfileField: async (
+      root,
+      { input: { field, value } },
+      { dataSources }
+    ) => {
+      await dataSources.RockPerson.updateProfile([{ field, value }]); // Update in Rock
+      return dataSources.Person.updateProfile([{ field, value }]); // updates in Postgres
+    },
+    updateProfileFields: async (root, { input }, { dataSources }) => {
+      await dataSources.RockPerson.updateProfile(input); // Update in Rock
+      return dataSources.Person.updateProfile(input); // updates in Postgres
+    },
+    uploadProfileImage: async (root, { file, size }, { dataSources }) => {
+      const person = await dataSources.RockPerson.uploadProfileImage(
+        file,
+        size
+      ); // Update in Rock
+      return dataSources.Person.updateProfile([
+        { field: 'profileImageUrl', value: person.photo.url },
+      ]); // updates in Postgres. Reuses already uploaded imageUrl
+      // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
+    },
+    updateUserPushSettings: async (root, { input }, { dataSources }) => {
+      // register the changes w/ postgres
+      await dataSources.NotificationPreference.updateUserNotificationPreference(
+        {
+          notificationProviderId: input.pushProviderUserId,
+          notificationProviderType: 'one_signal', // hard coded for now
+          enabled: input.enabled,
+        }
+      );
+      // register the changes w/ one signal
+      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
+
+      // if the pushProviderUserId is changing, we need ot register the device with rock.
+      if (input.pushProviderUserId != null) {
+        await dataSources.PersonalDevice.addPersonalDevice({
+          pushId: input.pushProviderUserId,
+        });
+      }
+
+      try {
+        await dataSources.Person.updateProfile([
+          {
+            field: 'apollosUser',
+            value: true,
+          },
+        ]);
+      } catch (e) {
+        console.warn(e);
+      }
+
+      // return the original return value (which is currentPerson)
+      return returnValue;
+    },
+  },
+};
+
+export const Person = {
+  dataSource: personDataSource,
+  resolver: personResolver,
+};
+
+class oneSignalDataSource extends OneSignalOriginal.dataSource {
+  async createNotification({
+    toUserIds = [],
+    to,
+    content = '',
+    heading,
+    subtitle,
+    ...args
+  }) {
+    if (to && to.originId && to.originType === 'rock') {
+      const person = await this.context.dataSources.RockPerson.getFromId(
+        to.originId
+      );
+      return super.createNotification({
+        toUserIds: [person.primaryAliasId],
+        content,
+        heading,
+        subtitle,
+        ...args,
+      });
+    }
+    return super.createNotification({
+      toUserIds,
+      content,
+      heading,
+      subtitle,
+      ...args,
+    });
+  }
+}
+
+export const OneSignal = {
+  ...OneSignalOriginal,
+  dataSource: oneSignalDataSource,
+};
+
+// Used when IDs coming from the API are Rock APIS.
+export const RockDefaultCampusOverride = {
+  resolver: {
+    Mutation: {
+      updateUserCampus: async (root, { campusId }, { dataSources }) => {
+        await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+
+        const { id: rockCampusId } = parseGlobalId(campusId);
+        const campus = await dataSources.PostgresCampus.getFromId(
+          rockCampusId,
+          null,
+          {
+            originType: 'rock',
+          }
+        ); // finds the postgres campus id
+        return dataSources.Person.updateProfile([
+          { field: 'campusId', value: campus.id },
+        ]); // updates in Postgres
+      },
+    },
+  },
+};
+
+// Used when IDs coming from the API are Postgres APIS.
+export const PostgresDefaultCampusOverride = {
+  resolver: {
+    Mutation: {
+      updateUserCampus: async (root, { campusId }, { dataSources }) => {
+        const campus = await dataSources.Campus.getFromId(campusId); // finds the postgres campus id
+        await dataSources.RockPerson.updateProfile([
+          { field: 'campusId', value: campus.originId },
+        ]); // updates in Rock
+        return dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Postgres
+      },
+    },
+  },
+};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 3acfad03..613e7219 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,4 +1,5 @@
 import dotenv from 'dotenv/config'; // eslint-disable-line
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
 import config from './config'; // eslint-disable-line
 import server from './server';
 
diff --git a/apollos-church-api/src/migrator.js b/apollos-church-api/src/migrator.js
new file mode 100644
index 00000000..72366cf8
--- /dev/null
+++ b/apollos-church-api/src/migrator.js
@@ -0,0 +1,31 @@
+import dotenv from 'dotenv/config'; // eslint-disable-line
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
+import config from './config'; // eslint-disable-line
+
+import ApollosConfig from '@apollosproject/config';
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const { migrations } = dataObj;
+
+// make sure this is called last.
+// (or at least after the apollos server setup)
+(async () => {
+  if (ApollosConfig?.DATABASE?.URL) {
+    try {
+      const migrationRunner = await createMigrationRunner({ migrations });
+      migrationRunner.runAsCLI();
+    } catch (e) {
+      console.log(e);
+    }
+  } else {
+    console.warn('Please specify a database URL to perform migrations');
+  }
+})();
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index e85c7e04..ae3b1cf4 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -4,8 +4,17 @@ import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
-import { BugsnagPlugin } from '@apollosproject/bugsnag';
-import {
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const {
   resolvers,
   schema,
   testSchema,
@@ -13,7 +22,8 @@ import {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-} from './data';
+  migrations,
+} = dataObj;
 
 export { resolvers, schema, testSchema };
 
@@ -32,7 +42,7 @@ const cacheOptions = isDev
       },
     };
 
-const { ENGINE } = ApollosConfig;
+const { ROCK, APP } = ApollosConfig;
 
 const apolloServer = new ApolloServer({
   typeDefs: schema,
@@ -41,9 +51,8 @@ const apolloServer = new ApolloServer({
   context,
   introspection: true,
   extensions,
-  plugins: [new BugsnagPlugin()],
   formatError: (error) => {
-    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
+    console.error(get(error, 'extensions.exception.stacktrace', []).join('\n'));
     return error;
   },
   playground: {
@@ -51,15 +60,17 @@ const apolloServer = new ApolloServer({
       'editor.cursorShape': 'line',
     },
   },
+  uploads: false,
   ...cacheOptions,
-  engine: {
-    apiKey: ENGINE.API_KEY,
-    schemaTag: ENGINE.SCHEMA_TAG,
-  },
 });
 
 const app = express();
 
+// password reset
+app.get('/forgot-password', (req, res) => {
+  res.redirect(APP.FORGOT_PASSWORD_URL || `${ROCK.URL}/page/56`);
+});
+
 applyServerMiddleware({ app, dataSources, context });
 setupJobs({ app, dataSources, context });
 // Comment out if you don't want the API serving apple-app-site-association or assetlinks manifests.
@@ -68,4 +79,29 @@ setupUniversalLinks({ app });
 apolloServer.applyMiddleware({ app });
 apolloServer.applyMiddleware({ app, path: '/' });
 
+// make sure this is called last.
+// (or at least after the apollos server setup)
+(async () => {
+  if (ApollosConfig?.DATABASE?.URL) {
+    const migrationRunner = await createMigrationRunner({ migrations });
+    const pending = await migrationRunner.pending();
+    if (pending.length) {
+      console.log('\x1b[31m', '██████████████████████████████████', '\x1b[0m');
+      console.log(
+        '\x1b[36m',
+        'You currently have a number of pending migrations',
+        '\x1b[0m'
+      );
+      console.log(pending);
+      console.log(
+        `Keep in mind, you are currently connected to ${
+          migrationRunner?.options?.context?.sequelize?.options?.host
+        }`
+      );
+      console.log('\x1b[31m', '██████████████████████████████████', '\x1b[0m');
+    }
+    if (ApollosConfig.AUTO_MIGRATE) await migrationRunner.up();
+  }
+})();
+
 export default app;
