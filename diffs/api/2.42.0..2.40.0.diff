diff --git a/apollos-church-api/__mocks__/apollo-server-env.js b/apollos-church-api/__mocks__/apollo-server-env.js
new file mode 100644
index 00000000..5ec2ff74
--- /dev/null
+++ b/apollos-church-api/__mocks__/apollo-server-env.js
@@ -0,0 +1,5 @@
+import createMock from '@apollosproject/apollo-server-env-mock';
+
+const apolloServerEnv = require.requireActual('apollo-server-env');
+
+module.exports = createMock(apolloServerEnv);
diff --git a/apollos-church-api/__mocks__/dotenv/config.js b/apollos-church-api/__mocks__/dotenv/config.js
new file mode 100644
index 00000000..c312228c
--- /dev/null
+++ b/apollos-church-api/__mocks__/dotenv/config.js
@@ -0,0 +1 @@
+// console.log('Disable reading from `env` file in test env.');
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 5d43743d..afa9288a 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.42.0",
+  "version": "2.40.0",
   "environment": "api"
 }
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 5db37673..2803fa1e 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -18,36 +18,33 @@
     "node": ">=14"
   },
   "dependencies": {
-    "@apollosproject/config": "^2.42.0",
-    "@apollosproject/data-connector-algolia-search": "^2.42.0",
-    "@apollosproject/data-connector-analytics": "^2.42.0",
-    "@apollosproject/data-connector-bible": "^2.42.0",
-    "@apollosproject/data-connector-church-online": "^2.42.0",
-    "@apollosproject/data-connector-cloudinary": "^2.42.0",
-    "@apollosproject/data-connector-onesignal": "^2.42.0",
-    "@apollosproject/data-connector-passes": "^2.42.0",
-    "@apollosproject/data-connector-postgres": "^2.42.0",
-    "@apollosproject/data-connector-redis-cache": "^2.42.0",
-    "@apollosproject/data-connector-rock": "^2.42.0",
-    "@apollosproject/data-connector-twilio": "^2.42.0",
-    "@apollosproject/data-schema": "^2.42.0",
-    "@apollosproject/rock-apollo-data-source": "^2.42.0",
-    "@apollosproject/server-core": "^2.42.0",
+    "@apollosproject/config": "^2.40.0",
+    "@apollosproject/data-connector-algolia-search": "^2.40.0",
+    "@apollosproject/data-connector-analytics": "^2.40.0",
+    "@apollosproject/data-connector-bible": "^2.40.0",
+    "@apollosproject/data-connector-church-online": "^2.40.0",
+    "@apollosproject/data-connector-cloudinary": "^2.40.0",
+    "@apollosproject/data-connector-onesignal": "^2.40.0",
+    "@apollosproject/data-connector-passes": "^2.40.0",
+    "@apollosproject/data-connector-postgres": "^2.40.0",
+    "@apollosproject/data-connector-redis-cache": "^2.40.0",
+    "@apollosproject/data-connector-rock": "^2.40.0",
+    "@apollosproject/data-connector-twilio": "^2.40.0",
+    "@apollosproject/data-schema": "^2.40.0",
+    "@apollosproject/rock-apollo-data-source": "^2.40.0",
+    "@apollosproject/server-core": "^2.40.0",
     "apollo-server": "^2.24.1",
-    "apollo-server-cache-redis": "^1.5.0",
     "apollo-server-express": "2.14.2",
-    "apollo-server-plugin-response-cache": "^0.8.0",
     "color": "3.0.0",
     "dotenv": "6.0.0",
     "express": "^4.17.0",
     "graphql": "14.6.0",
-    "ioredis": "^4.27.2",
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.42.0",
-    "@apollosproject/babel-preset-apollos": "^2.42.0",
-    "@apollosproject/eslint-config": "^2.42.0",
+    "@apollosproject/apollo-server-env-mock": "^2.40.0",
+    "@apollosproject/babel-preset-apollos": "^2.40.0",
+    "@apollosproject/eslint-config": "^2.40.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
index e5728ba5..f890adf6 100644
--- a/apollos-church-api/src/data/index.postgres.js
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -26,13 +26,13 @@ import {
   BinaryFiles,
   FeatureFeed,
   Event,
+  PrayerRequest,
   Person as RockPerson,
   ContentItem as RockContentItem,
   Campus as RockCampus,
   ContentChannel,
   Feature as RockFeature,
   ActionAlgorithm as RockActionAlgorithm,
-  PrayerRequest as RockPrayerRequest,
 } from '@apollosproject/data-connector-rock';
 
 import {
@@ -65,7 +65,6 @@ import {
   OneSignal,
   PostgresDefaultCampusOverride,
   RockDefaultCampusOverride,
-  PrayerRequest,
 } from './rockWithPostgres';
 
 const postgresContentModules = {
@@ -78,14 +77,10 @@ const postgresContentModules = {
   ContentItem: PostgresContentItem,
   ContentItemsConnection,
   ContentChannel: ContentItemCategory,
+  PrayerRequest: PostgresPrayerRequest,
   RockCampus: { dataSource: RockCampus.dataSource },
   Campus,
   PostgresDefaultCampusOverride,
-  RockPrayerRequest: {
-    dataSource: RockPrayerRequest.dataSource,
-  },
-  PostgresPrayerRequest,
-  PrayerRequest,
 };
 
 const rockContentModules = {
@@ -95,6 +90,7 @@ const rockContentModules = {
   Feature: RockFeature,
   ContentItem: RockContentItem,
   ContentChannel,
+  PrayerRequest,
   PostgresCampus: {
     // essentially everything but the resolvers
     dataSource: Campus.dataSource,
@@ -103,7 +99,6 @@ const rockContentModules = {
   },
   Campus: RockCampus,
   RockDefaultCampusOverride,
-  PrayerRequest: RockPrayerRequest,
 };
 
 const data = {
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
index fbd2ae6b..daf925bc 100644
--- a/apollos-church-api/src/data/rockWithPostgres.js
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -1,9 +1,6 @@
 /* eslint-disable import/prefer-default-export, max-classes-per-file */
 import { parseGlobalId } from '@apollosproject/server-core';
-import {
-  Person as postgresPerson,
-  PrayerRequest as postgresPrayerRequest,
-} from '@apollosproject/data-connector-postgres';
+import { Person as postgresPerson } from '@apollosproject/data-connector-postgres';
 import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
 
 class personDataSource extends postgresPerson.dataSource {
@@ -161,25 +158,3 @@ export const PostgresDefaultCampusOverride = {
     },
   },
 };
-
-class prayerRequestDataSource extends postgresPrayerRequest.dataSource {
-  async getRequestor({ personId }) {
-    return this.context.dataSources.Person.getFromId(personId);
-  }
-}
-
-export const PrayerRequest = {
-  dataSource: prayerRequestDataSource,
-  resolver: {
-    Mutation: {
-      addPrayer: async (root, args, { dataSources }) => {
-        const { id } = await dataSources.RockPrayerRequest.addPrayer(args);
-        return dataSources.PrayerRequest.addPrayer({
-          text: args.text,
-          originId: String(id),
-          originType: 'rock',
-        });
-      },
-    },
-  },
-};
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 4a1e328f..ae3b1cf4 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -1,12 +1,8 @@
 import { ApolloServer } from 'apollo-server-express';
 import ApollosConfig from '@apollosproject/config';
 import express from 'express';
-import responseCachePlugin from 'apollo-server-plugin-response-cache';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
-
-import { BaseRedisCache } from 'apollo-server-cache-redis';
-import Redis from 'ioredis';
 import { setupUniversalLinks } from '@apollosproject/server-core';
 import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
 
@@ -34,6 +30,18 @@ export { resolvers, schema, testSchema };
 const isDev =
   process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';
 
+const extensions = isDev ? [() => new RockLoggingExtension()] : [];
+
+const cacheOptions = isDev
+  ? {}
+  : {
+      cacheControl: {
+        stripFormattedExtensions: false,
+        calculateHttpHeaders: true,
+        defaultMaxAge: 3600,
+      },
+    };
+
 const { ROCK, APP } = ApollosConfig;
 
 const apolloServer = new ApolloServer({
@@ -42,15 +50,7 @@ const apolloServer = new ApolloServer({
   dataSources,
   context,
   introspection: true,
-  extensions: isDev ? [() => new RockLoggingExtension()] : [],
-  plugins: [
-    responseCachePlugin({
-      sessionId: (requestContext) =>
-        requestContext.request.http.headers.get('authorization') || null,
-      shouldReadFromCache: () => !isDev,
-      shouldWriteToCache: () => !isDev,
-    }),
-  ],
+  extensions,
   formatError: (error) => {
     console.error(get(error, 'extensions.exception.stacktrace', []).join('\n'));
     return error;
@@ -61,18 +61,7 @@ const apolloServer = new ApolloServer({
     },
   },
   uploads: false,
-  ...(process.env.REDIS_URL
-    ? {
-        cache: new BaseRedisCache({
-          client: new Redis(process.env.REDIS_URL),
-        }),
-      }
-    : {}),
-  cacheControl: {
-    stripFormattedExtensions: false,
-    calculateHttpHeaders: true,
-    defaultMaxAge: 3600,
-  },
+  ...cacheOptions,
 });
 
 const app = express();
