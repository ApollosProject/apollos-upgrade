diff --git a/apollos-church-api/.dockerignore b/apollos-church-api/.dockerignore
new file mode 100644
index 00000000..66a32251
--- /dev/null
+++ b/apollos-church-api/.dockerignore
@@ -0,0 +1,4 @@
+packages/apolloschurchapp
+packages/apollos-ui-kit
+packages/apollos-church-api/.env
+packages/*/node_modules
diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
deleted file mode 100644
index d1086b309d7457c0ab977858a3d24933ba84ecc2..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6880
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
aR{exjTbVP>oRE~SZ~q@jSN<5W*m`zAnuEgt

diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
new file mode 100644
index 00000000..85594681
--- /dev/null
+++ b/apollos-church-api/.envExample
@@ -0,0 +1,18 @@
+ROCK_API=
+ROCK_TOKEN=
+BIBLE_API_KEY=
+ENGINE_API_KEY=
+CLOUDINARY_URL=
+ONE_SIGNAL_REST_KEY=
+PORT=4000
+ROOT_URL=http://localhost:4000
+
+TWILIO_ACCOUNT_SID=
+TWILIO_AUTH_TOKEN=
+TWILIO_FROM_NUMBER=
+
+
+PASS_WWDR_CERT=
+PASS_SIGNER_CERT=
+PASS_SIGNER_KEY=
+PASS_SIGNER_PASSPHRASE=
\ No newline at end of file
diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index 93c0f8f5..b15b989c 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -94,8 +94,3 @@ storyLoader.js
 # generated markdown docs
 packages/**/docs/generated/*
 
-# shared secrets
-.env.shared
-
-# development database
-development.db
diff --git a/apollos-church-api/.npmignore b/apollos-church-api/.npmignore
new file mode 100644
index 00000000..93f39291
--- /dev/null
+++ b/apollos-church-api/.npmignore
@@ -0,0 +1,2 @@
+*
+!lib/**
diff --git a/apollos-church-api/.nvmrc b/apollos-church-api/.nvmrc
new file mode 100644
index 00000000..5b7269c0
--- /dev/null
+++ b/apollos-church-api/.nvmrc
@@ -0,0 +1 @@
+10.19.0
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 4dd80cf3..aed13e64 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.22.0",
-  "environment": "api"
+    "version": "1.6.0-beta.0",
+    "environment": "api"
 }
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index be7c7293..7a3896b8 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -10,34 +10,58 @@
 APP:
   # This variable is used for generating deep links.
   # It should match whatver is in your Info.plist `CFBundleURLTypes`
-  DEEP_LINK_HOST: ${DEEP_LINK_HOST}
-  UNIVERSAL_LINK_HOST: ${UNIVERSAL_LINK_HOST}
+  DEEP_LINK_HOST: apolloschurchapp
   ROOT_API_URL: ${ROOT_URL}
   JOBS_USERNAME: ${JOBS_USERNAME}
   JOBS_PASSWORD: ${JOBS_PASSWORD}
-DATABASE:
-  URL: ${DATABASE_URL}
 BUGSNAG:
+  ## Optional, but you'll need to remove references to @apollosproject/bugsnag if you don't wish to use.
   API_KEY: ${BUGSNAG_KEY}
 ROCK:
-  URL: ${ROCK_URL}
+  API_URL: https://rock.apollos.app/api
   API_TOKEN: ${ROCK_TOKEN}
+  IMAGE_URL: https://rock.apollos.app/GetImage.ashx
+  SHARE_URL: https://rock.apollos.app
+  # This should match the timezone of the Rock server
+  TIMEZONE: 'America/New_York'
+  USE_PLUGIN: true
+  SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
 UNIVERSAL_LINKS:
-  APPLE_APP_ID: ${APPLE_APP_ID}
-  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
-  APP_STORE_LINK: ${IOS_REDIRECT}
-  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
-  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
-  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
+  # This should be your app's bundle ID, as found in your info.plist.
+  APPLE_APP_ID: org.reactjs.native.apolloschurchapp
+  # This should be your app's team ID, as found in Xcode
+  APPLE_TEAM_ID: 7TM8C6252Z
+  # Where should a user be redirected if they don't have your app installed?
+  APP_STORE_LINK: https://apollos.app/ios
+  PLAY_STORE_LINK: https://apollos.app/android
+  # Your app Id, as found in your app/build.gradle.
+  GOOGLE_APP_ID: com.apolloschurch.app
+  # https://docs.getsocial.im/knowledge-base/android-signing-key-sha256/
+  GOOGLE_KEYSTORE_SHA256: EC:6E:B5:5A:62:53:1E:53:FF:C4:BA:A7:CB:29:77:57:71:9D:65:2F:AF:69:41:A3:AD:2B:C4:55:A1:7A:07:03
 ONE_SIGNAL:
-  APP_ID: ${ONE_SIGNAL_APP_ID}
+  APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
-  URL: ${CHURCH_ONLINE_URL}
+  URL: https://apollos.online.church/
+  MEDIA_URLS: []
   WEB_VIEW_URL: https://apollos.online.church/
 ALGOLIA:
-  APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
-  API_KEY: ${ALGOLIASEARCH_API_KEY}
+  APPLICATION_ID: ${ALGOLIA_APP_ID}
+  API_KEY: ${ALGOLIA_API_KEY}
+  # TODO: should we support multiple indices? how
+  SEARCH_INDEX: test_ContentItem
+  # Configure Algolia custom settings here
+  # https://www.algolia.com/doc/api-reference/settings-api-parameters/
+  CONFIGURATION:
+    searchableAttributes:
+      - title
+      - unordered(summary)
+    #customRankings:
+    # NOT CURRENTLY INCLUDED
+    # This just demonstrates what's possible
+    # To include likedCount (or any other field) override search package
+    # and add field to config below
+    #- desc(likedCount)
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -50,16 +74,36 @@ PASS:
     SIGNER_CERT: ${PASS_SIGNER_CERT}
     SIGNER_KEY: ${PASS_SIGNER_KEY}
     SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
+ANALYTICS:
+  # Filling out these fields will automatically enable analytics tracking
+  # on the accompanying service
+  SEGMENT_KEY:
+  GA_ID:
+  USE_ROCK: true
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
   BIBLE_ID:
     WEB: '9879dbb7cfe39e4d-01'
     KJV: 'de4e12af7f28f599-02'
 CLOUDINARY:
+  # Cloudinary is used to improve image loading
+  # value should look something like
+  # cloudinary://123123123:adkfnla_adASDv_adAS@test
   URL: ${CLOUDINARY_URL}
+ENGINE:
+  API_KEY: ${ENGINE_API_KEY}
+  SCHEMA_TAG: ${ENGINE_SCHEMA_TAG}
 
 # This key holds various properties that allow our GraphQL server to map to your Rock Instance
 ROCK_MAPPINGS:
+  INTERACTIONS:
+    # Name of the InteractionChannel that will be created per EntityType
+    CHANNEL_NAME: Apollos App
+    # Prefix for the name of the InteractionComponent that will be created per Entity
+    COMPONENT_NAME: Apollos App Component
+    # 512 is "Mobile App"
+    CHANNEL_MEDIUM_TYPE_ID: 512
+
   CONTENT_ITEM:
     ContentSeriesContentItem:
       # When resolving "ContentSeriesContentItem" look in rock for a "ContentChannelItem"
@@ -68,13 +112,13 @@ ROCK_MAPPINGS:
       ContentChannelTypeId: [6]
     DevotionalContentItem:
       EntityType: ContentChannelItem
-      ContentChannelId: [7]
+      ContentChannelTypeId: []
     MediaContentItem:
       EntityType: ContentChannelItem
     UniversalContentItem:
       EntityType: ContentChannelItem
     WeekendContentItem:
-      ContentChannelId: [5]
+      ContentChannelId: []
       EntityType: ContentChannelItem
     ContentItem:
       EntityType: ContentChannelItem
@@ -83,172 +127,176 @@ ROCK_MAPPINGS:
     # Id of the category used to store all persona dataviews
     PersonaId: 210
 
-  ALL_CONTENT_CHANNELS:
+  # Apollos will pull these content channels and expose them in the app on the discover screen.
+  DISCOVER_CONTENT_CHANNEL_IDS:
     - 3
     - 5
     - 6
     - 8
+  # Apollos will pull content items from these channels and expose them on the user feed
+  # However, it will not expose the channel itself.
+  # These channels are also pulled when indexing searchable content.
+  FEED_CONTENT_CHANNEL_IDS:
+    - 6
+
+  CAMPAIGN_CHANNEL_IDS:
+    - 11
 
   SERMON_CHANNEL_ID: 5
 
-TABS:
-  HOME:
-    - type: ActionBar
-      title: Welcome to Apollos
-      actions:
-        [
-          {
-            title: Check In,
-            icon: check,
-            action: OPEN_URL,
-            relatedNode: { __typename: Url, url: 'https://www.google.com' },
-          },
-        ]
-    - algorithms:
-      - type: CONTENT_FEED
-        arguments:
-          channelIds:
-            - 6
-      type: HeroList
-      primaryAction:
-        # Right now, you hardcode exactly what GraphQL should return.
-        # Long term, we hope to have a more sophisticated mechanism for driving this field
-        action: OPEN_NODE
-        title: 'Read More'
-        relatedNode:
-          __typename: UniversalContentItem
-          id: 21
-    - algorithms: [DAILY_PRAYER]
-      isCard: false
-      type: PrayerList
-      title: Daily Prayer
-    - algorithms:
-        - type: CAMPAIGN_ITEMS
-          channelIds:
-            - 9
-      type: HeroList
-      isFeatured: true
-      subtitle: Featured
-    - title: FOR YOU
-      algorithms: [SERMON_CHILDREN, PERSONA_FEED]
-      subtitle: Explore what God calls you to today
-      type: ActionList
-    - algorithms: [PERSONA_FEED]
-      subtitle: Continue
-      type: HorizontalCardList
-    - title: RECOMMENDED
-      algorithms: [SERMON_CHILDREN]
-      subtitle: For Him
-      type: VerticalCardList
-    - title: BULLETIN
-      subtitle: What's happening at apollos?
-      type: ActionList
-      algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 13
-        - type: UPCOMING_EVENTS
+  SERVING_GROUP_TYPE_ID: 23
+  COMMUNITY_GROUP_TYPE_ID: 25
+  FAMILY_GROUP_TYPE_ID: 10
 
-  READ:
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 7
-            limit: 3
-      type: HorizontalCardList
-      subtitle: Devotionals
-      primaryAction:
-        action: OPEN_CHANNEL
-        title: 'Read More'
-        relatedNode:
-          __typename: ContentChannel
-          id: 7
-          name: Devotionals
+  MOBILE_DEVICE_TYPE_ID: 671
 
-  WATCH:
-    - algorithms:
-        - type: LATEST_SERIES_CHILDREN
-          arguments:
-            channelId: 4
-      type: HeroList
-      title: Catch up
-      subtitle: Latest Series
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 4
-      type: VerticalCardList
-      subtitle: All series
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 3
-            limit: 3
-      type: HorizontalCardList
-      subtitle: Sermons
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 5
-            limit: 3
-      type: HorizontalCardList
-      subtitle: Podcasts
-      primaryAction:
-        action: OPEN_CHANNEL
-        title: 'Read More'
-        relatedNode:
-          __typename: ContentChannel
-          id: 5
-          name: Podcasts
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 6
-            limit: 3
-      type: HorizontalCardList
-      title: Videos
-      primaryAction:
-        action: OPEN_CHANNEL
-        title: 'Read More'
-        relatedNode:
-          __typename: ContentChannel
-          id: 6
-          name: Videos
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 8
-            limit: 3
-      type: HorizontalCardList
-      subtitle: Something Else
+HOME_FEATURES:
+  - algorithms: [USER_FEED]
+    type: HeroList
+    primaryAction:
+      # Right now, you hardcode exactly what GraphQL should return.
+      # Long term, we hope to have a more sophisticated mechanism for driving this field
+      action: OPEN_NODE
+      title: 'Read More'
+      relatedNode:
+        __typename: UniversalContentItem
+        id: 21
+  - algorithms: [DAILY_PRAYER]
+    isCard: false
+    type: PrayerList
+    title: Daily Prayer
+  - algorithms: [CAMPAIGN_ITEMS]
+    type: HeroList
+    isFeatured: true
+  - title: FOR YOU
+    algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+    subtitle: Explore what God calls you to today
+    type: ActionList
+  - algorithms: [PERSONA_FEED]
+    subtitle: Continue
+    type: HorizontalCardList
+  - title: RECOMMENDED
+    algorithms: [SERMON_CHILDREN]
+    subtitle: For Him
+    type: VerticalCardList
+  - title: BULLETIN
+    subtitle: What's happening at apollos?
+    type: ActionList
+    algorithms:
+      - type: CONTENT_CHANNEL
+        arguments:
+          contentChannelId: 13
+      - type: UPCOMING_EVENTS
 
-  PRAY:
-    - algorithms: [DAILY_PRAYER]
-      isCard: false
-      type: PrayerList
-      title: Daily Prayer
-    - type: VerticalPrayerList
-      title: Your Prayers
-  CONNECT:
-    - type: ActionTable
-      title: Connect to Apollos
-      actions:
-        [
-          {
-            title: Google,
-            action: OPEN_URL,
-            relatedNode: { __typename: Url, url: 'https://www.google.com' },
-          },
-          {
-            title: Facebook,
-            action: OPEN_URL,
-            relatedNode: { __typename: Url, url: 'https://www.facebook.com' },
-          },
-        ]
+# Default mapping of field types -> ids. There's probably no reason to edit this.
+ROCK_CONSTANTS:
+  TEXT: 1
+  MULTI_SELECT: 2
+  BOOLEAN: 3
+  COLOR: 4
+  SINGLE_SELECT: 6
+  INTEGER: 7
+  PAGE_REFERENCE: 8
+  IMAGE: 10
+  DATE: 11
+  DECIMAL: 14
+  DEFINED_TYPE: 15
+  DEFINED_VALUE: 16
+  PERSON: 18
+  HTML: 20
+  MEMO: 21
+  GROUP_TYPES: 22
+  GROUP: 23
+  CAMPUSES: 26
+  ENTITY_TYPE: 29
+  CAMPUS: 30
+  EMAIL_TEMPLATE: 31
+  FILE: 32
+  GROUP_TYPE: 33
+  KEY_VALUE_LIST: 34
+  BINARY_FILE_TYPE: 35
+  WORKFLOW_TYPE: 36
+  BINARY_FILE: 37
+  FINANCIAL_ACCOUNT: 38
+  FINANCIAL_ACCOUNTS: 39
+  COMPONENT: 40
+  COMPONENTS: 41
+  CATEGORIES: 42
+  GROUP_ROLE: 43
+  CATEGORY: 44
+  LOCATION: 45
+  DATE_RANGE: 46
+  DECIMAL_RANGE: 47
+  INTEGER_RANGE: 48
+  TIME: 49
+  GROUP_LOCATION_TYPE: 50
+  CODE_EDITOR: 51
+  PERSON_BADGES: 52
+  SITE: 53
+  COMMUNICATION_TEMPLATE: 54
+  DAY_OF_WEEK: 55
+  DAYS_OF_WEEK: 56
+  REMOTE_AUTHS: 57
+  COMPARISON: 58
+  METRIC_ENTITY: 59
+  WORKFLOW_ACTIVITY: 60
+  WORKFLOW_ATTRIBUTE: 61
+  METRICS: 62
+  ENTITY: 63
+  METRIC_CATEGORIES: 64
+  WORKFLOW_TEXT_OR_ATTRIBUTE: 65
+  SLIDING_DATE_RANGE: 66
+  GROUP_TYPE_GROUP: 67
+  SECURITY_ROLE: 68
+  VALUE_LIST: 69
+  CURRENCY: 70
+  EMAIL: 71
+  URL_LINK: 72
+  WORKFLOW_TYPES: 73
+  ATTRIBUTE: 74
+  SCHEDULES: 75
+  CONTENT_CHANNEL: 76
+  AUDIO_FILE: 77
+  AUDIO_URL: 78
+  VIDEO_FILE: 79
+  VIDEO_URL: 80
+  ENCRYPTED_TEXT: 81
+  FILTER_DATE: 82
+  DATE_TIME: 83
+  DEFINED_VALUE_RANGE: 84
+  RATING: 85
+  SYSTEM_EMAIL: 86
+  FINANCIAL_GATEWAY: 87
+  GROUP_AND_ROLE: 88
+  NOTE_TYPE: 89
+  NOTE_TYPES: 90
+  EVENT_CALENDAR: 91
+  EVENT_ITEM: 92
+  CONNECTION_ACTIVITY_TYPE: 93
+  CONNECTION_OPPORTUNITY: 94
+  CONNECTION_REQUEST: 95
+  CONNECTION_STATE: 96
+  CONNECTION_STATUS: 97
+  CONNECTION_TYPE: 98
+  CONNECTION_TYPES: 99
+  MERGE_TEMPLATE: 100
+  RANGE_SLIDER: 101
+  BINARY_FILE_TYPES: 102
+  MARKDOWN: 103
+  DATA_VIEW: 104
+  PHONE_NUMBER: 105
+  SCHEDULE: 106
+  LAVA_COMMANDS: 107
+  ADDRESS: 108
+  BENEVOLENCE_REQUEST: 109
+  CONTENT_CHANNEL_TYPES: 110
+  WORKFLOW: 111
+  SSN: 112
+  MATRIX: 113
+  LAVA: 114
+  DATA_VIEWS: 115
+  COMMUNICATION_PREFERENCE: 116
+  INTERACTION_CHANNEL: 117
+  GROUP_MEMBER: 118
+  TIME_ZONE: 119
+  LABEL: 120
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
new file mode 100644
index 00000000..cdd63087
--- /dev/null
+++ b/apollos-church-api/local.graphql
@@ -0,0 +1,715 @@
+directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE
+
+enum ACTION_FEATURE_ACTION {
+  READ_CONTENT
+  READ_EVENT
+  OPEN_URL
+  OPEN_NODE
+}
+
+type ActionListAction {
+  id: ID!
+  title: String
+  subtitle: String
+  image: ImageMedia
+  relatedNode: Node
+  action: ACTION_FEATURE_ACTION
+}
+
+type ActionListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  actions: [ActionListAction]
+  primaryAction: FeatureAction
+}
+
+input AnalyticsDeviceInfo {
+  platform: AnalyticsPlatform
+  deviceId: String
+  deviceModel: String
+  osVersion: String
+  appVersion: String
+}
+
+input AnalyticsIdentifyInput {
+  traits: [AnalyticsMetaField]
+  anonymousId: String!
+  deviceInfo: AnalyticsDeviceInfo
+}
+
+input AnalyticsMetaField {
+  field: String!
+  value: AnalyticsValue
+}
+
+enum AnalyticsPlatform {
+  iOS
+  Android
+}
+
+type AnalyticsResult {
+  success: Boolean
+}
+
+input AnalyticsTrackInput {
+  eventName: String!
+  properties: [AnalyticsMetaField]
+  anonymousId: String
+  deviceInfo: AnalyticsDeviceInfo
+}
+
+scalar AnalyticsValue
+
+type AudioMedia implements Media {
+  name: String
+  key: String
+  sources: [AudioMediaSource]
+}
+
+type AudioMediaSource implements MediaSource {
+  uri: String
+}
+
+interface AudioNode {
+  audios: [AudioMedia]
+}
+
+type AuthenticatedUser {
+  id: ID!
+  profile: Person
+  rock: RockPersonDetails
+  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
+}
+
+type Authentication {
+  user: AuthenticatedUser
+  token: String
+}
+
+enum CacheControlScope {
+  PUBLIC
+  PRIVATE
+}
+
+type Campus implements Node {
+  id: ID!
+  name: String
+  street1: String
+  street2: String
+  city: String
+  state: String
+  postalCode: String
+  latitude: Float
+  longitude: Float
+  image: ImageMediaSource
+  distanceFromLocation(location: CampusLocationInput): Float
+  events: [Event]
+}
+
+input CampusLocationInput {
+  latitude: Float
+  longitude: Float
+}
+
+interface Card {
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  summary: String
+}
+
+type CardListItem {
+  id: ID!
+  hasAction: Boolean
+  actionIcon: String
+  labelText: String
+  summary: String
+  coverImage: ImageMedia
+  title(hyphenated: Boolean): String
+  relatedNode: Node
+  action: ACTION_FEATURE_ACTION
+}
+
+"""A rgb color string"""
+scalar Color
+
+type ContentChannel implements Node {
+  id: ID!
+  name: String
+  description: String
+  childContentChannels: [ContentChannel]
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  iconName: String
+}
+
+interface ContentChildNode {
+  parentChannel: ContentChannel
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+}
+
+interface ContentItem {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+type ContentItemsConnection {
+  edges: [ContentItemsConnectionEdge]
+  totalCount: Int
+  pageInfo: PaginationInfo
+}
+
+type ContentItemsConnectionEdge {
+  node: ContentItem
+  cursor: String
+}
+
+input ContentItemsConnectionInput {
+  first: Int
+  after: String
+}
+
+interface ContentNode {
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  htmlContent: String
+}
+
+interface ContentParentNode {
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+}
+
+type ContentSeriesContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ProgressNode & LikableNode & ShareableNode & FeaturesNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  percentComplete: Float
+  upNext: ContentItem
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+  features: [Feature]
+}
+
+type Device implements Node {
+  id: ID!
+  pushId: String!
+  notificationsEnabled: Boolean!
+}
+
+type DevotionalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+type Event implements Node {
+  id: ID!
+  name: String
+  description: String
+  location: String
+  start: String
+  end: String
+  image: ImageMedia
+}
+
+interface Feature {
+  id: ID!
+  order: Int
+}
+
+type FeatureAction {
+  relatedNode: Node
+  action: ACTION_FEATURE_ACTION
+  title: String
+}
+
+interface FeaturesNode {
+  features: [Feature]
+}
+
+enum GENDER {
+  Male
+  Female
+  Unknown
+}
+
+type Group implements Node {
+  id: ID!
+  name: String
+  leader: Person @deprecated(reason: "No longer used, use 'leaders' instead")
+  leaders: [Person]
+  members: [Person]
+}
+
+enum GROUP_TYPE {
+  Serving
+  Community
+  Family
+}
+
+type HeroListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  actions: [ActionListAction]
+  heroCard: CardListItem
+  primaryAction: FeatureAction
+}
+
+type HorizontalCardListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  cards: [CardListItem]
+}
+
+type ImageMedia implements Media {
+  name: String
+  key: String
+  sources: [ImageMediaSource]
+}
+
+type ImageMediaSource implements MediaSource {
+  uri: String
+}
+
+enum InteractionAction {
+  VIEW
+  COMPLETE
+  PRAY
+}
+
+input InteractionDataField {
+  field: String!
+  value: InteractionValue
+}
+
+type InteractionResult {
+  success: Boolean
+  node: Node
+}
+
+scalar InteractionValue
+
+interface LikableNode {
+  isLiked: Boolean
+  likedCount: Int
+}
+
+enum LIKE_OPERATION {
+  Like
+  Unlike
+}
+
+input LikeEntityInput {
+  nodeId: ID!
+  operation: LIKE_OPERATION!
+}
+
+interface LiveNode {
+  liveStream: LiveStream
+}
+
+type LiveStream {
+  isLive: Boolean
+  eventStartTime: String
+  media: VideoMedia
+  webViewUrl: String
+  contentItem: ContentItem
+}
+
+interface Media {
+  name: String
+  key: String
+  sources: [MediaSource]
+}
+
+type MediaContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+enum MediaInputType {
+  IMAGE
+  VIDEO
+  AUDIO
+}
+
+interface MediaSource {
+  uri: String
+}
+
+type Mutation {
+  _placeholder: Boolean
+  updateLikeEntity(input: LikeEntityInput!): ContentItem @deprecated(reason: "Use the more general updateLikeNode instead")
+  updateLikeNode(input: LikeEntityInput!): Node
+  updateProfileField(input: UpdateProfileInput!): Person
+  updateProfileFields(input: [UpdateProfileInput]!): Person
+  uploadProfileImage(file: Upload!, size: Int!): Person
+  authenticate(identity: String!, password: String!): Authentication
+  changePassword(password: String!): Authentication
+  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
+  requestSmsLoginPin(phoneNumber: String!): SmsPinResult
+  authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
+  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
+  interactWithNode(action: InteractionAction!, nodeId: ID!, data: [InteractionDataField]): InteractionResult
+  identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
+  trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
+  updateUserPushSettings(input: PushSettingsInput!): Person
+  updateUserCampus(campusId: String!): Person
+  addPrayer(text: String!, isAnonymous: Boolean): PrayerRequest
+}
+
+interface Node {
+  id: ID!
+}
+
+type PaginationInfo {
+  startCursor: String
+  endCursor: String
+}
+
+type Pass implements Node {
+  id: ID!
+  type: PassType
+  description: String
+  logo: ImageMediaSource
+  thumbnail: ImageMediaSource
+  barcode: ImageMediaSource
+  primaryFields: [PassField]
+  secondaryFields: [PassField]
+  backgroundColor: Color
+  foregroundColor: Color
+  labelColor: Color
+  logoText: String
+  passkitFileUrl: String
+}
+
+type PassField {
+  key: String!
+  label: String
+  value: String!
+  textAlignment: PassFieldTextAlignment
+}
+
+enum PassFieldTextAlignment {
+  LEFT
+  CENTER
+  RIGHT
+  NATURAL
+}
+
+enum PassType {
+  GENERIC
+}
+
+type Person implements Node {
+  id: ID!
+  firstName: String
+  lastName: String
+  nickName: String
+  email: String
+  gender: GENDER
+  birthDate: String
+  photo: ImageMediaSource
+  devices: [Device]
+  campus: Campus
+  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
+}
+
+type PrayerListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  isCard: Boolean
+  title: String
+  subtitle: String
+  prayers: [PrayerRequest]
+}
+
+type PrayerRequest implements Node {
+  id: ID!
+  text: String!
+  requestor: Person
+  isAnonymous: Boolean
+  isPrayed: Boolean
+}
+
+interface ProgressNode {
+  percentComplete: Float
+  upNext: ContentItem
+}
+
+input PushSettingsInput {
+  enabled: Boolean
+  pushProviderUserId: String
+}
+
+type Query {
+  _placeholder: Boolean
+  node(id: ID!): Node
+  likedContent(first: Int, after: String): ContentItemsConnection
+  contentChannels: [ContentChannel]
+  campaigns: ContentItemsConnection
+  userFeed(first: Int, after: String): ContentItemsConnection
+  personaFeed(first: Int, after: String): ContentItemsConnection
+  currentUser: AuthenticatedUser
+  userExists(identity: String): USER_AUTH_STATUS
+  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
+  liveStreams: [LiveStream]
+  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
+  scriptures(query: String!, version: VERSION): [Scripture]
+  userPass: Pass
+  search(query: String!, first: Int, after: String): SearchResultsConnection
+  campuses(location: CampusLocationInput): [Campus]
+  userFeedFeatures: [Feature]
+}
+
+type RockPersonDetails {
+  authToken: String
+  authCookie: String
+}
+
+type Scripture implements Node {
+  id: ID!
+  html: String
+  reference: String
+  copyright: String
+  version: String
+}
+
+type ScriptureFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  scriptures: [Scripture]
+  sharing: SharableFeature
+}
+
+interface ScriptureNode {
+  scriptures: [Scripture]
+}
+
+type SearchResult {
+  cursor: String
+  title: String
+  summary: String
+  coverImage: ImageMedia
+  node: Node
+}
+
+type SearchResultsConnection {
+  edges: [SearchResult]
+  pageInfo: PaginationInfo
+}
+
+interface Sharable {
+  message: String
+  title: String
+  url: String @deprecated(reason: "Not supported on the interface")
+}
+
+type SharableContentItem implements Sharable {
+  message: String
+  title: String
+  url: String
+}
+
+type SharableFeature implements Sharable {
+  message: String
+  title: String
+  url: String @deprecated(reason: "Not supported on a feature")
+}
+
+interface ShareableNode {
+  sharing: SharableContentItem
+}
+
+type SmsPinResult {
+  success: Boolean
+  userAuthStatus: USER_AUTH_STATUS
+}
+
+type TextFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  body: String
+  sharing: SharableFeature
+}
+
+type Theme {
+  type: ThemeType
+  colors: ThemeColors
+}
+
+type ThemeColors {
+  primary: Color
+  secondary: Color
+  screen: Color
+  paper: Color
+  alert: Color
+}
+
+interface ThemedNode {
+  theme: Theme
+}
+
+enum ThemeType {
+  LIGHT
+  DARK
+}
+
+type UniversalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & ShareableNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+enum UPDATEABLE_PROFILE_FIELDS {
+  FirstName
+  LastName
+  Email
+  NickName
+  Gender
+  BirthDate
+}
+
+input UpdateProfileInput {
+  field: UPDATEABLE_PROFILE_FIELDS!
+  value: String!
+}
+
+"""The `Upload` scalar type represents a file upload."""
+scalar Upload
+
+type Url implements Node {
+  url: String
+  id: ID!
+}
+
+enum USER_AUTH_STATUS {
+  NONE
+  NEW_APP_USER
+  EXISTING_APP_USER
+}
+
+enum VERSION {
+  WEB
+  KJV
+}
+
+type VerticalCardListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  isFeatured: Boolean
+  cards: [CardListItem]
+}
+
+type VideoMedia implements Media {
+  name: String
+  key: String
+  sources: [VideoMediaSource]
+  embedHtml: String
+}
+
+type VideoMediaSource implements MediaSource {
+  uri: String
+}
+
+interface VideoNode {
+  videos: [VideoMedia]
+}
+
+type WebviewFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  linkText: String
+  title: String
+  url: String
+}
+
+type WeekendContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & LiveNode & ShareableNode & FeaturesNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  liveStream: LiveStream
+  sharing: SharableContentItem
+  features: [Feature]
+}
+
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 301c8ee7..f3666174 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -4,50 +4,80 @@
   "private": true,
   "main": "lib/index.js",
   "scripts": {
-    "setup": "./scripts/init.sh",
-    "start": "NODE_ENV=production node ./lib/index.js",
+    "init": "./scripts/init.sh",
+    "start": "./scripts/generateLocalSchema.sh & yarn start:dev",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
+    "start:prod": "NODE_ENV=production node ./lib/index.js",
     "postinstall": "yarn build",
+    "link-packages": "node ./scripts/link-packages",
+    "unlink-packages": "node ./scripts/link-packages remove",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
     "lint": "eslint ./src --ext .js",
-    "translate": "node scripts/translate.js"
+    "fixlint": "eslint ./src --ext .js --fix",
+    "codecov": "cat ./coverage/lcov.info | codecov",
+    "version": "node ../../scripts/update-apollos-version.js && git add apollos.json",
+    "schema-diff": "./scripts/schemaDiff.sh",
+    "schema-lint": "graphql-schema-linter local.graphql",
+    "upgrade": "npx @apollosproject/upgrade-tools upgrade",
+    "latest": "./scripts/add-packages.sh",
+    "beta": "./scripts/add-packages.sh beta",
+    "canary": "./scripts/add-packages.sh canary"
   },
   "engines": {
-    "node": ">=12.x.x"
+    "node": ">=8.11.x"
+  },
+  "jest": {
+    "collectCoverage": true,
+    "collectCoverageFrom": [
+      "src/**/*.{js,jsx}"
+    ],
+    "testMatch": [
+      "<rootDir>/src/**/__tests__/**/*.{js,jsx,mjs}",
+      "<rootDir>/src/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
+    ],
+    "testEnvironment": "node",
+    "reporters": [
+      "<rootDir>/../../scripts/fingers-crossed-reporter.js"
+    ]
   },
   "dependencies": {
-    "@apollosproject/config": "^2.22.0",
-    "@apollosproject/data-connector-algolia-search": "^2.22.0",
-    "@apollosproject/data-connector-analytics": "^2.22.0",
-    "@apollosproject/data-connector-bible": "^2.22.0",
-    "@apollosproject/data-connector-church-online": "^2.22.0",
-    "@apollosproject/data-connector-cloudinary": "^2.22.0",
-    "@apollosproject/data-connector-onesignal": "^2.22.0",
-    "@apollosproject/data-connector-passes": "^2.22.0",
-    "@apollosproject/data-connector-postgres": "^2.22.0",
-    "@apollosproject/data-connector-redis-cache": "^2.22.0",
-    "@apollosproject/data-connector-rock": "^2.22.0",
-    "@apollosproject/data-connector-twilio": "^2.22.0",
-    "@apollosproject/data-schema": "^2.22.0",
-    "@apollosproject/rock-apollo-data-source": "^2.22.0",
-    "@apollosproject/server-core": "^2.22.0",
-    "apollo-server": "^2.24.1",
+    "@apollosproject/bugsnag": "^1.6.0-beta.0",
+    "@apollosproject/config": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-algolia-search": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-analytics": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-bible": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-church-online": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-cloudinary": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-onesignal": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-passes": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-redis-cache": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-rock": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-twilio": "^1.6.0-beta.0",
+    "@apollosproject/data-schema": "^1.6.0-beta.0",
+    "@apollosproject/rock-apollo-data-source": "^1.6.0-beta.0",
+    "@apollosproject/server-core": "^1.6.0-beta.0",
+    "apollo-server": "^2.14.2",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
     "dotenv": "6.0.0",
     "express": "^4.17.0",
     "graphql": "14.6.0",
+    "prettier": "1.12.1",
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.22.0",
-    "@apollosproject/babel-preset-apollos": "^2.22.0",
-    "@apollosproject/eslint-config": "^2.22.0",
+    "@apollosproject/apollo-server-env-mock": "^1.6.0-beta.0",
+    "@apollosproject/babel-preset-apollos": "^1.6.0-beta.0",
+    "@apollosproject/eslint-config": "^1.6.0-beta.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
+    "@entria/graphql-findbreakingchanges": "^1.0.1",
     "babel-eslint": "^10.0.3",
+    "babel-jest": "^24.9.0",
+    "babel-plugin-module-resolver": "^3.2.0",
+    "codecov": "3.7.1",
     "eslint": "^5.16.0",
     "eslint-config-airbnb-base": "^14.0.0",
     "eslint-config-prettier": "^2.9.0",
@@ -56,8 +86,9 @@
     "eslint-plugin-import": "^2.12.0",
     "eslint-plugin-jest": "^21.15.2",
     "eslint-plugin-prettier": "^2.6.0",
+    "get-graphql-schema": "^2.1.2",
+    "graphql-schema-linter": "^0.2.0",
     "linkemon": "^0.1.1",
-    "nodemon": "1.18.7",
-    "prettier": "1.12.1"
+    "nodemon": "^2.0.2"
   }
 }
diff --git a/apollos-church-api/scripts/add-packages.sh b/apollos-church-api/scripts/add-packages.sh
new file mode 100755
index 00000000..ca37cb73
--- /dev/null
+++ b/apollos-church-api/scripts/add-packages.sh
@@ -0,0 +1,25 @@
+# get list of apollosproject packages to update
+
+# get devDependencies line number
+DEVDEPSLINE=$(grep -n "devDependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
+
+# get dependecies line number
+DEPSLINE=$(grep -n "dependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
+
+# determine what npm tag to update to
+[[ $1 = "canary" ]] && TAG=canary || [[ $1 = "beta" ]] && TAG=beta || TAG=latest
+
+# replace package names with version tag
+JSON=$(sed -E "s/^.*\"(@apollosproject\/[a-z\-]+)\".*$/\1@$TAG /g" package.json)
+
+# if packages are listed first and dev packages second...
+if [ $DEVDEPSLINE -gt $DEPSLINE ]
+then
+		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE","$DEVDEPSLINE"p | grep "@apollosproject" | tr -d "\n")
+		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
+else
+		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
+		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE","$DEPSLINE"p | grep "@apollosproject" | tr -d "\n")
+fi
+yarn add --dev $DEVPKGS --ignore-scripts
+yarn add $PKGS --ignore-scripts
diff --git a/apollos-church-api/scripts/generateLocalSchema.sh b/apollos-church-api/scripts/generateLocalSchema.sh
new file mode 100755
index 00000000..d8008f25
--- /dev/null
+++ b/apollos-church-api/scripts/generateLocalSchema.sh
@@ -0,0 +1,28 @@
+PING_SERVER="curl 'http://localhost:4000/graphql' -H 'content-type: application/json' -H 'accept: application/json' --data-binary '{\"query\":\"{_placeholder}\"}' > /dev/null 2>&1"
+
+if eval "$PING_SERVER"; then
+  echo 'Server running, downloading schema from localhost:4000'
+  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
+  echo 'Done. Check local.graphql'
+else
+  echo $*
+  if [ "$*" = "--start-server" ]; then
+    echo 'Server not running, starting server'
+    PORT=4000 npm run start:prod > /tmp/server-log.txt &
+    SERVER_PID=$!
+    echo "Server running... (PID $SERVER_PID)"
+  fi
+  sleep 1
+  until eval "$PING_SERVER"; do
+      sleep 1
+      echo 'Waiting for server to boot....'
+  done
+  echo 'Curling Server for most recent schema.'
+  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
+  echo 'Publishing Schema to Apollo Engine.'
+  npx apollo schema:publish --endpoint=http://localhost:4000
+  if [ "$*" = "--start-server" ]; then
+    echo "Killing Server (PID $SERVER_PID)"
+    kill -9 $SERVER_PID
+  fi
+fi
diff --git a/apollos-church-api/scripts/init.sh b/apollos-church-api/scripts/init.sh
index b0a810e5..474bfae5 100755
--- a/apollos-church-api/scripts/init.sh
+++ b/apollos-church-api/scripts/init.sh
@@ -3,24 +3,5 @@ if test -f .env; then
 	echo ".env file already exists!"
 	exit 1
 fi
-
-echo "You will need the following before beginning:
-Rock URL
-Rock API Token
-
-Are you ready to proceed? [y/n]: "
-read -r ANSWER
-if $ANSWER != "y"; then
-	exit 1
-fi
-
-echo "Rock URL: "
-read -r ROCK_URL
-echo "Rock API Token: "
-read -r ROCK_TOKEN
-
-echo "ROCK_URL=$ROCK_URL
-ROCK_TOKEN=$ROCK_TOKEN" >.env
-
-# remove template encrypted files
-rm .env.shared.enc
+echo "ROCK_API=
+ROCK_TOKEN=" > .env
diff --git a/apollos-church-api/scripts/link-packages.js b/apollos-church-api/scripts/link-packages.js
new file mode 100644
index 00000000..7778c0a4
--- /dev/null
+++ b/apollos-church-api/scripts/link-packages.js
@@ -0,0 +1,16 @@
+const fs = require('fs');
+const { execSync } = require('child_process');
+
+const direction = process.argv[2] || 'link';
+
+const packageJson = JSON.parse(fs.readFileSync(`${__dirname}/../package.json`));
+
+const dependencies = [
+  ...Object.keys(packageJson.dependencies),
+  ...Object.keys(packageJson.devDependencies),
+].filter((d) => d.includes('@apollosproject'));
+
+dependencies.forEach((dep) => {
+  const output = execSync(`yalc ${direction} ${dep}`, { encoding: 'utf8' });
+  console.log(output);
+});
diff --git a/apollos-church-api/scripts/schemaDiff.sh b/apollos-church-api/scripts/schemaDiff.sh
new file mode 100755
index 00000000..67404e4b
--- /dev/null
+++ b/apollos-church-api/scripts/schemaDiff.sh
@@ -0,0 +1,13 @@
+#!/usr/bin/env bash
+sh ./scripts/generateLocalSchema.sh --start-server
+./node_modules/.bin/get-graphql-schema https://apollos-church-api-herokuapp-com.global.ssl.fastly.net > prod.graphql
+DIFF=$(graphql-findbreakingchanges prod.graphql local.graphql)
+rm prod.graphql
+echo "$DIFF"
+
+if [[ ! $DIFF = *"NO BREAKING CHANGES"* ]]
+then
+  exit 1
+else
+  exit 0
+fi
diff --git a/apollos-church-api/scripts/translate.js b/apollos-church-api/scripts/translate.js
deleted file mode 100644
index af1db91d..00000000
--- a/apollos-church-api/scripts/translate.js
+++ /dev/null
@@ -1,15 +0,0 @@
-const {
-  createGlobalId,
-  parseGlobalId,
-} = require('@apollosproject/server-core');
-
-const [id] = process.argv.slice(2);
-if (!id) {
-  console.log(
-    'Pass Rock or Apollos ID: translate.js AuthenticatedUser:8sad98fd89sadf98uasdf'
-  );
-  process.exit(1);
-}
-
-if (id.includes(':')) console.log(parseGlobalId(id).id);
-else console.log(createGlobalId(id, 'Generic').split(':')[1]);
diff --git a/apollos-church-api/src/config.js b/apollos-church-api/src/config.js
index f73a2aa3..59a48535 100644
--- a/apollos-church-api/src/config.js
+++ b/apollos-church-api/src/config.js
@@ -1,42 +1,7 @@
 import path from 'path';
-import fetch from 'node-fetch';
-import dotenv from "dotenv/config"; // eslint-disable-line
+import dotenv from 'dotenv/config'; // eslint-disable-line
 import ApollosConfig from '@apollosproject/config';
 
 ApollosConfig.loadYaml({
   configPath: path.join(__dirname, '..', 'config.yml'),
 });
-
-// defaults
-ApollosConfig.loadJs({
-  ROCK: { TIMEZONE: ApollosConfig?.ROCK?.TIMEZONE || 'America/New_York' },
-});
-
-// autodetect some settings
-(async () => {
-  if (!ApollosConfig.ROCK) return;
-  if (!ApollosConfig.ROCK.URL || !ApollosConfig.ROCK.API_TOKEN)
-    throw new Error('ROCK_URL and ROCK_TOKEN variables are required!');
-
-  let res;
-
-  // plugin
-  res = await fetch(
-    `${ApollosConfig.ROCK.URL}/api/RestControllers?$select=Name`,
-    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
-  );
-  const hasPlugin = (await res.json())
-    .map(({ Name }) => Name)
-    .includes('Apollos');
-  if (hasPlugin) console.log('Apollos Rock plugin detected!');
-  ApollosConfig.loadJs({ ROCK: { USE_PLUGIN: hasPlugin } });
-
-  // version
-  res = await fetch(
-    `${ApollosConfig.ROCK.URL}/api/Utility/GetRockSemanticVersionNumber`,
-    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
-  );
-  const version = (await res.text()).split('.');
-  console.log(`Rock Version: ${version[1]}`);
-  ApollosConfig.loadJs({ ROCK: { VERSION: version[1] } });
-})();
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index b9886fb3..feab7bb1 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -18,6 +18,7 @@ import {
   Followings,
   Interactions,
   RockConstants,
+  Person,
   ContentItem,
   ContentChannel,
   Sharable,
@@ -27,31 +28,23 @@ import {
   AuthSms,
   Campus,
   Group,
+  BinaryFiles,
   Feature,
-  FeatureFeed,
-  ActionAlgorithm,
   Event,
   PrayerRequest,
-  Persona,
-  Person,
-  BinaryFiles,
 } from '@apollosproject/data-connector-rock';
-
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
-// This is to mock any postgres resolvers so we don't throw API errors for unresolved
-// typedefs
-import NoPostgres from './noPostgres';
-
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
+  Person,
   Cloudinary,
   Auth,
   AuthSms,
@@ -71,16 +64,11 @@ const data = {
   Template,
   Campus,
   Group,
+  BinaryFiles,
   Feature,
-  FeatureFeed,
-  ActionAlgorithm,
   Event,
   Cache,
   PrayerRequest,
-  Persona,
-  Person,
-  BinaryFiles,
-  NoPostgres,
 };
 
 const {
@@ -90,7 +78,6 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
-  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -100,7 +87,6 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
-  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
deleted file mode 100644
index 63d3a857..00000000
--- a/apollos-church-api/src/data/index.postgres.js
+++ /dev/null
@@ -1,125 +0,0 @@
-import { gql } from 'apollo-server';
-
-import {
-  createApolloServerConfig,
-  Interfaces,
-} from '@apollosproject/server-core';
-
-import * as Analytics from '@apollosproject/data-connector-analytics';
-import * as Scripture from '@apollosproject/data-connector-bible';
-import * as LiveStream from '@apollosproject/data-connector-church-online';
-import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
-import * as Search from '@apollosproject/data-connector-algolia-search';
-import * as Pass from '@apollosproject/data-connector-passes';
-import * as Cache from '@apollosproject/data-connector-redis-cache';
-import * as Sms from '@apollosproject/data-connector-twilio';
-import {
-  Followings,
-  Interactions,
-  RockConstants,
-  ContentItem,
-  ContentChannel,
-  Sharable,
-  Auth,
-  PersonalDevice,
-  Template,
-  AuthSms,
-  Campus,
-  Group,
-  BinaryFiles,
-  Feature,
-  FeatureFeed,
-  ActionAlgorithm,
-  Event,
-  PrayerRequest,
-  Persona,
-  Person as RockPerson,
-} from '@apollosproject/data-connector-rock';
-
-import {
-  Comment,
-  UserFlag,
-  UserLike,
-  Follow,
-  Notification,
-  NotificationPreference,
-  Campus as PostgresCampus,
-  Person as PostgresPerson,
-} from '@apollosproject/data-connector-postgres';
-
-import * as Theme from './theme';
-
-// This modules ties together certain updates so they occurs in both Rock and Postgres.
-// Will be eliminated in the future through an enhancement to the Shovel
-import { Person, OneSignal } from './rockWithPostgres';
-
-const data = {
-  Interfaces,
-  Followings,
-  ContentChannel,
-  ContentItem,
-  RockPerson, // This entry needs to come before (postgres) Person
-  BinaryFiles, // This entry needs to come before (postgres) Person
-  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
-  Cloudinary,
-  Auth,
-  AuthSms,
-  Sms,
-  LiveStream,
-  Theme,
-  Scripture,
-  Interactions,
-  RockConstants,
-  Sharable,
-  Analytics,
-  PersonalDevice,
-  Pass,
-  Search,
-  Template,
-  Campus,
-  Group,
-  Feature,
-  FeatureFeed,
-  ActionAlgorithm,
-  Event,
-  Cache,
-  PrayerRequest,
-  Comment,
-  UserLike,
-  UserFlag,
-  Follow,
-  PostgresCampus,
-  Persona,
-  Notification,
-  NotificationPreference,
-  OneSignal,
-  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
-};
-
-const {
-  dataSources,
-  resolvers,
-  schema,
-  context,
-  applyServerMiddleware,
-  setupJobs,
-  migrations,
-} = createApolloServerConfig(data);
-
-export {
-  dataSources,
-  resolvers,
-  schema,
-  context,
-  applyServerMiddleware,
-  setupJobs,
-  migrations,
-};
-
-// the upload Scalar is added
-export const testSchema = [
-  gql`
-    scalar Upload
-  `,
-  ...schema,
-];
diff --git a/apollos-church-api/src/data/noPostgres.js b/apollos-church-api/src/data/noPostgres.js
deleted file mode 100644
index bd292eac..00000000
--- a/apollos-church-api/src/data/noPostgres.js
+++ /dev/null
@@ -1,46 +0,0 @@
-// The purpose of this file is to mock the postgres resolvers to null so the API doesn't fail when
-// there's no database. This will not be necessary when Postgres is required by all Apollos APIs.
-import gql from 'graphql-tag';
-import { Comment, Follow } from '@apollosproject/data-connector-postgres';
-
-export default {
-  schema: gql`
-    ${Comment.schema}
-    ${Follow.schema}
-  `,
-  resolver: {
-    Query: {
-      followRequests: () => [],
-      suggestedFollows: () => [],
-      searchPeople: () => {},
-    },
-    Mutation: {
-      addComment: () => null,
-      flagComment: () => null,
-      requestFollow: () => null,
-      acceptFollowRequest: () => null,
-      ignoreFollowRequest: () => null,
-    },
-    Comment: {
-      person: () => null,
-      id: () => null,
-    },
-    CommentListFeature: {
-      id: () => null,
-    },
-    AddCommentFeature: {
-      id: () => null,
-      initialPrompt: () => null,
-      addPrompt: () => null,
-      relatedNode: () => null,
-    },
-    Person: {
-      currentUserFollowing: () => null,
-      followingCurrentUser: () => null,
-    },
-    SearchPeopleResultsConnection: {
-      edges: () => [],
-      pageInfo: () => null,
-    },
-  },
-};
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
deleted file mode 100644
index 9abcc996..00000000
--- a/apollos-church-api/src/data/rockWithPostgres.js
+++ /dev/null
@@ -1,135 +0,0 @@
-/* eslint-disable import/prefer-default-export, max-classes-per-file */
-import { parseGlobalId } from '@apollosproject/server-core';
-import { Person as postgresPerson } from '@apollosproject/data-connector-postgres';
-import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
-
-class personDataSource extends postgresPerson.dataSource {
-  async create(attributes) {
-    const rockPersonId = await this.context.dataSources.RockPerson.create(
-      attributes
-    );
-    super.create({
-      ...attributes,
-      originType: 'rock',
-      originId: String(rockPersonId),
-    });
-    return rockPersonId;
-  }
-}
-
-// These resolvers make sure that calls to updating profile fields update both the
-const personResolver = {
-  Mutation: {
-    updateProfileField: async (
-      root,
-      { input: { field, value } },
-      { dataSources }
-    ) => {
-      await dataSources.RockPerson.updateProfile([{ field, value }]); // Update in Rock
-      return dataSources.Person.updateProfile([{ field, value }]); // updates in Postgres
-    },
-    updateProfileFields: async (root, { input }, { dataSources }) => {
-      await dataSources.RockPerson.updateProfile(input); // Update in Rock
-      return dataSources.Person.updateProfile(input); // updates in Postgres
-    },
-    uploadProfileImage: async (root, { file, size }, { dataSources }) => {
-      const person = await dataSources.RockPerson.uploadProfileImage(
-        file,
-        size
-      ); // Update in Rock
-      return dataSources.Person.updateProfile([
-        { field: 'profileImageUrl', value: person.photo.url },
-      ]); // updates in Postgres. Reuses already uploaded imageUrl
-      // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
-    },
-    updateUserCampus: async (root, { campusId }, { dataSources }) => {
-      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
-
-      const { id: rockCampusId } = parseGlobalId(campusId);
-      const campus = await dataSources.PostgresCampus.getFromId(
-        rockCampusId,
-        null,
-        {
-          originType: 'rock',
-        }
-      ); // finds the postgres campus id
-      return dataSources.Person.updateProfile([
-        { field: 'campusId', value: campus.id },
-      ]); // updates in Postgres
-    },
-    updateUserPushSettings: async (root, { input }, { dataSources }) => {
-      // register the changes w/ postgres
-      await dataSources.NotificationPreference.updateUserNotificationPreference(
-        {
-          notificationProviderId: input.pushProviderUserId,
-          notificationProviderType: 'one_signal', // hard coded for now
-          enabled: input.enabled,
-        }
-      );
-      // register the changes w/ one signal
-      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
-
-      // if the pushProviderUserId is changing, we need ot register the device with rock.
-      if (input.pushProviderUserId != null) {
-        await dataSources.PersonalDevice.addPersonalDevice({
-          pushId: input.pushProviderUserId,
-        });
-      }
-
-      try {
-        await dataSources.Person.updateProfile([
-          {
-            field: 'apollosUser',
-            value: true,
-          },
-        ]);
-      } catch (e) {
-        console.warn(e);
-      }
-
-      // return the original return value (which is currentPerson)
-      return returnValue;
-    },
-  },
-};
-
-export const Person = {
-  dataSource: personDataSource,
-  resolver: personResolver,
-};
-
-class oneSignalDataSource extends OneSignalOriginal.dataSource {
-  async createNotification({
-    toUserIds = [],
-    to,
-    content = '',
-    heading,
-    subtitle,
-    ...args
-  }) {
-    if (to && to.originId && to.originType === 'rock') {
-      const person = await this.context.dataSources.RockPerson.getFromId(
-        to.originId
-      );
-      return super.createNotification({
-        toUserIds: [person.primaryAliasId],
-        content,
-        heading,
-        subtitle,
-        ...args,
-      });
-    }
-    return super.createNotification({
-      toUserIds,
-      content,
-      heading,
-      subtitle,
-      ...args,
-    });
-  }
-}
-
-export const OneSignal = {
-  ...OneSignalOriginal,
-  dataSource: oneSignalDataSource,
-};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 613e7219..3acfad03 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,5 +1,4 @@
 import dotenv from 'dotenv/config'; // eslint-disable-line
-import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
 import config from './config'; // eslint-disable-line
 import server from './server';
 
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index b200cb5c..e85c7e04 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -4,17 +4,8 @@ import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
-import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
-
-let dataObj;
-
-if (ApollosConfig?.DATABASE?.URL) {
-  dataObj = require('./data/index.postgres');
-} else {
-  dataObj = require('./data/index');
-}
-
-const {
+import { BugsnagPlugin } from '@apollosproject/bugsnag';
+import {
   resolvers,
   schema,
   testSchema,
@@ -22,8 +13,7 @@ const {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-  migrations,
-} = dataObj;
+} from './data';
 
 export { resolvers, schema, testSchema };
 
@@ -42,7 +32,7 @@ const cacheOptions = isDev
       },
     };
 
-const { ROCK, APP } = ApollosConfig;
+const { ENGINE } = ApollosConfig;
 
 const apolloServer = new ApolloServer({
   typeDefs: schema,
@@ -51,8 +41,9 @@ const apolloServer = new ApolloServer({
   context,
   introspection: true,
   extensions,
+  plugins: [new BugsnagPlugin()],
   formatError: (error) => {
-    console.error(get(error, 'extensions.exception.stacktrace', []).join('\n'));
+    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
     return error;
   },
   playground: {
@@ -61,15 +52,14 @@ const apolloServer = new ApolloServer({
     },
   },
   ...cacheOptions,
+  engine: {
+    apiKey: ENGINE.API_KEY,
+    schemaTag: ENGINE.SCHEMA_TAG,
+  },
 });
 
 const app = express();
 
-// password reset
-app.get('/forgot-password', (req, res) => {
-  res.redirect(APP.FORGOT_PASSWORD_URL || `${ROCK.URL}/page/56`);
-});
-
 applyServerMiddleware({ app, dataSources, context });
 setupJobs({ app, dataSources, context });
 // Comment out if you don't want the API serving apple-app-site-association or assetlinks manifests.
@@ -78,13 +68,4 @@ setupUniversalLinks({ app });
 apolloServer.applyMiddleware({ app });
 apolloServer.applyMiddleware({ app, path: '/' });
 
-// make sure this is called last.
-// (or at least after the apollos server setup)
-(async () => {
-  if (ApollosConfig?.DATABASE?.URL) {
-    const migrationRunner = await createMigrationRunner({ migrations });
-    await migrationRunner.up();
-  }
-})();
-
 export default app;
