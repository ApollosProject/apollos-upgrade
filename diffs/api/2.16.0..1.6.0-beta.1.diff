diff --git a/apollos-church-api/.dockerignore b/apollos-church-api/.dockerignore
new file mode 100644
index 00000000..66a32251
--- /dev/null
+++ b/apollos-church-api/.dockerignore
@@ -0,0 +1,4 @@
+packages/apolloschurchapp
+packages/apollos-ui-kit
+packages/apollos-church-api/.env
+packages/*/node_modules
diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
index a53c0b2ac539ebb24bd08ccd25b71d818a314b21..0c933e637c776b0bb7e804685a51fc751cd58260 100644
GIT binary patch
literal 6928
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
W#>rZ{@Af23@9JA>FP=8a)Tl%otW2%|

literal 6880
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
ac#}^zHvUGgJ-mK5&odOISQ4zf@QxMU-c<qs

diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
new file mode 100644
index 00000000..85594681
--- /dev/null
+++ b/apollos-church-api/.envExample
@@ -0,0 +1,18 @@
+ROCK_API=
+ROCK_TOKEN=
+BIBLE_API_KEY=
+ENGINE_API_KEY=
+CLOUDINARY_URL=
+ONE_SIGNAL_REST_KEY=
+PORT=4000
+ROOT_URL=http://localhost:4000
+
+TWILIO_ACCOUNT_SID=
+TWILIO_AUTH_TOKEN=
+TWILIO_FROM_NUMBER=
+
+
+PASS_WWDR_CERT=
+PASS_SIGNER_CERT=
+PASS_SIGNER_KEY=
+PASS_SIGNER_PASSPHRASE=
\ No newline at end of file
diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index 93c0f8f5..901ae9c1 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -96,6 +96,3 @@ packages/**/docs/generated/*
 
 # shared secrets
 .env.shared
-
-# development database
-development.db
diff --git a/apollos-church-api/.npmignore b/apollos-church-api/.npmignore
new file mode 100644
index 00000000..93f39291
--- /dev/null
+++ b/apollos-church-api/.npmignore
@@ -0,0 +1,2 @@
+*
+!lib/**
diff --git a/apollos-church-api/.nvmrc b/apollos-church-api/.nvmrc
new file mode 100644
index 00000000..5b7269c0
--- /dev/null
+++ b/apollos-church-api/.nvmrc
@@ -0,0 +1 @@
+10.19.0
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index d9c54774..47c45367 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.16.0",
-  "environment": "api"
+    "version": "1.6.0-beta.1",
+    "environment": "api"
 }
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index e73c626a..0a47e701 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -10,34 +10,57 @@
 APP:
   # This variable is used for generating deep links.
   # It should match whatver is in your Info.plist `CFBundleURLTypes`
-  DEEP_LINK_HOST: ${DEEP_LINK_HOST}
-  UNIVERSAL_LINK_HOST: ${UNIVERSAL_LINK_HOST}
+  DEEP_LINK_HOST: apolloschurchapp
   ROOT_API_URL: ${ROOT_URL}
   JOBS_USERNAME: ${JOBS_USERNAME}
   JOBS_PASSWORD: ${JOBS_PASSWORD}
-DATABASE:
-  URL: ${DATABASE_URL}
 BUGSNAG:
+  ## Optional, but you'll need to remove references to @apollosproject/bugsnag if you don't wish to use.
   API_KEY: ${BUGSNAG_KEY}
 ROCK:
-  URL: ${ROCK_URL}
+  API_URL: https://rock.apollos.app/api
   API_TOKEN: ${ROCK_TOKEN}
+  IMAGE_URL: https://rock.apollos.app/GetImage.ashx
+  SHARE_URL: https://rock.apollos.app
+  # This should match the timezone of the Rock server
+  TIMEZONE: 'America/New_York'
+  USE_PLUGIN: true
+  SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
 UNIVERSAL_LINKS:
-  APPLE_APP_ID: ${APPLE_APP_ID}
-  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
-  APP_STORE_LINK: ${IOS_REDIRECT}
-  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
-  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
-  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
+  # This should be your app's bundle ID, as found in your info.plist.
+  APPLE_APP_ID: org.reactjs.native.apolloschurchapp
+  # This should be your app's team ID, as found in Xcode
+  APPLE_TEAM_ID: 7TM8C6252Z
+  # Where should a user be redirected if they don't have your app installed?
+  APP_STORE_LINK: https://apollos.app/ios
+  PLAY_STORE_LINK: https://apollos.app/android
+  # Your app Id, as found in your app/build.gradle.
+  GOOGLE_APP_ID: com.apolloschurch.app
+  # https://docs.getsocial.im/knowledge-base/android-signing-key-sha256/
+  GOOGLE_KEYSTORE_SHA256: EC:6E:B5:5A:62:53:1E:53:FF:C4:BA:A7:CB:29:77:57:71:9D:65:2F:AF:69:41:A3:AD:2B:C4:55:A1:7A:07:03
 ONE_SIGNAL:
-  APP_ID: ${ONE_SIGNAL_APP_ID}
+  APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
-  URL: ${CHURCH_ONLINE_URL}
+  URL: https://apollos.online.church/
+  MEDIA_URLS: []
   WEB_VIEW_URL: https://apollos.online.church/
 ALGOLIA:
   APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
   API_KEY: ${ALGOLIASEARCH_API_KEY}
+  SEARCH_INDEX: prod_ContentItem
+  # Configure Algolia custom settings here
+  # https://www.algolia.com/doc/api-reference/settings-api-parameters/
+  CONFIGURATION:
+    searchableAttributes:
+      - title
+      - unordered(summary)
+    #customRankings:
+    # NOT CURRENTLY INCLUDED
+    # This just demonstrates what's possible
+    # To include likedCount (or any other field) override search package
+    # and add field to config below
+    #- desc(likedCount)
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -50,16 +73,36 @@ PASS:
     SIGNER_CERT: ${PASS_SIGNER_CERT}
     SIGNER_KEY: ${PASS_SIGNER_KEY}
     SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
+ANALYTICS:
+  # Filling out these fields will automatically enable analytics tracking
+  # on the accompanying service
+  SEGMENT_KEY:
+  GA_ID:
+  USE_ROCK: true
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
   BIBLE_ID:
     WEB: '9879dbb7cfe39e4d-01'
     KJV: 'de4e12af7f28f599-02'
 CLOUDINARY:
+  # Cloudinary is used to improve image loading
+  # value should look something like
+  # cloudinary://123123123:adkfnla_adASDv_adAS@test
   URL: ${CLOUDINARY_URL}
+ENGINE:
+  API_KEY: ${ENGINE_API_KEY}
+  SCHEMA_TAG: ${ENGINE_SCHEMA_TAG}
 
 # This key holds various properties that allow our GraphQL server to map to your Rock Instance
 ROCK_MAPPINGS:
+  INTERACTIONS:
+    # Name of the InteractionChannel that will be created per EntityType
+    CHANNEL_NAME: Apollos App
+    # Prefix for the name of the InteractionComponent that will be created per Entity
+    COMPONENT_NAME: Apollos App Component
+    # 512 is "Mobile App"
+    CHANNEL_MEDIUM_TYPE_ID: 512
+
   CONTENT_ITEM:
     ContentSeriesContentItem:
       # When resolving "ContentSeriesContentItem" look in rock for a "ContentChannelItem"
@@ -68,13 +111,13 @@ ROCK_MAPPINGS:
       ContentChannelTypeId: [6]
     DevotionalContentItem:
       EntityType: ContentChannelItem
-      ContentChannelId: [7]
+      ContentChannelTypeId: []
     MediaContentItem:
       EntityType: ContentChannelItem
     UniversalContentItem:
       EntityType: ContentChannelItem
     WeekendContentItem:
-      ContentChannelId: [5]
+      ContentChannelId: []
       EntityType: ContentChannelItem
     ContentItem:
       EntityType: ContentChannelItem
@@ -83,156 +126,176 @@ ROCK_MAPPINGS:
     # Id of the category used to store all persona dataviews
     PersonaId: 210
 
-  ALL_CONTENT_CHANNELS:
+  # Apollos will pull these content channels and expose them in the app on the discover screen.
+  DISCOVER_CONTENT_CHANNEL_IDS:
     - 3
     - 5
     - 6
     - 8
+  # Apollos will pull content items from these channels and expose them on the user feed
+  # However, it will not expose the channel itself.
+  # These channels are also pulled when indexing searchable content.
+  FEED_CONTENT_CHANNEL_IDS:
+    - 6
+
+  CAMPAIGN_CHANNEL_IDS:
+    - 11
 
   SERMON_CHANNEL_ID: 5
 
-TABS:
-  HOME:
-    - type: ActionBar
-      title: Welcome to Apollos
-      actions:
-        [
-          {
-            title: Check In,
-            icon: check,
-            action: OPEN_URL,
-            relatedNode: { __typename: Url, url: 'https://www.google.com' },
-          },
-        ]
-    - algorithms:
-      - type: CONTENT_FEED
-        arguments:
-          channelIds:
-            - 6
-      type: HeroList
-      primaryAction:
-        # Right now, you hardcode exactly what GraphQL should return.
-        # Long term, we hope to have a more sophisticated mechanism for driving this field
-        action: OPEN_NODE
-        title: 'Read More'
-        relatedNode:
-          __typename: UniversalContentItem
-          id: 21
-    - algorithms: [DAILY_PRAYER]
-      isCard: false
-      type: PrayerList
-      title: Daily Prayer
-    - algorithms:
-        - type: CAMPAIGN_ITEMS
-          channelIds:
-            - 9
-      type: HeroList
-      isFeatured: true
-      subtitle: Featured
-    - title: FOR YOU
-      algorithms: [SERMON_CHILDREN, PERSONA_FEED]
-      subtitle: Explore what God calls you to today
-      type: ActionList
-    - algorithms: [PERSONA_FEED]
-      subtitle: Continue
-      type: HorizontalCardList
-    - title: RECOMMENDED
-      algorithms: [SERMON_CHILDREN]
-      subtitle: For Him
-      type: VerticalCardList
-    - title: BULLETIN
-      subtitle: What's happening at apollos?
-      type: ActionList
-      algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 13
-        - type: UPCOMING_EVENTS
+  SERVING_GROUP_TYPE_ID: 23
+  COMMUNITY_GROUP_TYPE_ID: 25
+  FAMILY_GROUP_TYPE_ID: 10
 
-  READ:
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 7
-            limit: 3
-      type: HorizontalCardList
-      subtitle: Devotionals
-      primaryAction:
-        action: OPEN_CHANNEL
-        title: 'Read More'
-        relatedNode:
-          __typename: ContentChannel
-          id: 7
-          name: Devotionals
+  MOBILE_DEVICE_TYPE_ID: 671
 
-  WATCH:
-    - algorithms:
-        - type: LATEST_SERIES_CHILDREN
-          arguments:
-            channelId: 4
-      type: HeroList
-      title: Catch up
-      subtitle: Latest Series
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 4
-      type: VerticalCardList
-      subtitle: All series
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 3
-            limit: 3
-      type: HorizontalCardList
-      subtitle: Sermons
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 5
-            limit: 3
-      type: HorizontalCardList
-      subtitle: Podcasts
-      primaryAction:
-        action: OPEN_CHANNEL
-        title: 'Read More'
-        relatedNode:
-          __typename: ContentChannel
-          id: 5
-          name: Podcasts
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 6
-            limit: 3
-      type: HorizontalCardList
-      title: Videos
-      primaryAction:
-        action: OPEN_CHANNEL
-        title: 'Read More'
-        relatedNode:
-          __typename: ContentChannel
-          id: 6
-          name: Videos
-    - algorithms:
-        - type: CONTENT_FEED
-          arguments:
-            channelIds:
-              - 8
-            limit: 3
-      type: HorizontalCardList
-      subtitle: Something Else
+HOME_FEATURES:
+  - algorithms: [USER_FEED]
+    type: HeroList
+    primaryAction:
+      # Right now, you hardcode exactly what GraphQL should return.
+      # Long term, we hope to have a more sophisticated mechanism for driving this field
+      action: OPEN_NODE
+      title: 'Read More'
+      relatedNode:
+        __typename: UniversalContentItem
+        id: 21
+  - algorithms: [DAILY_PRAYER]
+    isCard: false
+    type: PrayerList
+    title: Daily Prayer
+  - algorithms: [CAMPAIGN_ITEMS]
+    type: HeroList
+    isFeatured: true
+  - title: FOR YOU
+    algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+    subtitle: Explore what God calls you to today
+    type: ActionList
+  - algorithms: [PERSONA_FEED]
+    subtitle: Continue
+    type: HorizontalCardList
+  - title: RECOMMENDED
+    algorithms: [SERMON_CHILDREN]
+    subtitle: For Him
+    type: VerticalCardList
+  - title: BULLETIN
+    subtitle: What's happening at apollos?
+    type: ActionList
+    algorithms:
+      - type: CONTENT_CHANNEL
+        arguments:
+          contentChannelId: 13
+      - type: UPCOMING_EVENTS
 
-  PRAY:
-    - algorithms: [DAILY_PRAYER]
-      isCard: false
-      type: PrayerList
-      title: Daily Prayer
-    - type: VerticalPrayerList
-      title: Your Prayers
+# Default mapping of field types -> ids. There's probably no reason to edit this.
+ROCK_CONSTANTS:
+  TEXT: 1
+  MULTI_SELECT: 2
+  BOOLEAN: 3
+  COLOR: 4
+  SINGLE_SELECT: 6
+  INTEGER: 7
+  PAGE_REFERENCE: 8
+  IMAGE: 10
+  DATE: 11
+  DECIMAL: 14
+  DEFINED_TYPE: 15
+  DEFINED_VALUE: 16
+  PERSON: 18
+  HTML: 20
+  MEMO: 21
+  GROUP_TYPES: 22
+  GROUP: 23
+  CAMPUSES: 26
+  ENTITY_TYPE: 29
+  CAMPUS: 30
+  EMAIL_TEMPLATE: 31
+  FILE: 32
+  GROUP_TYPE: 33
+  KEY_VALUE_LIST: 34
+  BINARY_FILE_TYPE: 35
+  WORKFLOW_TYPE: 36
+  BINARY_FILE: 37
+  FINANCIAL_ACCOUNT: 38
+  FINANCIAL_ACCOUNTS: 39
+  COMPONENT: 40
+  COMPONENTS: 41
+  CATEGORIES: 42
+  GROUP_ROLE: 43
+  CATEGORY: 44
+  LOCATION: 45
+  DATE_RANGE: 46
+  DECIMAL_RANGE: 47
+  INTEGER_RANGE: 48
+  TIME: 49
+  GROUP_LOCATION_TYPE: 50
+  CODE_EDITOR: 51
+  PERSON_BADGES: 52
+  SITE: 53
+  COMMUNICATION_TEMPLATE: 54
+  DAY_OF_WEEK: 55
+  DAYS_OF_WEEK: 56
+  REMOTE_AUTHS: 57
+  COMPARISON: 58
+  METRIC_ENTITY: 59
+  WORKFLOW_ACTIVITY: 60
+  WORKFLOW_ATTRIBUTE: 61
+  METRICS: 62
+  ENTITY: 63
+  METRIC_CATEGORIES: 64
+  WORKFLOW_TEXT_OR_ATTRIBUTE: 65
+  SLIDING_DATE_RANGE: 66
+  GROUP_TYPE_GROUP: 67
+  SECURITY_ROLE: 68
+  VALUE_LIST: 69
+  CURRENCY: 70
+  EMAIL: 71
+  URL_LINK: 72
+  WORKFLOW_TYPES: 73
+  ATTRIBUTE: 74
+  SCHEDULES: 75
+  CONTENT_CHANNEL: 76
+  AUDIO_FILE: 77
+  AUDIO_URL: 78
+  VIDEO_FILE: 79
+  VIDEO_URL: 80
+  ENCRYPTED_TEXT: 81
+  FILTER_DATE: 82
+  DATE_TIME: 83
+  DEFINED_VALUE_RANGE: 84
+  RATING: 85
+  SYSTEM_EMAIL: 86
+  FINANCIAL_GATEWAY: 87
+  GROUP_AND_ROLE: 88
+  NOTE_TYPE: 89
+  NOTE_TYPES: 90
+  EVENT_CALENDAR: 91
+  EVENT_ITEM: 92
+  CONNECTION_ACTIVITY_TYPE: 93
+  CONNECTION_OPPORTUNITY: 94
+  CONNECTION_REQUEST: 95
+  CONNECTION_STATE: 96
+  CONNECTION_STATUS: 97
+  CONNECTION_TYPE: 98
+  CONNECTION_TYPES: 99
+  MERGE_TEMPLATE: 100
+  RANGE_SLIDER: 101
+  BINARY_FILE_TYPES: 102
+  MARKDOWN: 103
+  DATA_VIEW: 104
+  PHONE_NUMBER: 105
+  SCHEDULE: 106
+  LAVA_COMMANDS: 107
+  ADDRESS: 108
+  BENEVOLENCE_REQUEST: 109
+  CONTENT_CHANNEL_TYPES: 110
+  WORKFLOW: 111
+  SSN: 112
+  MATRIX: 113
+  LAVA: 114
+  DATA_VIEWS: 115
+  COMMUNICATION_PREFERENCE: 116
+  INTERACTION_CHANNEL: 117
+  GROUP_MEMBER: 118
+  TIME_ZONE: 119
+  LABEL: 120
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
new file mode 100644
index 00000000..cdd63087
--- /dev/null
+++ b/apollos-church-api/local.graphql
@@ -0,0 +1,715 @@
+directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE
+
+enum ACTION_FEATURE_ACTION {
+  READ_CONTENT
+  READ_EVENT
+  OPEN_URL
+  OPEN_NODE
+}
+
+type ActionListAction {
+  id: ID!
+  title: String
+  subtitle: String
+  image: ImageMedia
+  relatedNode: Node
+  action: ACTION_FEATURE_ACTION
+}
+
+type ActionListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  actions: [ActionListAction]
+  primaryAction: FeatureAction
+}
+
+input AnalyticsDeviceInfo {
+  platform: AnalyticsPlatform
+  deviceId: String
+  deviceModel: String
+  osVersion: String
+  appVersion: String
+}
+
+input AnalyticsIdentifyInput {
+  traits: [AnalyticsMetaField]
+  anonymousId: String!
+  deviceInfo: AnalyticsDeviceInfo
+}
+
+input AnalyticsMetaField {
+  field: String!
+  value: AnalyticsValue
+}
+
+enum AnalyticsPlatform {
+  iOS
+  Android
+}
+
+type AnalyticsResult {
+  success: Boolean
+}
+
+input AnalyticsTrackInput {
+  eventName: String!
+  properties: [AnalyticsMetaField]
+  anonymousId: String
+  deviceInfo: AnalyticsDeviceInfo
+}
+
+scalar AnalyticsValue
+
+type AudioMedia implements Media {
+  name: String
+  key: String
+  sources: [AudioMediaSource]
+}
+
+type AudioMediaSource implements MediaSource {
+  uri: String
+}
+
+interface AudioNode {
+  audios: [AudioMedia]
+}
+
+type AuthenticatedUser {
+  id: ID!
+  profile: Person
+  rock: RockPersonDetails
+  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
+}
+
+type Authentication {
+  user: AuthenticatedUser
+  token: String
+}
+
+enum CacheControlScope {
+  PUBLIC
+  PRIVATE
+}
+
+type Campus implements Node {
+  id: ID!
+  name: String
+  street1: String
+  street2: String
+  city: String
+  state: String
+  postalCode: String
+  latitude: Float
+  longitude: Float
+  image: ImageMediaSource
+  distanceFromLocation(location: CampusLocationInput): Float
+  events: [Event]
+}
+
+input CampusLocationInput {
+  latitude: Float
+  longitude: Float
+}
+
+interface Card {
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  summary: String
+}
+
+type CardListItem {
+  id: ID!
+  hasAction: Boolean
+  actionIcon: String
+  labelText: String
+  summary: String
+  coverImage: ImageMedia
+  title(hyphenated: Boolean): String
+  relatedNode: Node
+  action: ACTION_FEATURE_ACTION
+}
+
+"""A rgb color string"""
+scalar Color
+
+type ContentChannel implements Node {
+  id: ID!
+  name: String
+  description: String
+  childContentChannels: [ContentChannel]
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  iconName: String
+}
+
+interface ContentChildNode {
+  parentChannel: ContentChannel
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+}
+
+interface ContentItem {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+type ContentItemsConnection {
+  edges: [ContentItemsConnectionEdge]
+  totalCount: Int
+  pageInfo: PaginationInfo
+}
+
+type ContentItemsConnectionEdge {
+  node: ContentItem
+  cursor: String
+}
+
+input ContentItemsConnectionInput {
+  first: Int
+  after: String
+}
+
+interface ContentNode {
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  htmlContent: String
+}
+
+interface ContentParentNode {
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+}
+
+type ContentSeriesContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ProgressNode & LikableNode & ShareableNode & FeaturesNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  percentComplete: Float
+  upNext: ContentItem
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+  features: [Feature]
+}
+
+type Device implements Node {
+  id: ID!
+  pushId: String!
+  notificationsEnabled: Boolean!
+}
+
+type DevotionalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+type Event implements Node {
+  id: ID!
+  name: String
+  description: String
+  location: String
+  start: String
+  end: String
+  image: ImageMedia
+}
+
+interface Feature {
+  id: ID!
+  order: Int
+}
+
+type FeatureAction {
+  relatedNode: Node
+  action: ACTION_FEATURE_ACTION
+  title: String
+}
+
+interface FeaturesNode {
+  features: [Feature]
+}
+
+enum GENDER {
+  Male
+  Female
+  Unknown
+}
+
+type Group implements Node {
+  id: ID!
+  name: String
+  leader: Person @deprecated(reason: "No longer used, use 'leaders' instead")
+  leaders: [Person]
+  members: [Person]
+}
+
+enum GROUP_TYPE {
+  Serving
+  Community
+  Family
+}
+
+type HeroListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  actions: [ActionListAction]
+  heroCard: CardListItem
+  primaryAction: FeatureAction
+}
+
+type HorizontalCardListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  cards: [CardListItem]
+}
+
+type ImageMedia implements Media {
+  name: String
+  key: String
+  sources: [ImageMediaSource]
+}
+
+type ImageMediaSource implements MediaSource {
+  uri: String
+}
+
+enum InteractionAction {
+  VIEW
+  COMPLETE
+  PRAY
+}
+
+input InteractionDataField {
+  field: String!
+  value: InteractionValue
+}
+
+type InteractionResult {
+  success: Boolean
+  node: Node
+}
+
+scalar InteractionValue
+
+interface LikableNode {
+  isLiked: Boolean
+  likedCount: Int
+}
+
+enum LIKE_OPERATION {
+  Like
+  Unlike
+}
+
+input LikeEntityInput {
+  nodeId: ID!
+  operation: LIKE_OPERATION!
+}
+
+interface LiveNode {
+  liveStream: LiveStream
+}
+
+type LiveStream {
+  isLive: Boolean
+  eventStartTime: String
+  media: VideoMedia
+  webViewUrl: String
+  contentItem: ContentItem
+}
+
+interface Media {
+  name: String
+  key: String
+  sources: [MediaSource]
+}
+
+type MediaContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+enum MediaInputType {
+  IMAGE
+  VIDEO
+  AUDIO
+}
+
+interface MediaSource {
+  uri: String
+}
+
+type Mutation {
+  _placeholder: Boolean
+  updateLikeEntity(input: LikeEntityInput!): ContentItem @deprecated(reason: "Use the more general updateLikeNode instead")
+  updateLikeNode(input: LikeEntityInput!): Node
+  updateProfileField(input: UpdateProfileInput!): Person
+  updateProfileFields(input: [UpdateProfileInput]!): Person
+  uploadProfileImage(file: Upload!, size: Int!): Person
+  authenticate(identity: String!, password: String!): Authentication
+  changePassword(password: String!): Authentication
+  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
+  requestSmsLoginPin(phoneNumber: String!): SmsPinResult
+  authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
+  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
+  interactWithNode(action: InteractionAction!, nodeId: ID!, data: [InteractionDataField]): InteractionResult
+  identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
+  trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
+  updateUserPushSettings(input: PushSettingsInput!): Person
+  updateUserCampus(campusId: String!): Person
+  addPrayer(text: String!, isAnonymous: Boolean): PrayerRequest
+}
+
+interface Node {
+  id: ID!
+}
+
+type PaginationInfo {
+  startCursor: String
+  endCursor: String
+}
+
+type Pass implements Node {
+  id: ID!
+  type: PassType
+  description: String
+  logo: ImageMediaSource
+  thumbnail: ImageMediaSource
+  barcode: ImageMediaSource
+  primaryFields: [PassField]
+  secondaryFields: [PassField]
+  backgroundColor: Color
+  foregroundColor: Color
+  labelColor: Color
+  logoText: String
+  passkitFileUrl: String
+}
+
+type PassField {
+  key: String!
+  label: String
+  value: String!
+  textAlignment: PassFieldTextAlignment
+}
+
+enum PassFieldTextAlignment {
+  LEFT
+  CENTER
+  RIGHT
+  NATURAL
+}
+
+enum PassType {
+  GENERIC
+}
+
+type Person implements Node {
+  id: ID!
+  firstName: String
+  lastName: String
+  nickName: String
+  email: String
+  gender: GENDER
+  birthDate: String
+  photo: ImageMediaSource
+  devices: [Device]
+  campus: Campus
+  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
+}
+
+type PrayerListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  isCard: Boolean
+  title: String
+  subtitle: String
+  prayers: [PrayerRequest]
+}
+
+type PrayerRequest implements Node {
+  id: ID!
+  text: String!
+  requestor: Person
+  isAnonymous: Boolean
+  isPrayed: Boolean
+}
+
+interface ProgressNode {
+  percentComplete: Float
+  upNext: ContentItem
+}
+
+input PushSettingsInput {
+  enabled: Boolean
+  pushProviderUserId: String
+}
+
+type Query {
+  _placeholder: Boolean
+  node(id: ID!): Node
+  likedContent(first: Int, after: String): ContentItemsConnection
+  contentChannels: [ContentChannel]
+  campaigns: ContentItemsConnection
+  userFeed(first: Int, after: String): ContentItemsConnection
+  personaFeed(first: Int, after: String): ContentItemsConnection
+  currentUser: AuthenticatedUser
+  userExists(identity: String): USER_AUTH_STATUS
+  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
+  liveStreams: [LiveStream]
+  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
+  scriptures(query: String!, version: VERSION): [Scripture]
+  userPass: Pass
+  search(query: String!, first: Int, after: String): SearchResultsConnection
+  campuses(location: CampusLocationInput): [Campus]
+  userFeedFeatures: [Feature]
+}
+
+type RockPersonDetails {
+  authToken: String
+  authCookie: String
+}
+
+type Scripture implements Node {
+  id: ID!
+  html: String
+  reference: String
+  copyright: String
+  version: String
+}
+
+type ScriptureFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  scriptures: [Scripture]
+  sharing: SharableFeature
+}
+
+interface ScriptureNode {
+  scriptures: [Scripture]
+}
+
+type SearchResult {
+  cursor: String
+  title: String
+  summary: String
+  coverImage: ImageMedia
+  node: Node
+}
+
+type SearchResultsConnection {
+  edges: [SearchResult]
+  pageInfo: PaginationInfo
+}
+
+interface Sharable {
+  message: String
+  title: String
+  url: String @deprecated(reason: "Not supported on the interface")
+}
+
+type SharableContentItem implements Sharable {
+  message: String
+  title: String
+  url: String
+}
+
+type SharableFeature implements Sharable {
+  message: String
+  title: String
+  url: String @deprecated(reason: "Not supported on a feature")
+}
+
+interface ShareableNode {
+  sharing: SharableContentItem
+}
+
+type SmsPinResult {
+  success: Boolean
+  userAuthStatus: USER_AUTH_STATUS
+}
+
+type TextFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  body: String
+  sharing: SharableFeature
+}
+
+type Theme {
+  type: ThemeType
+  colors: ThemeColors
+}
+
+type ThemeColors {
+  primary: Color
+  secondary: Color
+  screen: Color
+  paper: Color
+  alert: Color
+}
+
+interface ThemedNode {
+  theme: Theme
+}
+
+enum ThemeType {
+  LIGHT
+  DARK
+}
+
+type UniversalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & ShareableNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+enum UPDATEABLE_PROFILE_FIELDS {
+  FirstName
+  LastName
+  Email
+  NickName
+  Gender
+  BirthDate
+}
+
+input UpdateProfileInput {
+  field: UPDATEABLE_PROFILE_FIELDS!
+  value: String!
+}
+
+"""The `Upload` scalar type represents a file upload."""
+scalar Upload
+
+type Url implements Node {
+  url: String
+  id: ID!
+}
+
+enum USER_AUTH_STATUS {
+  NONE
+  NEW_APP_USER
+  EXISTING_APP_USER
+}
+
+enum VERSION {
+  WEB
+  KJV
+}
+
+type VerticalCardListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  isFeatured: Boolean
+  cards: [CardListItem]
+}
+
+type VideoMedia implements Media {
+  name: String
+  key: String
+  sources: [VideoMediaSource]
+  embedHtml: String
+}
+
+type VideoMediaSource implements MediaSource {
+  uri: String
+}
+
+interface VideoNode {
+  videos: [VideoMedia]
+}
+
+type WebviewFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  linkText: String
+  title: String
+  url: String
+}
+
+type WeekendContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & LiveNode & ShareableNode & FeaturesNode {
+  id: ID!
+  title(hyphenated: Boolean): String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  liveStream: LiveStream
+  sharing: SharableContentItem
+  features: [Feature]
+}
+
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 6f5a8aae..47519967 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -5,51 +5,77 @@
   "main": "lib/index.js",
   "scripts": {
     "setup": "./scripts/init.sh",
-    "start": "NODE_ENV=production node ./lib/index.js",
+    "start": "./scripts/generateLocalSchema.sh & yarn start:dev",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
+    "start:prod": "NODE_ENV=production node ./lib/index.js",
     "postinstall": "yarn build",
-    "link-packages": "node ./scripts/link-packages && yarn yalc update",
-    "unlink-packages": "node ./scripts/link-packages remove && rm -rf ./node_modules",
+    "link-packages": "node ./scripts/link-packages",
+    "unlink-packages": "node ./scripts/link-packages remove",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
     "lint": "eslint ./src --ext .js",
-    "translate": "node scripts/translate.js"
+    "fixlint": "eslint ./src --ext .js --fix",
+    "codecov": "cat ./coverage/lcov.info | codecov",
+    "version": "node ../../scripts/update-apollos-version.js && git add apollos.json",
+    "upgrade": "npx @apollosproject/upgrade-tools upgrade",
+    "latest": "./scripts/add-packages.sh latest",
+    "beta": "./scripts/add-packages.sh beta",
+    "canary": "./scripts/add-packages.sh canary"
   },
   "engines": {
-    "node": ">=12.x.x"
+    "node": ">=8.11.x"
+  },
+  "jest": {
+    "collectCoverage": true,
+    "collectCoverageFrom": [
+      "src/**/*.{js,jsx}"
+    ],
+    "testMatch": [
+      "<rootDir>/src/**/__tests__/**/*.{js,jsx,mjs}",
+      "<rootDir>/src/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
+    ],
+    "testEnvironment": "node",
+    "reporters": [
+      "<rootDir>/../../scripts/fingers-crossed-reporter.js"
+    ]
   },
   "dependencies": {
-    "@apollosproject/config": "^2.16.0",
-    "@apollosproject/data-connector-algolia-search": "^2.16.0",
-    "@apollosproject/data-connector-analytics": "^2.16.0",
-    "@apollosproject/data-connector-bible": "^2.16.0",
-    "@apollosproject/data-connector-church-online": "^2.16.0",
-    "@apollosproject/data-connector-cloudinary": "^2.16.0",
-    "@apollosproject/data-connector-onesignal": "^2.16.0",
-    "@apollosproject/data-connector-passes": "^2.16.0",
-    "@apollosproject/data-connector-postgres": "^2.16.0",
-    "@apollosproject/data-connector-redis-cache": "^2.16.0",
-    "@apollosproject/data-connector-rock": "^2.16.0",
-    "@apollosproject/data-connector-twilio": "^2.16.0",
-    "@apollosproject/data-schema": "^2.16.0",
-    "@apollosproject/rock-apollo-data-source": "^2.16.0",
-    "@apollosproject/server-core": "^2.16.0",
-    "apollo-server": "^2.24.1",
+    "@apollosproject/bugsnag": "^1.6.0-beta.0",
+    "@apollosproject/config": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-algolia-search": "^1.6.0-beta.1",
+    "@apollosproject/data-connector-analytics": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-bible": "^1.6.0-beta.1",
+    "@apollosproject/data-connector-church-online": "^1.6.0-beta.1",
+    "@apollosproject/data-connector-cloudinary": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-onesignal": "^1.6.0-beta.1",
+    "@apollosproject/data-connector-passes": "^1.6.0-beta.1",
+    "@apollosproject/data-connector-redis-cache": "^1.6.0-beta.0",
+    "@apollosproject/data-connector-rock": "^1.6.0-beta.1",
+    "@apollosproject/data-connector-twilio": "^1.6.0-beta.0",
+    "@apollosproject/data-schema": "^1.6.0-beta.0",
+    "@apollosproject/rock-apollo-data-source": "^1.6.0-beta.1",
+    "@apollosproject/server-core": "^1.6.0-beta.1",
+    "apollo-server": "^2.14.2",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
     "dotenv": "6.0.0",
     "express": "^4.17.0",
     "graphql": "14.6.0",
+    "prettier": "1.12.1",
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.16.0",
-    "@apollosproject/babel-preset-apollos": "^2.16.0",
-    "@apollosproject/eslint-config": "^2.16.0",
+    "@apollosproject/apollo-server-env-mock": "^1.6.0-beta.0",
+    "@apollosproject/babel-preset-apollos": "^1.6.0-beta.0",
+    "@apollosproject/eslint-config": "^1.6.0-beta.1",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
+    "@entria/graphql-findbreakingchanges": "^1.0.1",
     "babel-eslint": "^10.0.3",
+    "babel-jest": "^24.9.0",
+    "babel-plugin-module-resolver": "^3.2.0",
+    "codecov": "3.7.1",
     "eslint": "^5.16.0",
     "eslint-config-airbnb-base": "^14.0.0",
     "eslint-config-prettier": "^2.9.0",
@@ -58,9 +84,8 @@
     "eslint-plugin-import": "^2.12.0",
     "eslint-plugin-jest": "^21.15.2",
     "eslint-plugin-prettier": "^2.6.0",
+    "get-graphql-schema": "^2.1.2",
     "linkemon": "^0.1.1",
-    "nodemon": "1.18.7",
-    "prettier": "1.12.1",
-    "yalc": "^1.0.0-pre.47"
+    "nodemon": "^2.0.2"
   }
 }
diff --git a/apollos-church-api/scripts/add-packages.sh b/apollos-church-api/scripts/add-packages.sh
new file mode 100755
index 00000000..22587daf
--- /dev/null
+++ b/apollos-church-api/scripts/add-packages.sh
@@ -0,0 +1,30 @@
+# get list of apollosproject packages to update
+
+# get devDependencies line number
+DEVDEPSLINE=$(grep -n "devDependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
+
+# get dependecies line number
+DEPSLINE=$(grep -n "dependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
+
+# determine what npm tag to update to
+if [ "$#" -ne 1 ]; then
+	echo "pass npm tag like this: ./add-packages.sh <TAG>"
+	exit 1
+else
+	TAG=$1
+fi;
+
+# replace package names with version tag
+JSON=$(sed -E "s/^.*\"(@apollosproject\/[a-z\-]+)\".*$/\1@$TAG /g" package.json)
+
+# if packages are listed first and dev packages second...
+if [ $DEVDEPSLINE -gt $DEPSLINE ]
+then
+		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE","$DEVDEPSLINE"p | grep "@apollosproject" | tr -d "\n")
+		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
+else
+		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
+		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE","$DEPSLINE"p | grep "@apollosproject" | tr -d "\n")
+fi
+yarn add --dev $DEVPKGS --ignore-scripts
+yarn add $PKGS --ignore-scripts
diff --git a/apollos-church-api/scripts/generateLocalSchema.sh b/apollos-church-api/scripts/generateLocalSchema.sh
new file mode 100755
index 00000000..59be766f
--- /dev/null
+++ b/apollos-church-api/scripts/generateLocalSchema.sh
@@ -0,0 +1,15 @@
+PING_SERVER="curl 'http://localhost:4000/graphql' -H 'content-type: application/json' -H 'accept: application/json' --data-binary '{\"query\":\"{_placeholder}\"}' > /dev/null 2>&1"
+
+if eval "$PING_SERVER"; then
+  echo 'Server running, downloading schema from localhost:4000'
+  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
+  echo 'Done. Check local.graphql'
+else
+  sleep 1
+  until eval "$PING_SERVER"; do
+      sleep 1
+      echo 'Waiting for server to boot....'
+  done
+  echo 'Curling Server for most recent schema.'
+  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
+fi
diff --git a/apollos-church-api/scripts/init.sh b/apollos-church-api/scripts/init.sh
index b0a810e5..474bfae5 100755
--- a/apollos-church-api/scripts/init.sh
+++ b/apollos-church-api/scripts/init.sh
@@ -3,24 +3,5 @@ if test -f .env; then
 	echo ".env file already exists!"
 	exit 1
 fi
-
-echo "You will need the following before beginning:
-Rock URL
-Rock API Token
-
-Are you ready to proceed? [y/n]: "
-read -r ANSWER
-if $ANSWER != "y"; then
-	exit 1
-fi
-
-echo "Rock URL: "
-read -r ROCK_URL
-echo "Rock API Token: "
-read -r ROCK_TOKEN
-
-echo "ROCK_URL=$ROCK_URL
-ROCK_TOKEN=$ROCK_TOKEN" >.env
-
-# remove template encrypted files
-rm .env.shared.enc
+echo "ROCK_API=
+ROCK_TOKEN=" > .env
diff --git a/apollos-church-api/scripts/translate.js b/apollos-church-api/scripts/translate.js
deleted file mode 100644
index af1db91d..00000000
--- a/apollos-church-api/scripts/translate.js
+++ /dev/null
@@ -1,15 +0,0 @@
-const {
-  createGlobalId,
-  parseGlobalId,
-} = require('@apollosproject/server-core');
-
-const [id] = process.argv.slice(2);
-if (!id) {
-  console.log(
-    'Pass Rock or Apollos ID: translate.js AuthenticatedUser:8sad98fd89sadf98uasdf'
-  );
-  process.exit(1);
-}
-
-if (id.includes(':')) console.log(parseGlobalId(id).id);
-else console.log(createGlobalId(id, 'Generic').split(':')[1]);
diff --git a/apollos-church-api/src/config.js b/apollos-church-api/src/config.js
index 21c96867..59a48535 100644
--- a/apollos-church-api/src/config.js
+++ b/apollos-church-api/src/config.js
@@ -1,40 +1,7 @@
 import path from 'path';
-import fetch from 'node-fetch';
-import dotenv from "dotenv/config"; // eslint-disable-line
+import dotenv from 'dotenv/config'; // eslint-disable-line
 import ApollosConfig from '@apollosproject/config';
 
 ApollosConfig.loadYaml({
   configPath: path.join(__dirname, '..', 'config.yml'),
 });
-
-// defaults
-ApollosConfig.loadJs({
-  ROCK: { TIMEZONE: ApollosConfig?.ROCK?.TIMEZONE || 'America/New_York' },
-});
-
-// autodetect some settings
-(async () => {
-  if (!ApollosConfig.ROCK) return;
-
-  let res;
-
-  // plugin
-  res = await fetch(
-    `${ApollosConfig.ROCK.URL}/api/RestControllers?$select=Name`,
-    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
-  );
-  const hasPlugin = (await res.json())
-    .map(({ Name }) => Name)
-    .includes('Apollos');
-  if (hasPlugin) console.log('Apollos Rock plugin detected!');
-  ApollosConfig.loadJs({ ROCK: { USE_PLUGIN: hasPlugin } });
-
-  // version
-  res = await fetch(
-    `${ApollosConfig.ROCK.URL}/api/Utility/GetRockSemanticVersionNumber`,
-    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
-  );
-  const version = (await res.text()).split('.');
-  console.log(`Rock Version: ${version[1]}`);
-  ApollosConfig.loadJs({ ROCK: { VERSION: version[1] } });
-})();
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index b9886fb3..feab7bb1 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -18,6 +18,7 @@ import {
   Followings,
   Interactions,
   RockConstants,
+  Person,
   ContentItem,
   ContentChannel,
   Sharable,
@@ -27,31 +28,23 @@ import {
   AuthSms,
   Campus,
   Group,
+  BinaryFiles,
   Feature,
-  FeatureFeed,
-  ActionAlgorithm,
   Event,
   PrayerRequest,
-  Persona,
-  Person,
-  BinaryFiles,
 } from '@apollosproject/data-connector-rock';
-
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
-// This is to mock any postgres resolvers so we don't throw API errors for unresolved
-// typedefs
-import NoPostgres from './noPostgres';
-
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
+  Person,
   Cloudinary,
   Auth,
   AuthSms,
@@ -71,16 +64,11 @@ const data = {
   Template,
   Campus,
   Group,
+  BinaryFiles,
   Feature,
-  FeatureFeed,
-  ActionAlgorithm,
   Event,
   Cache,
   PrayerRequest,
-  Persona,
-  Person,
-  BinaryFiles,
-  NoPostgres,
 };
 
 const {
@@ -90,7 +78,6 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
-  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -100,7 +87,6 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
-  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
deleted file mode 100644
index 63052d6f..00000000
--- a/apollos-church-api/src/data/index.postgres.js
+++ /dev/null
@@ -1,121 +0,0 @@
-import { gql } from 'apollo-server';
-
-import {
-  createApolloServerConfig,
-  Interfaces,
-} from '@apollosproject/server-core';
-
-import * as Analytics from '@apollosproject/data-connector-analytics';
-import * as Scripture from '@apollosproject/data-connector-bible';
-import * as LiveStream from '@apollosproject/data-connector-church-online';
-import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
-import * as Search from '@apollosproject/data-connector-algolia-search';
-import * as Pass from '@apollosproject/data-connector-passes';
-import * as Cache from '@apollosproject/data-connector-redis-cache';
-import * as Sms from '@apollosproject/data-connector-twilio';
-import {
-  Followings,
-  Interactions,
-  RockConstants,
-  ContentItem,
-  ContentChannel,
-  Sharable,
-  Auth,
-  PersonalDevice,
-  Template,
-  AuthSms,
-  Campus,
-  Group,
-  BinaryFiles,
-  Feature,
-  FeatureFeed,
-  ActionAlgorithm,
-  Event,
-  PrayerRequest,
-  Persona,
-  Person as RockPerson,
-} from '@apollosproject/data-connector-rock';
-
-import {
-  Comment,
-  UserFlag,
-  UserLike,
-  Follow,
-  Campus as PostgresCampus,
-  Person as PostgresPerson,
-} from '@apollosproject/data-connector-postgres';
-
-import * as Theme from './theme';
-
-// This modules ties together certain updates so they occurs in both Rock and Postgres.
-// Will be eliminated in the future through an enhancement to the Shovel
-import { Person, OneSignal } from './rockWithPostgres';
-
-const data = {
-  Interfaces,
-  Followings,
-  ContentChannel,
-  ContentItem,
-  RockPerson, // This entry needs to come before (postgres) Person
-  BinaryFiles, // This entry needs to come before (postgres) Person
-  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
-  Cloudinary,
-  Auth,
-  AuthSms,
-  Sms,
-  LiveStream,
-  Theme,
-  Scripture,
-  Interactions,
-  RockConstants,
-  Sharable,
-  Analytics,
-  OneSignal,
-  PersonalDevice,
-  Pass,
-  Search,
-  Template,
-  Campus,
-  Group,
-  Feature,
-  FeatureFeed,
-  ActionAlgorithm,
-  Event,
-  Cache,
-  PrayerRequest,
-  Comment,
-  UserLike,
-  UserFlag,
-  Follow,
-  PostgresCampus,
-  Persona,
-  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
-};
-
-const {
-  dataSources,
-  resolvers,
-  schema,
-  context,
-  applyServerMiddleware,
-  setupJobs,
-  migrations,
-} = createApolloServerConfig(data);
-
-export {
-  dataSources,
-  resolvers,
-  schema,
-  context,
-  applyServerMiddleware,
-  setupJobs,
-  migrations,
-};
-
-// the upload Scalar is added
-export const testSchema = [
-  gql`
-    scalar Upload
-  `,
-  ...schema,
-];
diff --git a/apollos-church-api/src/data/noPostgres.js b/apollos-church-api/src/data/noPostgres.js
deleted file mode 100644
index bd292eac..00000000
--- a/apollos-church-api/src/data/noPostgres.js
+++ /dev/null
@@ -1,46 +0,0 @@
-// The purpose of this file is to mock the postgres resolvers to null so the API doesn't fail when
-// there's no database. This will not be necessary when Postgres is required by all Apollos APIs.
-import gql from 'graphql-tag';
-import { Comment, Follow } from '@apollosproject/data-connector-postgres';
-
-export default {
-  schema: gql`
-    ${Comment.schema}
-    ${Follow.schema}
-  `,
-  resolver: {
-    Query: {
-      followRequests: () => [],
-      suggestedFollows: () => [],
-      searchPeople: () => {},
-    },
-    Mutation: {
-      addComment: () => null,
-      flagComment: () => null,
-      requestFollow: () => null,
-      acceptFollowRequest: () => null,
-      ignoreFollowRequest: () => null,
-    },
-    Comment: {
-      person: () => null,
-      id: () => null,
-    },
-    CommentListFeature: {
-      id: () => null,
-    },
-    AddCommentFeature: {
-      id: () => null,
-      initialPrompt: () => null,
-      addPrompt: () => null,
-      relatedNode: () => null,
-    },
-    Person: {
-      currentUserFollowing: () => null,
-      followingCurrentUser: () => null,
-    },
-    SearchPeopleResultsConnection: {
-      edges: () => [],
-      pageInfo: () => null,
-    },
-  },
-};
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
deleted file mode 100644
index cc1696f0..00000000
--- a/apollos-church-api/src/data/rockWithPostgres.js
+++ /dev/null
@@ -1,127 +0,0 @@
-/* eslint-disable import/prefer-default-export, max-classes-per-file */
-import { parseGlobalId } from '@apollosproject/server-core';
-import { Person as postgresPerson } from '@apollosproject/data-connector-postgres';
-import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
-
-class personDataSource extends postgresPerson.dataSource {
-  async create(attributes) {
-    const rockPersonId = await this.context.dataSources.RockPerson.create(
-      attributes
-    );
-    super.create({
-      ...attributes,
-      originType: 'rock',
-      originId: String(rockPersonId),
-    });
-    return rockPersonId;
-  }
-}
-
-// These resolvers make sure that calls to updating profile fields update both the
-const personResolver = {
-  Mutation: {
-    updateProfileField: async (
-      root,
-      { input: { field, value } },
-      { dataSources }
-    ) => {
-      await dataSources.RockPerson.updateProfile([{ field, value }]); // Update in Rock
-      return dataSources.Person.updateProfile([{ field, value }]); // updates in Postgres
-    },
-    updateProfileFields: async (root, { input }, { dataSources }) => {
-      await dataSources.RockPerson.updateProfile(input); // Update in Rock
-      return dataSources.Person.updateProfile(input); // updates in Postgres
-    },
-    uploadProfileImage: async (root, { file, size }, { dataSources }) => {
-      const person = await dataSources.RockPerson.uploadProfileImage(
-        file,
-        size
-      ); // Update in Rock
-      return dataSources.Person.updateProfile([
-        { field: 'profileImageUrl', value: person.photo.url },
-      ]); // updates in Postgres. Reuses already uploaded imageUrl
-      // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
-    },
-    updateUserCampus: async (root, { campusId }, { dataSources }) => {
-      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
-
-      const { id: rockCampusId } = parseGlobalId(campusId);
-      const campus = await dataSources.PostgresCampus.getFromId(
-        rockCampusId,
-        null,
-        {
-          originType: 'rock',
-        }
-      ); // finds the postgres campus id
-      return dataSources.Person.updateProfile([
-        { field: 'campusId', value: campus.id },
-      ]); // updates in Postgres
-    },
-    updateUserPushSettings: async (root, { input }, { dataSources }) => {
-      // register the changes w/ one signal
-      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
-
-      // if the pushProviderUserId is changing, we need ot register the device with rock.
-      if (input.pushProviderUserId != null) {
-        await dataSources.PersonalDevice.addPersonalDevice({
-          pushId: input.pushProviderUserId,
-        });
-      }
-
-      try {
-        await dataSources.Person.updateProfile([
-          {
-            field: 'apollosUser',
-            value: true,
-          },
-        ]);
-      } catch (e) {
-        console.warn(e);
-      }
-
-      // return the original return value (which is currentPerson)
-      return returnValue;
-    },
-  },
-};
-
-export const Person = {
-  dataSource: personDataSource,
-  resolver: personResolver,
-};
-
-class oneSignalDataSource extends OneSignalOriginal.dataSource {
-  async createNotification({
-    toUserIds = [],
-    to,
-    content = '',
-    heading,
-    subtitle,
-    ...args
-  }) {
-    if (to && to.originId && to.originType === 'rock') {
-      const person = await this.context.dataSources.RockPerson.getFromId(
-        to.originId
-      );
-      return super.createNotification({
-        toUserIds: [person.primaryAliasId],
-        content,
-        heading,
-        subtitle,
-        ...args,
-      });
-    }
-    return super.createNotification({
-      toUserIds,
-      content,
-      heading,
-      subtitle,
-      ...args,
-    });
-  }
-}
-
-export const OneSignal = {
-  ...OneSignalOriginal,
-  dataSource: oneSignalDataSource,
-};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 613e7219..3acfad03 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,5 +1,4 @@
 import dotenv from 'dotenv/config'; // eslint-disable-line
-import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
 import config from './config'; // eslint-disable-line
 import server from './server';
 
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index b200cb5c..e0106a67 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -4,17 +4,8 @@ import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
-import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
-
-let dataObj;
-
-if (ApollosConfig?.DATABASE?.URL) {
-  dataObj = require('./data/index.postgres');
-} else {
-  dataObj = require('./data/index');
-}
-
-const {
+import { BugsnagPlugin } from '@apollosproject/bugsnag';
+import {
   resolvers,
   schema,
   testSchema,
@@ -22,8 +13,7 @@ const {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-  migrations,
-} = dataObj;
+} from './data';
 
 export { resolvers, schema, testSchema };
 
@@ -42,7 +32,7 @@ const cacheOptions = isDev
       },
     };
 
-const { ROCK, APP } = ApollosConfig;
+const { ENGINE } = ApollosConfig;
 
 const apolloServer = new ApolloServer({
   typeDefs: schema,
@@ -51,8 +41,9 @@ const apolloServer = new ApolloServer({
   context,
   introspection: true,
   extensions,
+  plugins: [new BugsnagPlugin()],
   formatError: (error) => {
-    console.error(get(error, 'extensions.exception.stacktrace', []).join('\n'));
+    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
     return error;
   },
   playground: {
@@ -61,13 +52,17 @@ const apolloServer = new ApolloServer({
     },
   },
   ...cacheOptions,
+  engine: {
+    apiKey: ENGINE.API_KEY,
+    schemaTag: ENGINE.SCHEMA_TAG,
+  },
 });
 
 const app = express();
 
-// password reset
-app.get('/forgot-password', (req, res) => {
-  res.redirect(APP.FORGOT_PASSWORD_URL || `${ROCK.URL}/page/56`);
+// health check
+app.get('/health', (req, res) => {
+  res.send('ok');
 });
 
 applyServerMiddleware({ app, dataSources, context });
@@ -78,13 +73,4 @@ setupUniversalLinks({ app });
 apolloServer.applyMiddleware({ app });
 apolloServer.applyMiddleware({ app, path: '/' });
 
-// make sure this is called last.
-// (or at least after the apollos server setup)
-(async () => {
-  if (ApollosConfig?.DATABASE?.URL) {
-    const migrationRunner = await createMigrationRunner({ migrations });
-    await migrationRunner.up();
-  }
-})();
-
 export default app;
