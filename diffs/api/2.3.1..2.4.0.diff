diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index e82a4e48..c24d8e54 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.3.0",
+  "version": "2.3.1",
   "environment": "api"
 }
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index b7ad37c2..22001cf8 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -5,9 +5,8 @@
   "main": "lib/index.js",
   "scripts": {
     "setup": "./scripts/init.sh",
-    "start": "yarn start:prod",
+    "start": "NODE_ENV=production node ./lib/index.js",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
-    "start:prod": "NODE_ENV=production node ./lib/index.js",
     "postinstall": "yarn build",
     "link-packages": "node ./scripts/link-packages && yarn yalc update",
     "unlink-packages": "node ./scripts/link-packages remove && rm -rf ./node_modules",
@@ -20,22 +19,22 @@
     "node": ">=12.x.x"
   },
   "dependencies": {
-    "@apollosproject/bugsnag": "^2.3.1",
-    "@apollosproject/config": "^2.3.1",
-    "@apollosproject/data-connector-algolia-search": "^2.3.1",
-    "@apollosproject/data-connector-analytics": "^2.3.1",
-    "@apollosproject/data-connector-bible": "^2.3.1",
-    "@apollosproject/data-connector-church-online": "^2.3.1",
-    "@apollosproject/data-connector-cloudinary": "^2.3.1",
-    "@apollosproject/data-connector-onesignal": "^2.3.1",
-    "@apollosproject/data-connector-passes": "^2.3.1",
-    "@apollosproject/data-connector-postgres": "^2.3.1",
-    "@apollosproject/data-connector-redis-cache": "^2.3.1",
-    "@apollosproject/data-connector-rock": "^2.3.1",
-    "@apollosproject/data-connector-twilio": "^2.3.1",
-    "@apollosproject/data-schema": "^2.3.1",
-    "@apollosproject/rock-apollo-data-source": "^2.3.1",
-    "@apollosproject/server-core": "^2.3.1",
+    "@apollosproject/bugsnag": "^2.4.0",
+    "@apollosproject/config": "^2.4.0",
+    "@apollosproject/data-connector-algolia-search": "^2.4.0",
+    "@apollosproject/data-connector-analytics": "^2.4.0",
+    "@apollosproject/data-connector-bible": "^2.4.0",
+    "@apollosproject/data-connector-church-online": "^2.4.0",
+    "@apollosproject/data-connector-cloudinary": "^2.4.0",
+    "@apollosproject/data-connector-onesignal": "^2.4.0",
+    "@apollosproject/data-connector-passes": "^2.4.0",
+    "@apollosproject/data-connector-postgres": "^2.4.0",
+    "@apollosproject/data-connector-redis-cache": "^2.4.0",
+    "@apollosproject/data-connector-rock": "^2.4.0",
+    "@apollosproject/data-connector-twilio": "^2.4.0",
+    "@apollosproject/data-schema": "^2.4.0",
+    "@apollosproject/rock-apollo-data-source": "^2.4.0",
+    "@apollosproject/server-core": "^2.4.0",
     "apollo-server": "^2.14.2",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
@@ -45,12 +44,13 @@
     "graphql": "14.6.0",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3",
-    "sqlite3": "^5.0.1"
+    "sqlite3": "^5.0.1",
+    "umzug": "^3.0.0-beta.15"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.3.1",
-    "@apollosproject/babel-preset-apollos": "^2.3.1",
-    "@apollosproject/eslint-config": "^2.3.1",
+    "@apollosproject/apollo-server-env-mock": "^2.4.0",
+    "@apollosproject/babel-preset-apollos": "^2.4.0",
+    "@apollosproject/eslint-config": "^2.4.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 7f73dd94..1945d14d 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -34,37 +34,21 @@ import {
   Event,
   PrayerRequest,
   Persona,
-  Person as RockPerson,
+  Person,
 } from '@apollosproject/data-connector-rock';
 
-import {
-  Comment,
-  UserFlag,
-  Follow,
-  Campus as PostgresCampus,
-  Person as PostgresPerson,
-} from '@apollosproject/data-connector-postgres';
-// import * as PostgresPerson from '@apollosproject/data-connector-postgres/lib/people';
-// import * as PostgresCampus from '@apollosproject/data-connector-postgres/lib/campus';
-
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
-// This modules ties together certain updates so they occurs in both Rock and Postgres.
-// Will be eliminated in the future through an enhancement to the Shovel
-import * as Person from './rockWithPostgres';
-
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
-  RockPerson, // This entry needs to come before (postgres) Person
-  BinaryFiles, // This entry needs to come before (postgres) Person
-  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
+  BinaryFiles,
   Cloudinary,
   Auth,
   AuthSms,
@@ -90,12 +74,8 @@ const data = {
   Event,
   Cache,
   PrayerRequest,
-  Comment,
-  UserFlag,
-  Follow,
-  PostgresCampus,
   Persona,
-  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
+  Person,
 };
 
 const {
@@ -105,6 +85,7 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -114,6 +95,7 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
new file mode 100644
index 00000000..81cb372e
--- /dev/null
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -0,0 +1,123 @@
+import { gql } from 'apollo-server';
+
+import {
+  createApolloServerConfig,
+  Interfaces,
+} from '@apollosproject/server-core';
+
+import * as Analytics from '@apollosproject/data-connector-analytics';
+import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
+import * as OneSignal from '@apollosproject/data-connector-onesignal';
+import * as Search from '@apollosproject/data-connector-algolia-search';
+import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
+import * as Sms from '@apollosproject/data-connector-twilio';
+import {
+  Followings,
+  Interactions,
+  RockConstants,
+  ContentItem,
+  ContentChannel,
+  Sharable,
+  Auth,
+  PersonalDevice,
+  Template,
+  AuthSms,
+  Campus,
+  Group,
+  BinaryFiles,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  PrayerRequest,
+  Persona,
+  Person as RockPerson,
+} from '@apollosproject/data-connector-rock';
+
+import {
+  Comment,
+  UserFlag,
+  Follow,
+  Campus as PostgresCampus,
+  Person as PostgresPerson,
+} from '@apollosproject/data-connector-postgres';
+
+import * as Theme from './theme';
+
+// This module is used to attach Rock User updating to the OneSignal module.
+// This module includes a Resolver that overides a resolver defined in `OneSignal`
+import * as OneSignalWithRock from './oneSignalWithRock';
+
+// This modules ties together certain updates so they occurs in both Rock and Postgres.
+// Will be eliminated in the future through an enhancement to the Shovel
+import * as Person from './rockWithPostgres';
+
+const data = {
+  Interfaces,
+  Followings,
+  ContentChannel,
+  ContentItem,
+  RockPerson, // This entry needs to come before (postgres) Person
+  BinaryFiles, // This entry needs to come before (postgres) Person
+  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
+  Cloudinary,
+  Auth,
+  AuthSms,
+  Sms,
+  LiveStream,
+  Theme,
+  Scripture,
+  Interactions,
+  RockConstants,
+  Sharable,
+  Analytics,
+  OneSignal,
+  PersonalDevice,
+  OneSignalWithRock,
+  Pass,
+  Search,
+  Template,
+  Campus,
+  Group,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  Cache,
+  PrayerRequest,
+  Comment,
+  UserFlag,
+  Follow,
+  PostgresCampus,
+  Persona,
+  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
+};
+
+const {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+} = createApolloServerConfig(data);
+
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+};
+
+// the upload Scalar is added
+export const testSchema = [
+  gql`
+    scalar Upload
+  `,
+  ...schema,
+];
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 8b6d732e..9b78bea1 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -8,9 +8,20 @@ import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
 import { BugsnagPlugin } from '@apollosproject/bugsnag';
-import { sync } from '@apollosproject/data-connector-postgres';
-// import { seed } from '../seeds';
 import {
+  sync,
+  createMigrationRunner,
+} from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.DATABASE_URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const {
   resolvers,
   schema,
   testSchema,
@@ -18,7 +29,8 @@ import {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-} from './data';
+  migrations,
+} = dataObj;
 
 export { resolvers, schema, testSchema };
 
@@ -92,8 +104,11 @@ apolloServer.applyMiddleware({ app, path: '/' });
 // make sure this is called last.
 // (or at least after the apollos server setup)
 (async () => {
-  await sync();
-  // await seed();
+  if (ApollosConfig?.DATABASE?.DATABASE_URL) {
+    const migrationRunner = await createMigrationRunner({ migrations });
+    await migrationRunner.up();
+    await sync();
+  }
 })();
 
 export default app;
