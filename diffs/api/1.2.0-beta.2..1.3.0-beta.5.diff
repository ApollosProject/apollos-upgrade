diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 6302f78..508442d 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.2.0-beta.2",
+    "version": "1.3.0-beta.5",
     "environment": "api"
 }
\ No newline at end of file
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 38a692d..c8754e4 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -12,6 +12,8 @@ APP:
   # It should match whatver is in your Info.plist `CFBundleURLTypes`
   DEEP_LINK_HOST: apolloschurchapp
   ROOT_API_URL: ${ROOT_URL}
+  JOBS_USERNAME: ${JOBS_USERNAME}
+  JOBS_PASSWORD: ${JOBS_PASSWORD}
 ROCK:
   API_URL: https://apollosrock.newspring.cc/api
   API_TOKEN: ${ROCK_TOKEN}
@@ -20,6 +22,7 @@ ROCK:
   # This should match the timezone of the Rock server
   TIMEZONE: 'America/New_York'
   USE_PLUGIN: true
+  SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
 ONE_SIGNAL:
   APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
@@ -30,8 +33,20 @@ CHURCH_ONLINE:
 ALGOLIA:
   APPLICATION_ID: ${ALGOLIA_APP_ID}
   API_KEY: ${ALGOLIA_API_KEY}
-  # TODO: should we support multiple indices? how?
-  SEARCH_INDEX: test_ContentItems
+  # TODO: should we support multiple indices? how
+  SEARCH_INDEX: test_ContentItem
+  # Configure Algolia custom settings here
+  # https://www.algolia.com/doc/api-reference/settings-api-parameters/
+  CONFIGURATION:
+    searchableAttributes:
+      - title
+      - unordered(summary)
+    #customRankings:
+      # NOT CURRENTLY INCLUDED
+      # This just demonstrates what's possible
+      # To include likedCount (or any other field) override search package
+      # and add field to config below
+      #- desc(likedCount)
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -49,9 +64,12 @@ ANALYTICS:
   # on the accompanying service
   SEGMENT_KEY:
   GA_ID:
+  USE_ROCK: true
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
-  BIBLE_ID: '9879dbb7cfe39e4d-01'
+  BIBLE_ID:
+    WEB: '9879dbb7cfe39e4d-01'
+    KJV: 'de4e12af7f28f599-02'
 CLOUDINARY:
   # Cloudinary is used to improve image loading
   # value should look something like
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
index 2d2b05c..7438b56 100644
--- a/apollos-church-api/local.graphql
+++ b/apollos-church-api/local.graphql
@@ -1,3 +1,5 @@
+directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE
+
 enum ACTION_FEATURE_ACTION {
   READ_CONTENT
   READ_EVENT
@@ -70,7 +72,8 @@ type AudioMediaSource implements MediaSource {
 type AuthenticatedUser {
   id: ID!
   profile: Person
-  rockToken: String
+  rock: RockPersonDetails
+  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
 }
 
 type Authentication {
@@ -99,8 +102,8 @@ type Campus implements Node {
 }
 
 input CampusLocationInput {
-  latitude: Float!
-  longitude: Float!
+  latitude: Float
+  longitude: Float
 }
 
 """A rgb color string"""
@@ -117,7 +120,7 @@ type ContentChannel implements Node {
 
 interface ContentItem {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -135,6 +138,7 @@ interface ContentItem {
 
 type ContentItemsConnection {
   edges: [ContentItemsConnectionEdge]
+  totalCount: Int
   pageInfo: PaginationInfo
 }
 
@@ -150,7 +154,7 @@ input ContentItemsConnectionInput {
 
 type ContentSeriesContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -170,7 +174,7 @@ type ContentSeriesContentItem implements ContentItem & Node {
 
 type DevotionalContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -190,6 +194,7 @@ type DevotionalContentItem implements ContentItem & Node {
 type Event implements Node {
   id: ID!
   name: String
+  description: String
   location: String
   start: String
   end: String
@@ -246,6 +251,7 @@ type LiveStream {
   eventStartTime: String
   media: VideoMedia
   webViewUrl: String
+  contentItem: ContentItem
 }
 
 interface Media {
@@ -256,7 +262,7 @@ interface Media {
 
 type MediaContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -291,9 +297,10 @@ type Mutation {
   uploadProfileImage(file: Upload!, size: Int!): Person
   authenticate(identity: String!, password: String!): Authentication
   changePassword(password: String!): Authentication
-  registerPerson(email: String!, password: String!): Authentication
+  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
   requestSmsLoginPin(phoneNumber: String!): SmsPinResult
   authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
+  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
   identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
   trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
   updateUserPushSettings(input: PushSettingsInput!): Person
@@ -370,20 +377,28 @@ type Query {
   userFeed(first: Int, after: String): ContentItemsConnection
   personaFeed(first: Int, after: String): ContentItemsConnection
   currentUser: AuthenticatedUser
-  liveStream: LiveStream
-  scripture(query: String!): Scripture
-  scriptures(query: String!): [Scripture]
+  userExists(identity: String): USER_AUTH_STATUS
+  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
+  liveStreams: [LiveStream]
+  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
+  scriptures(query: String!, version: VERSION): [Scripture]
   userPass: Pass
   search(query: String!, first: Int, after: String): SearchResultsConnection
   campuses(location: CampusLocationInput): [Campus]
   userFeedFeatures: [Feature]
 }
 
+type RockPersonDetails {
+  authToken: String
+  authCookie: String
+}
+
 type Scripture implements Node {
   id: ID!
   html: String
   reference: String
   copyright: String
+  version: String
 }
 
 type ScriptureFeature implements Feature & Node {
@@ -426,6 +441,7 @@ type SharableFeature implements Sharable {
 
 type SmsPinResult {
   success: Boolean
+  userAuthStatus: USER_AUTH_STATUS
 }
 
 type TextFeature implements Feature & Node {
@@ -455,7 +471,7 @@ enum ThemeType {
 
 type UniversalContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -488,6 +504,17 @@ input UpdateProfileInput {
 """The `Upload` scalar type represents a file upload."""
 scalar Upload
 
+enum USER_AUTH_STATUS {
+  NONE
+  NEW_APP_USER
+  EXISTING_APP_USER
+}
+
+enum VERSION {
+  WEB
+  KJV
+}
+
 type VideoMedia implements Media {
   name: String
   key: String
@@ -501,7 +528,7 @@ type VideoMediaSource implements MediaSource {
 
 type WeekendContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 244a590..0b887f8 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apollos-church-api",
-  "version": "1.2.0-beta.2",
+  "version": "1.3.0-beta.5",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
@@ -34,18 +34,20 @@
     ]
   },
   "dependencies": {
-    "@apollosproject/config": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-algolia-search": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-analytics": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-bible": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-church-online": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-cloudinary": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-onesignal": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-passes": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-rock": "^1.2.0-beta.2",
-    "@apollosproject/data-connector-twilio": "^1.2.0-beta.2",
-    "@apollosproject/rock-apollo-data-source": "^1.2.0-beta.2",
-    "@apollosproject/server-core": "^1.2.0-beta.2",
+    "@apollosproject/config": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-algolia-search": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-analytics": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-bible": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-church-online": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-cloudinary": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-onesignal": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-passes": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-redis-cache": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-rock": "^1.3.0-beta.5",
+    "@apollosproject/data-connector-twilio": "^1.3.0-beta.5",
+    "@apollosproject/data-schema": "^1.3.0-beta.5",
+    "@apollosproject/rock-apollo-data-source": "^1.3.0-beta.5",
+    "@apollosproject/server-core": "^1.3.0-beta.5",
     "apollo-server": "^2.0.5",
     "apollo-server-express": "2.4.8",
     "color": "3.0.0",
@@ -56,8 +58,8 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^1.2.0-beta.2",
-    "@apollosproject/babel-preset-apollos": "^1.2.0-beta.2",
+    "@apollosproject/apollo-server-env-mock": "^1.3.0-beta.5",
+    "@apollosproject/babel-preset-apollos": "^1.3.0-beta.5",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@entria/graphql-findbreakingchanges": "^1.0.1",
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index a22d28c..50d8d41 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -9,6 +9,7 @@ import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
 import * as OneSignal from '@apollosproject/data-connector-onesignal';
 import * as Search from '@apollosproject/data-connector-algolia-search';
 import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
 import * as Sms from '@apollosproject/data-connector-twilio';
 import {
   Followings,
@@ -61,6 +62,7 @@ const data = {
   BinaryFiles,
   Features,
   Event,
+  Cache,
 };
 
 const {
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 8652945..88a6902 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -2,6 +2,7 @@ import { ApolloServer } from 'apollo-server-express';
 import ApollosConfig from '@apollosproject/config';
 import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
+import { get } from 'lodash';
 
 import {
   resolvers,
@@ -26,7 +27,7 @@ const cacheOptions = isDev
       cacheControl: {
         stripFormattedExtensions: false,
         calculateHttpHeaders: true,
-        defaultMaxAge: 600,
+        defaultMaxAge: 3600,
       },
     };
 
@@ -40,7 +41,7 @@ const apolloServer = new ApolloServer({
   introspection: true,
   extensions,
   formatError: (error) => {
-    console.error(error.extensions.exception.stacktrace.join('\n'));
+    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
     return error;
   },
   playground: {
