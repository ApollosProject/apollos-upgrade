diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index ce4f7ce..e395a33 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.3.0-beta.6",
+    "version": "1.1.0-beta.3",
     "environment": "api"
 }
\ No newline at end of file
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index c8754e4..7127f7a 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -12,17 +12,12 @@ APP:
   # It should match whatver is in your Info.plist `CFBundleURLTypes`
   DEEP_LINK_HOST: apolloschurchapp
   ROOT_API_URL: ${ROOT_URL}
-  JOBS_USERNAME: ${JOBS_USERNAME}
-  JOBS_PASSWORD: ${JOBS_PASSWORD}
 ROCK:
   API_URL: https://apollosrock.newspring.cc/api
   API_TOKEN: ${ROCK_TOKEN}
   IMAGE_URL: https://apollosrock.newspring.cc/GetImage.ashx
-  SHARE_URL: https://apollosrock.newspring.cc
   # This should match the timezone of the Rock server
   TIMEZONE: 'America/New_York'
-  USE_PLUGIN: true
-  SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
 ONE_SIGNAL:
   APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
@@ -30,23 +25,6 @@ CHURCH_ONLINE:
   URL: https://apollos.churchonline.org/api/v1/
   MEDIA_URLS: []
   WEB_VIEW_URL: https://apollos.churchonline.org/
-ALGOLIA:
-  APPLICATION_ID: ${ALGOLIA_APP_ID}
-  API_KEY: ${ALGOLIA_API_KEY}
-  # TODO: should we support multiple indices? how
-  SEARCH_INDEX: test_ContentItem
-  # Configure Algolia custom settings here
-  # https://www.algolia.com/doc/api-reference/settings-api-parameters/
-  CONFIGURATION:
-    searchableAttributes:
-      - title
-      - unordered(summary)
-    #customRankings:
-      # NOT CURRENTLY INCLUDED
-      # This just demonstrates what's possible
-      # To include likedCount (or any other field) override search package
-      # and add field to config below
-      #- desc(likedCount)
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -64,20 +42,14 @@ ANALYTICS:
   # on the accompanying service
   SEGMENT_KEY:
   GA_ID:
-  USE_ROCK: true
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
-  BIBLE_ID:
-    WEB: '9879dbb7cfe39e4d-01'
-    KJV: 'de4e12af7f28f599-02'
+  BIBLE_ID: '9879dbb7cfe39e4d-01'
 CLOUDINARY:
   # Cloudinary is used to improve image loading
   # value should look something like
   # cloudinary://123123123:adkfnla_adASDv_adAS@test
   URL: ${CLOUDINARY_URL}
-ENGINE:
-  API_KEY: ${ENGINE_API_KEY}
-  SCHEMA_TAG: ${ENGINE_SCHEMA_TAG}
 
 # This key holds various properties that allow our GraphQL server to map to your Rock Instance
 ROCK_MAPPINGS:
@@ -121,7 +93,6 @@ ROCK_MAPPINGS:
     - 8
   # Apollos will pull content items from these channels and expose them on the user feed
   # However, it will not expose the channel itself.
-  # These channels are also pulled when indexing searchable content.
   FEED_CONTENT_CHANNEL_IDS:
     - 1
     - 2
@@ -136,22 +107,7 @@ ROCK_MAPPINGS:
 
   SERMON_CHANNEL_ID: 5
 
-  SERVING_GROUP_TYPE_ID: 23
-  COMMUNITY_GROUP_TYPE_ID: 25
-  FAMILY_GROUP_TYPE_ID: 10
-
-HOME_FEATURES:
-  - title: FOR YOU
-    algorithms: [SERMON_CHILDREN, PERSONA_FEED]
-    subtitle: Explore what God calls you to today
-  - title: BULLETIN
-    subtitle: What's happening at apollos?
-    algorithms:
-      - type: CONTENT_CHANNEL
-        arguments:
-          contentChannelId: 13
-      - type: UPCOMING_EVENTS
-
+  HOME_FEATURE_CHANNEL_ID: 13
 
 # Default mapping of field types -> ids. There's probably no reason to edit this.
 ROCK_CONSTANTS:
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
index 7438b56..e387714 100644
--- a/apollos-church-api/local.graphql
+++ b/apollos-church-api/local.graphql
@@ -1,8 +1,5 @@
-directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE
-
 enum ACTION_FEATURE_ACTION {
   READ_CONTENT
-  READ_EVENT
 }
 
 type ActionListAction {
@@ -72,8 +69,7 @@ type AudioMediaSource implements MediaSource {
 type AuthenticatedUser {
   id: ID!
   profile: Person
-  rock: RockPersonDetails
-  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
+  rockToken: String
 }
 
 type Authentication {
@@ -98,12 +94,11 @@ type Campus implements Node {
   longitude: Float
   image: ImageMediaSource
   distanceFromLocation(location: CampusLocationInput): Float
-  events: [Event]
 }
 
 input CampusLocationInput {
-  latitude: Float
-  longitude: Float
+  latitude: Float!
+  longitude: Float!
 }
 
 """A rgb color string"""
@@ -120,7 +115,7 @@ type ContentChannel implements Node {
 
 interface ContentItem {
   id: ID!
-  title(hyphenated: Boolean): String
+  title: String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -138,7 +133,6 @@ interface ContentItem {
 
 type ContentItemsConnection {
   edges: [ContentItemsConnectionEdge]
-  totalCount: Int
   pageInfo: PaginationInfo
 }
 
@@ -154,7 +148,7 @@ input ContentItemsConnectionInput {
 
 type ContentSeriesContentItem implements ContentItem & Node {
   id: ID!
-  title(hyphenated: Boolean): String
+  title: String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -174,7 +168,7 @@ type ContentSeriesContentItem implements ContentItem & Node {
 
 type DevotionalContentItem implements ContentItem & Node {
   id: ID!
-  title(hyphenated: Boolean): String
+  title: String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -191,16 +185,6 @@ type DevotionalContentItem implements ContentItem & Node {
   sharing: SharableContentItem
 }
 
-type Event implements Node {
-  id: ID!
-  name: String
-  description: String
-  location: String
-  start: String
-  end: String
-  image: ImageMedia
-}
-
 interface Feature {
   id: ID!
   order: Int
@@ -212,20 +196,6 @@ enum GENDER {
   Unknown
 }
 
-type Group implements Node {
-  id: ID!
-  name: String
-  leader: Person @deprecated(reason: "No longer used, use 'leaders' instead")
-  leaders: [Person]
-  members: [Person]
-}
-
-enum GROUP_TYPE {
-  Serving
-  Community
-  Family
-}
-
 type ImageMedia implements Media {
   name: String
   key: String
@@ -251,7 +221,6 @@ type LiveStream {
   eventStartTime: String
   media: VideoMedia
   webViewUrl: String
-  contentItem: ContentItem
 }
 
 interface Media {
@@ -262,7 +231,7 @@ interface Media {
 
 type MediaContentItem implements ContentItem & Node {
   id: ID!
-  title(hyphenated: Boolean): String
+  title: String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -297,10 +266,9 @@ type Mutation {
   uploadProfileImage(file: Upload!, size: Int!): Person
   authenticate(identity: String!, password: String!): Authentication
   changePassword(password: String!): Authentication
-  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
+  registerPerson(email: String!, password: String!): Authentication
   requestSmsLoginPin(phoneNumber: String!): SmsPinResult
   authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
-  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
   identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
   trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
   updateUserPushSettings(input: PushSettingsInput!): Person
@@ -353,14 +321,13 @@ enum PassType {
 type Person implements Node {
   id: ID!
   firstName: String
-  lastName: String
+  lastName: String!
   nickName: String
   email: String
   gender: GENDER
   birthDate: String
   photo: ImageMediaSource
   campus: Campus
-  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
 }
 
 input PushSettingsInput {
@@ -377,78 +344,47 @@ type Query {
   userFeed(first: Int, after: String): ContentItemsConnection
   personaFeed(first: Int, after: String): ContentItemsConnection
   currentUser: AuthenticatedUser
-  userExists(identity: String): USER_AUTH_STATUS
-  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
-  liveStreams: [LiveStream]
-  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
-  scriptures(query: String!, version: VERSION): [Scripture]
+  liveStream: LiveStream
+  scripture(query: String!): Scripture
+  scriptures(query: String!): [Scripture]
   userPass: Pass
-  search(query: String!, first: Int, after: String): SearchResultsConnection
   campuses(location: CampusLocationInput): [Campus]
   userFeedFeatures: [Feature]
 }
 
-type RockPersonDetails {
-  authToken: String
-  authCookie: String
-}
-
 type Scripture implements Node {
   id: ID!
   html: String
   reference: String
   copyright: String
-  version: String
 }
 
 type ScriptureFeature implements Feature & Node {
   id: ID!
   order: Int
   scriptures: [Scripture]
-  sharing: SharableFeature
-}
-
-type SearchResult {
-  cursor: String
-  title: String
-  summary: String
-  coverImage: ImageMedia
-  node: Node
-}
-
-type SearchResultsConnection {
-  edges: [SearchResult]
-  pageInfo: PaginationInfo
 }
 
 interface Sharable {
+  url: String
   message: String
   title: String
-  url: String @deprecated(reason: "Not supported on the interface")
 }
 
 type SharableContentItem implements Sharable {
-  message: String
-  title: String
   url: String
-}
-
-type SharableFeature implements Sharable {
   message: String
   title: String
-  url: String @deprecated(reason: "Not supported on a feature")
 }
 
 type SmsPinResult {
   success: Boolean
-  userAuthStatus: USER_AUTH_STATUS
 }
 
 type TextFeature implements Feature & Node {
   id: ID!
   order: Int
   body: String
-  sharing: SharableFeature
 }
 
 type Theme {
@@ -471,7 +407,7 @@ enum ThemeType {
 
 type UniversalContentItem implements ContentItem & Node {
   id: ID!
-  title(hyphenated: Boolean): String
+  title: String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -504,17 +440,6 @@ input UpdateProfileInput {
 """The `Upload` scalar type represents a file upload."""
 scalar Upload
 
-enum USER_AUTH_STATUS {
-  NONE
-  NEW_APP_USER
-  EXISTING_APP_USER
-}
-
-enum VERSION {
-  WEB
-  KJV
-}
-
 type VideoMedia implements Media {
   name: String
   key: String
@@ -528,7 +453,7 @@ type VideoMediaSource implements MediaSource {
 
 type WeekendContentItem implements ContentItem & Node {
   id: ID!
-  title(hyphenated: Boolean): String
+  title: String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index e0d6086..a4d5d88 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apollos-church-api",
-  "version": "1.3.0-beta.6",
+  "version": "1.1.0-beta.3",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
@@ -34,20 +34,17 @@
     ]
   },
   "dependencies": {
-    "@apollosproject/config": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-algolia-search": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-analytics": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-bible": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-church-online": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-cloudinary": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-onesignal": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-passes": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-redis-cache": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-rock": "^1.3.0-beta.6",
-    "@apollosproject/data-connector-twilio": "^1.3.0-beta.6",
-    "@apollosproject/data-schema": "^1.3.0-beta.6",
-    "@apollosproject/rock-apollo-data-source": "^1.3.0-beta.6",
-    "@apollosproject/server-core": "^1.3.0-beta.6",
+    "@apollosproject/config": "^1.1.0-beta.3",
+    "@apollosproject/data-connector-analytics": "^1.1.0-beta.3",
+    "@apollosproject/data-connector-bible": "^1.1.0-beta.3",
+    "@apollosproject/data-connector-church-online": "^1.1.0-beta.3",
+    "@apollosproject/data-connector-cloudinary": "^1.1.0-beta.3",
+    "@apollosproject/data-connector-onesignal": "^1.1.0-beta.3",
+    "@apollosproject/data-connector-passes": "^1.1.0-beta.3",
+    "@apollosproject/data-connector-rock": "^1.1.0-beta.3",
+    "@apollosproject/data-connector-twilio": "^1.1.0-beta.3",
+    "@apollosproject/rock-apollo-data-source": "^1.1.0-beta.3",
+    "@apollosproject/server-core": "^1.1.0-beta.3",
     "apollo-server": "^2.0.5",
     "apollo-server-express": "2.4.8",
     "color": "3.0.0",
@@ -58,8 +55,8 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^1.3.0-beta.6",
-    "@apollosproject/babel-preset-apollos": "^1.3.0-beta.6",
+    "@apollosproject/apollo-server-env-mock": "^1.1.0-beta.3",
+    "@apollosproject/babel-preset-apollos": "^1.1.0-beta.3",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@entria/graphql-findbreakingchanges": "^1.0.1",
diff --git a/apollos-church-api/scripts/generateLocalSchema.sh b/apollos-church-api/scripts/generateLocalSchema.sh
index d8008f2..dc7e07e 100755
--- a/apollos-church-api/scripts/generateLocalSchema.sh
+++ b/apollos-church-api/scripts/generateLocalSchema.sh
@@ -8,7 +8,7 @@ else
   echo $*
   if [ "$*" = "--start-server" ]; then
     echo 'Server not running, starting server'
-    PORT=4000 npm run start:prod > /tmp/server-log.txt &
+    PORT=4000 TWILIO_ACCOUNT_SID=ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX npm run start:prod > /tmp/server-log.txt &
     SERVER_PID=$!
     echo "Server running... (PID $SERVER_PID)"
   fi
@@ -19,8 +19,7 @@ else
   done
   echo 'Curling Server for most recent schema.'
   ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
-  echo 'Publishing Schema to Apollo Engine.'
-  npx apollo schema:publish --endpoint=http://localhost:4000
+  echo 'Done. Check local.graphql'
   if [ "$*" = "--start-server" ]; then
     echo "Killing Server (PID $SERVER_PID)"
     kill -9 $SERVER_PID
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 50d8d41..60ee373 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -7,9 +7,7 @@ import * as Scripture from '@apollosproject/data-connector-bible';
 import * as LiveStream from '@apollosproject/data-connector-church-online';
 import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
 import * as OneSignal from '@apollosproject/data-connector-onesignal';
-import * as Search from '@apollosproject/data-connector-algolia-search';
 import * as Pass from '@apollosproject/data-connector-passes';
-import * as Cache from '@apollosproject/data-connector-redis-cache';
 import * as Sms from '@apollosproject/data-connector-twilio';
 import {
   Followings,
@@ -24,10 +22,8 @@ import {
   Template,
   AuthSms,
   Campus,
-  Group,
   BinaryFiles,
   Features,
-  Event,
 } from '@apollosproject/data-connector-rock';
 import * as Theme from './theme';
 
@@ -55,14 +51,10 @@ const data = {
   PersonalDevice,
   OneSignalWithRock,
   Pass,
-  Search,
   Template,
   Campus,
-  Group,
   BinaryFiles,
   Features,
-  Event,
-  Cache,
 };
 
 const {
@@ -71,17 +63,9 @@ const {
   schema,
   context,
   applyServerMiddleware,
-  setupJobs,
 } = createApolloServerConfig(data);
 
-export {
-  dataSources,
-  resolvers,
-  schema,
-  context,
-  applyServerMiddleware,
-  setupJobs,
-};
+export { dataSources, resolvers, schema, context, applyServerMiddleware };
 
 // the upload Scalar is added
 export const testSchema = [
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 88a6902..74a305e 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -1,8 +1,6 @@
 import { ApolloServer } from 'apollo-server-express';
-import ApollosConfig from '@apollosproject/config';
 import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
-import { get } from 'lodash';
 
 import {
   resolvers,
@@ -11,7 +9,6 @@ import {
   context,
   dataSources,
   applyServerMiddleware,
-  setupJobs,
 } from './data';
 
 export { resolvers, schema, testSchema };
@@ -21,18 +18,6 @@ const isDev =
 
 const extensions = isDev ? [() => new RockLoggingExtension()] : [];
 
-const cacheOptions = isDev
-  ? {}
-  : {
-      cacheControl: {
-        stripFormattedExtensions: false,
-        calculateHttpHeaders: true,
-        defaultMaxAge: 3600,
-      },
-    };
-
-const { ENGINE } = ApollosConfig;
-
 const apolloServer = new ApolloServer({
   typeDefs: schema,
   resolvers,
@@ -41,7 +26,7 @@ const apolloServer = new ApolloServer({
   introspection: true,
   extensions,
   formatError: (error) => {
-    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
+    console.error(error.extensions.exception.stacktrace.join('\n'));
     return error;
   },
   playground: {
@@ -49,18 +34,16 @@ const apolloServer = new ApolloServer({
       'editor.cursorShape': 'line',
     },
   },
-  ...cacheOptions,
-  engine: {
-    apiKey: ENGINE.API_KEY,
-    schemaTag: ENGINE.SCHEMA_TAG,
+  cacheControl: {
+    stripFormattedExtensions: false,
+    calculateHttpHeaders: true,
+    defaultMaxAge: 600,
   },
 });
 
 const app = express();
 
 applyServerMiddleware({ app, dataSources, context });
-setupJobs({ app, dataSources, context });
-
 apolloServer.applyMiddleware({ app });
 apolloServer.applyMiddleware({ app, path: '/' });
 
diff --git a/apollos-church-api/wallet-passes/checkin.pass/pass.json b/apollos-church-api/wallet-passes/checkin.pass/pass.json
index a3916b3..8909bd1 100644
--- a/apollos-church-api/wallet-passes/checkin.pass/pass.json
+++ b/apollos-church-api/wallet-passes/checkin.pass/pass.json
@@ -7,7 +7,6 @@
   "logoText": "Apollos Church",
   "backgroundColor": "rgb(0,103,109)",
   "foregroundColor": "rgb(248,247,244)",
-  "labelColor": "rgb(248,247,244)",
   "serialNumber": "checkinpass-{{ person | GetPersonAlternateId }}",
   "thumbnail": {
     "uri": "{{ person.Photo.Url }}&format=png&height=200"
