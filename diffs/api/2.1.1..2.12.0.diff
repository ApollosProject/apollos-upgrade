diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
index 491df294cb1934c03664a56c027d4aea096118ad..8ab6712e8ddeb583aee033ee46ad21379b5f0a44 100644
GIT binary patch
literal 6976
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
Spxk2`ulxB33HRn~6DbLc9<2!g

literal 6928
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%0AO}
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
W<y9vba{j1B_7Pgn<Z&_w6m?L8M`wZn

diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index 30117522..93c0f8f5 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -97,4 +97,5 @@ packages/**/docs/generated/*
 # shared secrets
 .env.shared
 
-development.db
\ No newline at end of file
+# development database
+development.db
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 5104bd51..95242bd4 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.1.1",
+  "version": "2.12.0",
   "environment": "api"
 }
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 3fb3719b..02feca1c 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -15,11 +15,19 @@ APP:
   JOBS_USERNAME: ${JOBS_USERNAME}
   JOBS_PASSWORD: ${JOBS_PASSWORD}
   FLAG_LIMIT: 1
+DATABASE:
+  URL: ${DATABASE_URL}
+  OPTIONS:
+    dialectOptions:
+      ssl:
+        require: false
+        rejectUnauthorized: false
 BUGSNAG:
   ## Optional, but you'll need to remove references to @apollosproject/bugsnag if you don't wish to use.
   API_KEY: ${BUGSNAG_KEY}
 ROCK:
-  API_URL: https://rock.apollos.app/api
+  URL: ${ROCK_URL}
+  API_URL: ${ROCK_API}
   API_TOKEN: ${ROCK_TOKEN}
   IMAGE_URL: https://rock.apollos.app/GetImage.ashx
   SHARE_URL: https://rock.apollos.app
@@ -27,6 +35,7 @@ ROCK:
   TIMEZONE: 'America/New_York'
   USE_PLUGIN: true
   SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
+  VERSION: 10
 UNIVERSAL_LINKS:
   # This should be your app's bundle ID, as found in your info.plist.
   APPLE_APP_ID: ${APPLE_APP_ID}
@@ -40,12 +49,17 @@ UNIVERSAL_LINKS:
   # https://docs.getsocial.im/knowledge-base/android-signing-key-sha256/
   GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
 ONE_SIGNAL:
-  APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
+  APP_ID: ${ONE_SIGNAL_APP_ID}
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
-  URL: https://apollos.online.church/
+  URL: ${CHURCH_ONLINE_URL}
   MEDIA_URLS: []
   WEB_VIEW_URL: https://apollos.online.church/
+SUGGESTED_FOLLOWS:
+  - michael.neeley@differential.com
+  -
+    email: vince@classyh.at
+    campusId: 45893d11-cd72-4a42-b3ee-08814a937e1a
 ALGOLIA:
   APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
   API_KEY: ${ALGOLIASEARCH_API_KEY}
@@ -79,7 +93,7 @@ ANALYTICS:
   # on the accompanying service
   SEGMENT_KEY:
   GA_ID:
-  USE_ROCK: true
+  USE_ROCK: false
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
   BIBLE_ID:
@@ -127,12 +141,14 @@ ROCK_MAPPINGS:
     # Id of the category used to store all persona dataviews
     PersonaId: 210
 
-  # Apollos will pull these content channels and expose them in the app on the discover screen.
+  # TODO deprecated
+  # used for the contentChannels root level query
   DISCOVER_CONTENT_CHANNEL_IDS:
     - 3
     - 5
     - 6
     - 8
+
   # Apollos will pull content items from these channels and expose them on the user feed
   # However, it will not expose the channel itself.
   # These channels are also pulled when indexing searchable content.
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 1bebfd01..dae71f71 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -5,18 +5,13 @@
   "main": "lib/index.js",
   "scripts": {
     "setup": "./scripts/init.sh",
-    "start": "yarn start:prod",
-    "start:dev":
-      "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
-    "start:prod": "NODE_ENV=production node ./lib/index.js",
+    "start": "NODE_ENV=production node ./lib/index.js",
+    "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
     "postinstall": "yarn build",
     "link-packages": "node ./scripts/link-packages && yarn yalc update",
-    "unlink-packages":
-      "node ./scripts/link-packages remove && rm -rf ./node_modules",
-    "build":
-      "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
-    "test":
-      "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
+    "unlink-packages": "node ./scripts/link-packages remove && rm -rf ./node_modules",
+    "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
+    "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
     "lint": "eslint ./src --ext .js",
     "translate": "node scripts/translate.js"
   },
@@ -24,42 +19,40 @@
     "node": ">=12.x.x"
   },
   "dependencies": {
-    "@apollosproject/bugsnag": "^2.0.0",
-    "@apollosproject/config": "^2.0.0",
-    "@apollosproject/data-connector-algolia-search": "^2.0.0",
-    "@apollosproject/data-connector-analytics": "^2.0.0",
-    "@apollosproject/data-connector-bible": "^2.0.0",
-    "@apollosproject/data-connector-church-online": "^2.0.0",
-    "@apollosproject/data-connector-cloudinary": "^2.0.0",
-    "@apollosproject/data-connector-onesignal": "^2.0.0",
-    "@apollosproject/data-connector-passes": "^2.0.0",
-    "@apollosproject/data-connector-postgres": "^2.0.0",
-    "@apollosproject/data-connector-redis-cache": "^2.0.0",
-    "@apollosproject/data-connector-rock": "^2.0.0",
-    "@apollosproject/data-connector-twilio": "^2.0.0",
-    "@apollosproject/data-schema": "^2.0.0",
-    "@apollosproject/rock-apollo-data-source": "^2.0.0",
-    "@apollosproject/server-core": "^2.0.0",
+    "@apollosproject/bugsnag": "^2.12.0",
+    "@apollosproject/config": "^2.12.0",
+    "@apollosproject/data-connector-algolia-search": "^2.12.0",
+    "@apollosproject/data-connector-analytics": "^2.12.0",
+    "@apollosproject/data-connector-bible": "^2.12.0",
+    "@apollosproject/data-connector-church-online": "^2.12.0",
+    "@apollosproject/data-connector-cloudinary": "^2.12.0",
+    "@apollosproject/data-connector-onesignal": "^2.12.0",
+    "@apollosproject/data-connector-passes": "^2.12.0",
+    "@apollosproject/data-connector-postgres": "^2.12.0",
+    "@apollosproject/data-connector-redis-cache": "^2.12.0",
+    "@apollosproject/data-connector-rock": "^2.12.0",
+    "@apollosproject/data-connector-twilio": "^2.12.0",
+    "@apollosproject/data-schema": "^2.12.0",
+    "@apollosproject/rock-apollo-data-source": "^2.12.0",
+    "@apollosproject/server-core": "^2.12.0",
     "apollo-server": "^2.14.2",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
-    "cors": "^2.8.5",
     "dotenv": "6.0.0",
     "express": "^4.17.0",
     "graphql": "14.6.0",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3",
-    "sqlite3": "^5.0.1"
+    "umzug": "^3.0.0-beta.15"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.0.0",
-    "@apollosproject/babel-preset-apollos": "^2.0.0",
-    "@apollosproject/eslint-config": "^2.0.0",
+    "@apollosproject/apollo-server-env-mock": "^2.12.0",
+    "@apollosproject/babel-preset-apollos": "^2.12.0",
+    "@apollosproject/eslint-config": "^2.12.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
     "babel-eslint": "^10.0.3",
-    "babel-plugin-module-resolver": "^3.2.0",
     "eslint": "^5.16.0",
     "eslint-config-airbnb-base": "^14.0.0",
     "eslint-config-prettier": "^2.9.0",
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index de1d76aa..b9886fb3 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -18,7 +18,6 @@ import {
   Followings,
   Interactions,
   RockConstants,
-  Person,
   ContentItem,
   ContentChannel,
   Sharable,
@@ -28,28 +27,31 @@ import {
   AuthSms,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
   FeatureFeed,
   ActionAlgorithm,
   Event,
   PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
 } from '@apollosproject/data-connector-rock';
 
-import { Comment, UserFlag } from '@apollosproject/data-connector-postgres';
-
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
+// This is to mock any postgres resolvers so we don't throw API errors for unresolved
+// typedefs
+import NoPostgres from './noPostgres';
+
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
-  Person,
   Cloudinary,
   Auth,
   AuthSms,
@@ -69,15 +71,16 @@ const data = {
   Template,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
   FeatureFeed,
   ActionAlgorithm,
   Event,
   Cache,
   PrayerRequest,
-  Comment,
-  UserFlag,
+  Persona,
+  Person,
+  BinaryFiles,
+  NoPostgres,
 };
 
 const {
@@ -87,6 +90,7 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -96,6 +100,7 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
new file mode 100644
index 00000000..63052d6f
--- /dev/null
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -0,0 +1,121 @@
+import { gql } from 'apollo-server';
+
+import {
+  createApolloServerConfig,
+  Interfaces,
+} from '@apollosproject/server-core';
+
+import * as Analytics from '@apollosproject/data-connector-analytics';
+import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
+import * as Search from '@apollosproject/data-connector-algolia-search';
+import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
+import * as Sms from '@apollosproject/data-connector-twilio';
+import {
+  Followings,
+  Interactions,
+  RockConstants,
+  ContentItem,
+  ContentChannel,
+  Sharable,
+  Auth,
+  PersonalDevice,
+  Template,
+  AuthSms,
+  Campus,
+  Group,
+  BinaryFiles,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  PrayerRequest,
+  Persona,
+  Person as RockPerson,
+} from '@apollosproject/data-connector-rock';
+
+import {
+  Comment,
+  UserFlag,
+  UserLike,
+  Follow,
+  Campus as PostgresCampus,
+  Person as PostgresPerson,
+} from '@apollosproject/data-connector-postgres';
+
+import * as Theme from './theme';
+
+// This modules ties together certain updates so they occurs in both Rock and Postgres.
+// Will be eliminated in the future through an enhancement to the Shovel
+import { Person, OneSignal } from './rockWithPostgres';
+
+const data = {
+  Interfaces,
+  Followings,
+  ContentChannel,
+  ContentItem,
+  RockPerson, // This entry needs to come before (postgres) Person
+  BinaryFiles, // This entry needs to come before (postgres) Person
+  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
+  Cloudinary,
+  Auth,
+  AuthSms,
+  Sms,
+  LiveStream,
+  Theme,
+  Scripture,
+  Interactions,
+  RockConstants,
+  Sharable,
+  Analytics,
+  OneSignal,
+  PersonalDevice,
+  Pass,
+  Search,
+  Template,
+  Campus,
+  Group,
+  Feature,
+  FeatureFeed,
+  ActionAlgorithm,
+  Event,
+  Cache,
+  PrayerRequest,
+  Comment,
+  UserLike,
+  UserFlag,
+  Follow,
+  PostgresCampus,
+  Persona,
+  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
+};
+
+const {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+} = createApolloServerConfig(data);
+
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+};
+
+// the upload Scalar is added
+export const testSchema = [
+  gql`
+    scalar Upload
+  `,
+  ...schema,
+];
diff --git a/apollos-church-api/src/data/noPostgres.js b/apollos-church-api/src/data/noPostgres.js
new file mode 100644
index 00000000..bd292eac
--- /dev/null
+++ b/apollos-church-api/src/data/noPostgres.js
@@ -0,0 +1,46 @@
+// The purpose of this file is to mock the postgres resolvers to null so the API doesn't fail when
+// there's no database. This will not be necessary when Postgres is required by all Apollos APIs.
+import gql from 'graphql-tag';
+import { Comment, Follow } from '@apollosproject/data-connector-postgres';
+
+export default {
+  schema: gql`
+    ${Comment.schema}
+    ${Follow.schema}
+  `,
+  resolver: {
+    Query: {
+      followRequests: () => [],
+      suggestedFollows: () => [],
+      searchPeople: () => {},
+    },
+    Mutation: {
+      addComment: () => null,
+      flagComment: () => null,
+      requestFollow: () => null,
+      acceptFollowRequest: () => null,
+      ignoreFollowRequest: () => null,
+    },
+    Comment: {
+      person: () => null,
+      id: () => null,
+    },
+    CommentListFeature: {
+      id: () => null,
+    },
+    AddCommentFeature: {
+      id: () => null,
+      initialPrompt: () => null,
+      addPrompt: () => null,
+      relatedNode: () => null,
+    },
+    Person: {
+      currentUserFollowing: () => null,
+      followingCurrentUser: () => null,
+    },
+    SearchPeopleResultsConnection: {
+      edges: () => [],
+      pageInfo: () => null,
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
new file mode 100644
index 00000000..cc1696f0
--- /dev/null
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -0,0 +1,127 @@
+/* eslint-disable import/prefer-default-export, max-classes-per-file */
+import { parseGlobalId } from '@apollosproject/server-core';
+import { Person as postgresPerson } from '@apollosproject/data-connector-postgres';
+import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
+
+class personDataSource extends postgresPerson.dataSource {
+  async create(attributes) {
+    const rockPersonId = await this.context.dataSources.RockPerson.create(
+      attributes
+    );
+    super.create({
+      ...attributes,
+      originType: 'rock',
+      originId: String(rockPersonId),
+    });
+    return rockPersonId;
+  }
+}
+
+// These resolvers make sure that calls to updating profile fields update both the
+const personResolver = {
+  Mutation: {
+    updateProfileField: async (
+      root,
+      { input: { field, value } },
+      { dataSources }
+    ) => {
+      await dataSources.RockPerson.updateProfile([{ field, value }]); // Update in Rock
+      return dataSources.Person.updateProfile([{ field, value }]); // updates in Postgres
+    },
+    updateProfileFields: async (root, { input }, { dataSources }) => {
+      await dataSources.RockPerson.updateProfile(input); // Update in Rock
+      return dataSources.Person.updateProfile(input); // updates in Postgres
+    },
+    uploadProfileImage: async (root, { file, size }, { dataSources }) => {
+      const person = await dataSources.RockPerson.uploadProfileImage(
+        file,
+        size
+      ); // Update in Rock
+      return dataSources.Person.updateProfile([
+        { field: 'profileImageUrl', value: person.photo.url },
+      ]); // updates in Postgres. Reuses already uploaded imageUrl
+      // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
+    },
+    updateUserCampus: async (root, { campusId }, { dataSources }) => {
+      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+
+      const { id: rockCampusId } = parseGlobalId(campusId);
+      const campus = await dataSources.PostgresCampus.getFromId(
+        rockCampusId,
+        null,
+        {
+          originType: 'rock',
+        }
+      ); // finds the postgres campus id
+      return dataSources.Person.updateProfile([
+        { field: 'campusId', value: campus.id },
+      ]); // updates in Postgres
+    },
+    updateUserPushSettings: async (root, { input }, { dataSources }) => {
+      // register the changes w/ one signal
+      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
+
+      // if the pushProviderUserId is changing, we need ot register the device with rock.
+      if (input.pushProviderUserId != null) {
+        await dataSources.PersonalDevice.addPersonalDevice({
+          pushId: input.pushProviderUserId,
+        });
+      }
+
+      try {
+        await dataSources.Person.updateProfile([
+          {
+            field: 'apollosUser',
+            value: true,
+          },
+        ]);
+      } catch (e) {
+        console.warn(e);
+      }
+
+      // return the original return value (which is currentPerson)
+      return returnValue;
+    },
+  },
+};
+
+export const Person = {
+  dataSource: personDataSource,
+  resolver: personResolver,
+};
+
+class oneSignalDataSource extends OneSignalOriginal.dataSource {
+  async createNotification({
+    toUserIds = [],
+    to,
+    content = '',
+    heading,
+    subtitle,
+    ...args
+  }) {
+    if (to && to.originId && to.originType === 'rock') {
+      const person = await this.context.dataSources.RockPerson.getFromId(
+        to.originId
+      );
+      return super.createNotification({
+        toUserIds: [person.primaryAliasId],
+        content,
+        heading,
+        subtitle,
+        ...args,
+      });
+    }
+    return super.createNotification({
+      toUserIds,
+      content,
+      heading,
+      subtitle,
+      ...args,
+    });
+  }
+}
+
+export const OneSignal = {
+  ...OneSignalOriginal,
+  dataSource: oneSignalDataSource,
+};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 3acfad03..613e7219 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,4 +1,5 @@
 import dotenv from 'dotenv/config'; // eslint-disable-line
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
 import config from './config'; // eslint-disable-line
 import server from './server';
 
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 8b6d732e..1982c1ae 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -1,6 +1,3 @@
-import fs from 'fs';
-import path from 'path';
-import cors from 'cors';
 import { ApolloServer } from 'apollo-server-express';
 import ApollosConfig from '@apollosproject/config';
 import express from 'express';
@@ -8,9 +5,17 @@ import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
 import { BugsnagPlugin } from '@apollosproject/bugsnag';
-import { sync } from '@apollosproject/data-connector-postgres';
-// import { seed } from '../seeds';
-import {
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const {
   resolvers,
   schema,
   testSchema,
@@ -18,7 +23,8 @@ import {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-} from './data';
+  migrations,
+} = dataObj;
 
 export { resolvers, schema, testSchema };
 
@@ -65,22 +71,6 @@ const apolloServer = new ApolloServer({
 
 const app = express();
 
-// health check
-app.get('/health', cors(), (req, res) => {
-  res.send('ok');
-});
-
-// apollos version
-app.get('/version', cors(), (req, res) => {
-  try {
-    const data = fs.readFileSync(path.join(__dirname, '..', 'apollos.json'));
-    const { version } = JSON.parse(data);
-    res.send(version);
-  } catch (e) {
-    res.send('unknown');
-  }
-});
-
 applyServerMiddleware({ app, dataSources, context });
 setupJobs({ app, dataSources, context });
 // Comment out if you don't want the API serving apple-app-site-association or assetlinks manifests.
@@ -92,8 +82,10 @@ apolloServer.applyMiddleware({ app, path: '/' });
 // make sure this is called last.
 // (or at least after the apollos server setup)
 (async () => {
-  await sync();
-  // await seed();
+  if (ApollosConfig?.DATABASE?.URL) {
+    const migrationRunner = await createMigrationRunner({ migrations });
+    await migrationRunner.up();
+  }
 })();
 
 export default app;
