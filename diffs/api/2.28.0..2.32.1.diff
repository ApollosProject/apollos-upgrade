diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index e36b4e8a..76a87be9 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.28.0",
+  "version": "2.32.1",
   "environment": "api"
 }
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 6afffc6a..a95d366e 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -5,6 +5,7 @@
   "main": "lib/index.js",
   "scripts": {
     "setup": "./scripts/init.sh",
+    "migrator": "node ./lib/migrator.js",
     "start": "NODE_ENV=production node ./lib/index.js",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
     "postinstall": "yarn build",
@@ -14,24 +15,24 @@
     "translate": "node scripts/translate.js"
   },
   "engines": {
-    "node": "12"
+    "node": ">=14"
   },
   "dependencies": {
-    "@apollosproject/config": "^2.28.0",
-    "@apollosproject/data-connector-algolia-search": "^2.28.0",
-    "@apollosproject/data-connector-analytics": "^2.28.0",
-    "@apollosproject/data-connector-bible": "^2.28.0",
-    "@apollosproject/data-connector-church-online": "^2.28.0",
-    "@apollosproject/data-connector-cloudinary": "^2.28.0",
-    "@apollosproject/data-connector-onesignal": "^2.28.0",
-    "@apollosproject/data-connector-passes": "^2.28.0",
-    "@apollosproject/data-connector-postgres": "^2.28.0",
-    "@apollosproject/data-connector-redis-cache": "^2.28.0",
-    "@apollosproject/data-connector-rock": "^2.28.0",
-    "@apollosproject/data-connector-twilio": "^2.28.0",
-    "@apollosproject/data-schema": "^2.28.0",
-    "@apollosproject/rock-apollo-data-source": "^2.28.0",
-    "@apollosproject/server-core": "^2.28.0",
+    "@apollosproject/config": "^2.32.1",
+    "@apollosproject/data-connector-algolia-search": "^2.32.1",
+    "@apollosproject/data-connector-analytics": "^2.32.1",
+    "@apollosproject/data-connector-bible": "^2.32.1",
+    "@apollosproject/data-connector-church-online": "^2.32.1",
+    "@apollosproject/data-connector-cloudinary": "^2.32.1",
+    "@apollosproject/data-connector-onesignal": "^2.32.1",
+    "@apollosproject/data-connector-passes": "^2.32.1",
+    "@apollosproject/data-connector-postgres": "^2.32.1",
+    "@apollosproject/data-connector-redis-cache": "^2.32.1",
+    "@apollosproject/data-connector-rock": "^2.32.1",
+    "@apollosproject/data-connector-twilio": "^2.32.1",
+    "@apollosproject/data-schema": "^2.32.1",
+    "@apollosproject/rock-apollo-data-source": "^2.32.1",
+    "@apollosproject/server-core": "^2.32.1",
     "apollo-server": "^2.24.1",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
@@ -41,9 +42,9 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.28.0",
-    "@apollosproject/babel-preset-apollos": "^2.28.0",
-    "@apollosproject/eslint-config": "^2.28.0",
+    "@apollosproject/apollo-server-env-mock": "^2.32.1",
+    "@apollosproject/babel-preset-apollos": "^2.32.1",
+    "@apollosproject/eslint-config": "^2.32.1",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
diff --git a/apollos-church-api/src/config.js b/apollos-church-api/src/config.js
index 8291fd33..53b6558c 100644
--- a/apollos-church-api/src/config.js
+++ b/apollos-church-api/src/config.js
@@ -3,12 +3,14 @@ import fetch from 'node-fetch';
 import dotenv from "dotenv/config"; // eslint-disable-line
 import ApollosConfig from '@apollosproject/config';
 
-const configName = process.env.DATABASE_URL
-  ? 'config.postgres.yml'
-  : 'config.yml';
-
 ApollosConfig.loadYaml({
-  configPath: path.join(__dirname, '..', configName),
+  configPath: path.join(
+    __dirname,
+    '..',
+    process.env.DATABASE_CONTENT === 'true'
+      ? 'config.postgres.yml'
+      : 'config.yml'
+  ),
 });
 
 // defaults
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
index 4acac1d5..bc2d77b0 100644
--- a/apollos-church-api/src/data/index.postgres.js
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -15,20 +15,24 @@ import * as Cache from '@apollosproject/data-connector-redis-cache';
 import * as Sms from '@apollosproject/data-connector-twilio';
 import {
   Followings,
-  Interactions,
+  Interactions as RockInteractions,
   RockConstants,
   Sharable,
   Auth,
   PersonalDevice,
   Template,
   AuthSms,
-  Campus,
   Group,
   BinaryFiles,
   FeatureFeed,
   Event,
   PrayerRequest,
   Person as RockPerson,
+  ContentItem as RockContentItem,
+  Campus as RockCampus,
+  ContentChannel,
+  Feature as RockFeature,
+  ActionAlgorithm as RockActionAlgorithm,
 } from '@apollosproject/data-connector-rock';
 
 import {
@@ -36,17 +40,20 @@ import {
   UserFlag,
   UserLike,
   Follow,
+  Interactions,
+  Likes,
   Notification,
   NotificationPreference,
-  Campus as PostgresCampus,
+  Tag,
+  Campus,
   Person as PostgresPerson,
   Media as PostgresMedia,
-  Feature,
-  Tag,
-  ContentItem,
+  Feature as PostgresFeature,
+  ContentItem as PostgresContentItem,
   ContentItemsConnection,
-  ContentItemCategory as ContentChannel,
-  ActionAlgorithm,
+  ContentItemCategory,
+  ActionAlgorithm as PostgresActionAlgorithm,
+  PrayerRequest as PostgresPrayerRequest,
 } from '@apollosproject/data-connector-postgres';
 
 import * as Theme from './theme';
@@ -57,23 +64,49 @@ import {
   Person,
   OneSignal,
   Followings as FollowingsPostgresBridge,
+  PostgresDefaultCampusOverride,
+  RockDefaultCampusOverride,
 } from './rockWithPostgres';
 
-const data = {
-  Interfaces,
+const postgresContentModules = {
+  Interactions,
+  Likes,
+  ActionAlgorithm: PostgresActionAlgorithm,
+  Feature: PostgresFeature,
+  PostgresMedia,
+  Tag,
+  ContentItem: PostgresContentItem,
+  ContentItemsConnection,
+  ContentChannel: ContentItemCategory,
+  PrayerRequest: PostgresPrayerRequest,
+  RockCampus: { dataSource: RockCampus.dataSource },
+  Campus,
+  PostgresDefaultCampusOverride,
+};
+
+const rockContentModules = {
+  Interactions: RockInteractions,
   Followings,
   FollowingsPostgresBridge, // This entry needs to come after Followings.
+  ActionAlgorithm: RockActionAlgorithm,
+  Feature: RockFeature,
+  ContentItem: RockContentItem,
+  ContentChannel,
+  PrayerRequest,
+  PostgresCampus: { dataSource: Campus.dataSource },
+  Campus: RockCampus,
+  RockDefaultCampusOverride,
+};
+
+const data = {
+  Interfaces,
   FeatureFeed,
-  ActionAlgorithm,
   RockPerson, // This entry needs to come before (postgres) Person
   BinaryFiles, // This entry needs to come before (postgres) Person
   PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
-  PostgresMedia,
-  Feature,
-  Tag,
-  ContentItem,
-  ContentItemsConnection,
-  ContentChannel,
+  ...(process.env.DATABASE_CONTENT
+    ? postgresContentModules
+    : rockContentModules),
   Cloudinary,
   Auth,
   AuthSms,
@@ -81,7 +114,6 @@ const data = {
   LiveStream,
   Theme,
   Scripture,
-  Interactions,
   RockConstants,
   Sharable,
   Analytics,
@@ -89,17 +121,13 @@ const data = {
   Pass,
   Search,
   Template,
-  Campus,
   Group,
-  // ActionAlgorithm,
   Event,
   Cache,
-  PrayerRequest,
   Comment,
   UserLike,
   UserFlag,
   Follow,
-  PostgresCampus,
   Notification,
   NotificationPreference,
   OneSignal,
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
index b22f5a30..e63faaf7 100644
--- a/apollos-church-api/src/data/rockWithPostgres.js
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -42,21 +42,6 @@ const personResolver = {
       ]); // updates in Postgres. Reuses already uploaded imageUrl
       // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
     },
-    updateUserCampus: async (root, { campusId }, { dataSources }) => {
-      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
-
-      const { id: rockCampusId } = parseGlobalId(campusId);
-      const campus = await dataSources.PostgresCampus.getFromId(
-        rockCampusId,
-        null,
-        {
-          originType: 'rock',
-        }
-      ); // finds the postgres campus id
-      return dataSources.Person.updateProfile([
-        { field: 'campusId', value: campus.id },
-      ]); // updates in Postgres
-    },
     updateUserPushSettings: async (root, { input }, { dataSources }) => {
       // register the changes w/ postgres
       await dataSources.NotificationPreference.updateUserNotificationPreference(
@@ -222,3 +207,41 @@ const followingsResolvers = {
 export const Followings = {
   resolver: followingsResolvers,
 };
+
+// Used when IDs coming from the API are Rock APIS.
+export const RockDefaultCampusOverride = {
+  resolver: {
+    Mutation: {
+      updateUserCampus: async (root, { campusId }, { dataSources }) => {
+        await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+
+        const { id: rockCampusId } = parseGlobalId(campusId);
+        const campus = await dataSources.PostgresCampus.getFromId(
+          rockCampusId,
+          null,
+          {
+            originType: 'rock',
+          }
+        ); // finds the postgres campus id
+        return dataSources.Person.updateProfile([
+          { field: 'campusId', value: campus.id },
+        ]); // updates in Postgres
+      },
+    },
+  },
+};
+
+// Used when IDs coming from the API are Postgres APIS.
+export const PostgresDefaultCampusOverride = {
+  resolver: {
+    Mutation: {
+      updateUserCampus: async (root, { campusId }, { dataSources }) => {
+        const campus = await dataSources.Campus.getFromId(campusId); // finds the postgres campus id
+        await dataSources.Person.updateProfile([
+          { field: 'campusId', value: campus.originId },
+        ]); // updates in Rock
+        return dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+      },
+    },
+  },
+};
diff --git a/apollos-church-api/src/migrator.js b/apollos-church-api/src/migrator.js
new file mode 100644
index 00000000..72366cf8
--- /dev/null
+++ b/apollos-church-api/src/migrator.js
@@ -0,0 +1,31 @@
+import dotenv from 'dotenv/config'; // eslint-disable-line
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
+import config from './config'; // eslint-disable-line
+
+import ApollosConfig from '@apollosproject/config';
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const { migrations } = dataObj;
+
+// make sure this is called last.
+// (or at least after the apollos server setup)
+(async () => {
+  if (ApollosConfig?.DATABASE?.URL) {
+    try {
+      const migrationRunner = await createMigrationRunner({ migrations });
+      migrationRunner.runAsCLI();
+    } catch (e) {
+      console.log(e);
+    }
+  } else {
+    console.warn('Please specify a database URL to perform migrations');
+  }
+})();
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index b200cb5c..ae3b1cf4 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -60,6 +60,7 @@ const apolloServer = new ApolloServer({
       'editor.cursorShape': 'line',
     },
   },
+  uploads: false,
   ...cacheOptions,
 });
 
@@ -83,7 +84,23 @@ apolloServer.applyMiddleware({ app, path: '/' });
 (async () => {
   if (ApollosConfig?.DATABASE?.URL) {
     const migrationRunner = await createMigrationRunner({ migrations });
-    await migrationRunner.up();
+    const pending = await migrationRunner.pending();
+    if (pending.length) {
+      console.log('\x1b[31m', '██████████████████████████████████', '\x1b[0m');
+      console.log(
+        '\x1b[36m',
+        'You currently have a number of pending migrations',
+        '\x1b[0m'
+      );
+      console.log(pending);
+      console.log(
+        `Keep in mind, you are currently connected to ${
+          migrationRunner?.options?.context?.sequelize?.options?.host
+        }`
+      );
+      console.log('\x1b[31m', '██████████████████████████████████', '\x1b[0m');
+    }
+    if (ApollosConfig.AUTO_MIGRATE) await migrationRunner.up();
   }
 })();
 
