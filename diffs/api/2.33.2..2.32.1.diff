diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 199b4a67..76a87be9 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.33.2",
+  "version": "2.32.1",
   "environment": "api"
 }
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 5cfe5417..a95d366e 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -18,21 +18,21 @@
     "node": ">=14"
   },
   "dependencies": {
-    "@apollosproject/config": "^2.33.2",
-    "@apollosproject/data-connector-algolia-search": "^2.33.2",
-    "@apollosproject/data-connector-analytics": "^2.33.2",
-    "@apollosproject/data-connector-bible": "^2.33.2",
-    "@apollosproject/data-connector-church-online": "^2.33.2",
-    "@apollosproject/data-connector-cloudinary": "^2.33.2",
-    "@apollosproject/data-connector-onesignal": "^2.33.2",
-    "@apollosproject/data-connector-passes": "^2.33.2",
-    "@apollosproject/data-connector-postgres": "^2.33.2",
-    "@apollosproject/data-connector-redis-cache": "^2.33.2",
-    "@apollosproject/data-connector-rock": "^2.33.2",
-    "@apollosproject/data-connector-twilio": "^2.33.2",
-    "@apollosproject/data-schema": "^2.33.2",
-    "@apollosproject/rock-apollo-data-source": "^2.33.2",
-    "@apollosproject/server-core": "^2.33.2",
+    "@apollosproject/config": "^2.32.1",
+    "@apollosproject/data-connector-algolia-search": "^2.32.1",
+    "@apollosproject/data-connector-analytics": "^2.32.1",
+    "@apollosproject/data-connector-bible": "^2.32.1",
+    "@apollosproject/data-connector-church-online": "^2.32.1",
+    "@apollosproject/data-connector-cloudinary": "^2.32.1",
+    "@apollosproject/data-connector-onesignal": "^2.32.1",
+    "@apollosproject/data-connector-passes": "^2.32.1",
+    "@apollosproject/data-connector-postgres": "^2.32.1",
+    "@apollosproject/data-connector-redis-cache": "^2.32.1",
+    "@apollosproject/data-connector-rock": "^2.32.1",
+    "@apollosproject/data-connector-twilio": "^2.32.1",
+    "@apollosproject/data-schema": "^2.32.1",
+    "@apollosproject/rock-apollo-data-source": "^2.32.1",
+    "@apollosproject/server-core": "^2.32.1",
     "apollo-server": "^2.24.1",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
@@ -42,9 +42,9 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.33.2",
-    "@apollosproject/babel-preset-apollos": "^2.33.2",
-    "@apollosproject/eslint-config": "^2.33.2",
+    "@apollosproject/apollo-server-env-mock": "^2.32.1",
+    "@apollosproject/babel-preset-apollos": "^2.32.1",
+    "@apollosproject/eslint-config": "^2.32.1",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
index 1fdc489e..bc2d77b0 100644
--- a/apollos-church-api/src/data/index.postgres.js
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -63,6 +63,7 @@ import * as Theme from './theme';
 import {
   Person,
   OneSignal,
+  Followings as FollowingsPostgresBridge,
   PostgresDefaultCampusOverride,
   RockDefaultCampusOverride,
 } from './rockWithPostgres';
@@ -86,6 +87,7 @@ const postgresContentModules = {
 const rockContentModules = {
   Interactions: RockInteractions,
   Followings,
+  FollowingsPostgresBridge, // This entry needs to come after Followings.
   ActionAlgorithm: RockActionAlgorithm,
   Feature: RockFeature,
   ContentItem: RockContentItem,
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
index daf925bc..e63faaf7 100644
--- a/apollos-church-api/src/data/rockWithPostgres.js
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -119,6 +119,95 @@ export const OneSignal = {
   dataSource: oneSignalDataSource,
 };
 
+const defaultContentItemResolvers = {
+  likedCount: (root, args, { dataSources }) =>
+    console.log(root, root.apollosId, root.originId) ||
+    dataSources.Followings.getFollowingsCountByNodeId({
+      nodeId: root.apollosId,
+      originId: root.originId,
+    }),
+
+  isLiked: async (root, args, { dataSources }) =>
+    dataSources.Followings.getIsLikedForCurrentUserAndNode({
+      nodeId: root.apollosId,
+      originId: root.originId,
+      isLiked: null,
+    }),
+};
+
+const followingsResolvers = {
+  Mutation: {
+    updateLikeEntity: async (
+      root,
+      { input: { nodeId, operation } },
+      { dataSources },
+      resolveInfo
+    ) => {
+      const { originId } = await dataSources.ContentItem.getFromId(
+        nodeId.split(':')[1]
+      );
+      return dataSources.Followings.updateLikeContentItem({
+        nodeId,
+        originId,
+        operation,
+        resolveInfo,
+      });
+    },
+    updateLikeNode: async (
+      root,
+      { input: { nodeId, operation } },
+      { dataSources },
+      resolveInfo
+    ) => {
+      const { originId } = await dataSources.ContentItem.getFromId(
+        nodeId.split(':')[1]
+      );
+      return dataSources.Followings.updateLikeNode({
+        nodeId,
+        originId,
+        operation,
+        resolveInfo,
+      });
+    },
+  },
+  Query: {
+    likedContent: async (root, { after, first }, { dataSources }) => {
+      const followingsPaginated = await dataSources.Followings.paginatedGetFollowingsForCurrentUser(
+        { type: 'ContentItem', after, first }
+      );
+
+      const followings = await followingsPaginated.edges;
+      const ids = followings.map((f) => f.node.entityId);
+      const contentItems = await dataSources.ContentItem.getFromOriginIds(ids);
+      const contentItemEdges = contentItems.map((contentItem) => ({
+        node: contentItem,
+        following: followings.find(
+          (f) => String(f.node.entityId) === contentItem.originId
+        ).node,
+        cursor: followings.find(
+          (f) => String(f.node.entityId) === contentItem.originId
+        ).cursor,
+      }));
+      const sortedContentItemEdges = contentItemEdges.sort(
+        (a, b) =>
+          new Date(a.following.createdDateTime) <
+          new Date(b.following.createdDateTime)
+      );
+
+      return { edges: sortedContentItemEdges };
+    },
+  },
+  UniversalContentItem: defaultContentItemResolvers,
+  DevotionalContentItem: defaultContentItemResolvers,
+  ContentSeriesContentItem: defaultContentItemResolvers,
+  WeekendContentItem: defaultContentItemResolvers,
+  MediaContentItem: defaultContentItemResolvers,
+};
+
+export const Followings = {
+  resolver: followingsResolvers,
+};
+
 // Used when IDs coming from the API are Rock APIS.
 export const RockDefaultCampusOverride = {
   resolver: {
@@ -147,13 +236,11 @@ export const PostgresDefaultCampusOverride = {
   resolver: {
     Mutation: {
       updateUserCampus: async (root, { campusId }, { dataSources }) => {
-        const campus = await dataSources.Campus.getFromId(
-          parseGlobalId(campusId).id
-        ); // finds the postgres campus id
-        await dataSources.RockCampus.updateCurrentUserCampus({
-          rockId: campus.originId,
-        }); // updates in Rock
-        return dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Postgres
+        const campus = await dataSources.Campus.getFromId(campusId); // finds the postgres campus id
+        await dataSources.Person.updateProfile([
+          { field: 'campusId', value: campus.originId },
+        ]); // updates in Rock
+        return dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
       },
     },
   },
