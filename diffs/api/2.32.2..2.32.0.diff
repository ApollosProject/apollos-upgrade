diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index 1dca93da..b6771f52 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.32.2",
+  "version": "2.32.0",
   "environment": "api"
 }
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 7d4d92bc..b6595ec9 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -18,21 +18,21 @@
     "node": ">=14"
   },
   "dependencies": {
-    "@apollosproject/config": "^2.32.2",
-    "@apollosproject/data-connector-algolia-search": "^2.32.2",
-    "@apollosproject/data-connector-analytics": "^2.32.2",
-    "@apollosproject/data-connector-bible": "^2.32.2",
-    "@apollosproject/data-connector-church-online": "^2.32.2",
-    "@apollosproject/data-connector-cloudinary": "^2.32.2",
-    "@apollosproject/data-connector-onesignal": "^2.32.2",
-    "@apollosproject/data-connector-passes": "^2.32.2",
-    "@apollosproject/data-connector-postgres": "^2.32.2",
-    "@apollosproject/data-connector-redis-cache": "^2.32.2",
-    "@apollosproject/data-connector-rock": "^2.32.2",
-    "@apollosproject/data-connector-twilio": "^2.32.2",
-    "@apollosproject/data-schema": "^2.32.2",
-    "@apollosproject/rock-apollo-data-source": "^2.32.2",
-    "@apollosproject/server-core": "^2.32.2",
+    "@apollosproject/config": "^2.32.0",
+    "@apollosproject/data-connector-algolia-search": "^2.32.0",
+    "@apollosproject/data-connector-analytics": "^2.32.0",
+    "@apollosproject/data-connector-bible": "^2.32.0",
+    "@apollosproject/data-connector-church-online": "^2.32.0",
+    "@apollosproject/data-connector-cloudinary": "^2.32.0",
+    "@apollosproject/data-connector-onesignal": "^2.32.0",
+    "@apollosproject/data-connector-passes": "^2.32.0",
+    "@apollosproject/data-connector-postgres": "^2.32.0",
+    "@apollosproject/data-connector-redis-cache": "^2.32.0",
+    "@apollosproject/data-connector-rock": "^2.32.0",
+    "@apollosproject/data-connector-twilio": "^2.32.0",
+    "@apollosproject/data-schema": "^2.32.0",
+    "@apollosproject/rock-apollo-data-source": "^2.32.0",
+    "@apollosproject/server-core": "^2.32.0",
     "apollo-server": "^2.24.1",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
@@ -42,9 +42,9 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.32.2",
-    "@apollosproject/babel-preset-apollos": "^2.32.2",
-    "@apollosproject/eslint-config": "^2.32.2",
+    "@apollosproject/apollo-server-env-mock": "^2.32.0",
+    "@apollosproject/babel-preset-apollos": "^2.32.0",
+    "@apollosproject/eslint-config": "^2.32.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
index 1fdc489e..870748cf 100644
--- a/apollos-church-api/src/data/index.postgres.js
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -15,13 +15,13 @@ import * as Cache from '@apollosproject/data-connector-redis-cache';
 import * as Sms from '@apollosproject/data-connector-twilio';
 import {
   Followings,
-  Interactions as RockInteractions,
   RockConstants,
   Sharable,
   Auth,
   PersonalDevice,
   Template,
   AuthSms,
+  Campus,
   Group,
   BinaryFiles,
   FeatureFeed,
@@ -29,10 +29,10 @@ import {
   PrayerRequest,
   Person as RockPerson,
   ContentItem as RockContentItem,
-  Campus as RockCampus,
   ContentChannel,
   Feature as RockFeature,
   ActionAlgorithm as RockActionAlgorithm,
+  Interactions as PostgresInteractions,
 } from '@apollosproject/data-connector-rock';
 
 import {
@@ -40,12 +40,11 @@ import {
   UserFlag,
   UserLike,
   Follow,
-  Interactions,
-  Likes,
   Notification,
   NotificationPreference,
   Tag,
-  Campus,
+  Interactions,
+  Campus as PostgresCampus,
   Person as PostgresPerson,
   Media as PostgresMedia,
   Feature as PostgresFeature,
@@ -63,13 +62,10 @@ import * as Theme from './theme';
 import {
   Person,
   OneSignal,
-  PostgresDefaultCampusOverride,
-  RockDefaultCampusOverride,
+  Followings as FollowingsPostgresBridge,
 } from './rockWithPostgres';
 
 const postgresContentModules = {
-  Interactions,
-  Likes,
   ActionAlgorithm: PostgresActionAlgorithm,
   Feature: PostgresFeature,
   PostgresMedia,
@@ -77,27 +73,23 @@ const postgresContentModules = {
   ContentItem: PostgresContentItem,
   ContentItemsConnection,
   ContentChannel: ContentItemCategory,
+  Interactions,
   PrayerRequest: PostgresPrayerRequest,
-  RockCampus: { dataSource: RockCampus.dataSource },
-  Campus,
-  PostgresDefaultCampusOverride,
 };
 
 const rockContentModules = {
-  Interactions: RockInteractions,
-  Followings,
   ActionAlgorithm: RockActionAlgorithm,
   Feature: RockFeature,
   ContentItem: RockContentItem,
   ContentChannel,
+  Interactions: PostgresInteractions,
   PrayerRequest,
-  PostgresCampus: { dataSource: Campus.dataSource },
-  Campus: RockCampus,
-  RockDefaultCampusOverride,
 };
 
 const data = {
   Interfaces,
+  Followings,
+  FollowingsPostgresBridge, // This entry needs to come after Followings.
   FeatureFeed,
   RockPerson, // This entry needs to come before (postgres) Person
   BinaryFiles, // This entry needs to come before (postgres) Person
@@ -119,6 +111,7 @@ const data = {
   Pass,
   Search,
   Template,
+  Campus,
   Group,
   Event,
   Cache,
@@ -126,6 +119,7 @@ const data = {
   UserLike,
   UserFlag,
   Follow,
+  PostgresCampus,
   Notification,
   NotificationPreference,
   OneSignal,
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
index 6dadc4c6..b22f5a30 100644
--- a/apollos-church-api/src/data/rockWithPostgres.js
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -42,6 +42,21 @@ const personResolver = {
       ]); // updates in Postgres. Reuses already uploaded imageUrl
       // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
     },
+    updateUserCampus: async (root, { campusId }, { dataSources }) => {
+      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+
+      const { id: rockCampusId } = parseGlobalId(campusId);
+      const campus = await dataSources.PostgresCampus.getFromId(
+        rockCampusId,
+        null,
+        {
+          originType: 'rock',
+        }
+      ); // finds the postgres campus id
+      return dataSources.Person.updateProfile([
+        { field: 'campusId', value: campus.id },
+      ]); // updates in Postgres
+    },
     updateUserPushSettings: async (root, { input }, { dataSources }) => {
       // register the changes w/ postgres
       await dataSources.NotificationPreference.updateUserNotificationPreference(
@@ -119,40 +134,91 @@ export const OneSignal = {
   dataSource: oneSignalDataSource,
 };
 
-// Used when IDs coming from the API are Rock APIS.
-export const RockDefaultCampusOverride = {
-  resolver: {
-    Mutation: {
-      updateUserCampus: async (root, { campusId }, { dataSources }) => {
-        await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+const defaultContentItemResolvers = {
+  likedCount: (root, args, { dataSources }) =>
+    console.log(root, root.apollosId, root.originId) ||
+    dataSources.Followings.getFollowingsCountByNodeId({
+      nodeId: root.apollosId,
+      originId: root.originId,
+    }),
 
-        const { id: rockCampusId } = parseGlobalId(campusId);
-        const campus = await dataSources.PostgresCampus.getFromId(
-          rockCampusId,
-          null,
-          {
-            originType: 'rock',
-          }
-        ); // finds the postgres campus id
-        return dataSources.Person.updateProfile([
-          { field: 'campusId', value: campus.id },
-        ]); // updates in Postgres
-      },
+  isLiked: async (root, args, { dataSources }) =>
+    dataSources.Followings.getIsLikedForCurrentUserAndNode({
+      nodeId: root.apollosId,
+      originId: root.originId,
+      isLiked: null,
+    }),
+};
+
+const followingsResolvers = {
+  Mutation: {
+    updateLikeEntity: async (
+      root,
+      { input: { nodeId, operation } },
+      { dataSources },
+      resolveInfo
+    ) => {
+      const { originId } = await dataSources.ContentItem.getFromId(
+        nodeId.split(':')[1]
+      );
+      return dataSources.Followings.updateLikeContentItem({
+        nodeId,
+        originId,
+        operation,
+        resolveInfo,
+      });
+    },
+    updateLikeNode: async (
+      root,
+      { input: { nodeId, operation } },
+      { dataSources },
+      resolveInfo
+    ) => {
+      const { originId } = await dataSources.ContentItem.getFromId(
+        nodeId.split(':')[1]
+      );
+      return dataSources.Followings.updateLikeNode({
+        nodeId,
+        originId,
+        operation,
+        resolveInfo,
+      });
     },
   },
-};
+  Query: {
+    likedContent: async (root, { after, first }, { dataSources }) => {
+      const followingsPaginated = await dataSources.Followings.paginatedGetFollowingsForCurrentUser(
+        { type: 'ContentItem', after, first }
+      );
 
-// Used when IDs coming from the API are Postgres APIS.
-export const PostgresDefaultCampusOverride = {
-  resolver: {
-    Mutation: {
-      updateUserCampus: async (root, { campusId }, { dataSources }) => {
-        const campus = await dataSources.Campus.getFromId(campusId); // finds the postgres campus id
-        await dataSources.Person.updateProfile([
-          { field: 'campusId', value: campus.originId },
-        ]); // updates in Rock
-        return dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
-      },
+      const followings = await followingsPaginated.edges;
+      const ids = followings.map((f) => f.node.entityId);
+      const contentItems = await dataSources.ContentItem.getFromOriginIds(ids);
+      const contentItemEdges = contentItems.map((contentItem) => ({
+        node: contentItem,
+        following: followings.find(
+          (f) => String(f.node.entityId) === contentItem.originId
+        ).node,
+        cursor: followings.find(
+          (f) => String(f.node.entityId) === contentItem.originId
+        ).cursor,
+      }));
+      const sortedContentItemEdges = contentItemEdges.sort(
+        (a, b) =>
+          new Date(a.following.createdDateTime) <
+          new Date(b.following.createdDateTime)
+      );
+
+      return { edges: sortedContentItemEdges };
     },
   },
+  UniversalContentItem: defaultContentItemResolvers,
+  DevotionalContentItem: defaultContentItemResolvers,
+  ContentSeriesContentItem: defaultContentItemResolvers,
+  WeekendContentItem: defaultContentItemResolvers,
+  MediaContentItem: defaultContentItemResolvers,
+};
+
+export const Followings = {
+  resolver: followingsResolvers,
 };
