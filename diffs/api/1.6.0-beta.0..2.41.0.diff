diff --git a/apollos-church-api/.dockerignore b/apollos-church-api/.dockerignore
deleted file mode 100644
index 66a32251..00000000
--- a/apollos-church-api/.dockerignore
+++ /dev/null
@@ -1,4 +0,0 @@
-packages/apolloschurchapp
-packages/apollos-ui-kit
-packages/apollos-church-api/.env
-packages/*/node_modules
diff --git a/apollos-church-api/.env.shared.enc b/apollos-church-api/.env.shared.enc
new file mode 100644
index 0000000000000000000000000000000000000000..9c70164de3093bc053a8b702ef744f2ee4efbaa2
GIT binary patch
literal 7056
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

literal 0
HcmV?d00001

diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
deleted file mode 100644
index 85594681..00000000
--- a/apollos-church-api/.envExample
+++ /dev/null
@@ -1,18 +0,0 @@
-ROCK_API=
-ROCK_TOKEN=
-BIBLE_API_KEY=
-ENGINE_API_KEY=
-CLOUDINARY_URL=
-ONE_SIGNAL_REST_KEY=
-PORT=4000
-ROOT_URL=http://localhost:4000
-
-TWILIO_ACCOUNT_SID=
-TWILIO_AUTH_TOKEN=
-TWILIO_FROM_NUMBER=
-
-
-PASS_WWDR_CERT=
-PASS_SIGNER_CERT=
-PASS_SIGNER_KEY=
-PASS_SIGNER_PASSPHRASE=
\ No newline at end of file
diff --git a/apollos-church-api/.gitignore b/apollos-church-api/.gitignore
index b15b989c..93c0f8f5 100644
--- a/apollos-church-api/.gitignore
+++ b/apollos-church-api/.gitignore
@@ -94,3 +94,8 @@ storyLoader.js
 # generated markdown docs
 packages/**/docs/generated/*
 
+# shared secrets
+.env.shared
+
+# development database
+development.db
diff --git a/apollos-church-api/.npmignore b/apollos-church-api/.npmignore
deleted file mode 100644
index 93f39291..00000000
--- a/apollos-church-api/.npmignore
+++ /dev/null
@@ -1,2 +0,0 @@
-*
-!lib/**
diff --git a/apollos-church-api/.nvmrc b/apollos-church-api/.nvmrc
deleted file mode 100644
index 5b7269c0..00000000
--- a/apollos-church-api/.nvmrc
+++ /dev/null
@@ -1 +0,0 @@
-10.19.0
diff --git a/apollos-church-api/__mocks__/apollo-server-env.js b/apollos-church-api/__mocks__/apollo-server-env.js
deleted file mode 100644
index 5ec2ff74..00000000
--- a/apollos-church-api/__mocks__/apollo-server-env.js
+++ /dev/null
@@ -1,5 +0,0 @@
-import createMock from '@apollosproject/apollo-server-env-mock';
-
-const apolloServerEnv = require.requireActual('apollo-server-env');
-
-module.exports = createMock(apolloServerEnv);
diff --git a/apollos-church-api/__mocks__/dotenv/config.js b/apollos-church-api/__mocks__/dotenv/config.js
deleted file mode 100644
index c312228c..00000000
--- a/apollos-church-api/__mocks__/dotenv/config.js
+++ /dev/null
@@ -1 +0,0 @@
-// console.log('Disable reading from `env` file in test env.');
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index aed13e64..f4eafcdf 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.6.0-beta.0",
-    "environment": "api"
+  "version": "2.41.0",
+  "environment": "api"
 }
diff --git a/apollos-church-api/config.postgres.yml b/apollos-church-api/config.postgres.yml
new file mode 100644
index 00000000..dcca9e03
--- /dev/null
+++ b/apollos-church-api/config.postgres.yml
@@ -0,0 +1,244 @@
+# This file, in conjuction with your .env file,
+# should be used to configure the apollos server.
+
+# Any values you wish to keep secret should be placed in `.env`
+# You can access those values (and any other values in your environment)
+# using the ${VARIABLE_NAME} syntax
+
+# This file should be checked into version control.
+# `.env` should NOT be checked into version control.
+APP:
+  # This variable is used for generating deep links.
+  # It should match whatver is in your Info.plist `CFBundleURLTypes`
+  DEEP_LINK_HOST: ${DEEP_LINK_HOST}
+  UNIVERSAL_LINK_HOST: ${UNIVERSAL_LINK_HOST}
+  ROOT_API_URL: ${ROOT_URL}
+  JOBS_USERNAME: ${JOBS_USERNAME}
+  JOBS_PASSWORD: ${JOBS_PASSWORD}
+DATABASE:
+  URL: ${DATABASE_URL}
+BUGSNAG:
+  API_KEY: ${BUGSNAG_KEY}
+ROCK:
+  URL: ${ROCK_URL}
+  API_TOKEN: ${ROCK_TOKEN}
+UNIVERSAL_LINKS:
+  APPLE_APP_ID: ${APPLE_APP_ID}
+  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
+  APP_STORE_LINK: ${IOS_REDIRECT}
+  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
+  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
+  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
+ONE_SIGNAL:
+  APP_ID: ${ONE_SIGNAL_APP_ID}
+  REST_KEY: ${ONE_SIGNAL_REST_KEY}
+CHURCH_ONLINE:
+  URL: ${CHURCH_ONLINE_URL}
+  WEB_VIEW_URL: https://apollos.online.church/
+ALGOLIA:
+  APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
+  API_KEY: ${ALGOLIASEARCH_API_KEY}
+TWILIO:
+  ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
+  AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
+  FROM_NUMBER: ${TWILIO_FROM_NUMBER}
+PASS:
+  TEMPLATES:
+    CHECKIN: ${PWD}/wallet-passes/checkin.pass
+  CERTIFICATES:
+    WWDR: ${PASS_WWDR_CERT}
+    SIGNER_CERT: ${PASS_SIGNER_CERT}
+    SIGNER_KEY: ${PASS_SIGNER_KEY}
+    SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
+BIBLE_API:
+  KEY: ${BIBLE_API_KEY}
+  BIBLE_ID:
+    WEB: '9879dbb7cfe39e4d-01'
+    KJV: 'de4e12af7f28f599-02'
+CLOUDINARY:
+  URL: ${CLOUDINARY_URL}
+
+CONTENT:
+  SERMON_CHANNEL_ID: cbc0994a-97f1-471a-a7d5-4eff59d8a389
+  TYPES:
+    - ContentSeriesContentItem
+    - DevotionalContentItem
+    - MediaContentItem
+    - UniversalContentItem
+    - WeekendContentItem
+    - ContentItem
+
+SUGGESTED_FOLLOWS:
+  - email: vincent@differential.com
+  - email: conrad@differential.com
+
+TABS:
+  HOME:
+    - type: ActionBar
+      title: Welcome to Apollos
+      actions:
+        [
+          {
+            title: Check In,
+            icon: check,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+        ]
+    - algorithms:
+      - type: CONTENT_FEED
+        arguments:
+          channelIds:
+            - c7f43eb9-2200-4267-ab28-871e0d5e785f
+            - 3dfe7149-136b-4134-bd91-fdd935ef2221
+      type: HeroList
+      primaryAction:
+        # Right now, you hardcode exactly what GraphQL should return.
+        # Long term, we hope to have a more sophisticated mechanism for driving this field
+        action: OPEN_NODE
+        title: 'Read More'
+        relatedNode:
+          __typename: UniversalContentItem
+          id: a2c42d1d-98c8-46fb-aeea-603bc569cf7d
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - algorithms:
+        - type: CAMPAIGN_ITEMS
+          channelIds:
+            - 4b23ebc9-248e-4092-99f9-8829e1b6f1cc
+      type: HeroList
+      isFeatured: true
+      subtitle: Featured
+    - title: FOR YOU
+      algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+      subtitle: Explore what God calls you to today
+      type: ActionList
+    - algorithms: [SERIES_IN_PROGRESS]
+      subtitle: Continue
+      type: HorizontalCardList
+    - title: RECOMMENDED
+      algorithms: [SERMON_CHILDREN]
+      subtitle: For Him
+      type: VerticalCardList
+    - title: BULLETIN
+      subtitle: What's happening at apollos?
+      type: ActionList
+      algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 13
+        - type: UPCOMING_EVENTS
+
+  READ:
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - c7f43eb9-2200-4267-ab28-871e0d5e785f
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Podcast Messages
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          apollosId: ContentChannel:f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+          title: Podcast Messages
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - d9da719f-84ef-4cf0-9875-22fea4bf09eb
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Devotionals
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          apollosId: ContentChannel:d9da719f-84ef-4cf0-9875-22fea4bf09eb
+          title: Devotionals
+
+  WATCH:
+    - algorithms:
+        - type: LATEST_SERIES_CHILDREN
+          arguments:
+            channelId: 8f0a93f5-ccec-4cc1-8fd8-06afe5982f7b
+      type: HeroList
+      title: Catch up
+      subtitle: Latest Series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+      type: VerticalCardList
+      subtitle: All series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 8f0a93f5-ccec-4cc1-8fd8-06afe5982f7b
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Sermons
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Podcasts
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          apollosId: ContentChannel:f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+          title: Podcasts
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+            limit: 3
+      type: HorizontalCardList
+      title: Videos
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          apollosId: ContentChannel:f4a5890c-4af5-4d9f-afe3-5d1c6aa85419
+          title: Videos
+
+  PRAY:
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - type: VerticalPrayerList
+      title: Your Prayers
+  CONNECT:
+    - type: FollowPeople
+    - type: ActionTable
+      title: Connect to Apollos
+      actions:
+        [
+          {
+            title: Google,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+          {
+            title: Facebook,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.facebook.com' },
+          },
+        ]
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 7a3896b8..5ac0d92a 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -10,58 +10,34 @@
 APP:
   # This variable is used for generating deep links.
   # It should match whatver is in your Info.plist `CFBundleURLTypes`
-  DEEP_LINK_HOST: apolloschurchapp
+  DEEP_LINK_HOST: ${DEEP_LINK_HOST}
+  UNIVERSAL_LINK_HOST: ${UNIVERSAL_LINK_HOST}
   ROOT_API_URL: ${ROOT_URL}
   JOBS_USERNAME: ${JOBS_USERNAME}
   JOBS_PASSWORD: ${JOBS_PASSWORD}
+DATABASE:
+  URL: ${DATABASE_URL}
 BUGSNAG:
-  ## Optional, but you'll need to remove references to @apollosproject/bugsnag if you don't wish to use.
   API_KEY: ${BUGSNAG_KEY}
 ROCK:
-  API_URL: https://rock.apollos.app/api
+  URL: ${ROCK_URL}
   API_TOKEN: ${ROCK_TOKEN}
-  IMAGE_URL: https://rock.apollos.app/GetImage.ashx
-  SHARE_URL: https://rock.apollos.app
-  # This should match the timezone of the Rock server
-  TIMEZONE: 'America/New_York'
-  USE_PLUGIN: true
-  SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
 UNIVERSAL_LINKS:
-  # This should be your app's bundle ID, as found in your info.plist.
-  APPLE_APP_ID: org.reactjs.native.apolloschurchapp
-  # This should be your app's team ID, as found in Xcode
-  APPLE_TEAM_ID: 7TM8C6252Z
-  # Where should a user be redirected if they don't have your app installed?
-  APP_STORE_LINK: https://apollos.app/ios
-  PLAY_STORE_LINK: https://apollos.app/android
-  # Your app Id, as found in your app/build.gradle.
-  GOOGLE_APP_ID: com.apolloschurch.app
-  # https://docs.getsocial.im/knowledge-base/android-signing-key-sha256/
-  GOOGLE_KEYSTORE_SHA256: EC:6E:B5:5A:62:53:1E:53:FF:C4:BA:A7:CB:29:77:57:71:9D:65:2F:AF:69:41:A3:AD:2B:C4:55:A1:7A:07:03
+  APPLE_APP_ID: ${APPLE_APP_ID}
+  APPLE_TEAM_ID: ${APPLE_TEAM_ID}
+  APP_STORE_LINK: ${IOS_REDIRECT}
+  PLAY_STORE_LINK: ${ANDROID_REDIRECT}
+  GOOGLE_APP_ID: ${GOOGLE_APP_ID}
+  GOOGLE_KEYSTORE_SHA256: ${GOOGLE_KEYSTORE_SHA256}
 ONE_SIGNAL:
-  APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
+  APP_ID: ${ONE_SIGNAL_APP_ID}
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
-  URL: https://apollos.online.church/
-  MEDIA_URLS: []
+  URL: ${CHURCH_ONLINE_URL}
   WEB_VIEW_URL: https://apollos.online.church/
 ALGOLIA:
-  APPLICATION_ID: ${ALGOLIA_APP_ID}
-  API_KEY: ${ALGOLIA_API_KEY}
-  # TODO: should we support multiple indices? how
-  SEARCH_INDEX: test_ContentItem
-  # Configure Algolia custom settings here
-  # https://www.algolia.com/doc/api-reference/settings-api-parameters/
-  CONFIGURATION:
-    searchableAttributes:
-      - title
-      - unordered(summary)
-    #customRankings:
-    # NOT CURRENTLY INCLUDED
-    # This just demonstrates what's possible
-    # To include likedCount (or any other field) override search package
-    # and add field to config below
-    #- desc(likedCount)
+  APPLICATION_ID: ${ALGOLIASEARCH_APPLICATION_ID}
+  API_KEY: ${ALGOLIASEARCH_API_KEY}
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -74,36 +50,16 @@ PASS:
     SIGNER_CERT: ${PASS_SIGNER_CERT}
     SIGNER_KEY: ${PASS_SIGNER_KEY}
     SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
-ANALYTICS:
-  # Filling out these fields will automatically enable analytics tracking
-  # on the accompanying service
-  SEGMENT_KEY:
-  GA_ID:
-  USE_ROCK: true
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
   BIBLE_ID:
     WEB: '9879dbb7cfe39e4d-01'
     KJV: 'de4e12af7f28f599-02'
 CLOUDINARY:
-  # Cloudinary is used to improve image loading
-  # value should look something like
-  # cloudinary://123123123:adkfnla_adASDv_adAS@test
   URL: ${CLOUDINARY_URL}
-ENGINE:
-  API_KEY: ${ENGINE_API_KEY}
-  SCHEMA_TAG: ${ENGINE_SCHEMA_TAG}
 
 # This key holds various properties that allow our GraphQL server to map to your Rock Instance
 ROCK_MAPPINGS:
-  INTERACTIONS:
-    # Name of the InteractionChannel that will be created per EntityType
-    CHANNEL_NAME: Apollos App
-    # Prefix for the name of the InteractionComponent that will be created per Entity
-    COMPONENT_NAME: Apollos App Component
-    # 512 is "Mobile App"
-    CHANNEL_MEDIUM_TYPE_ID: 512
-
   CONTENT_ITEM:
     ContentSeriesContentItem:
       # When resolving "ContentSeriesContentItem" look in rock for a "ContentChannelItem"
@@ -112,13 +68,13 @@ ROCK_MAPPINGS:
       ContentChannelTypeId: [6]
     DevotionalContentItem:
       EntityType: ContentChannelItem
-      ContentChannelTypeId: []
+      ContentChannelId: [7]
     MediaContentItem:
       EntityType: ContentChannelItem
     UniversalContentItem:
       EntityType: ContentChannelItem
     WeekendContentItem:
-      ContentChannelId: []
+      ContentChannelId: [5]
       EntityType: ContentChannelItem
     ContentItem:
       EntityType: ContentChannelItem
@@ -127,176 +83,172 @@ ROCK_MAPPINGS:
     # Id of the category used to store all persona dataviews
     PersonaId: 210
 
-  # Apollos will pull these content channels and expose them in the app on the discover screen.
-  DISCOVER_CONTENT_CHANNEL_IDS:
+  ALL_CONTENT_CHANNELS:
     - 3
     - 5
     - 6
     - 8
-  # Apollos will pull content items from these channels and expose them on the user feed
-  # However, it will not expose the channel itself.
-  # These channels are also pulled when indexing searchable content.
-  FEED_CONTENT_CHANNEL_IDS:
-    - 6
-
-  CAMPAIGN_CHANNEL_IDS:
-    - 11
 
   SERMON_CHANNEL_ID: 5
 
-  SERVING_GROUP_TYPE_ID: 23
-  COMMUNITY_GROUP_TYPE_ID: 25
-  FAMILY_GROUP_TYPE_ID: 10
+TABS:
+  HOME:
+    - type: ActionBar
+      title: Welcome to Apollos
+      actions:
+        [
+          {
+            title: Check In,
+            icon: check,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+        ]
+    - algorithms:
+      - type: CONTENT_FEED
+        arguments:
+          channelIds:
+            - 6
+      type: HeroList
+      primaryAction:
+        # Right now, you hardcode exactly what GraphQL should return.
+        # Long term, we hope to have a more sophisticated mechanism for driving this field
+        action: OPEN_NODE
+        title: 'Read More'
+        relatedNode:
+          __typename: UniversalContentItem
+          id: 21
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - algorithms:
+        - type: CAMPAIGN_ITEMS
+          channelIds:
+            - 9
+      type: HeroList
+      isFeatured: true
+      subtitle: Featured
+    - title: FOR YOU
+      algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+      subtitle: Explore what God calls you to today
+      type: ActionList
+    - algorithms: [PERSONA_FEED]
+      subtitle: Continue
+      type: HorizontalCardList
+    - title: RECOMMENDED
+      algorithms: [SERMON_CHILDREN]
+      subtitle: For Him
+      type: VerticalCardList
+    - title: BULLETIN
+      subtitle: What's happening at apollos?
+      type: ActionList
+      algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 13
+        - type: UPCOMING_EVENTS
 
-  MOBILE_DEVICE_TYPE_ID: 671
+  READ:
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 7
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Devotionals
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 7
+          name: Devotionals
 
-HOME_FEATURES:
-  - algorithms: [USER_FEED]
-    type: HeroList
-    primaryAction:
-      # Right now, you hardcode exactly what GraphQL should return.
-      # Long term, we hope to have a more sophisticated mechanism for driving this field
-      action: OPEN_NODE
-      title: 'Read More'
-      relatedNode:
-        __typename: UniversalContentItem
-        id: 21
-  - algorithms: [DAILY_PRAYER]
-    isCard: false
-    type: PrayerList
-    title: Daily Prayer
-  - algorithms: [CAMPAIGN_ITEMS]
-    type: HeroList
-    isFeatured: true
-  - title: FOR YOU
-    algorithms: [SERMON_CHILDREN, PERSONA_FEED]
-    subtitle: Explore what God calls you to today
-    type: ActionList
-  - algorithms: [PERSONA_FEED]
-    subtitle: Continue
-    type: HorizontalCardList
-  - title: RECOMMENDED
-    algorithms: [SERMON_CHILDREN]
-    subtitle: For Him
-    type: VerticalCardList
-  - title: BULLETIN
-    subtitle: What's happening at apollos?
-    type: ActionList
-    algorithms:
-      - type: CONTENT_CHANNEL
-        arguments:
-          contentChannelId: 13
-      - type: UPCOMING_EVENTS
+  WATCH:
+    - algorithms:
+        - type: LATEST_SERIES_CHILDREN
+          arguments:
+            channelId: 4
+      type: HeroList
+      title: Catch up
+      subtitle: Latest Series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 4
+      type: VerticalCardList
+      subtitle: All series
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 3
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Sermons
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 5
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Podcasts
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 5
+          name: Podcasts
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 6
+            limit: 3
+      type: HorizontalCardList
+      title: Videos
+      primaryAction:
+        action: OPEN_CHANNEL
+        title: 'Read More'
+        relatedNode:
+          __typename: ContentChannel
+          id: 6
+          name: Videos
+    - algorithms:
+        - type: CONTENT_FEED
+          arguments:
+            channelIds:
+              - 8
+            limit: 3
+      type: HorizontalCardList
+      subtitle: Something Else
 
-# Default mapping of field types -> ids. There's probably no reason to edit this.
-ROCK_CONSTANTS:
-  TEXT: 1
-  MULTI_SELECT: 2
-  BOOLEAN: 3
-  COLOR: 4
-  SINGLE_SELECT: 6
-  INTEGER: 7
-  PAGE_REFERENCE: 8
-  IMAGE: 10
-  DATE: 11
-  DECIMAL: 14
-  DEFINED_TYPE: 15
-  DEFINED_VALUE: 16
-  PERSON: 18
-  HTML: 20
-  MEMO: 21
-  GROUP_TYPES: 22
-  GROUP: 23
-  CAMPUSES: 26
-  ENTITY_TYPE: 29
-  CAMPUS: 30
-  EMAIL_TEMPLATE: 31
-  FILE: 32
-  GROUP_TYPE: 33
-  KEY_VALUE_LIST: 34
-  BINARY_FILE_TYPE: 35
-  WORKFLOW_TYPE: 36
-  BINARY_FILE: 37
-  FINANCIAL_ACCOUNT: 38
-  FINANCIAL_ACCOUNTS: 39
-  COMPONENT: 40
-  COMPONENTS: 41
-  CATEGORIES: 42
-  GROUP_ROLE: 43
-  CATEGORY: 44
-  LOCATION: 45
-  DATE_RANGE: 46
-  DECIMAL_RANGE: 47
-  INTEGER_RANGE: 48
-  TIME: 49
-  GROUP_LOCATION_TYPE: 50
-  CODE_EDITOR: 51
-  PERSON_BADGES: 52
-  SITE: 53
-  COMMUNICATION_TEMPLATE: 54
-  DAY_OF_WEEK: 55
-  DAYS_OF_WEEK: 56
-  REMOTE_AUTHS: 57
-  COMPARISON: 58
-  METRIC_ENTITY: 59
-  WORKFLOW_ACTIVITY: 60
-  WORKFLOW_ATTRIBUTE: 61
-  METRICS: 62
-  ENTITY: 63
-  METRIC_CATEGORIES: 64
-  WORKFLOW_TEXT_OR_ATTRIBUTE: 65
-  SLIDING_DATE_RANGE: 66
-  GROUP_TYPE_GROUP: 67
-  SECURITY_ROLE: 68
-  VALUE_LIST: 69
-  CURRENCY: 70
-  EMAIL: 71
-  URL_LINK: 72
-  WORKFLOW_TYPES: 73
-  ATTRIBUTE: 74
-  SCHEDULES: 75
-  CONTENT_CHANNEL: 76
-  AUDIO_FILE: 77
-  AUDIO_URL: 78
-  VIDEO_FILE: 79
-  VIDEO_URL: 80
-  ENCRYPTED_TEXT: 81
-  FILTER_DATE: 82
-  DATE_TIME: 83
-  DEFINED_VALUE_RANGE: 84
-  RATING: 85
-  SYSTEM_EMAIL: 86
-  FINANCIAL_GATEWAY: 87
-  GROUP_AND_ROLE: 88
-  NOTE_TYPE: 89
-  NOTE_TYPES: 90
-  EVENT_CALENDAR: 91
-  EVENT_ITEM: 92
-  CONNECTION_ACTIVITY_TYPE: 93
-  CONNECTION_OPPORTUNITY: 94
-  CONNECTION_REQUEST: 95
-  CONNECTION_STATE: 96
-  CONNECTION_STATUS: 97
-  CONNECTION_TYPE: 98
-  CONNECTION_TYPES: 99
-  MERGE_TEMPLATE: 100
-  RANGE_SLIDER: 101
-  BINARY_FILE_TYPES: 102
-  MARKDOWN: 103
-  DATA_VIEW: 104
-  PHONE_NUMBER: 105
-  SCHEDULE: 106
-  LAVA_COMMANDS: 107
-  ADDRESS: 108
-  BENEVOLENCE_REQUEST: 109
-  CONTENT_CHANNEL_TYPES: 110
-  WORKFLOW: 111
-  SSN: 112
-  MATRIX: 113
-  LAVA: 114
-  DATA_VIEWS: 115
-  COMMUNICATION_PREFERENCE: 116
-  INTERACTION_CHANNEL: 117
-  GROUP_MEMBER: 118
-  TIME_ZONE: 119
-  LABEL: 120
+  PRAY:
+    - algorithms: [DAILY_PRAYER]
+      isCard: false
+      type: PrayerList
+      title: Daily Prayer
+    - type: VerticalPrayerList
+      title: Your Prayers
+  CONNECT:
+    - type: ActionTable
+      title: Connect to Apollos
+      actions:
+        [
+          {
+            title: Google,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.google.com' },
+          },
+          {
+            title: Facebook,
+            action: OPEN_URL,
+            relatedNode: { __typename: Url, url: 'https://www.facebook.com' },
+          },
+        ]
\ No newline at end of file
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
deleted file mode 100644
index cdd63087..00000000
--- a/apollos-church-api/local.graphql
+++ /dev/null
@@ -1,715 +0,0 @@
-directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE
-
-enum ACTION_FEATURE_ACTION {
-  READ_CONTENT
-  READ_EVENT
-  OPEN_URL
-  OPEN_NODE
-}
-
-type ActionListAction {
-  id: ID!
-  title: String
-  subtitle: String
-  image: ImageMedia
-  relatedNode: Node
-  action: ACTION_FEATURE_ACTION
-}
-
-type ActionListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  actions: [ActionListAction]
-  primaryAction: FeatureAction
-}
-
-input AnalyticsDeviceInfo {
-  platform: AnalyticsPlatform
-  deviceId: String
-  deviceModel: String
-  osVersion: String
-  appVersion: String
-}
-
-input AnalyticsIdentifyInput {
-  traits: [AnalyticsMetaField]
-  anonymousId: String!
-  deviceInfo: AnalyticsDeviceInfo
-}
-
-input AnalyticsMetaField {
-  field: String!
-  value: AnalyticsValue
-}
-
-enum AnalyticsPlatform {
-  iOS
-  Android
-}
-
-type AnalyticsResult {
-  success: Boolean
-}
-
-input AnalyticsTrackInput {
-  eventName: String!
-  properties: [AnalyticsMetaField]
-  anonymousId: String
-  deviceInfo: AnalyticsDeviceInfo
-}
-
-scalar AnalyticsValue
-
-type AudioMedia implements Media {
-  name: String
-  key: String
-  sources: [AudioMediaSource]
-}
-
-type AudioMediaSource implements MediaSource {
-  uri: String
-}
-
-interface AudioNode {
-  audios: [AudioMedia]
-}
-
-type AuthenticatedUser {
-  id: ID!
-  profile: Person
-  rock: RockPersonDetails
-  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
-}
-
-type Authentication {
-  user: AuthenticatedUser
-  token: String
-}
-
-enum CacheControlScope {
-  PUBLIC
-  PRIVATE
-}
-
-type Campus implements Node {
-  id: ID!
-  name: String
-  street1: String
-  street2: String
-  city: String
-  state: String
-  postalCode: String
-  latitude: Float
-  longitude: Float
-  image: ImageMediaSource
-  distanceFromLocation(location: CampusLocationInput): Float
-  events: [Event]
-}
-
-input CampusLocationInput {
-  latitude: Float
-  longitude: Float
-}
-
-interface Card {
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  summary: String
-}
-
-type CardListItem {
-  id: ID!
-  hasAction: Boolean
-  actionIcon: String
-  labelText: String
-  summary: String
-  coverImage: ImageMedia
-  title(hyphenated: Boolean): String
-  relatedNode: Node
-  action: ACTION_FEATURE_ACTION
-}
-
-"""A rgb color string"""
-scalar Color
-
-type ContentChannel implements Node {
-  id: ID!
-  name: String
-  description: String
-  childContentChannels: [ContentChannel]
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  iconName: String
-}
-
-interface ContentChildNode {
-  parentChannel: ContentChannel
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-}
-
-interface ContentItem {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-type ContentItemsConnection {
-  edges: [ContentItemsConnectionEdge]
-  totalCount: Int
-  pageInfo: PaginationInfo
-}
-
-type ContentItemsConnectionEdge {
-  node: ContentItem
-  cursor: String
-}
-
-input ContentItemsConnectionInput {
-  first: Int
-  after: String
-}
-
-interface ContentNode {
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  htmlContent: String
-}
-
-interface ContentParentNode {
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-}
-
-type ContentSeriesContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ProgressNode & LikableNode & ShareableNode & FeaturesNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  percentComplete: Float
-  upNext: ContentItem
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-  features: [Feature]
-}
-
-type Device implements Node {
-  id: ID!
-  pushId: String!
-  notificationsEnabled: Boolean!
-}
-
-type DevotionalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-type Event implements Node {
-  id: ID!
-  name: String
-  description: String
-  location: String
-  start: String
-  end: String
-  image: ImageMedia
-}
-
-interface Feature {
-  id: ID!
-  order: Int
-}
-
-type FeatureAction {
-  relatedNode: Node
-  action: ACTION_FEATURE_ACTION
-  title: String
-}
-
-interface FeaturesNode {
-  features: [Feature]
-}
-
-enum GENDER {
-  Male
-  Female
-  Unknown
-}
-
-type Group implements Node {
-  id: ID!
-  name: String
-  leader: Person @deprecated(reason: "No longer used, use 'leaders' instead")
-  leaders: [Person]
-  members: [Person]
-}
-
-enum GROUP_TYPE {
-  Serving
-  Community
-  Family
-}
-
-type HeroListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  actions: [ActionListAction]
-  heroCard: CardListItem
-  primaryAction: FeatureAction
-}
-
-type HorizontalCardListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  cards: [CardListItem]
-}
-
-type ImageMedia implements Media {
-  name: String
-  key: String
-  sources: [ImageMediaSource]
-}
-
-type ImageMediaSource implements MediaSource {
-  uri: String
-}
-
-enum InteractionAction {
-  VIEW
-  COMPLETE
-  PRAY
-}
-
-input InteractionDataField {
-  field: String!
-  value: InteractionValue
-}
-
-type InteractionResult {
-  success: Boolean
-  node: Node
-}
-
-scalar InteractionValue
-
-interface LikableNode {
-  isLiked: Boolean
-  likedCount: Int
-}
-
-enum LIKE_OPERATION {
-  Like
-  Unlike
-}
-
-input LikeEntityInput {
-  nodeId: ID!
-  operation: LIKE_OPERATION!
-}
-
-interface LiveNode {
-  liveStream: LiveStream
-}
-
-type LiveStream {
-  isLive: Boolean
-  eventStartTime: String
-  media: VideoMedia
-  webViewUrl: String
-  contentItem: ContentItem
-}
-
-interface Media {
-  name: String
-  key: String
-  sources: [MediaSource]
-}
-
-type MediaContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & ScriptureNode & LikableNode & ShareableNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-enum MediaInputType {
-  IMAGE
-  VIDEO
-  AUDIO
-}
-
-interface MediaSource {
-  uri: String
-}
-
-type Mutation {
-  _placeholder: Boolean
-  updateLikeEntity(input: LikeEntityInput!): ContentItem @deprecated(reason: "Use the more general updateLikeNode instead")
-  updateLikeNode(input: LikeEntityInput!): Node
-  updateProfileField(input: UpdateProfileInput!): Person
-  updateProfileFields(input: [UpdateProfileInput]!): Person
-  uploadProfileImage(file: Upload!, size: Int!): Person
-  authenticate(identity: String!, password: String!): Authentication
-  changePassword(password: String!): Authentication
-  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
-  requestSmsLoginPin(phoneNumber: String!): SmsPinResult
-  authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
-  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
-  interactWithNode(action: InteractionAction!, nodeId: ID!, data: [InteractionDataField]): InteractionResult
-  identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
-  trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
-  updateUserPushSettings(input: PushSettingsInput!): Person
-  updateUserCampus(campusId: String!): Person
-  addPrayer(text: String!, isAnonymous: Boolean): PrayerRequest
-}
-
-interface Node {
-  id: ID!
-}
-
-type PaginationInfo {
-  startCursor: String
-  endCursor: String
-}
-
-type Pass implements Node {
-  id: ID!
-  type: PassType
-  description: String
-  logo: ImageMediaSource
-  thumbnail: ImageMediaSource
-  barcode: ImageMediaSource
-  primaryFields: [PassField]
-  secondaryFields: [PassField]
-  backgroundColor: Color
-  foregroundColor: Color
-  labelColor: Color
-  logoText: String
-  passkitFileUrl: String
-}
-
-type PassField {
-  key: String!
-  label: String
-  value: String!
-  textAlignment: PassFieldTextAlignment
-}
-
-enum PassFieldTextAlignment {
-  LEFT
-  CENTER
-  RIGHT
-  NATURAL
-}
-
-enum PassType {
-  GENERIC
-}
-
-type Person implements Node {
-  id: ID!
-  firstName: String
-  lastName: String
-  nickName: String
-  email: String
-  gender: GENDER
-  birthDate: String
-  photo: ImageMediaSource
-  devices: [Device]
-  campus: Campus
-  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
-}
-
-type PrayerListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  isCard: Boolean
-  title: String
-  subtitle: String
-  prayers: [PrayerRequest]
-}
-
-type PrayerRequest implements Node {
-  id: ID!
-  text: String!
-  requestor: Person
-  isAnonymous: Boolean
-  isPrayed: Boolean
-}
-
-interface ProgressNode {
-  percentComplete: Float
-  upNext: ContentItem
-}
-
-input PushSettingsInput {
-  enabled: Boolean
-  pushProviderUserId: String
-}
-
-type Query {
-  _placeholder: Boolean
-  node(id: ID!): Node
-  likedContent(first: Int, after: String): ContentItemsConnection
-  contentChannels: [ContentChannel]
-  campaigns: ContentItemsConnection
-  userFeed(first: Int, after: String): ContentItemsConnection
-  personaFeed(first: Int, after: String): ContentItemsConnection
-  currentUser: AuthenticatedUser
-  userExists(identity: String): USER_AUTH_STATUS
-  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
-  liveStreams: [LiveStream]
-  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
-  scriptures(query: String!, version: VERSION): [Scripture]
-  userPass: Pass
-  search(query: String!, first: Int, after: String): SearchResultsConnection
-  campuses(location: CampusLocationInput): [Campus]
-  userFeedFeatures: [Feature]
-}
-
-type RockPersonDetails {
-  authToken: String
-  authCookie: String
-}
-
-type Scripture implements Node {
-  id: ID!
-  html: String
-  reference: String
-  copyright: String
-  version: String
-}
-
-type ScriptureFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  scriptures: [Scripture]
-  sharing: SharableFeature
-}
-
-interface ScriptureNode {
-  scriptures: [Scripture]
-}
-
-type SearchResult {
-  cursor: String
-  title: String
-  summary: String
-  coverImage: ImageMedia
-  node: Node
-}
-
-type SearchResultsConnection {
-  edges: [SearchResult]
-  pageInfo: PaginationInfo
-}
-
-interface Sharable {
-  message: String
-  title: String
-  url: String @deprecated(reason: "Not supported on the interface")
-}
-
-type SharableContentItem implements Sharable {
-  message: String
-  title: String
-  url: String
-}
-
-type SharableFeature implements Sharable {
-  message: String
-  title: String
-  url: String @deprecated(reason: "Not supported on a feature")
-}
-
-interface ShareableNode {
-  sharing: SharableContentItem
-}
-
-type SmsPinResult {
-  success: Boolean
-  userAuthStatus: USER_AUTH_STATUS
-}
-
-type TextFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  body: String
-  sharing: SharableFeature
-}
-
-type Theme {
-  type: ThemeType
-  colors: ThemeColors
-}
-
-type ThemeColors {
-  primary: Color
-  secondary: Color
-  screen: Color
-  paper: Color
-  alert: Color
-}
-
-interface ThemedNode {
-  theme: Theme
-}
-
-enum ThemeType {
-  LIGHT
-  DARK
-}
-
-type UniversalContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & ShareableNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-enum UPDATEABLE_PROFILE_FIELDS {
-  FirstName
-  LastName
-  Email
-  NickName
-  Gender
-  BirthDate
-}
-
-input UpdateProfileInput {
-  field: UPDATEABLE_PROFILE_FIELDS!
-  value: String!
-}
-
-"""The `Upload` scalar type represents a file upload."""
-scalar Upload
-
-type Url implements Node {
-  url: String
-  id: ID!
-}
-
-enum USER_AUTH_STATUS {
-  NONE
-  NEW_APP_USER
-  EXISTING_APP_USER
-}
-
-enum VERSION {
-  WEB
-  KJV
-}
-
-type VerticalCardListFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  title: String
-  subtitle: String
-  isFeatured: Boolean
-  cards: [CardListItem]
-}
-
-type VideoMedia implements Media {
-  name: String
-  key: String
-  sources: [VideoMediaSource]
-  embedHtml: String
-}
-
-type VideoMediaSource implements MediaSource {
-  uri: String
-}
-
-interface VideoNode {
-  videos: [VideoMedia]
-}
-
-type WebviewFeature implements Feature & Node {
-  id: ID!
-  order: Int
-  linkText: String
-  title: String
-  url: String
-}
-
-type WeekendContentItem implements ContentItem & Node & ContentNode & Card & VideoNode & AudioNode & ContentChildNode & ContentParentNode & ThemedNode & LikableNode & LiveNode & ShareableNode & FeaturesNode {
-  id: ID!
-  title(hyphenated: Boolean): String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  isLiked: Boolean
-  likedCount: Int
-  liveStream: LiveStream
-  sharing: SharableContentItem
-  features: [Feature]
-}
-
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index f3666174..84bce520 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -4,80 +4,51 @@
   "private": true,
   "main": "lib/index.js",
   "scripts": {
-    "init": "./scripts/init.sh",
-    "start": "./scripts/generateLocalSchema.sh & yarn start:dev",
+    "setup": "./scripts/init.sh",
+    "migrator": "node ./lib/migrator.js",
+    "start": "NODE_ENV=production node ./lib/index.js",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
-    "start:prod": "NODE_ENV=production node ./lib/index.js",
     "postinstall": "yarn build",
-    "link-packages": "node ./scripts/link-packages",
-    "unlink-packages": "node ./scripts/link-packages remove",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
     "lint": "eslint ./src --ext .js",
-    "fixlint": "eslint ./src --ext .js --fix",
-    "codecov": "cat ./coverage/lcov.info | codecov",
-    "version": "node ../../scripts/update-apollos-version.js && git add apollos.json",
-    "schema-diff": "./scripts/schemaDiff.sh",
-    "schema-lint": "graphql-schema-linter local.graphql",
-    "upgrade": "npx @apollosproject/upgrade-tools upgrade",
-    "latest": "./scripts/add-packages.sh",
-    "beta": "./scripts/add-packages.sh beta",
-    "canary": "./scripts/add-packages.sh canary"
+    "translate": "node scripts/translate.js"
   },
   "engines": {
-    "node": ">=8.11.x"
-  },
-  "jest": {
-    "collectCoverage": true,
-    "collectCoverageFrom": [
-      "src/**/*.{js,jsx}"
-    ],
-    "testMatch": [
-      "<rootDir>/src/**/__tests__/**/*.{js,jsx,mjs}",
-      "<rootDir>/src/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
-    ],
-    "testEnvironment": "node",
-    "reporters": [
-      "<rootDir>/../../scripts/fingers-crossed-reporter.js"
-    ]
+    "node": ">=14"
   },
   "dependencies": {
-    "@apollosproject/bugsnag": "^1.6.0-beta.0",
-    "@apollosproject/config": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-algolia-search": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-analytics": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-bible": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-church-online": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-cloudinary": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-onesignal": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-passes": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-redis-cache": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-rock": "^1.6.0-beta.0",
-    "@apollosproject/data-connector-twilio": "^1.6.0-beta.0",
-    "@apollosproject/data-schema": "^1.6.0-beta.0",
-    "@apollosproject/rock-apollo-data-source": "^1.6.0-beta.0",
-    "@apollosproject/server-core": "^1.6.0-beta.0",
-    "apollo-server": "^2.14.2",
+    "@apollosproject/config": "^2.41.0",
+    "@apollosproject/data-connector-algolia-search": "^2.41.0",
+    "@apollosproject/data-connector-analytics": "^2.41.0",
+    "@apollosproject/data-connector-bible": "^2.41.0",
+    "@apollosproject/data-connector-church-online": "^2.41.0",
+    "@apollosproject/data-connector-cloudinary": "^2.41.0",
+    "@apollosproject/data-connector-onesignal": "^2.41.0",
+    "@apollosproject/data-connector-passes": "^2.41.0",
+    "@apollosproject/data-connector-postgres": "^2.41.0",
+    "@apollosproject/data-connector-redis-cache": "^2.41.0",
+    "@apollosproject/data-connector-rock": "^2.41.0",
+    "@apollosproject/data-connector-twilio": "^2.41.0",
+    "@apollosproject/data-schema": "^2.41.0",
+    "@apollosproject/rock-apollo-data-source": "^2.41.0",
+    "@apollosproject/server-core": "^2.41.0",
+    "apollo-server": "^2.24.1",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
     "dotenv": "6.0.0",
     "express": "^4.17.0",
     "graphql": "14.6.0",
-    "prettier": "1.12.1",
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^1.6.0-beta.0",
-    "@apollosproject/babel-preset-apollos": "^1.6.0-beta.0",
-    "@apollosproject/eslint-config": "^1.6.0-beta.0",
+    "@apollosproject/apollo-server-env-mock": "^2.41.0",
+    "@apollosproject/babel-preset-apollos": "^2.41.0",
+    "@apollosproject/eslint-config": "^2.41.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
-    "@entria/graphql-findbreakingchanges": "^1.0.1",
     "babel-eslint": "^10.0.3",
-    "babel-jest": "^24.9.0",
-    "babel-plugin-module-resolver": "^3.2.0",
-    "codecov": "3.7.1",
     "eslint": "^5.16.0",
     "eslint-config-airbnb-base": "^14.0.0",
     "eslint-config-prettier": "^2.9.0",
@@ -86,9 +57,8 @@
     "eslint-plugin-import": "^2.12.0",
     "eslint-plugin-jest": "^21.15.2",
     "eslint-plugin-prettier": "^2.6.0",
-    "get-graphql-schema": "^2.1.2",
-    "graphql-schema-linter": "^0.2.0",
     "linkemon": "^0.1.1",
-    "nodemon": "^2.0.2"
+    "nodemon": "1.18.7",
+    "prettier": "1.12.1"
   }
 }
diff --git a/apollos-church-api/scripts/add-packages.sh b/apollos-church-api/scripts/add-packages.sh
deleted file mode 100755
index ca37cb73..00000000
--- a/apollos-church-api/scripts/add-packages.sh
+++ /dev/null
@@ -1,25 +0,0 @@
-# get list of apollosproject packages to update
-
-# get devDependencies line number
-DEVDEPSLINE=$(grep -n "devDependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
-
-# get dependecies line number
-DEPSLINE=$(grep -n "dependencies" package.json | sed -E "s/^([0-9]+):.*/\1/g")
-
-# determine what npm tag to update to
-[[ $1 = "canary" ]] && TAG=canary || [[ $1 = "beta" ]] && TAG=beta || TAG=latest
-
-# replace package names with version tag
-JSON=$(sed -E "s/^.*\"(@apollosproject\/[a-z\-]+)\".*$/\1@$TAG /g" package.json)
-
-# if packages are listed first and dev packages second...
-if [ $DEVDEPSLINE -gt $DEPSLINE ]
-then
-		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE","$DEVDEPSLINE"p | grep "@apollosproject" | tr -d "\n")
-		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
-else
-		PKGS=$(echo "$JSON" | sed -n "$DEPSLINE",/^$/p | grep "@apollosproject" | tr -d "\n")
-		DEVPKGS=$(echo "$JSON" | sed -n "$DEVDEPSLINE","$DEPSLINE"p | grep "@apollosproject" | tr -d "\n")
-fi
-yarn add --dev $DEVPKGS --ignore-scripts
-yarn add $PKGS --ignore-scripts
diff --git a/apollos-church-api/scripts/generateLocalSchema.sh b/apollos-church-api/scripts/generateLocalSchema.sh
deleted file mode 100755
index d8008f25..00000000
--- a/apollos-church-api/scripts/generateLocalSchema.sh
+++ /dev/null
@@ -1,28 +0,0 @@
-PING_SERVER="curl 'http://localhost:4000/graphql' -H 'content-type: application/json' -H 'accept: application/json' --data-binary '{\"query\":\"{_placeholder}\"}' > /dev/null 2>&1"
-
-if eval "$PING_SERVER"; then
-  echo 'Server running, downloading schema from localhost:4000'
-  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
-  echo 'Done. Check local.graphql'
-else
-  echo $*
-  if [ "$*" = "--start-server" ]; then
-    echo 'Server not running, starting server'
-    PORT=4000 npm run start:prod > /tmp/server-log.txt &
-    SERVER_PID=$!
-    echo "Server running... (PID $SERVER_PID)"
-  fi
-  sleep 1
-  until eval "$PING_SERVER"; do
-      sleep 1
-      echo 'Waiting for server to boot....'
-  done
-  echo 'Curling Server for most recent schema.'
-  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
-  echo 'Publishing Schema to Apollo Engine.'
-  npx apollo schema:publish --endpoint=http://localhost:4000
-  if [ "$*" = "--start-server" ]; then
-    echo "Killing Server (PID $SERVER_PID)"
-    kill -9 $SERVER_PID
-  fi
-fi
diff --git a/apollos-church-api/scripts/init.sh b/apollos-church-api/scripts/init.sh
index 474bfae5..b0a810e5 100755
--- a/apollos-church-api/scripts/init.sh
+++ b/apollos-church-api/scripts/init.sh
@@ -3,5 +3,24 @@ if test -f .env; then
 	echo ".env file already exists!"
 	exit 1
 fi
-echo "ROCK_API=
-ROCK_TOKEN=" > .env
+
+echo "You will need the following before beginning:
+Rock URL
+Rock API Token
+
+Are you ready to proceed? [y/n]: "
+read -r ANSWER
+if $ANSWER != "y"; then
+	exit 1
+fi
+
+echo "Rock URL: "
+read -r ROCK_URL
+echo "Rock API Token: "
+read -r ROCK_TOKEN
+
+echo "ROCK_URL=$ROCK_URL
+ROCK_TOKEN=$ROCK_TOKEN" >.env
+
+# remove template encrypted files
+rm .env.shared.enc
diff --git a/apollos-church-api/scripts/link-packages.js b/apollos-church-api/scripts/link-packages.js
deleted file mode 100644
index 7778c0a4..00000000
--- a/apollos-church-api/scripts/link-packages.js
+++ /dev/null
@@ -1,16 +0,0 @@
-const fs = require('fs');
-const { execSync } = require('child_process');
-
-const direction = process.argv[2] || 'link';
-
-const packageJson = JSON.parse(fs.readFileSync(`${__dirname}/../package.json`));
-
-const dependencies = [
-  ...Object.keys(packageJson.dependencies),
-  ...Object.keys(packageJson.devDependencies),
-].filter((d) => d.includes('@apollosproject'));
-
-dependencies.forEach((dep) => {
-  const output = execSync(`yalc ${direction} ${dep}`, { encoding: 'utf8' });
-  console.log(output);
-});
diff --git a/apollos-church-api/scripts/schemaDiff.sh b/apollos-church-api/scripts/schemaDiff.sh
deleted file mode 100755
index 67404e4b..00000000
--- a/apollos-church-api/scripts/schemaDiff.sh
+++ /dev/null
@@ -1,13 +0,0 @@
-#!/usr/bin/env bash
-sh ./scripts/generateLocalSchema.sh --start-server
-./node_modules/.bin/get-graphql-schema https://apollos-church-api-herokuapp-com.global.ssl.fastly.net > prod.graphql
-DIFF=$(graphql-findbreakingchanges prod.graphql local.graphql)
-rm prod.graphql
-echo "$DIFF"
-
-if [[ ! $DIFF = *"NO BREAKING CHANGES"* ]]
-then
-  exit 1
-else
-  exit 0
-fi
diff --git a/apollos-church-api/scripts/translate.js b/apollos-church-api/scripts/translate.js
new file mode 100644
index 00000000..af1db91d
--- /dev/null
+++ b/apollos-church-api/scripts/translate.js
@@ -0,0 +1,15 @@
+const {
+  createGlobalId,
+  parseGlobalId,
+} = require('@apollosproject/server-core');
+
+const [id] = process.argv.slice(2);
+if (!id) {
+  console.log(
+    'Pass Rock or Apollos ID: translate.js AuthenticatedUser:8sad98fd89sadf98uasdf'
+  );
+  process.exit(1);
+}
+
+if (id.includes(':')) console.log(parseGlobalId(id).id);
+else console.log(createGlobalId(id, 'Generic').split(':')[1]);
diff --git a/apollos-church-api/src/config.js b/apollos-church-api/src/config.js
index 59a48535..53b6558c 100644
--- a/apollos-church-api/src/config.js
+++ b/apollos-church-api/src/config.js
@@ -1,7 +1,48 @@
 import path from 'path';
-import dotenv from 'dotenv/config'; // eslint-disable-line
+import fetch from 'node-fetch';
+import dotenv from "dotenv/config"; // eslint-disable-line
 import ApollosConfig from '@apollosproject/config';
 
 ApollosConfig.loadYaml({
-  configPath: path.join(__dirname, '..', 'config.yml'),
+  configPath: path.join(
+    __dirname,
+    '..',
+    process.env.DATABASE_CONTENT === 'true'
+      ? 'config.postgres.yml'
+      : 'config.yml'
+  ),
 });
+
+// defaults
+ApollosConfig.loadJs({
+  ROCK: { TIMEZONE: ApollosConfig?.ROCK?.TIMEZONE || 'America/New_York' },
+});
+
+// autodetect some settings
+(async () => {
+  if (!ApollosConfig.ROCK) return;
+  if (!ApollosConfig.ROCK.URL || !ApollosConfig.ROCK.API_TOKEN)
+    throw new Error('ROCK_URL and ROCK_TOKEN variables are required!');
+
+  let res;
+
+  // plugin
+  res = await fetch(
+    `${ApollosConfig.ROCK.URL}/api/RestControllers?$select=Name`,
+    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
+  );
+  const hasPlugin = (await res.json())
+    .map(({ Name }) => Name)
+    .includes('Apollos');
+  if (hasPlugin) console.log('Apollos Rock plugin detected!');
+  ApollosConfig.loadJs({ ROCK: { USE_PLUGIN: hasPlugin } });
+
+  // version
+  res = await fetch(
+    `${ApollosConfig.ROCK.URL}/api/Utility/GetRockSemanticVersionNumber`,
+    { headers: { 'Authorization-Token': ApollosConfig.ROCK.API_TOKEN } }
+  );
+  const version = (await res.text()).split('.');
+  console.log(`Rock Version: ${version[1]}`);
+  ApollosConfig.loadJs({ ROCK: { VERSION: version[1] } });
+})();
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index feab7bb1..b9886fb3 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -18,7 +18,6 @@ import {
   Followings,
   Interactions,
   RockConstants,
-  Person,
   ContentItem,
   ContentChannel,
   Sharable,
@@ -28,23 +27,31 @@ import {
   AuthSms,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
+  FeatureFeed,
+  ActionAlgorithm,
   Event,
   PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
 } from '@apollosproject/data-connector-rock';
+
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
+// This is to mock any postgres resolvers so we don't throw API errors for unresolved
+// typedefs
+import NoPostgres from './noPostgres';
+
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
-  Person,
   Cloudinary,
   Auth,
   AuthSms,
@@ -64,11 +71,16 @@ const data = {
   Template,
   Campus,
   Group,
-  BinaryFiles,
   Feature,
+  FeatureFeed,
+  ActionAlgorithm,
   Event,
   Cache,
   PrayerRequest,
+  Persona,
+  Person,
+  BinaryFiles,
+  NoPostgres,
 };
 
 const {
@@ -78,6 +90,7 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -87,6 +100,7 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
+  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
new file mode 100644
index 00000000..e5728ba5
--- /dev/null
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -0,0 +1,171 @@
+import { gql } from 'apollo-server';
+
+import {
+  createApolloServerConfig,
+  Interfaces,
+} from '@apollosproject/server-core';
+
+import * as Analytics from '@apollosproject/data-connector-analytics';
+import * as Scripture from '@apollosproject/data-connector-bible';
+import * as LiveStream from '@apollosproject/data-connector-church-online';
+import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
+import * as Search from '@apollosproject/data-connector-algolia-search';
+import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
+import * as Sms from '@apollosproject/data-connector-twilio';
+import {
+  Followings,
+  Interactions as RockInteractions,
+  RockConstants,
+  Sharable,
+  Auth,
+  PersonalDevice,
+  Template,
+  AuthSms,
+  Group,
+  BinaryFiles,
+  FeatureFeed,
+  Event,
+  Person as RockPerson,
+  ContentItem as RockContentItem,
+  Campus as RockCampus,
+  ContentChannel,
+  Feature as RockFeature,
+  ActionAlgorithm as RockActionAlgorithm,
+  PrayerRequest as RockPrayerRequest,
+} from '@apollosproject/data-connector-rock';
+
+import {
+  Comment,
+  UserFlag,
+  UserLike,
+  Follow,
+  Interactions,
+  Likes,
+  Notification,
+  NotificationPreference,
+  Tag,
+  Campus,
+  Person as PostgresPerson,
+  Media as PostgresMedia,
+  Feature as PostgresFeature,
+  ContentItem as PostgresContentItem,
+  ContentItemsConnection,
+  ContentItemCategory,
+  ActionAlgorithm as PostgresActionAlgorithm,
+  PrayerRequest as PostgresPrayerRequest,
+} from '@apollosproject/data-connector-postgres';
+
+import * as Theme from './theme';
+
+// This modules ties together certain updates so they occurs in both Rock and Postgres.
+// Will be eliminated in the future through an enhancement to the Shovel
+import {
+  Person,
+  OneSignal,
+  PostgresDefaultCampusOverride,
+  RockDefaultCampusOverride,
+  PrayerRequest,
+} from './rockWithPostgres';
+
+const postgresContentModules = {
+  Interactions,
+  Likes,
+  ActionAlgorithm: PostgresActionAlgorithm,
+  Feature: PostgresFeature,
+  PostgresMedia,
+  Tag,
+  ContentItem: PostgresContentItem,
+  ContentItemsConnection,
+  ContentChannel: ContentItemCategory,
+  RockCampus: { dataSource: RockCampus.dataSource },
+  Campus,
+  PostgresDefaultCampusOverride,
+  RockPrayerRequest: {
+    dataSource: RockPrayerRequest.dataSource,
+  },
+  PostgresPrayerRequest,
+  PrayerRequest,
+};
+
+const rockContentModules = {
+  Interactions: RockInteractions,
+  Followings,
+  ActionAlgorithm: RockActionAlgorithm,
+  Feature: RockFeature,
+  ContentItem: RockContentItem,
+  ContentChannel,
+  PostgresCampus: {
+    // essentially everything but the resolvers
+    dataSource: Campus.dataSource,
+    models: Campus.models,
+    migrations: Campus.migrations,
+  },
+  Campus: RockCampus,
+  RockDefaultCampusOverride,
+  PrayerRequest: RockPrayerRequest,
+};
+
+const data = {
+  Interfaces,
+  FeatureFeed,
+  RockPerson, // This entry needs to come before (postgres) Person
+  BinaryFiles, // This entry needs to come before (postgres) Person
+  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
+  ...(process.env.DATABASE_CONTENT
+    ? postgresContentModules
+    : rockContentModules),
+  Cloudinary,
+  Auth,
+  AuthSms,
+  Sms,
+  LiveStream,
+  Theme,
+  Scripture,
+  RockConstants,
+  Sharable,
+  Analytics,
+  PersonalDevice,
+  Pass,
+  Search,
+  Template,
+  Group,
+  Event,
+  Cache,
+  Comment,
+  UserLike,
+  UserFlag,
+  Follow,
+  Notification,
+  NotificationPreference,
+  OneSignal,
+  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
+};
+
+const {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+} = createApolloServerConfig(data);
+
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+  migrations,
+};
+
+// the upload Scalar is added
+export const testSchema = [
+  gql`
+    scalar Upload
+  `,
+  ...schema,
+];
diff --git a/apollos-church-api/src/data/noPostgres.js b/apollos-church-api/src/data/noPostgres.js
new file mode 100644
index 00000000..bd292eac
--- /dev/null
+++ b/apollos-church-api/src/data/noPostgres.js
@@ -0,0 +1,46 @@
+// The purpose of this file is to mock the postgres resolvers to null so the API doesn't fail when
+// there's no database. This will not be necessary when Postgres is required by all Apollos APIs.
+import gql from 'graphql-tag';
+import { Comment, Follow } from '@apollosproject/data-connector-postgres';
+
+export default {
+  schema: gql`
+    ${Comment.schema}
+    ${Follow.schema}
+  `,
+  resolver: {
+    Query: {
+      followRequests: () => [],
+      suggestedFollows: () => [],
+      searchPeople: () => {},
+    },
+    Mutation: {
+      addComment: () => null,
+      flagComment: () => null,
+      requestFollow: () => null,
+      acceptFollowRequest: () => null,
+      ignoreFollowRequest: () => null,
+    },
+    Comment: {
+      person: () => null,
+      id: () => null,
+    },
+    CommentListFeature: {
+      id: () => null,
+    },
+    AddCommentFeature: {
+      id: () => null,
+      initialPrompt: () => null,
+      addPrompt: () => null,
+      relatedNode: () => null,
+    },
+    Person: {
+      currentUserFollowing: () => null,
+      followingCurrentUser: () => null,
+    },
+    SearchPeopleResultsConnection: {
+      edges: () => [],
+      pageInfo: () => null,
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
new file mode 100644
index 00000000..fbd2ae6b
--- /dev/null
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -0,0 +1,185 @@
+/* eslint-disable import/prefer-default-export, max-classes-per-file */
+import { parseGlobalId } from '@apollosproject/server-core';
+import {
+  Person as postgresPerson,
+  PrayerRequest as postgresPrayerRequest,
+} from '@apollosproject/data-connector-postgres';
+import * as OneSignalOriginal from '@apollosproject/data-connector-onesignal';
+
+class personDataSource extends postgresPerson.dataSource {
+  async create(attributes) {
+    const rockPersonId = await this.context.dataSources.RockPerson.create(
+      attributes
+    );
+    super.create({
+      ...attributes,
+      originType: 'rock',
+      originId: String(rockPersonId),
+    });
+    return rockPersonId;
+  }
+}
+
+// These resolvers make sure that calls to updating profile fields update both the
+const personResolver = {
+  Mutation: {
+    updateProfileField: async (
+      root,
+      { input: { field, value } },
+      { dataSources }
+    ) => {
+      await dataSources.RockPerson.updateProfile([{ field, value }]); // Update in Rock
+      return dataSources.Person.updateProfile([{ field, value }]); // updates in Postgres
+    },
+    updateProfileFields: async (root, { input }, { dataSources }) => {
+      await dataSources.RockPerson.updateProfile(input); // Update in Rock
+      return dataSources.Person.updateProfile(input); // updates in Postgres
+    },
+    uploadProfileImage: async (root, { file, size }, { dataSources }) => {
+      const person = await dataSources.RockPerson.uploadProfileImage(
+        file,
+        size
+      ); // Update in Rock
+      return dataSources.Person.updateProfile([
+        { field: 'profileImageUrl', value: person.photo.url },
+      ]); // updates in Postgres. Reuses already uploaded imageUrl
+      // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
+    },
+    updateUserPushSettings: async (root, { input }, { dataSources }) => {
+      // register the changes w/ postgres
+      await dataSources.NotificationPreference.updateUserNotificationPreference(
+        {
+          notificationProviderId: input.pushProviderUserId,
+          notificationProviderType: 'one_signal', // hard coded for now
+          enabled: input.enabled,
+        }
+      );
+      // register the changes w/ one signal
+      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
+
+      // if the pushProviderUserId is changing, we need ot register the device with rock.
+      if (input.pushProviderUserId != null) {
+        await dataSources.PersonalDevice.addPersonalDevice({
+          pushId: input.pushProviderUserId,
+        });
+      }
+
+      try {
+        await dataSources.Person.updateProfile([
+          {
+            field: 'apollosUser',
+            value: true,
+          },
+        ]);
+      } catch (e) {
+        console.warn(e);
+      }
+
+      // return the original return value (which is currentPerson)
+      return returnValue;
+    },
+  },
+};
+
+export const Person = {
+  dataSource: personDataSource,
+  resolver: personResolver,
+};
+
+class oneSignalDataSource extends OneSignalOriginal.dataSource {
+  async createNotification({
+    toUserIds = [],
+    to,
+    content = '',
+    heading,
+    subtitle,
+    ...args
+  }) {
+    if (to && to.originId && to.originType === 'rock') {
+      const person = await this.context.dataSources.RockPerson.getFromId(
+        to.originId
+      );
+      return super.createNotification({
+        toUserIds: [person.primaryAliasId],
+        content,
+        heading,
+        subtitle,
+        ...args,
+      });
+    }
+    return super.createNotification({
+      toUserIds,
+      content,
+      heading,
+      subtitle,
+      ...args,
+    });
+  }
+}
+
+export const OneSignal = {
+  ...OneSignalOriginal,
+  dataSource: oneSignalDataSource,
+};
+
+// Used when IDs coming from the API are Rock APIS.
+export const RockDefaultCampusOverride = {
+  resolver: {
+    Mutation: {
+      updateUserCampus: async (root, { campusId }, { dataSources }) => {
+        await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
+
+        const { id: rockCampusId } = parseGlobalId(campusId);
+        const campus = await dataSources.PostgresCampus.getFromId(
+          rockCampusId,
+          null,
+          {
+            originType: 'rock',
+          }
+        ); // finds the postgres campus id
+        return dataSources.Person.updateProfile([
+          { field: 'campusId', value: campus.id },
+        ]); // updates in Postgres
+      },
+    },
+  },
+};
+
+// Used when IDs coming from the API are Postgres APIS.
+export const PostgresDefaultCampusOverride = {
+  resolver: {
+    Mutation: {
+      updateUserCampus: async (root, { campusId }, { dataSources }) => {
+        const campus = await dataSources.Campus.getFromId(
+          parseGlobalId(campusId).id
+        ); // finds the postgres campus id
+        await dataSources.RockCampus.updateCurrentUserCampus({
+          rockId: campus.originId,
+        }); // updates in Rock
+        return dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Postgres
+      },
+    },
+  },
+};
+
+class prayerRequestDataSource extends postgresPrayerRequest.dataSource {
+  async getRequestor({ personId }) {
+    return this.context.dataSources.Person.getFromId(personId);
+  }
+}
+
+export const PrayerRequest = {
+  dataSource: prayerRequestDataSource,
+  resolver: {
+    Mutation: {
+      addPrayer: async (root, args, { dataSources }) => {
+        const { id } = await dataSources.RockPrayerRequest.addPrayer(args);
+        return dataSources.PrayerRequest.addPrayer({
+          text: args.text,
+          originId: String(id),
+          originType: 'rock',
+        });
+      },
+    },
+  },
+};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 3acfad03..613e7219 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,4 +1,5 @@
 import dotenv from 'dotenv/config'; // eslint-disable-line
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
 import config from './config'; // eslint-disable-line
 import server from './server';
 
diff --git a/apollos-church-api/src/migrator.js b/apollos-church-api/src/migrator.js
new file mode 100644
index 00000000..72366cf8
--- /dev/null
+++ b/apollos-church-api/src/migrator.js
@@ -0,0 +1,31 @@
+import dotenv from 'dotenv/config'; // eslint-disable-line
+import '@apollosproject/data-connector-postgres/lib/postgres/pgEnum-fix';
+import config from './config'; // eslint-disable-line
+
+import ApollosConfig from '@apollosproject/config';
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const { migrations } = dataObj;
+
+// make sure this is called last.
+// (or at least after the apollos server setup)
+(async () => {
+  if (ApollosConfig?.DATABASE?.URL) {
+    try {
+      const migrationRunner = await createMigrationRunner({ migrations });
+      migrationRunner.runAsCLI();
+    } catch (e) {
+      console.log(e);
+    }
+  } else {
+    console.warn('Please specify a database URL to perform migrations');
+  }
+})();
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index e85c7e04..ae3b1cf4 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -4,8 +4,17 @@ import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
-import { BugsnagPlugin } from '@apollosproject/bugsnag';
-import {
+import { createMigrationRunner } from '@apollosproject/data-connector-postgres';
+
+let dataObj;
+
+if (ApollosConfig?.DATABASE?.URL) {
+  dataObj = require('./data/index.postgres');
+} else {
+  dataObj = require('./data/index');
+}
+
+const {
   resolvers,
   schema,
   testSchema,
@@ -13,7 +22,8 @@ import {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-} from './data';
+  migrations,
+} = dataObj;
 
 export { resolvers, schema, testSchema };
 
@@ -32,7 +42,7 @@ const cacheOptions = isDev
       },
     };
 
-const { ENGINE } = ApollosConfig;
+const { ROCK, APP } = ApollosConfig;
 
 const apolloServer = new ApolloServer({
   typeDefs: schema,
@@ -41,9 +51,8 @@ const apolloServer = new ApolloServer({
   context,
   introspection: true,
   extensions,
-  plugins: [new BugsnagPlugin()],
   formatError: (error) => {
-    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
+    console.error(get(error, 'extensions.exception.stacktrace', []).join('\n'));
     return error;
   },
   playground: {
@@ -51,15 +60,17 @@ const apolloServer = new ApolloServer({
       'editor.cursorShape': 'line',
     },
   },
+  uploads: false,
   ...cacheOptions,
-  engine: {
-    apiKey: ENGINE.API_KEY,
-    schemaTag: ENGINE.SCHEMA_TAG,
-  },
 });
 
 const app = express();
 
+// password reset
+app.get('/forgot-password', (req, res) => {
+  res.redirect(APP.FORGOT_PASSWORD_URL || `${ROCK.URL}/page/56`);
+});
+
 applyServerMiddleware({ app, dataSources, context });
 setupJobs({ app, dataSources, context });
 // Comment out if you don't want the API serving apple-app-site-association or assetlinks manifests.
@@ -68,4 +79,29 @@ setupUniversalLinks({ app });
 apolloServer.applyMiddleware({ app });
 apolloServer.applyMiddleware({ app, path: '/' });
 
+// make sure this is called last.
+// (or at least after the apollos server setup)
+(async () => {
+  if (ApollosConfig?.DATABASE?.URL) {
+    const migrationRunner = await createMigrationRunner({ migrations });
+    const pending = await migrationRunner.pending();
+    if (pending.length) {
+      console.log('\x1b[31m', '██████████████████████████████████', '\x1b[0m');
+      console.log(
+        '\x1b[36m',
+        'You currently have a number of pending migrations',
+        '\x1b[0m'
+      );
+      console.log(pending);
+      console.log(
+        `Keep in mind, you are currently connected to ${
+          migrationRunner?.options?.context?.sequelize?.options?.host
+        }`
+      );
+      console.log('\x1b[31m', '██████████████████████████████████', '\x1b[0m');
+    }
+    if (ApollosConfig.AUTO_MIGRATE) await migrationRunner.up();
+  }
+})();
+
 export default app;
