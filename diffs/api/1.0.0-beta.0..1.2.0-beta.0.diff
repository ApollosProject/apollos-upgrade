diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index e3697d9..5c49045 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.0.0-beta.0",
+    "version": "1.2.0-beta.0",
     "environment": "api"
 }
\ No newline at end of file
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 0f1e38d..4a16624 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -16,13 +16,22 @@ ROCK:
   API_URL: https://apollosrock.newspring.cc/api
   API_TOKEN: ${ROCK_TOKEN}
   IMAGE_URL: https://apollosrock.newspring.cc/GetImage.ashx
+  SHARE_URL: https://apollosrock.newspring.cc
   # This should match the timezone of the Rock server
   TIMEZONE: 'America/New_York'
+  USE_PLUGIN: true
 ONE_SIGNAL:
   APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
 CHURCH_ONLINE:
   URL: https://apollos.churchonline.org/api/v1/
+  MEDIA_URLS: []
+  WEB_VIEW_URL: https://apollos.churchonline.org/
+ALGOLIA:
+  APPLICATION_ID: ${ALGOLIA_APP_ID}
+  API_KEY: ${ALGOLIA_API_KEY}
+  # TODO: should we support multiple indices? how?
+  SEARCH_INDEX: test_ContentItems
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -72,6 +81,9 @@ ROCK_MAPPINGS:
       EntityType: ContentChannelItem
     UniversalContentItem:
       EntityType: ContentChannelItem
+    WeekendContentItem:
+      ContentChannelId: [5]
+      EntityType: ContentChannelItem
     ContentItem:
       EntityType: ContentChannelItem
 
@@ -88,6 +100,7 @@ ROCK_MAPPINGS:
     - 8
   # Apollos will pull content items from these channels and expose them on the user feed
   # However, it will not expose the channel itself.
+  # These channels are also pulled when indexing searchable content.
   FEED_CONTENT_CHANNEL_IDS:
     - 1
     - 2
@@ -100,6 +113,25 @@ ROCK_MAPPINGS:
   CAMPAIGN_CHANNEL_IDS:
     - 11
 
+  SERMON_CHANNEL_ID: 5
+
+  SERVING_GROUP_TYPE_ID: 23
+  COMMUNITY_GROUP_TYPE_ID: 25
+  FAMILY_GROUP_TYPE_ID: 10
+
+HOME_FEATURES:
+  - title: FOR YOU
+    algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+    subtitle: Explore what God calls you to today
+  - title: BULLETIN
+    subtitle: What's happening at apollos?
+    algorithms:
+      - type: CONTENT_CHANNEL
+        arguments:
+          contentChannelId: 13
+      - type: UPCOMING_EVENTS
+
+
 # Default mapping of field types -> ids. There's probably no reason to edit this.
 ROCK_CONSTANTS:
   TEXT: 1
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
index cea6cba..a146e0a 100644
--- a/apollos-church-api/local.graphql
+++ b/apollos-church-api/local.graphql
@@ -1,3 +1,25 @@
+enum ACTION_FEATURE_ACTION {
+  READ_CONTENT
+  READ_EVENT
+}
+
+type ActionListAction {
+  id: ID!
+  title: String
+  subtitle: String
+  image: ImageMedia
+  relatedNode: Node
+  action: ACTION_FEATURE_ACTION
+}
+
+type ActionListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  actions: [ActionListAction]
+}
+
 input AnalyticsDeviceInfo {
   platform: AnalyticsPlatform
   deviceId: String
@@ -73,6 +95,7 @@ type Campus implements Node {
   longitude: Float
   image: ImageMediaSource
   distanceFromLocation(location: CampusLocationInput): Float
+  events: [Event]
 }
 
 input CampusLocationInput {
@@ -85,7 +108,7 @@ scalar Color
 
 type ContentChannel implements Node {
   id: ID!
-  name: String!
+  name: String
   description: String
   childContentChannels: [ContentChannel]
   childContentItemsConnection(first: Int, after: String): ContentItemsConnection
@@ -142,6 +165,7 @@ type ContentSeriesContentItem implements ContentItem & Node {
   isLiked: Boolean
   likedCount: Int
   sharing: SharableContentItem
+  features: [Feature]
 }
 
 type DevotionalContentItem implements ContentItem & Node {
@@ -163,12 +187,38 @@ type DevotionalContentItem implements ContentItem & Node {
   sharing: SharableContentItem
 }
 
+type Event implements Node {
+  id: ID!
+  name: String
+  location: String
+  start: String
+  end: String
+}
+
+interface Feature {
+  id: ID!
+  order: Int
+}
+
 enum GENDER {
   Male
   Female
   Unknown
 }
 
+type Group implements Node {
+  id: ID!
+  name: String
+  leader: Person
+  members: [Person]
+}
+
+enum GROUP_TYPE {
+  Serving
+  Community
+  Family
+}
+
 type ImageMedia implements Media {
   name: String
   key: String
@@ -192,6 +242,8 @@ input LikeEntityInput {
 type LiveStream {
   isLive: Boolean
   eventStartTime: String
+  media: VideoMedia
+  webViewUrl: String
 }
 
 interface Media {
@@ -257,8 +309,8 @@ type PaginationInfo {
 
 type Pass implements Node {
   id: ID!
-  type: PassType!
-  description: String!
+  type: PassType
+  description: String
   logo: ImageMediaSource
   thumbnail: ImageMediaSource
   barcode: ImageMediaSource
@@ -291,7 +343,7 @@ enum PassType {
 
 type Person implements Node {
   id: ID!
-  firstName: String!
+  firstName: String
   lastName: String!
   nickName: String
   email: String
@@ -299,6 +351,7 @@ type Person implements Node {
   birthDate: String
   photo: ImageMediaSource
   campus: Campus
+  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
 }
 
 input PushSettingsInput {
@@ -319,32 +372,67 @@ type Query {
   scripture(query: String!): Scripture
   scriptures(query: String!): [Scripture]
   userPass: Pass
+  search(query: String!, first: Int, after: String): SearchResultsConnection
   campuses(location: CampusLocationInput): [Campus]
+  userFeedFeatures: [Feature]
 }
 
-type Scripture {
-  id: String
+type Scripture implements Node {
+  id: ID!
   html: String
   reference: String
   copyright: String
 }
 
+type ScriptureFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  scriptures: [Scripture]
+  sharing: SharableFeature
+}
+
+type SearchResult {
+  cursor: String
+  title: String
+  summary: String
+  coverImage: ImageMedia
+  node: Node
+}
+
+type SearchResultsConnection {
+  edges: [SearchResult]
+  pageInfo: PaginationInfo
+}
+
 interface Sharable {
-  url: String
   message: String
   title: String
+  url: String @deprecated(reason: "Not supported on the interface")
 }
 
 type SharableContentItem implements Sharable {
+  message: String
+  title: String
   url: String
+}
+
+type SharableFeature implements Sharable {
   message: String
   title: String
+  url: String @deprecated(reason: "Not supported on a feature")
 }
 
 type SmsPinResult {
   success: Boolean
 }
 
+type TextFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  body: String
+  sharing: SharableFeature
+}
+
 type Theme {
   type: ThemeType
   colors: ThemeColors
@@ -409,3 +497,23 @@ type VideoMediaSource implements MediaSource {
   uri: String
 }
 
+type WeekendContentItem implements ContentItem & Node {
+  id: ID!
+  title: String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  liveStream: LiveStream
+  sharing: SharableContentItem
+  features: [Feature]
+}
+
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index b5f3118..8c33796 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apollos-church-api",
-  "version": "1.0.0-beta.0",
+  "version": "1.2.0-beta.0",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
@@ -34,17 +34,18 @@
     ]
   },
   "dependencies": {
-    "@apollosproject/config": "^1.0.0-beta.0",
-    "@apollosproject/data-connector-analytics": "^1.0.0-beta.0",
-    "@apollosproject/data-connector-bible": "^1.0.0-beta.0",
-    "@apollosproject/data-connector-church-online": "^1.0.0-beta.0",
-    "@apollosproject/data-connector-cloudinary": "^1.0.0-beta.0",
-    "@apollosproject/data-connector-onesignal": "^1.0.0-beta.0",
-    "@apollosproject/data-connector-passes": "^1.0.0-beta.0",
-    "@apollosproject/data-connector-rock": "^1.0.0-beta.0",
-    "@apollosproject/data-connector-twilio": "^1.0.0-beta.0",
-    "@apollosproject/rock-apollo-data-source": "^1.0.0-beta.0",
-    "@apollosproject/server-core": "^1.0.0-beta.0",
+    "@apollosproject/config": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-algolia-search": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-analytics": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-bible": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-church-online": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-cloudinary": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-onesignal": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-passes": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-rock": "^1.2.0-beta.0",
+    "@apollosproject/data-connector-twilio": "^1.2.0-beta.0",
+    "@apollosproject/rock-apollo-data-source": "^1.2.0-beta.0",
+    "@apollosproject/server-core": "^1.2.0-beta.0",
     "apollo-server": "^2.0.5",
     "apollo-server-express": "2.4.8",
     "color": "3.0.0",
@@ -55,10 +56,10 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^1.0.0-beta.0",
-    "@apollosproject/babel-preset-apollos": "^1.0.0-beta.0",
-    "@babel/cli": "7.1.5",
-    "@babel/core": "7.1.6",
+    "@apollosproject/apollo-server-env-mock": "^1.2.0-beta.0",
+    "@apollosproject/babel-preset-apollos": "^1.2.0-beta.0",
+    "@babel/cli": "^7.4.5",
+    "@babel/core": "^7.4.5",
     "@entria/graphql-findbreakingchanges": "^1.0.1",
     "codecov": "3.0.2",
     "get-graphql-schema": "^2.1.2",
diff --git a/apollos-church-api/schema.graphql b/apollos-church-api/schema.graphql
deleted file mode 100644
index 0f9a38d..0000000
--- a/apollos-church-api/schema.graphql
+++ /dev/null
@@ -1,413 +0,0 @@
-# source: http://localhost:4000
-# timestamp: Fri May 31 2019 15:21:07 GMT-0400 (EDT)
-
-input AnalyticsDeviceInfo {
-  platform: AnalyticsPlatform
-  deviceId: String
-  deviceModel: String
-  osVersion: String
-  appVersion: String
-}
-
-input AnalyticsIdentifyInput {
-  traits: [AnalyticsMetaField]
-  anonymousId: String!
-  deviceInfo: AnalyticsDeviceInfo
-}
-
-input AnalyticsMetaField {
-  field: String!
-  value: AnalyticsValue
-}
-
-enum AnalyticsPlatform {
-  iOS
-  Android
-}
-
-type AnalyticsResult {
-  success: Boolean
-}
-
-input AnalyticsTrackInput {
-  eventName: String!
-  properties: [AnalyticsMetaField]
-  anonymousId: String
-  deviceInfo: AnalyticsDeviceInfo
-}
-
-scalar AnalyticsValue
-
-type AudioMedia implements Media {
-  name: String
-  key: String
-  sources: [AudioMediaSource]
-}
-
-type AudioMediaSource implements MediaSource {
-  uri: String
-}
-
-type AuthenticatedUser {
-  id: ID!
-  profile: Person
-  rockToken: String
-}
-
-type Authentication {
-  user: AuthenticatedUser
-  token: String
-}
-
-enum CacheControlScope {
-  PUBLIC
-  PRIVATE
-}
-
-type Campus implements Node {
-  id: ID!
-  name: String
-  street1: String
-  street2: String
-  city: String
-  state: String
-  postalCode: String
-  latitude: Float
-  longitude: Float
-  image: ImageMediaSource
-  distanceFromLocation(location: CampusLocationInput): Float
-}
-
-input CampusLocationInput {
-  latitude: Float!
-  longitude: Float!
-}
-
-"""A rgb color string"""
-scalar Color
-
-type ContentChannel implements Node {
-  id: ID!
-  name: String!
-  description: String
-  childContentChannels: [ContentChannel]
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  iconName: String
-}
-
-interface ContentItem {
-  id: ID!
-  title: String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-type ContentItemsConnection {
-  edges: [ContentItemsConnectionEdge]
-  pageInfo: PaginationInfo
-}
-
-type ContentItemsConnectionEdge {
-  node: ContentItem
-  cursor: String
-}
-
-input ContentItemsConnectionInput {
-  first: Int
-  after: String
-}
-
-type ContentSeriesContentItem implements ContentItem & Node {
-  id: ID!
-  title: String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-type DevotionalContentItem implements ContentItem & Node {
-  id: ID!
-  title: String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-enum GENDER {
-  Male
-  Female
-  Unknown
-}
-
-type ImageMedia implements Media {
-  name: String
-  key: String
-  sources: [ImageMediaSource]
-}
-
-type ImageMediaSource implements MediaSource {
-  uri: String
-}
-
-enum LIKE_OPERATION {
-  Like
-  Unlike
-}
-
-input LikeEntityInput {
-  nodeId: ID!
-  operation: LIKE_OPERATION!
-}
-
-type LiveStream {
-  isLive: Boolean
-  eventStartTime: String
-}
-
-interface Media {
-  name: String
-  key: String
-  sources: [MediaSource]
-}
-
-type MediaContentItem implements ContentItem & Node {
-  id: ID!
-  title: String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  scriptures: [Scripture]
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-enum MediaInputType {
-  IMAGE
-  VIDEO
-  AUDIO
-}
-
-interface MediaSource {
-  uri: String
-}
-
-type Mutation {
-  _placeholder: Boolean
-  updateLikeEntity(input: LikeEntityInput!): ContentItem
-  updateProfileField(input: UpdateProfileInput!): Person
-  updateProfileFields(input: [UpdateProfileInput]!): Person
-  uploadProfileImage(file: Upload!, size: Int!): Person
-  authenticate(identity: String!, password: String!): Authentication
-  changePassword(password: String!): Authentication
-  registerPerson(email: String!, password: String!): Authentication
-  requestSmsLoginPin(phoneNumber: String!): SmsPinResult
-  authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
-  identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
-  trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
-  updateUserPushSettings(input: PushSettingsInput!): Person
-  updateUserCampus(campusId: String!): Person
-}
-
-interface Node {
-  id: ID!
-}
-
-type PaginationInfo {
-  startCursor: String
-  endCursor: String
-}
-
-type Pass implements Node {
-  id: ID!
-  type: PassType!
-  description: String!
-  logo: ImageMediaSource
-  thumbnail: ImageMediaSource
-  barcode: ImageMediaSource
-  primaryFields: [PassField]
-  secondaryFields: [PassField]
-  backgroundColor: Color
-  foregroundColor: Color
-  labelColor: Color
-  logoText: String
-  passkitFileUrl: String
-}
-
-type PassField {
-  key: String!
-  label: String
-  value: String!
-  textAlignment: PassFieldTextAlignment
-}
-
-enum PassFieldTextAlignment {
-  LEFT
-  CENTER
-  RIGHT
-  NATURAL
-}
-
-enum PassType {
-  GENERIC
-}
-
-type Person implements Node {
-  id: ID!
-  firstName: String!
-  lastName: String!
-  nickName: String
-  email: String
-  gender: GENDER
-  birthDate: String
-  photo: ImageMediaSource
-  campus: Campus
-}
-
-input PushSettingsInput {
-  enabled: Boolean
-  pushProviderUserId: String
-}
-
-type Query {
-  _placeholder: Boolean
-  node(id: ID!): Node
-  likedContent(first: Int, after: String): ContentItemsConnection
-  contentChannels: [ContentChannel]
-  campaigns: ContentItemsConnection
-  userFeed(first: Int, after: String): ContentItemsConnection
-  personaFeed(first: Int, after: String): ContentItemsConnection
-  currentUser: AuthenticatedUser
-  liveStream: LiveStream
-  scripture(query: String!): Scripture
-  scriptures(query: String!): [Scripture]
-  userPass: Pass
-  campuses(location: CampusLocationInput): [Campus]
-}
-
-type Scripture {
-  id: String
-  html: String
-  reference: String
-  copyright: String
-}
-
-interface Sharable {
-  url: String
-  message: String
-  title: String
-}
-
-type SharableContentItem implements Sharable {
-  url: String
-  message: String
-  title: String
-}
-
-type SmsPinResult {
-  success: Boolean
-}
-
-type Theme {
-  type: ThemeType
-  colors: ThemeColors
-}
-
-type ThemeColors {
-  primary: Color
-  secondary: Color
-  screen: Color
-  paper: Color
-  warning: Color
-}
-
-enum ThemeType {
-  LIGHT
-  DARK
-}
-
-type UniversalContentItem implements ContentItem & Node {
-  id: ID!
-  title: String
-  coverImage: ImageMedia
-  images: [ImageMedia]
-  videos: [VideoMedia]
-  audios: [AudioMedia]
-  htmlContent: String
-  summary: String
-  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
-  parentChannel: ContentChannel
-  theme: Theme
-  isLiked: Boolean
-  likedCount: Int
-  sharing: SharableContentItem
-}
-
-enum UPDATEABLE_PROFILE_FIELDS {
-  FirstName
-  LastName
-  Email
-  NickName
-  Gender
-  BirthDate
-}
-
-input UpdateProfileInput {
-  field: UPDATEABLE_PROFILE_FIELDS!
-  value: String!
-}
-
-"""The `Upload` scalar type represents a file upload."""
-scalar Upload
-
-type VideoMedia implements Media {
-  name: String
-  key: String
-  sources: [VideoMediaSource]
-  embedHtml: String
-}
-
-type VideoMediaSource implements MediaSource {
-  uri: String
-}
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 4bda45e..0cc46b7 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -7,6 +7,7 @@ import * as Scripture from '@apollosproject/data-connector-bible';
 import * as LiveStream from '@apollosproject/data-connector-church-online';
 import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
 import * as OneSignal from '@apollosproject/data-connector-onesignal';
+import * as Search from '@apollosproject/data-connector-algolia-search';
 import * as Pass from '@apollosproject/data-connector-passes';
 import * as Sms from '@apollosproject/data-connector-twilio';
 import {
@@ -22,7 +23,10 @@ import {
   Template,
   AuthSms,
   Campus,
+  Group,
   BinaryFiles,
+  Features,
+  Events,
 } from '@apollosproject/data-connector-rock';
 import * as Theme from './theme';
 
@@ -50,9 +54,13 @@ const data = {
   PersonalDevice,
   OneSignalWithRock,
   Pass,
+  Search,
   Template,
   Campus,
+  Group,
   BinaryFiles,
+  Features,
+  Events,
 };
 
 const {
@@ -61,9 +69,17 @@ const {
   schema,
   context,
   applyServerMiddleware,
+  setupJobs,
 } = createApolloServerConfig(data);
 
-export { dataSources, resolvers, schema, context, applyServerMiddleware };
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+};
 
 // the upload Scalar is added
 export const testSchema = [
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 74a305e..8d7efa4 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -9,6 +9,7 @@ import {
   context,
   dataSources,
   applyServerMiddleware,
+  setupJobs,
 } from './data';
 
 export { resolvers, schema, testSchema };
@@ -44,6 +45,8 @@ const apolloServer = new ApolloServer({
 const app = express();
 
 applyServerMiddleware({ app, dataSources, context });
+setupJobs({ app, dataSources, context });
+
 apolloServer.applyMiddleware({ app });
 apolloServer.applyMiddleware({ app, path: '/' });
 
diff --git a/apollos-church-api/wallet-passes/checkin.pass/pass.json b/apollos-church-api/wallet-passes/checkin.pass/pass.json
index 8909bd1..a3916b3 100644
--- a/apollos-church-api/wallet-passes/checkin.pass/pass.json
+++ b/apollos-church-api/wallet-passes/checkin.pass/pass.json
@@ -7,6 +7,7 @@
   "logoText": "Apollos Church",
   "backgroundColor": "rgb(0,103,109)",
   "foregroundColor": "rgb(248,247,244)",
+  "labelColor": "rgb(248,247,244)",
   "serialNumber": "checkinpass-{{ person | GetPersonAlternateId }}",
   "thumbnail": {
     "uri": "{{ person.Photo.Url }}&format=png&height=200"
