diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index c24d8e54..e82a4e48 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.3.1",
+  "version": "2.3.0",
   "environment": "api"
 }
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 22001cf8..b7ad37c2 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -5,8 +5,9 @@
   "main": "lib/index.js",
   "scripts": {
     "setup": "./scripts/init.sh",
-    "start": "NODE_ENV=production node ./lib/index.js",
+    "start": "yarn start:prod",
     "start:dev": "linkemon ./src/index.js --exec babel-node --delay 2 -e js,yaml,json,yml",
+    "start:prod": "NODE_ENV=production node ./lib/index.js",
     "postinstall": "yarn build",
     "link-packages": "node ./scripts/link-packages && yarn yalc update",
     "unlink-packages": "node ./scripts/link-packages remove && rm -rf ./node_modules",
@@ -19,22 +20,22 @@
     "node": ">=12.x.x"
   },
   "dependencies": {
-    "@apollosproject/bugsnag": "^2.4.0",
-    "@apollosproject/config": "^2.4.0",
-    "@apollosproject/data-connector-algolia-search": "^2.4.0",
-    "@apollosproject/data-connector-analytics": "^2.4.0",
-    "@apollosproject/data-connector-bible": "^2.4.0",
-    "@apollosproject/data-connector-church-online": "^2.4.0",
-    "@apollosproject/data-connector-cloudinary": "^2.4.0",
-    "@apollosproject/data-connector-onesignal": "^2.4.0",
-    "@apollosproject/data-connector-passes": "^2.4.0",
-    "@apollosproject/data-connector-postgres": "^2.4.0",
-    "@apollosproject/data-connector-redis-cache": "^2.4.0",
-    "@apollosproject/data-connector-rock": "^2.4.0",
-    "@apollosproject/data-connector-twilio": "^2.4.0",
-    "@apollosproject/data-schema": "^2.4.0",
-    "@apollosproject/rock-apollo-data-source": "^2.4.0",
-    "@apollosproject/server-core": "^2.4.0",
+    "@apollosproject/bugsnag": "^2.3.1",
+    "@apollosproject/config": "^2.3.1",
+    "@apollosproject/data-connector-algolia-search": "^2.3.1",
+    "@apollosproject/data-connector-analytics": "^2.3.1",
+    "@apollosproject/data-connector-bible": "^2.3.1",
+    "@apollosproject/data-connector-church-online": "^2.3.1",
+    "@apollosproject/data-connector-cloudinary": "^2.3.1",
+    "@apollosproject/data-connector-onesignal": "^2.3.1",
+    "@apollosproject/data-connector-passes": "^2.3.1",
+    "@apollosproject/data-connector-postgres": "^2.3.1",
+    "@apollosproject/data-connector-redis-cache": "^2.3.1",
+    "@apollosproject/data-connector-rock": "^2.3.1",
+    "@apollosproject/data-connector-twilio": "^2.3.1",
+    "@apollosproject/data-schema": "^2.3.1",
+    "@apollosproject/rock-apollo-data-source": "^2.3.1",
+    "@apollosproject/server-core": "^2.3.1",
     "apollo-server": "^2.14.2",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
@@ -44,13 +45,12 @@
     "graphql": "14.6.0",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3",
-    "sqlite3": "^5.0.1",
-    "umzug": "^3.0.0-beta.15"
+    "sqlite3": "^5.0.1"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.4.0",
-    "@apollosproject/babel-preset-apollos": "^2.4.0",
-    "@apollosproject/eslint-config": "^2.4.0",
+    "@apollosproject/apollo-server-env-mock": "^2.3.1",
+    "@apollosproject/babel-preset-apollos": "^2.3.1",
+    "@apollosproject/eslint-config": "^2.3.1",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 1945d14d..7f73dd94 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -34,21 +34,37 @@ import {
   Event,
   PrayerRequest,
   Persona,
-  Person,
+  Person as RockPerson,
 } from '@apollosproject/data-connector-rock';
 
+import {
+  Comment,
+  UserFlag,
+  Follow,
+  Campus as PostgresCampus,
+  Person as PostgresPerson,
+} from '@apollosproject/data-connector-postgres';
+// import * as PostgresPerson from '@apollosproject/data-connector-postgres/lib/people';
+// import * as PostgresCampus from '@apollosproject/data-connector-postgres/lib/campus';
+
 import * as Theme from './theme';
 
 // This module is used to attach Rock User updating to the OneSignal module.
 // This module includes a Resolver that overides a resolver defined in `OneSignal`
 import * as OneSignalWithRock from './oneSignalWithRock';
 
+// This modules ties together certain updates so they occurs in both Rock and Postgres.
+// Will be eliminated in the future through an enhancement to the Shovel
+import * as Person from './rockWithPostgres';
+
 const data = {
   Interfaces,
   Followings,
   ContentChannel,
   ContentItem,
-  BinaryFiles,
+  RockPerson, // This entry needs to come before (postgres) Person
+  BinaryFiles, // This entry needs to come before (postgres) Person
+  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
   Cloudinary,
   Auth,
   AuthSms,
@@ -74,8 +90,12 @@ const data = {
   Event,
   Cache,
   PrayerRequest,
+  Comment,
+  UserFlag,
+  Follow,
+  PostgresCampus,
   Persona,
-  Person,
+  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
 };
 
 const {
@@ -85,7 +105,6 @@ const {
   context,
   applyServerMiddleware,
   setupJobs,
-  migrations,
 } = createApolloServerConfig(data);
 
 export {
@@ -95,7 +114,6 @@ export {
   context,
   applyServerMiddleware,
   setupJobs,
-  migrations,
 };
 
 // the upload Scalar is added
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
deleted file mode 100644
index 81cb372e..00000000
--- a/apollos-church-api/src/data/index.postgres.js
+++ /dev/null
@@ -1,123 +0,0 @@
-import { gql } from 'apollo-server';
-
-import {
-  createApolloServerConfig,
-  Interfaces,
-} from '@apollosproject/server-core';
-
-import * as Analytics from '@apollosproject/data-connector-analytics';
-import * as Scripture from '@apollosproject/data-connector-bible';
-import * as LiveStream from '@apollosproject/data-connector-church-online';
-import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
-import * as OneSignal from '@apollosproject/data-connector-onesignal';
-import * as Search from '@apollosproject/data-connector-algolia-search';
-import * as Pass from '@apollosproject/data-connector-passes';
-import * as Cache from '@apollosproject/data-connector-redis-cache';
-import * as Sms from '@apollosproject/data-connector-twilio';
-import {
-  Followings,
-  Interactions,
-  RockConstants,
-  ContentItem,
-  ContentChannel,
-  Sharable,
-  Auth,
-  PersonalDevice,
-  Template,
-  AuthSms,
-  Campus,
-  Group,
-  BinaryFiles,
-  Feature,
-  FeatureFeed,
-  ActionAlgorithm,
-  Event,
-  PrayerRequest,
-  Persona,
-  Person as RockPerson,
-} from '@apollosproject/data-connector-rock';
-
-import {
-  Comment,
-  UserFlag,
-  Follow,
-  Campus as PostgresCampus,
-  Person as PostgresPerson,
-} from '@apollosproject/data-connector-postgres';
-
-import * as Theme from './theme';
-
-// This module is used to attach Rock User updating to the OneSignal module.
-// This module includes a Resolver that overides a resolver defined in `OneSignal`
-import * as OneSignalWithRock from './oneSignalWithRock';
-
-// This modules ties together certain updates so they occurs in both Rock and Postgres.
-// Will be eliminated in the future through an enhancement to the Shovel
-import * as Person from './rockWithPostgres';
-
-const data = {
-  Interfaces,
-  Followings,
-  ContentChannel,
-  ContentItem,
-  RockPerson, // This entry needs to come before (postgres) Person
-  BinaryFiles, // This entry needs to come before (postgres) Person
-  PostgresPerson, // Postgres person for now, as we extend this dataSource in the 'rockWithPostgres' file
-  Cloudinary,
-  Auth,
-  AuthSms,
-  Sms,
-  LiveStream,
-  Theme,
-  Scripture,
-  Interactions,
-  RockConstants,
-  Sharable,
-  Analytics,
-  OneSignal,
-  PersonalDevice,
-  OneSignalWithRock,
-  Pass,
-  Search,
-  Template,
-  Campus,
-  Group,
-  Feature,
-  FeatureFeed,
-  ActionAlgorithm,
-  Event,
-  Cache,
-  PrayerRequest,
-  Comment,
-  UserFlag,
-  Follow,
-  PostgresCampus,
-  Persona,
-  Person, // An extension of Postgres person. Will be eliminated in the near future so you can use just postgres/Person.
-};
-
-const {
-  dataSources,
-  resolvers,
-  schema,
-  context,
-  applyServerMiddleware,
-  setupJobs,
-} = createApolloServerConfig(data);
-
-export {
-  dataSources,
-  resolvers,
-  schema,
-  context,
-  applyServerMiddleware,
-  setupJobs,
-};
-
-// the upload Scalar is added
-export const testSchema = [
-  gql`
-    scalar Upload
-  `,
-  ...schema,
-];
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 9b78bea1..8b6d732e 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -8,20 +8,9 @@ import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
 import { get } from 'lodash';
 import { setupUniversalLinks } from '@apollosproject/server-core';
 import { BugsnagPlugin } from '@apollosproject/bugsnag';
+import { sync } from '@apollosproject/data-connector-postgres';
+// import { seed } from '../seeds';
 import {
-  sync,
-  createMigrationRunner,
-} from '@apollosproject/data-connector-postgres';
-
-let dataObj;
-
-if (ApollosConfig?.DATABASE?.DATABASE_URL) {
-  dataObj = require('./data/index.postgres');
-} else {
-  dataObj = require('./data/index');
-}
-
-const {
   resolvers,
   schema,
   testSchema,
@@ -29,8 +18,7 @@ const {
   dataSources,
   applyServerMiddleware,
   setupJobs,
-  migrations,
-} = dataObj;
+} from './data';
 
 export { resolvers, schema, testSchema };
 
@@ -104,11 +92,8 @@ apolloServer.applyMiddleware({ app, path: '/' });
 // make sure this is called last.
 // (or at least after the apollos server setup)
 (async () => {
-  if (ApollosConfig?.DATABASE?.DATABASE_URL) {
-    const migrationRunner = await createMigrationRunner({ migrations });
-    await migrationRunner.up();
-    await sync();
-  }
+  await sync();
+  // await seed();
 })();
 
 export default app;
