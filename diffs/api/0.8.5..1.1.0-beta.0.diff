diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
index 8a33ffe..8559468 100644
--- a/apollos-church-api/.envExample
+++ b/apollos-church-api/.envExample
@@ -1,4 +1,18 @@
 ROCK_API=
 ROCK_TOKEN=
-ESV_KEY=
-CLOUDINARY_URL=
\ No newline at end of file
+BIBLE_API_KEY=
+ENGINE_API_KEY=
+CLOUDINARY_URL=
+ONE_SIGNAL_REST_KEY=
+PORT=4000
+ROOT_URL=http://localhost:4000
+
+TWILIO_ACCOUNT_SID=
+TWILIO_AUTH_TOKEN=
+TWILIO_FROM_NUMBER=
+
+
+PASS_WWDR_CERT=
+PASS_SIGNER_CERT=
+PASS_SIGNER_KEY=
+PASS_SIGNER_PASSPHRASE=
\ No newline at end of file
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
new file mode 100644
index 0000000..654b535
--- /dev/null
+++ b/apollos-church-api/apollos.json
@@ -0,0 +1,4 @@
+{
+    "version": "1.1.0-beta.0",
+    "environment": "api"
+}
\ No newline at end of file
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index f240612..7127f7a 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -21,6 +21,10 @@ ROCK:
 ONE_SIGNAL:
   APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
+CHURCH_ONLINE:
+  URL: https://apollos.churchonline.org/api/v1/
+  MEDIA_URLS: []
+  WEB_VIEW_URL: https://apollos.churchonline.org/
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -70,6 +74,9 @@ ROCK_MAPPINGS:
       EntityType: ContentChannelItem
     UniversalContentItem:
       EntityType: ContentChannelItem
+    WeekendContentItem:
+      ContentChannelId: [5]
+      EntityType: ContentChannelItem
     ContentItem:
       EntityType: ContentChannelItem
 
@@ -98,6 +105,10 @@ ROCK_MAPPINGS:
   CAMPAIGN_CHANNEL_IDS:
     - 11
 
+  SERMON_CHANNEL_ID: 5
+
+  HOME_FEATURE_CHANNEL_ID: 13
+
 # Default mapping of field types -> ids. There's probably no reason to edit this.
 ROCK_CONSTANTS:
   TEXT: 1
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
new file mode 100644
index 0000000..93ed3e1
--- /dev/null
+++ b/apollos-church-api/local.graphql
@@ -0,0 +1,467 @@
+enum ACTION_FEATURE_ACTION {
+  READ_CONTENT
+}
+
+type ActionListAction {
+  id: ID!
+  title: String
+  subtitle: String
+  image: ImageMedia
+  relatedNode: Node
+  action: ACTION_FEATURE_ACTION
+}
+
+type ActionListFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  title: String
+  subtitle: String
+  actions: [ActionListAction]
+}
+
+input AnalyticsDeviceInfo {
+  platform: AnalyticsPlatform
+  deviceId: String
+  deviceModel: String
+  osVersion: String
+  appVersion: String
+}
+
+input AnalyticsIdentifyInput {
+  traits: [AnalyticsMetaField]
+  anonymousId: String!
+  deviceInfo: AnalyticsDeviceInfo
+}
+
+input AnalyticsMetaField {
+  field: String!
+  value: AnalyticsValue
+}
+
+enum AnalyticsPlatform {
+  iOS
+  Android
+}
+
+type AnalyticsResult {
+  success: Boolean
+}
+
+input AnalyticsTrackInput {
+  eventName: String!
+  properties: [AnalyticsMetaField]
+  anonymousId: String
+  deviceInfo: AnalyticsDeviceInfo
+}
+
+scalar AnalyticsValue
+
+type AudioMedia implements Media {
+  name: String
+  key: String
+  sources: [AudioMediaSource]
+}
+
+type AudioMediaSource implements MediaSource {
+  uri: String
+}
+
+type AuthenticatedUser {
+  id: ID!
+  profile: Person
+  rockToken: String
+}
+
+type Authentication {
+  user: AuthenticatedUser
+  token: String
+}
+
+enum CacheControlScope {
+  PUBLIC
+  PRIVATE
+}
+
+type Campus implements Node {
+  id: ID!
+  name: String
+  street1: String
+  street2: String
+  city: String
+  state: String
+  postalCode: String
+  latitude: Float
+  longitude: Float
+  image: ImageMediaSource
+  distanceFromLocation(location: CampusLocationInput): Float
+}
+
+input CampusLocationInput {
+  latitude: Float!
+  longitude: Float!
+}
+
+"""A rgb color string"""
+scalar Color
+
+type ContentChannel implements Node {
+  id: ID!
+  name: String
+  description: String
+  childContentChannels: [ContentChannel]
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  iconName: String
+}
+
+interface ContentItem {
+  id: ID!
+  title: String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+type ContentItemsConnection {
+  edges: [ContentItemsConnectionEdge]
+  pageInfo: PaginationInfo
+}
+
+type ContentItemsConnectionEdge {
+  node: ContentItem
+  cursor: String
+}
+
+input ContentItemsConnectionInput {
+  first: Int
+  after: String
+}
+
+type ContentSeriesContentItem implements ContentItem & Node {
+  id: ID!
+  title: String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+  features: [Feature]
+}
+
+type DevotionalContentItem implements ContentItem & Node {
+  id: ID!
+  title: String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+interface Feature {
+  id: ID!
+  order: Int
+}
+
+enum GENDER {
+  Male
+  Female
+  Unknown
+}
+
+type ImageMedia implements Media {
+  name: String
+  key: String
+  sources: [ImageMediaSource]
+}
+
+type ImageMediaSource implements MediaSource {
+  uri: String
+}
+
+enum LIKE_OPERATION {
+  Like
+  Unlike
+}
+
+input LikeEntityInput {
+  nodeId: ID!
+  operation: LIKE_OPERATION!
+}
+
+type LiveStream {
+  isLive: Boolean
+  eventStartTime: String
+  media: VideoMedia
+  webViewUrl: String
+}
+
+interface Media {
+  name: String
+  key: String
+  sources: [MediaSource]
+}
+
+type MediaContentItem implements ContentItem & Node {
+  id: ID!
+  title: String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  scriptures: [Scripture]
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+enum MediaInputType {
+  IMAGE
+  VIDEO
+  AUDIO
+}
+
+interface MediaSource {
+  uri: String
+}
+
+type Mutation {
+  _placeholder: Boolean
+  updateLikeEntity(input: LikeEntityInput!): ContentItem
+  updateProfileField(input: UpdateProfileInput!): Person
+  updateProfileFields(input: [UpdateProfileInput]!): Person
+  uploadProfileImage(file: Upload!, size: Int!): Person
+  authenticate(identity: String!, password: String!): Authentication
+  changePassword(password: String!): Authentication
+  registerPerson(email: String!, password: String!): Authentication
+  requestSmsLoginPin(phoneNumber: String!): SmsPinResult
+  authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
+  identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
+  trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
+  updateUserPushSettings(input: PushSettingsInput!): Person
+  updateUserCampus(campusId: String!): Person
+}
+
+interface Node {
+  id: ID!
+}
+
+type PaginationInfo {
+  startCursor: String
+  endCursor: String
+}
+
+type Pass implements Node {
+  id: ID!
+  type: PassType
+  description: String
+  logo: ImageMediaSource
+  thumbnail: ImageMediaSource
+  barcode: ImageMediaSource
+  primaryFields: [PassField]
+  secondaryFields: [PassField]
+  backgroundColor: Color
+  foregroundColor: Color
+  labelColor: Color
+  logoText: String
+  passkitFileUrl: String
+}
+
+type PassField {
+  key: String!
+  label: String
+  value: String!
+  textAlignment: PassFieldTextAlignment
+}
+
+enum PassFieldTextAlignment {
+  LEFT
+  CENTER
+  RIGHT
+  NATURAL
+}
+
+enum PassType {
+  GENERIC
+}
+
+type Person implements Node {
+  id: ID!
+  firstName: String
+  lastName: String!
+  nickName: String
+  email: String
+  gender: GENDER
+  birthDate: String
+  photo: ImageMediaSource
+  campus: Campus
+}
+
+input PushSettingsInput {
+  enabled: Boolean
+  pushProviderUserId: String
+}
+
+type Query {
+  _placeholder: Boolean
+  node(id: ID!): Node
+  likedContent(first: Int, after: String): ContentItemsConnection
+  contentChannels: [ContentChannel]
+  campaigns: ContentItemsConnection
+  userFeed(first: Int, after: String): ContentItemsConnection
+  personaFeed(first: Int, after: String): ContentItemsConnection
+  currentUser: AuthenticatedUser
+  liveStream: LiveStream
+  scripture(query: String!): Scripture
+  scriptures(query: String!): [Scripture]
+  userPass: Pass
+  campuses(location: CampusLocationInput): [Campus]
+  userFeedFeatures: [Feature]
+}
+
+type Scripture {
+  id: String
+  html: String
+  reference: String
+  copyright: String
+}
+
+interface Sharable {
+  url: String
+  message: String
+  title: String
+}
+
+type SharableContentItem implements Sharable {
+  url: String
+  message: String
+  title: String
+}
+
+type SmsPinResult {
+  success: Boolean
+}
+
+type TextFeature implements Feature & Node {
+  id: ID!
+  order: Int
+  body: String
+}
+
+type Theme {
+  type: ThemeType
+  colors: ThemeColors
+}
+
+type ThemeColors {
+  primary: Color
+  secondary: Color
+  screen: Color
+  paper: Color
+  alert: Color
+}
+
+enum ThemeType {
+  LIGHT
+  DARK
+}
+
+type UniversalContentItem implements ContentItem & Node {
+  id: ID!
+  title: String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  sharing: SharableContentItem
+}
+
+enum UPDATEABLE_PROFILE_FIELDS {
+  FirstName
+  LastName
+  Email
+  NickName
+  Gender
+  BirthDate
+}
+
+input UpdateProfileInput {
+  field: UPDATEABLE_PROFILE_FIELDS!
+  value: String!
+}
+
+"""The `Upload` scalar type represents a file upload."""
+scalar Upload
+
+type VideoMedia implements Media {
+  name: String
+  key: String
+  sources: [VideoMediaSource]
+  embedHtml: String
+}
+
+type VideoMediaSource implements MediaSource {
+  uri: String
+}
+
+type WeekendContentItem implements ContentItem & Node {
+  id: ID!
+  title: String
+  coverImage: ImageMedia
+  images: [ImageMedia]
+  videos: [VideoMedia]
+  audios: [AudioMedia]
+  htmlContent: String
+  summary: String
+  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
+  parentChannel: ContentChannel
+  theme: Theme
+  isLiked: Boolean
+  likedCount: Int
+  liveStream: LiveStream
+  sharing: SharableContentItem
+  features: [Feature]
+}
+
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index cee2178..07f3e51 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,20 +1,20 @@
 {
   "name": "apollos-church-api",
-  "version": "0.8.5",
+  "version": "1.1.0-beta.0",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
-    "start": "if test \"$NOW_ENV\" = \"true\" ; then yarn start:now ; else yarn start:dev ; fi",
+    "start": "./scripts/generateLocalSchema.sh & yarn start:dev",
     "start:dev": "nodemon ./src/index.js --exec babel-node --delay 2",
-    "start:now": "babel-node ./src/index.js",
     "start:prod": "NODE_ENV=production node ./lib/index.js",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
-    "test:watch": "jest --maxWorkers=2 --watch",
     "lint": "eslint ./src --ext .js",
     "fixlint": "eslint ./src --ext .js --fix",
     "codecov": "cat ./coverage/lcov.info | codecov",
-    "release": "standard-version --release-as minor"
+    "version": "node ../../scripts/update-apollos-version.js && git add apollos.json",
+    "schema-diff": "./scripts/schemaDiff.sh",
+    "schema-lint": "graphql-schema-linter local.graphql"
   },
   "engines": {
     "node": ">=8.11.x"
@@ -34,28 +34,35 @@
     ]
   },
   "dependencies": {
-    "@apollosproject/config": "^0.8.5",
-    "@apollosproject/data-connector-analytics": "^0.8.5",
-    "@apollosproject/data-connector-bible": "^0.8.5",
-    "@apollosproject/data-connector-church-online": "^0.8.5",
-    "@apollosproject/data-connector-cloudinary": "^0.8.5",
-    "@apollosproject/data-connector-onesignal": "^0.8.5",
-    "@apollosproject/data-connector-passes": "^0.8.5",
-    "@apollosproject/data-connector-rock": "^0.8.5",
-    "@apollosproject/server-core": "^0.8.5",
+    "@apollosproject/config": "^1.1.0-beta.0",
+    "@apollosproject/data-connector-analytics": "^1.1.0-beta.0",
+    "@apollosproject/data-connector-bible": "^1.1.0-beta.0",
+    "@apollosproject/data-connector-church-online": "^1.1.0-beta.0",
+    "@apollosproject/data-connector-cloudinary": "^1.1.0-beta.0",
+    "@apollosproject/data-connector-onesignal": "^1.1.0-beta.0",
+    "@apollosproject/data-connector-passes": "^1.1.0-beta.0",
+    "@apollosproject/data-connector-rock": "^1.1.0-beta.0",
+    "@apollosproject/data-connector-twilio": "^1.1.0-beta.0",
+    "@apollosproject/rock-apollo-data-source": "^1.1.0-beta.0",
+    "@apollosproject/server-core": "^1.1.0-beta.0",
     "apollo-server": "^2.0.5",
+    "apollo-server-express": "2.4.8",
     "color": "3.0.0",
     "dotenv": "6.0.0",
+    "express": "^4.17.0",
     "graphql": "0.13.2",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^0.8.5",
-    "@apollosproject/babel-preset-apollos": "^0.8.5",
+    "@apollosproject/apollo-server-env-mock": "^1.1.0-beta.0",
+    "@apollosproject/babel-preset-apollos": "^1.1.0-beta.0",
     "@babel/cli": "7.1.5",
     "@babel/core": "7.1.6",
+    "@entria/graphql-findbreakingchanges": "^1.0.1",
     "codecov": "3.0.2",
+    "get-graphql-schema": "^2.1.2",
+    "graphql-schema-linter": "^0.2.0",
     "nodemon": "1.18.7"
   }
 }
diff --git a/apollos-church-api/scripts/generateLocalSchema.sh b/apollos-church-api/scripts/generateLocalSchema.sh
new file mode 100755
index 0000000..dc7e07e
--- /dev/null
+++ b/apollos-church-api/scripts/generateLocalSchema.sh
@@ -0,0 +1,27 @@
+PING_SERVER="curl 'http://localhost:4000/graphql' -H 'content-type: application/json' -H 'accept: application/json' --data-binary '{\"query\":\"{_placeholder}\"}' > /dev/null 2>&1"
+
+if eval "$PING_SERVER"; then
+  echo 'Server running, downloading schema from localhost:4000'
+  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
+  echo 'Done. Check local.graphql'
+else
+  echo $*
+  if [ "$*" = "--start-server" ]; then
+    echo 'Server not running, starting server'
+    PORT=4000 TWILIO_ACCOUNT_SID=ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX npm run start:prod > /tmp/server-log.txt &
+    SERVER_PID=$!
+    echo "Server running... (PID $SERVER_PID)"
+  fi
+  sleep 1
+  until eval "$PING_SERVER"; do
+      sleep 1
+      echo 'Waiting for server to boot....'
+  done
+  echo 'Curling Server for most recent schema.'
+  ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
+  echo 'Done. Check local.graphql'
+  if [ "$*" = "--start-server" ]; then
+    echo "Killing Server (PID $SERVER_PID)"
+    kill -9 $SERVER_PID
+  fi
+fi
diff --git a/apollos-church-api/scripts/schemaDiff.sh b/apollos-church-api/scripts/schemaDiff.sh
new file mode 100755
index 0000000..67404e4
--- /dev/null
+++ b/apollos-church-api/scripts/schemaDiff.sh
@@ -0,0 +1,13 @@
+#!/usr/bin/env bash
+sh ./scripts/generateLocalSchema.sh --start-server
+./node_modules/.bin/get-graphql-schema https://apollos-church-api-herokuapp-com.global.ssl.fastly.net > prod.graphql
+DIFF=$(graphql-findbreakingchanges prod.graphql local.graphql)
+rm prod.graphql
+echo "$DIFF"
+
+if [[ ! $DIFF = *"NO BREAKING CHANGES"* ]]
+then
+  exit 1
+else
+  exit 0
+fi
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 2caa7d8..60ee373 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -22,6 +22,8 @@ import {
   Template,
   AuthSms,
   Campus,
+  BinaryFiles,
+  Features,
 } from '@apollosproject/data-connector-rock';
 import * as Theme from './theme';
 
@@ -51,6 +53,8 @@ const data = {
   Pass,
   Template,
   Campus,
+  BinaryFiles,
+  Features,
 };
 
 const {
