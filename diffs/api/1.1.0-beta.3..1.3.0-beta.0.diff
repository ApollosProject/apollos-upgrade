diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index e395a33..fab32f8 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-    "version": "1.1.0-beta.3",
+    "version": "1.3.0-beta.0",
     "environment": "api"
 }
\ No newline at end of file
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 7127f7a..602eb3a 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -12,12 +12,17 @@ APP:
   # It should match whatver is in your Info.plist `CFBundleURLTypes`
   DEEP_LINK_HOST: apolloschurchapp
   ROOT_API_URL: ${ROOT_URL}
+  JOBS_USERNAME: ${JOBS_USERNAME}
+  JOBS_PASSWORD: ${JOBS_PASSWORD}
 ROCK:
   API_URL: https://apollosrock.newspring.cc/api
   API_TOKEN: ${ROCK_TOKEN}
   IMAGE_URL: https://apollosrock.newspring.cc/GetImage.ashx
+  SHARE_URL: https://apollosrock.newspring.cc
   # This should match the timezone of the Rock server
   TIMEZONE: 'America/New_York'
+  USE_PLUGIN: true
+  SHOW_INACTIVE_CONTENT: ${ROCK_SHOW_INACTIVE_CONTENT}
 ONE_SIGNAL:
   APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
   REST_KEY: ${ONE_SIGNAL_REST_KEY}
@@ -25,6 +30,11 @@ CHURCH_ONLINE:
   URL: https://apollos.churchonline.org/api/v1/
   MEDIA_URLS: []
   WEB_VIEW_URL: https://apollos.churchonline.org/
+ALGOLIA:
+  APPLICATION_ID: ${ALGOLIA_APP_ID}
+  API_KEY: ${ALGOLIA_API_KEY}
+  # TODO: should we support multiple indices? how?
+  SEARCH_INDEX: test_ContentItems
 TWILIO:
   ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
   AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
@@ -42,14 +52,20 @@ ANALYTICS:
   # on the accompanying service
   SEGMENT_KEY:
   GA_ID:
+  USE_ROCK: true
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
-  BIBLE_ID: '9879dbb7cfe39e4d-01'
+  BIBLE_ID:
+    WEB: '9879dbb7cfe39e4d-01'
+    KJV: 'de4e12af7f28f599-02'
 CLOUDINARY:
   # Cloudinary is used to improve image loading
   # value should look something like
   # cloudinary://123123123:adkfnla_adASDv_adAS@test
   URL: ${CLOUDINARY_URL}
+ENGINE:
+  API_KEY: ${ENGINE_API_KEY}
+  SCHEMA_TAG: ${ENGINE_SCHEMA_TAG}
 
 # This key holds various properties that allow our GraphQL server to map to your Rock Instance
 ROCK_MAPPINGS:
@@ -93,6 +109,7 @@ ROCK_MAPPINGS:
     - 8
   # Apollos will pull content items from these channels and expose them on the user feed
   # However, it will not expose the channel itself.
+  # These channels are also pulled when indexing searchable content.
   FEED_CONTENT_CHANNEL_IDS:
     - 1
     - 2
@@ -107,7 +124,22 @@ ROCK_MAPPINGS:
 
   SERMON_CHANNEL_ID: 5
 
-  HOME_FEATURE_CHANNEL_ID: 13
+  SERVING_GROUP_TYPE_ID: 23
+  COMMUNITY_GROUP_TYPE_ID: 25
+  FAMILY_GROUP_TYPE_ID: 10
+
+HOME_FEATURES:
+  - title: FOR YOU
+    algorithms: [SERMON_CHILDREN, PERSONA_FEED]
+    subtitle: Explore what God calls you to today
+  - title: BULLETIN
+    subtitle: What's happening at apollos?
+    algorithms:
+      - type: CONTENT_CHANNEL
+        arguments:
+          contentChannelId: 13
+      - type: UPCOMING_EVENTS
+
 
 # Default mapping of field types -> ids. There's probably no reason to edit this.
 ROCK_CONSTANTS:
diff --git a/apollos-church-api/local.graphql b/apollos-church-api/local.graphql
index e387714..e15ee8a 100644
--- a/apollos-church-api/local.graphql
+++ b/apollos-church-api/local.graphql
@@ -1,5 +1,6 @@
 enum ACTION_FEATURE_ACTION {
   READ_CONTENT
+  READ_EVENT
 }
 
 type ActionListAction {
@@ -69,7 +70,8 @@ type AudioMediaSource implements MediaSource {
 type AuthenticatedUser {
   id: ID!
   profile: Person
-  rockToken: String
+  rock: RockPersonDetails
+  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
 }
 
 type Authentication {
@@ -94,6 +96,7 @@ type Campus implements Node {
   longitude: Float
   image: ImageMediaSource
   distanceFromLocation(location: CampusLocationInput): Float
+  events: [Event]
 }
 
 input CampusLocationInput {
@@ -115,7 +118,7 @@ type ContentChannel implements Node {
 
 interface ContentItem {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -133,6 +136,7 @@ interface ContentItem {
 
 type ContentItemsConnection {
   edges: [ContentItemsConnectionEdge]
+  totalCount: Int
   pageInfo: PaginationInfo
 }
 
@@ -148,7 +152,7 @@ input ContentItemsConnectionInput {
 
 type ContentSeriesContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -168,7 +172,7 @@ type ContentSeriesContentItem implements ContentItem & Node {
 
 type DevotionalContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -185,6 +189,16 @@ type DevotionalContentItem implements ContentItem & Node {
   sharing: SharableContentItem
 }
 
+type Event implements Node {
+  id: ID!
+  name: String
+  description: String
+  location: String
+  start: String
+  end: String
+  image: ImageMedia
+}
+
 interface Feature {
   id: ID!
   order: Int
@@ -196,6 +210,20 @@ enum GENDER {
   Unknown
 }
 
+type Group implements Node {
+  id: ID!
+  name: String
+  leader: Person @deprecated(reason: "No longer used, use 'leaders' instead")
+  leaders: [Person]
+  members: [Person]
+}
+
+enum GROUP_TYPE {
+  Serving
+  Community
+  Family
+}
+
 type ImageMedia implements Media {
   name: String
   key: String
@@ -221,6 +249,7 @@ type LiveStream {
   eventStartTime: String
   media: VideoMedia
   webViewUrl: String
+  contentItem: ContentItem
 }
 
 interface Media {
@@ -231,7 +260,7 @@ interface Media {
 
 type MediaContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -266,9 +295,10 @@ type Mutation {
   uploadProfileImage(file: Upload!, size: Int!): Person
   authenticate(identity: String!, password: String!): Authentication
   changePassword(password: String!): Authentication
-  registerPerson(email: String!, password: String!): Authentication
+  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
   requestSmsLoginPin(phoneNumber: String!): SmsPinResult
   authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
+  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
   identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
   trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
   updateUserPushSettings(input: PushSettingsInput!): Person
@@ -321,13 +351,14 @@ enum PassType {
 type Person implements Node {
   id: ID!
   firstName: String
-  lastName: String!
+  lastName: String
   nickName: String
   email: String
   gender: GENDER
   birthDate: String
   photo: ImageMediaSource
   campus: Campus
+  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
 }
 
 input PushSettingsInput {
@@ -344,47 +375,78 @@ type Query {
   userFeed(first: Int, after: String): ContentItemsConnection
   personaFeed(first: Int, after: String): ContentItemsConnection
   currentUser: AuthenticatedUser
-  liveStream: LiveStream
-  scripture(query: String!): Scripture
-  scriptures(query: String!): [Scripture]
+  userExists(identity: String): USER_AUTH_STATUS
+  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
+  liveStreams: [LiveStream]
+  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
+  scriptures(query: String!, version: VERSION): [Scripture]
   userPass: Pass
+  search(query: String!, first: Int, after: String): SearchResultsConnection
   campuses(location: CampusLocationInput): [Campus]
   userFeedFeatures: [Feature]
 }
 
+type RockPersonDetails {
+  authToken: String
+  authCookie: String
+}
+
 type Scripture implements Node {
   id: ID!
   html: String
   reference: String
   copyright: String
+  version: String
 }
 
 type ScriptureFeature implements Feature & Node {
   id: ID!
   order: Int
   scriptures: [Scripture]
+  sharing: SharableFeature
+}
+
+type SearchResult {
+  cursor: String
+  title: String
+  summary: String
+  coverImage: ImageMedia
+  node: Node
+}
+
+type SearchResultsConnection {
+  edges: [SearchResult]
+  pageInfo: PaginationInfo
 }
 
 interface Sharable {
-  url: String
   message: String
   title: String
+  url: String @deprecated(reason: "Not supported on the interface")
 }
 
 type SharableContentItem implements Sharable {
+  message: String
+  title: String
   url: String
+}
+
+type SharableFeature implements Sharable {
   message: String
   title: String
+  url: String @deprecated(reason: "Not supported on a feature")
 }
 
 type SmsPinResult {
   success: Boolean
+  userAuthStatus: USER_AUTH_STATUS
 }
 
 type TextFeature implements Feature & Node {
   id: ID!
   order: Int
   body: String
+  sharing: SharableFeature
 }
 
 type Theme {
@@ -407,7 +469,7 @@ enum ThemeType {
 
 type UniversalContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
@@ -440,6 +502,17 @@ input UpdateProfileInput {
 """The `Upload` scalar type represents a file upload."""
 scalar Upload
 
+enum USER_AUTH_STATUS {
+  NONE
+  NEW_APP_USER
+  EXISTING_APP_USER
+}
+
+enum VERSION {
+  WEB
+  KJV
+}
+
 type VideoMedia implements Media {
   name: String
   key: String
@@ -453,7 +526,7 @@ type VideoMediaSource implements MediaSource {
 
 type WeekendContentItem implements ContentItem & Node {
   id: ID!
-  title: String
+  title(hyphenated: Boolean): String
   coverImage: ImageMedia
   images: [ImageMedia]
   videos: [VideoMedia]
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index a4d5d88..2a866af 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,6 +1,6 @@
 {
   "name": "apollos-church-api",
-  "version": "1.1.0-beta.3",
+  "version": "1.3.0-beta.0",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
@@ -34,17 +34,20 @@
     ]
   },
   "dependencies": {
-    "@apollosproject/config": "^1.1.0-beta.3",
-    "@apollosproject/data-connector-analytics": "^1.1.0-beta.3",
-    "@apollosproject/data-connector-bible": "^1.1.0-beta.3",
-    "@apollosproject/data-connector-church-online": "^1.1.0-beta.3",
-    "@apollosproject/data-connector-cloudinary": "^1.1.0-beta.3",
-    "@apollosproject/data-connector-onesignal": "^1.1.0-beta.3",
-    "@apollosproject/data-connector-passes": "^1.1.0-beta.3",
-    "@apollosproject/data-connector-rock": "^1.1.0-beta.3",
-    "@apollosproject/data-connector-twilio": "^1.1.0-beta.3",
-    "@apollosproject/rock-apollo-data-source": "^1.1.0-beta.3",
-    "@apollosproject/server-core": "^1.1.0-beta.3",
+    "@apollosproject/config": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-algolia-search": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-analytics": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-bible": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-church-online": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-cloudinary": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-onesignal": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-passes": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-redis-cache": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-rock": "^1.3.0-beta.0",
+    "@apollosproject/data-connector-twilio": "^1.3.0-beta.0",
+    "@apollosproject/data-schema": "^1.3.0-beta.0",
+    "@apollosproject/rock-apollo-data-source": "^1.3.0-beta.0",
+    "@apollosproject/server-core": "^1.3.0-beta.0",
     "apollo-server": "^2.0.5",
     "apollo-server-express": "2.4.8",
     "color": "3.0.0",
@@ -55,8 +58,8 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^1.1.0-beta.3",
-    "@apollosproject/babel-preset-apollos": "^1.1.0-beta.3",
+    "@apollosproject/apollo-server-env-mock": "^1.3.0-beta.0",
+    "@apollosproject/babel-preset-apollos": "^1.3.0-beta.0",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@entria/graphql-findbreakingchanges": "^1.0.1",
diff --git a/apollos-church-api/scripts/generateLocalSchema.sh b/apollos-church-api/scripts/generateLocalSchema.sh
index dc7e07e..869e5a8 100755
--- a/apollos-church-api/scripts/generateLocalSchema.sh
+++ b/apollos-church-api/scripts/generateLocalSchema.sh
@@ -19,7 +19,8 @@ else
   done
   echo 'Curling Server for most recent schema.'
   ./node_modules/.bin/get-graphql-schema http://localhost:4000 > local.graphql
-  echo 'Done. Check local.graphql'
+  echo 'Publishing Schema to Apollo Engine.'
+  npx apollo server:publish --endpoint=http://localhost:4000
   if [ "$*" = "--start-server" ]; then
     echo "Killing Server (PID $SERVER_PID)"
     kill -9 $SERVER_PID
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 60ee373..50d8d41 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -7,7 +7,9 @@ import * as Scripture from '@apollosproject/data-connector-bible';
 import * as LiveStream from '@apollosproject/data-connector-church-online';
 import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
 import * as OneSignal from '@apollosproject/data-connector-onesignal';
+import * as Search from '@apollosproject/data-connector-algolia-search';
 import * as Pass from '@apollosproject/data-connector-passes';
+import * as Cache from '@apollosproject/data-connector-redis-cache';
 import * as Sms from '@apollosproject/data-connector-twilio';
 import {
   Followings,
@@ -22,8 +24,10 @@ import {
   Template,
   AuthSms,
   Campus,
+  Group,
   BinaryFiles,
   Features,
+  Event,
 } from '@apollosproject/data-connector-rock';
 import * as Theme from './theme';
 
@@ -51,10 +55,14 @@ const data = {
   PersonalDevice,
   OneSignalWithRock,
   Pass,
+  Search,
   Template,
   Campus,
+  Group,
   BinaryFiles,
   Features,
+  Event,
+  Cache,
 };
 
 const {
@@ -63,9 +71,17 @@ const {
   schema,
   context,
   applyServerMiddleware,
+  setupJobs,
 } = createApolloServerConfig(data);
 
-export { dataSources, resolvers, schema, context, applyServerMiddleware };
+export {
+  dataSources,
+  resolvers,
+  schema,
+  context,
+  applyServerMiddleware,
+  setupJobs,
+};
 
 // the upload Scalar is added
 export const testSchema = [
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 74a305e..80159aa 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -1,6 +1,8 @@
 import { ApolloServer } from 'apollo-server-express';
+import ApollosConfig from '@apollosproject/config';
 import express from 'express';
 import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
+import { get } from 'lodash';
 
 import {
   resolvers,
@@ -9,6 +11,7 @@ import {
   context,
   dataSources,
   applyServerMiddleware,
+  setupJobs,
 } from './data';
 
 export { resolvers, schema, testSchema };
@@ -18,6 +21,18 @@ const isDev =
 
 const extensions = isDev ? [() => new RockLoggingExtension()] : [];
 
+const cacheOptions = isDev
+  ? {}
+  : {
+      cacheControl: {
+        stripFormattedExtensions: false,
+        calculateHttpHeaders: true,
+        defaultMaxAge: 600,
+      },
+    };
+
+const { ENGINE } = ApollosConfig;
+
 const apolloServer = new ApolloServer({
   typeDefs: schema,
   resolvers,
@@ -26,7 +41,7 @@ const apolloServer = new ApolloServer({
   introspection: true,
   extensions,
   formatError: (error) => {
-    console.error(error.extensions.exception.stacktrace.join('\n'));
+    console.error(get(error, 'extensions.exception.stacktrace').join('\n'));
     return error;
   },
   playground: {
@@ -34,16 +49,18 @@ const apolloServer = new ApolloServer({
       'editor.cursorShape': 'line',
     },
   },
-  cacheControl: {
-    stripFormattedExtensions: false,
-    calculateHttpHeaders: true,
-    defaultMaxAge: 600,
+  ...cacheOptions,
+  engine: {
+    apiKey: ENGINE.API_KEY,
+    schemaTag: ENGINE.SCHEMA_TAG,
   },
 });
 
 const app = express();
 
 applyServerMiddleware({ app, dataSources, context });
+setupJobs({ app, dataSources, context });
+
 apolloServer.applyMiddleware({ app });
 apolloServer.applyMiddleware({ app, path: '/' });
 
diff --git a/apollos-church-api/wallet-passes/checkin.pass/pass.json b/apollos-church-api/wallet-passes/checkin.pass/pass.json
index 8909bd1..a3916b3 100644
--- a/apollos-church-api/wallet-passes/checkin.pass/pass.json
+++ b/apollos-church-api/wallet-passes/checkin.pass/pass.json
@@ -7,6 +7,7 @@
   "logoText": "Apollos Church",
   "backgroundColor": "rgb(0,103,109)",
   "foregroundColor": "rgb(248,247,244)",
+  "labelColor": "rgb(248,247,244)",
   "serialNumber": "checkinpass-{{ person | GetPersonAlternateId }}",
   "thumbnail": {
     "uri": "{{ person.Photo.Url }}&format=png&height=200"
