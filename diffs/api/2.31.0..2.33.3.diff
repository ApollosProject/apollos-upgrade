diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
index d4ed4823..54776676 100644
--- a/apollos-church-api/apollos.json
+++ b/apollos-church-api/apollos.json
@@ -1,4 +1,4 @@
 {
-  "version": "2.31.0",
+  "version": "2.33.3",
   "environment": "api"
 }
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index a297eb88..65591f50 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -18,21 +18,21 @@
     "node": ">=14"
   },
   "dependencies": {
-    "@apollosproject/config": "^2.31.0",
-    "@apollosproject/data-connector-algolia-search": "^2.31.0",
-    "@apollosproject/data-connector-analytics": "^2.31.0",
-    "@apollosproject/data-connector-bible": "^2.31.0",
-    "@apollosproject/data-connector-church-online": "^2.31.0",
-    "@apollosproject/data-connector-cloudinary": "^2.31.0",
-    "@apollosproject/data-connector-onesignal": "^2.31.0",
-    "@apollosproject/data-connector-passes": "^2.31.0",
-    "@apollosproject/data-connector-postgres": "^2.31.0",
-    "@apollosproject/data-connector-redis-cache": "^2.31.0",
-    "@apollosproject/data-connector-rock": "^2.31.0",
-    "@apollosproject/data-connector-twilio": "^2.31.0",
-    "@apollosproject/data-schema": "^2.31.0",
-    "@apollosproject/rock-apollo-data-source": "^2.31.0",
-    "@apollosproject/server-core": "^2.31.0",
+    "@apollosproject/config": "^2.33.3",
+    "@apollosproject/data-connector-algolia-search": "^2.33.3",
+    "@apollosproject/data-connector-analytics": "^2.33.3",
+    "@apollosproject/data-connector-bible": "^2.33.3",
+    "@apollosproject/data-connector-church-online": "^2.33.3",
+    "@apollosproject/data-connector-cloudinary": "^2.33.3",
+    "@apollosproject/data-connector-onesignal": "^2.33.3",
+    "@apollosproject/data-connector-passes": "^2.33.3",
+    "@apollosproject/data-connector-postgres": "^2.33.3",
+    "@apollosproject/data-connector-redis-cache": "^2.33.3",
+    "@apollosproject/data-connector-rock": "^2.33.3",
+    "@apollosproject/data-connector-twilio": "^2.33.3",
+    "@apollosproject/data-schema": "^2.33.3",
+    "@apollosproject/rock-apollo-data-source": "^2.33.3",
+    "@apollosproject/server-core": "^2.33.3",
     "apollo-server": "^2.24.1",
     "apollo-server-express": "2.14.2",
     "color": "3.0.0",
@@ -42,9 +42,9 @@
     "randomcolor": "0.5.3"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^2.31.0",
-    "@apollosproject/babel-preset-apollos": "^2.31.0",
-    "@apollosproject/eslint-config": "^2.31.0",
+    "@apollosproject/apollo-server-env-mock": "^2.33.3",
+    "@apollosproject/babel-preset-apollos": "^2.33.3",
+    "@apollosproject/eslint-config": "^2.33.3",
     "@babel/cli": "^7.4.5",
     "@babel/core": "^7.4.5",
     "@babel/node": "^7.7.4",
diff --git a/apollos-church-api/src/data/index.postgres.js b/apollos-church-api/src/data/index.postgres.js
index 24f206a8..1fdc489e 100644
--- a/apollos-church-api/src/data/index.postgres.js
+++ b/apollos-church-api/src/data/index.postgres.js
@@ -15,14 +15,13 @@ import * as Cache from '@apollosproject/data-connector-redis-cache';
 import * as Sms from '@apollosproject/data-connector-twilio';
 import {
   Followings,
-  Interactions,
+  Interactions as RockInteractions,
   RockConstants,
   Sharable,
   Auth,
   PersonalDevice,
   Template,
   AuthSms,
-  Campus,
   Group,
   BinaryFiles,
   FeatureFeed,
@@ -30,6 +29,7 @@ import {
   PrayerRequest,
   Person as RockPerson,
   ContentItem as RockContentItem,
+  Campus as RockCampus,
   ContentChannel,
   Feature as RockFeature,
   ActionAlgorithm as RockActionAlgorithm,
@@ -40,10 +40,12 @@ import {
   UserFlag,
   UserLike,
   Follow,
+  Interactions,
+  Likes,
   Notification,
   NotificationPreference,
   Tag,
-  Campus as PostgresCampus,
+  Campus,
   Person as PostgresPerson,
   Media as PostgresMedia,
   Feature as PostgresFeature,
@@ -51,6 +53,7 @@ import {
   ContentItemsConnection,
   ContentItemCategory,
   ActionAlgorithm as PostgresActionAlgorithm,
+  PrayerRequest as PostgresPrayerRequest,
 } from '@apollosproject/data-connector-postgres';
 
 import * as Theme from './theme';
@@ -60,10 +63,13 @@ import * as Theme from './theme';
 import {
   Person,
   OneSignal,
-  Followings as FollowingsPostgresBridge,
+  PostgresDefaultCampusOverride,
+  RockDefaultCampusOverride,
 } from './rockWithPostgres';
 
 const postgresContentModules = {
+  Interactions,
+  Likes,
   ActionAlgorithm: PostgresActionAlgorithm,
   Feature: PostgresFeature,
   PostgresMedia,
@@ -71,19 +77,27 @@ const postgresContentModules = {
   ContentItem: PostgresContentItem,
   ContentItemsConnection,
   ContentChannel: ContentItemCategory,
+  PrayerRequest: PostgresPrayerRequest,
+  RockCampus: { dataSource: RockCampus.dataSource },
+  Campus,
+  PostgresDefaultCampusOverride,
 };
 
 const rockContentModules = {
+  Interactions: RockInteractions,
+  Followings,
   ActionAlgorithm: RockActionAlgorithm,
   Feature: RockFeature,
   ContentItem: RockContentItem,
   ContentChannel,
+  PrayerRequest,
+  PostgresCampus: { dataSource: Campus.dataSource },
+  Campus: RockCampus,
+  RockDefaultCampusOverride,
 };
 
 const data = {
   Interfaces,
-  Followings,
-  FollowingsPostgresBridge, // This entry needs to come after Followings.
   FeatureFeed,
   RockPerson, // This entry needs to come before (postgres) Person
   BinaryFiles, // This entry needs to come before (postgres) Person
@@ -98,7 +112,6 @@ const data = {
   LiveStream,
   Theme,
   Scripture,
-  Interactions,
   RockConstants,
   Sharable,
   Analytics,
@@ -106,16 +119,13 @@ const data = {
   Pass,
   Search,
   Template,
-  Campus,
   Group,
   Event,
   Cache,
-  PrayerRequest,
   Comment,
   UserLike,
   UserFlag,
   Follow,
-  PostgresCampus,
   Notification,
   NotificationPreference,
   OneSignal,
diff --git a/apollos-church-api/src/data/rockWithPostgres.js b/apollos-church-api/src/data/rockWithPostgres.js
index b22f5a30..daf925bc 100644
--- a/apollos-church-api/src/data/rockWithPostgres.js
+++ b/apollos-church-api/src/data/rockWithPostgres.js
@@ -42,21 +42,6 @@ const personResolver = {
       ]); // updates in Postgres. Reuses already uploaded imageUrl
       // return dataSources.Person.uploadProfileImage(file, size); // updates in Postgres. Performs the upload again.
     },
-    updateUserCampus: async (root, { campusId }, { dataSources }) => {
-      await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
-
-      const { id: rockCampusId } = parseGlobalId(campusId);
-      const campus = await dataSources.PostgresCampus.getFromId(
-        rockCampusId,
-        null,
-        {
-          originType: 'rock',
-        }
-      ); // finds the postgres campus id
-      return dataSources.Person.updateProfile([
-        { field: 'campusId', value: campus.id },
-      ]); // updates in Postgres
-    },
     updateUserPushSettings: async (root, { input }, { dataSources }) => {
       // register the changes w/ postgres
       await dataSources.NotificationPreference.updateUserNotificationPreference(
@@ -134,91 +119,42 @@ export const OneSignal = {
   dataSource: oneSignalDataSource,
 };
 
-const defaultContentItemResolvers = {
-  likedCount: (root, args, { dataSources }) =>
-    console.log(root, root.apollosId, root.originId) ||
-    dataSources.Followings.getFollowingsCountByNodeId({
-      nodeId: root.apollosId,
-      originId: root.originId,
-    }),
-
-  isLiked: async (root, args, { dataSources }) =>
-    dataSources.Followings.getIsLikedForCurrentUserAndNode({
-      nodeId: root.apollosId,
-      originId: root.originId,
-      isLiked: null,
-    }),
-};
+// Used when IDs coming from the API are Rock APIS.
+export const RockDefaultCampusOverride = {
+  resolver: {
+    Mutation: {
+      updateUserCampus: async (root, { campusId }, { dataSources }) => {
+        await dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Rock
 
-const followingsResolvers = {
-  Mutation: {
-    updateLikeEntity: async (
-      root,
-      { input: { nodeId, operation } },
-      { dataSources },
-      resolveInfo
-    ) => {
-      const { originId } = await dataSources.ContentItem.getFromId(
-        nodeId.split(':')[1]
-      );
-      return dataSources.Followings.updateLikeContentItem({
-        nodeId,
-        originId,
-        operation,
-        resolveInfo,
-      });
-    },
-    updateLikeNode: async (
-      root,
-      { input: { nodeId, operation } },
-      { dataSources },
-      resolveInfo
-    ) => {
-      const { originId } = await dataSources.ContentItem.getFromId(
-        nodeId.split(':')[1]
-      );
-      return dataSources.Followings.updateLikeNode({
-        nodeId,
-        originId,
-        operation,
-        resolveInfo,
-      });
+        const { id: rockCampusId } = parseGlobalId(campusId);
+        const campus = await dataSources.PostgresCampus.getFromId(
+          rockCampusId,
+          null,
+          {
+            originType: 'rock',
+          }
+        ); // finds the postgres campus id
+        return dataSources.Person.updateProfile([
+          { field: 'campusId', value: campus.id },
+        ]); // updates in Postgres
+      },
     },
   },
-  Query: {
-    likedContent: async (root, { after, first }, { dataSources }) => {
-      const followingsPaginated = await dataSources.Followings.paginatedGetFollowingsForCurrentUser(
-        { type: 'ContentItem', after, first }
-      );
-
-      const followings = await followingsPaginated.edges;
-      const ids = followings.map((f) => f.node.entityId);
-      const contentItems = await dataSources.ContentItem.getFromOriginIds(ids);
-      const contentItemEdges = contentItems.map((contentItem) => ({
-        node: contentItem,
-        following: followings.find(
-          (f) => String(f.node.entityId) === contentItem.originId
-        ).node,
-        cursor: followings.find(
-          (f) => String(f.node.entityId) === contentItem.originId
-        ).cursor,
-      }));
-      const sortedContentItemEdges = contentItemEdges.sort(
-        (a, b) =>
-          new Date(a.following.createdDateTime) <
-          new Date(b.following.createdDateTime)
-      );
+};
 
-      return { edges: sortedContentItemEdges };
+// Used when IDs coming from the API are Postgres APIS.
+export const PostgresDefaultCampusOverride = {
+  resolver: {
+    Mutation: {
+      updateUserCampus: async (root, { campusId }, { dataSources }) => {
+        const campus = await dataSources.Campus.getFromId(
+          parseGlobalId(campusId).id
+        ); // finds the postgres campus id
+        await dataSources.RockCampus.updateCurrentUserCampus({
+          rockId: campus.originId,
+        }); // updates in Rock
+        return dataSources.Campus.updateCurrentUserCampus({ campusId }); // updates in Postgres
+      },
     },
   },
-  UniversalContentItem: defaultContentItemResolvers,
-  DevotionalContentItem: defaultContentItemResolvers,
-  ContentSeriesContentItem: defaultContentItemResolvers,
-  WeekendContentItem: defaultContentItemResolvers,
-  MediaContentItem: defaultContentItemResolvers,
-};
-
-export const Followings = {
-  resolver: followingsResolvers,
 };
