diff --git a/apollos-church-api/.dockerignore b/apollos-church-api/.dockerignore
deleted file mode 100644
index 66a3225..0000000
--- a/apollos-church-api/.dockerignore
+++ /dev/null
@@ -1,4 +0,0 @@
-packages/apolloschurchapp
-packages/apollos-ui-kit
-packages/apollos-church-api/.env
-packages/*/node_modules
diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
index 8559468..8a33ffe 100644
--- a/apollos-church-api/.envExample
+++ b/apollos-church-api/.envExample
@@ -1,18 +1,4 @@
 ROCK_API=
 ROCK_TOKEN=
-BIBLE_API_KEY=
-ENGINE_API_KEY=
-CLOUDINARY_URL=
-ONE_SIGNAL_REST_KEY=
-PORT=4000
-ROOT_URL=http://localhost:4000
-
-TWILIO_ACCOUNT_SID=
-TWILIO_AUTH_TOKEN=
-TWILIO_FROM_NUMBER=
-
-
-PASS_WWDR_CERT=
-PASS_SIGNER_CERT=
-PASS_SIGNER_KEY=
-PASS_SIGNER_PASSPHRASE=
\ No newline at end of file
+ESV_KEY=
+CLOUDINARY_URL=
\ No newline at end of file
diff --git a/apollos-church-api/apollos.json b/apollos-church-api/apollos.json
deleted file mode 100644
index 0db6310..0000000
--- a/apollos-church-api/apollos.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-    "version": "0.8.6",
-    "environment": "api"
-}
\ No newline at end of file
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
index 0f1e38d..0e1a2dc 100644
--- a/apollos-church-api/config.yml
+++ b/apollos-church-api/config.yml
@@ -11,30 +11,10 @@ APP:
   # This variable is used for generating deep links.
   # It should match whatver is in your Info.plist `CFBundleURLTypes`
   DEEP_LINK_HOST: apolloschurchapp
-  ROOT_API_URL: ${ROOT_URL}
 ROCK:
   API_URL: https://apollosrock.newspring.cc/api
   API_TOKEN: ${ROCK_TOKEN}
   IMAGE_URL: https://apollosrock.newspring.cc/GetImage.ashx
-  # This should match the timezone of the Rock server
-  TIMEZONE: 'America/New_York'
-ONE_SIGNAL:
-  APP_ID: b6e75a77-003f-4466-95ca-82cc5cdc407b
-  REST_KEY: ${ONE_SIGNAL_REST_KEY}
-CHURCH_ONLINE:
-  URL: https://apollos.churchonline.org/api/v1/
-TWILIO:
-  ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
-  AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
-  FROM_NUMBER: ${TWILIO_FROM_NUMBER}
-PASS:
-  TEMPLATES:
-    CHECKIN: ${PWD}/wallet-passes/checkin.pass
-  CERTIFICATES:
-    WWDR: ${PASS_WWDR_CERT}
-    SIGNER_CERT: ${PASS_SIGNER_CERT}
-    SIGNER_KEY: ${PASS_SIGNER_KEY}
-    SIGNER_KEY_PASSPHRASE: ${PASS_SIGNER_PASSPHRASE}
 ANALYTICS:
   # Filling out these fields will automatically enable analytics tracking
   # on the accompanying service
@@ -42,7 +22,7 @@ ANALYTICS:
   GA_ID:
 BIBLE_API:
   KEY: ${BIBLE_API_KEY}
-  BIBLE_ID: '9879dbb7cfe39e4d-01'
+  BIBLE_ID: "9879dbb7cfe39e4d-01"
 CLOUDINARY:
   # Cloudinary is used to improve image loading
   # value should look something like
@@ -51,6 +31,7 @@ CLOUDINARY:
 
 # This key holds various properties that allow our GraphQL server to map to your Rock Instance
 ROCK_MAPPINGS:
+
   INTERACTIONS:
     # Name of the InteractionChannel that will be created
     CHANNEL_NAME: Apollos App
@@ -59,26 +40,11 @@ ROCK_MAPPINGS:
     # 512 is "Mobile App"
     CHANNEL_MEDIUM_TYPE_ID: 512
 
-  CONTENT_ITEM:
-    ContentSeriesContentItem:
-      # When resolving "ContentSeriesContentItem" look in rock for a "ContentChannelItem"
-      EntityType: ContentChannelItem
-      # Used to define the subset of content channels types that use this specific type.
-      ContentChannelTypeId: [6, 7]
-    DevotionalContentItem:
-      EntityType: ContentChannelItem
-      ContentChannelTypeId: [1]
-    MediaContentItem:
-      EntityType: ContentChannelItem
-    UniversalContentItem:
-      EntityType: ContentChannelItem
-    ContentItem:
-      EntityType: ContentChannelItem
-
-  DATAVIEW_CATEGORIES:
-    # Id of the category used to store all persona dataviews
-    PersonaId: 210
-
+  CONTENT_ITEM_TYPES:
+    - ContentItem
+    - UniversalContentItem
+    - DevotionalContentItem
+    - MediaContentItem
   # Apollos will pull these content channels and expose them in the app on the discover screen.
   DISCOVER_CONTENT_CHANNEL_IDS:
     - 2
@@ -97,8 +63,17 @@ ROCK_MAPPINGS:
     - 6
     - 8
 
-  CAMPAIGN_CHANNEL_IDS:
-    - 11
+  # The apollos app will show scripture for specific ContentChannelTypeIds, specified here.
+  # As of right now, it will pull from the 'scriptures' field.
+  # Ignore if this doesn't apply to you.
+  DEVOTIONAL_TYPE_IDS:
+    - 1
+
+  # The apollos app will use the content channel types as "Content Series" types. A Content Series
+  # is any content item that represents a series of content - Sermon Series, Devotional Series, Podcast Series etc
+  SERIES_CONTENT_CHANNEL_TYPE_IDS:
+    - 6
+    - 7
 
 # Default mapping of field types -> ids. There's probably no reason to edit this.
 ROCK_CONSTANTS:
@@ -211,4 +186,4 @@ ROCK_CONSTANTS:
   INTERACTION_CHANNEL: 117
   GROUP_MEMBER: 118
   TIME_ZONE: 119
-  LABEL: 120
+  LABEL: 120
\ No newline at end of file
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 0351a3d..272b8c9 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,63 +1,68 @@
 {
   "name": "apollos-church-api",
-  "version": "0.8.6",
+  "version": "0.8.0-alpha.4",
   "private": true,
   "main": "lib/index.js",
   "scripts": {
-    "start": "yarn start:dev",
+    "start": "if test \"$NOW_ENV\" = \"true\" ; then yarn start:now ; else yarn start:dev ; fi",
     "start:dev": "nodemon ./src/index.js --exec babel-node --delay 2",
+    "start:now": "babel-node ./src/index.js",
     "start:prod": "NODE_ENV=production node ./lib/index.js",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
     "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
+    "test:watch": "jest --maxWorkers=2 --watch",
     "lint": "eslint ./src --ext .js",
     "fixlint": "eslint ./src --ext .js --fix",
     "codecov": "cat ./coverage/lcov.info | codecov",
-    "version": "node ../../scripts/update-apollos-version.js && git add apollos.json"
+    "release": "standard-version --release-as minor"
   },
   "engines": {
     "node": ">=8.11.x"
   },
   "jest": {
     "collectCoverage": true,
-    "collectCoverageFrom": [
-      "src/**/*.{js,jsx}"
-    ],
     "testMatch": [
       "<rootDir>/src/**/__tests__/**/*.{js,jsx,mjs}",
       "<rootDir>/src/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
     ],
-    "testEnvironment": "node",
-    "reporters": [
-      "<rootDir>/../../scripts/fingers-crossed-reporter.js"
-    ]
+    "testEnvironment": "node"
   },
   "dependencies": {
-    "@apollosproject/config": "^0.8.6",
-    "@apollosproject/data-connector-analytics": "^0.8.6",
-    "@apollosproject/data-connector-bible": "^0.8.6",
-    "@apollosproject/data-connector-church-online": "^0.8.6",
-    "@apollosproject/data-connector-cloudinary": "^0.8.6",
-    "@apollosproject/data-connector-onesignal": "^0.8.6",
-    "@apollosproject/data-connector-passes": "^0.8.6",
-    "@apollosproject/data-connector-rock": "^0.8.6",
-    "@apollosproject/data-connector-twilio": "^0.8.6",
-    "@apollosproject/rock-apollo-data-source": "^0.8.6",
-    "@apollosproject/server-core": "^0.8.6",
+    "@apollosproject/config": "^0.8.0-alpha.4",
+    "@apollosproject/data-connector-analytics": "^0.8.0-alpha.4",
+    "@apollosproject/data-connector-bible": "^0.8.0-alpha.4",
+    "@apollosproject/data-connector-church-online": "^0.8.0-alpha.4",
+    "@apollosproject/data-connector-cloudinary": "^0.8.0-alpha.4",
+    "@apollosproject/data-connector-people": "^0.8.0-alpha.4",
+    "@apollosproject/data-connector-rock-actions": "^0.8.0-alpha.4",
+    "@apollosproject/data-connector-rock-auth": "^0.8.0-alpha.4",
+    "@apollosproject/data-connector-rock-content": "^0.8.0-alpha.4",
+    "@apollosproject/rock-apollo-data-source": "^0.8.0-alpha.4",
+    "@apollosproject/server-core": "^0.8.0-alpha.4",
+    "apollo-datasource-rest": "0.1.1",
     "apollo-server": "^2.0.5",
-    "apollo-server-express": "2.4.8",
+    "casual": "1.5.19",
     "color": "3.0.0",
+    "dataloader": "1.4.0",
     "dotenv": "6.0.0",
-    "express": "^4.17.0",
     "graphql": "0.13.2",
+    "isomorphic-fetch": "2.2.1",
+    "lodash": "4.17.10",
     "prettier": "1.12.1",
-    "randomcolor": "0.5.3"
+    "randomcolor": "0.5.3",
+    "sanitize-html": "1.18.2",
+    "url-join": "4.0.0",
+    "with-query": "1.0.2"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^0.8.6",
-    "@apollosproject/babel-preset-apollos": "^0.8.6",
+    "@apollosproject/apollo-server-env-mock": "^0.8.0-alpha.4",
+    "@apollosproject/babel-preset-apollos": "^0.8.0-alpha.4",
     "@babel/cli": "7.1.5",
     "@babel/core": "7.1.6",
     "codecov": "3.0.2",
+    "coveralls": "3.0.1",
+    "jest": "23.6.0",
+    "jest-fetch-mock": "1.6.2",
     "nodemon": "1.18.7"
   }
 }
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index 4bda45e..aa2e01d 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -2,34 +2,24 @@ import { gql } from 'apollo-server';
 
 import { createApolloServerConfig } from '@apollosproject/server-core';
 
+import * as Auth from '@apollosproject/data-connector-rock-auth';
+import {
+  ContentItem,
+  ContentChannel,
+  Sharable,
+} from '@apollosproject/data-connector-rock-content';
 import * as Analytics from '@apollosproject/data-connector-analytics';
+import { Person, Family } from '@apollosproject/data-connector-people';
 import * as Scripture from '@apollosproject/data-connector-bible';
 import * as LiveStream from '@apollosproject/data-connector-church-online';
 import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
-import * as OneSignal from '@apollosproject/data-connector-onesignal';
-import * as Pass from '@apollosproject/data-connector-passes';
-import * as Sms from '@apollosproject/data-connector-twilio';
 import {
   Followings,
   Interactions,
   RockConstants,
-  Person,
-  ContentItem,
-  ContentChannel,
-  Sharable,
-  Auth,
-  PersonalDevice,
-  Template,
-  AuthSms,
-  Campus,
-  BinaryFiles,
-} from '@apollosproject/data-connector-rock';
+} from '@apollosproject/data-connector-rock-actions';
 import * as Theme from './theme';
 
-// This module is used to attach Rock User updating to the OneSignal module.
-// This module includes a Resolver that overides a resolver defined in `OneSignal`
-import * as OneSignalWithRock from './oneSignalWithRock';
-
 const data = {
   Followings,
   ContentChannel,
@@ -37,8 +27,6 @@ const data = {
   Person,
   Cloudinary,
   Auth,
-  AuthSms,
-  Sms,
   LiveStream,
   Theme,
   Scripture,
@@ -46,24 +34,26 @@ const data = {
   RockConstants,
   Sharable,
   Analytics,
-  OneSignal,
-  PersonalDevice,
-  OneSignalWithRock,
-  Pass,
-  Template,
-  Campus,
-  BinaryFiles,
+  Family,
+  UniversalContentItem: {
+    dataSource: ContentItem.dataSource,
+  }, // alias
+  DevotionalContentItem: {
+    dataSource: ContentItem.dataSource,
+  }, // alias
+  ContentSeriesContentItem: {
+    dataSource: ContentItem.dataSource,
+  }, // alias
+  MediaContentItem: {
+    dataSource: ContentItem.dataSource,
+  }, // alias
 };
 
-const {
-  dataSources,
-  resolvers,
-  schema,
-  context,
-  applyServerMiddleware,
-} = createApolloServerConfig(data);
+const { dataSources, resolvers, schema, context } = createApolloServerConfig(
+  data
+);
 
-export { dataSources, resolvers, schema, context, applyServerMiddleware };
+export { dataSources, resolvers, schema, context };
 
 // the upload Scalar is added
 export const testSchema = [
diff --git a/apollos-church-api/src/data/oneSignalWithRock.js b/apollos-church-api/src/data/oneSignalWithRock.js
deleted file mode 100644
index e810c58..0000000
--- a/apollos-church-api/src/data/oneSignalWithRock.js
+++ /dev/null
@@ -1,20 +0,0 @@
-/* eslint-disable import/prefer-default-export */
-
-export const resolver = {
-  Mutation: {
-    updateUserPushSettings: async (root, { input }, { dataSources }) => {
-      // register the changes w/ one signal
-      const returnValue = await dataSources.OneSignal.updatePushSettings(input);
-
-      // if the pushProviderUserId is changing, we need ot register the device with rock.
-      if (input.pushProviderUserId != null) {
-        await dataSources.PersonalDevice.addPersonalDevice({
-          pushId: input.pushProviderUserId,
-        });
-      }
-
-      // return the original return value (which is currentPerson)
-      return returnValue;
-    },
-  },
-};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index 796ad4d..a7f0ca1 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -11,6 +11,6 @@ if (!PORT && process.env.NODE_ENV !== 'test')
     'Add `ENV=4000` if you are having trouble connecting to the server. By default, PORT is random.'
   );
 
-server.listen({ port: PORT }, () => {
-  console.log(`🚀 Server ready at http://0.0.0.0:${PORT}`);
+server.listen({ port: PORT }).then(({ url }) => {
+  console.log(`🚀 Server ready at ${url}`);
 });
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index 74a305e..e82048c 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -1,30 +1,15 @@
-import { ApolloServer } from 'apollo-server-express';
-import express from 'express';
-import { RockLoggingExtension } from '@apollosproject/rock-apollo-data-source';
+import { ApolloServer } from 'apollo-server';
 
-import {
-  resolvers,
-  schema,
-  testSchema,
-  context,
-  dataSources,
-  applyServerMiddleware,
-} from './data';
+import { resolvers, schema, testSchema, context, dataSources } from './data';
 
 export { resolvers, schema, testSchema };
 
-const isDev =
-  process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';
-
-const extensions = isDev ? [() => new RockLoggingExtension()] : [];
-
-const apolloServer = new ApolloServer({
+export default new ApolloServer({
   typeDefs: schema,
   resolvers,
   dataSources,
   context,
   introspection: true,
-  extensions,
   formatError: (error) => {
     console.error(error.extensions.exception.stacktrace.join('\n'));
     return error;
@@ -34,17 +19,4 @@ const apolloServer = new ApolloServer({
       'editor.cursorShape': 'line',
     },
   },
-  cacheControl: {
-    stripFormattedExtensions: false,
-    calculateHttpHeaders: true,
-    defaultMaxAge: 600,
-  },
 });
-
-const app = express();
-
-applyServerMiddleware({ app, dataSources, context });
-apolloServer.applyMiddleware({ app });
-apolloServer.applyMiddleware({ app, path: '/' });
-
-export default app;
diff --git a/apollos-church-api/src/utils/testUtils.js b/apollos-church-api/src/utils/testUtils.js
new file mode 100644
index 0000000..5f1c527
--- /dev/null
+++ b/apollos-church-api/src/utils/testUtils.js
@@ -0,0 +1,33 @@
+import { KeyValueCache } from 'apollo-server-caching';
+import {
+  context as getContext,
+  dataSources as getDataSources,
+} from '../data/index';
+
+export function getTestContext(req) {
+  const context = getContext(req);
+  const dataSources = getDataSources();
+  // Apollo Server does this internally.
+  Object.values(dataSources).forEach((dataSource) => {
+    if (dataSource.initialize) {
+      dataSource.initialize({ context, cache: KeyValueCache });
+    }
+  });
+  context.dataSources = dataSources;
+  return context;
+}
+
+export const buildGetMock = (response, dataSource) => {
+  const get = jest.fn();
+  if (Array.isArray(response) && Array.isArray(response[0])) {
+    response.forEach((responseVal) => {
+      get.mockReturnValueOnce(
+        new Promise((resolve) => resolve(dataSource.normalize(responseVal)))
+      );
+    });
+  }
+  get.mockReturnValue(
+    new Promise((resolve) => resolve(dataSource.normalize(response)))
+  );
+  return get;
+};
diff --git a/apollos-church-api/wallet-passes/checkin.pass/icon.png b/apollos-church-api/wallet-passes/checkin.pass/icon.png
deleted file mode 100644
index eb025791d640b41889b0584085aec4f7540d9ed8..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 658
zcmV;D0&V??P)<h;3K|Lk000e1NJLTq0012T0012b1^@s6R+DEB00001b5ch_0Itp)
z=>Px%Oi4sRR7eeDWJu5b&p>CuL}&ZJ){R<9(@<w2)pSQyWrpq9DR6D?zkOqnuWe)a
z_4hAaj1Yt5IE^wjLNQa2i;KZiTLVRm5Qij7xmZ~l0`;{q%#1;E2!;YQ0g^2B)6-_)
zVP{7(f`P$9OPxUo=wo65NtQ+<`RLKR4-EhQL&_CaW@d&kBRyj6WFXp72|gYMXLS|0
z!BY+$WjJ`}E}S1_VhCpwVi0X<xRD_P6C)$symc2YGpspx3C=fDkYi906@l~dF^IMl
zIk6nS_mJVqhmQ;!FI{8!`|lsz{AeP5OO&NLk`fHM(h_jP*PMs=@Xgn+4Et^&f;iID
zkO2`EaOD^bqAW%B<$qw}S$FX=+@Q5k2Y>_=gajF^l@;J}xEKU21;t~yu>oBFk-PU9
zo`3ob=Wo1xmEjLk5J#Dy79MbgNDP9OI;*KLNb>W-wX6juAY}0V+joY&H*Uj)LJV~o
zI9TwPt^_TO0>%>zfb!+Ki&tP=IKBG9ML3&}gM-0aM-$G+#=vVS4?7!!Kd=;nfkSuh
zF}(Wx1;&Nbn=f5w_>ENHBc}nlA|wW0O9O!AEEgLaTsd;SgbM;0AAkH{*meCDT*ysR
zjX{)$2hK-l;0=8AMB$~Q!C<ANfNlnuFC)MY7iVT-0vC%@4;_PxAv17VDlNdr0IEBY
zftNP^xI$J7DyMN-iZgg4fZ2o*sn|m{kQla+tTcm$xENNYI4un^&|~=Z=MP0V)DU~k
s!#LXR#Tpq@62uv&R5Bl{F#}>L06Dg??>EPstpET307*qoM6N<$f}#QyX#fBK

diff --git a/apollos-church-api/wallet-passes/checkin.pass/icon@2x.png b/apollos-church-api/wallet-passes/checkin.pass/icon@2x.png
deleted file mode 100644
index bc4e9a6c50da95a102613f00515da6e5f1504773..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1191
zcmV;Y1X%ltP)<h;3K|Lk000e1NJLTq0024w0024&1^@s6;k!yG00001b5ch_0Itp)
z=>Px(VM#<mRA>e5T1!t;K@>ja{b+ewd5MU;DHNzcTo?@oiBUp~1_bKDoh#S;1Al>u
zJ9n-qsECR|G#bOofRwj@8bgeUQ3;Py%F7u{YkNC0_s+d@A(fuZy)$Rd%=zY=Irq$I
z4RGuBE*t`iI0P8?AcledZ<Y>QG;Glj-GQ*{hN$7FY9AVlMp3swAmdtfB|Ny<Nu6<M
zb`CDzyHDkdVC;)UZ`9eCx;7LSLRONAIYui}cc5mY5iXP!Gxdxx7@(uJnmI-*Q+J?k
zHY-F$$S>1bTcZ^VQ(j&Jrno%QF5|Y|87i`~z?zfkZ3=(t3bf>?8Em;Zij|f-%Zeu=
z4Ad1Uui|aCYKTPVRS(h)C|0+fGr(k`$lF*_qz6vW4d}VT0?18G;a0k{PM@Hp8_>>r
zy25t`hG2DLgSZJTRtp$oV~9L0ow@*xkB)|`RTV_Nwsv;l?%QGLAD<%fS+Ya{g`K(p
zZLyXktHcsjcr`l@zg#Zp9vvt0ai_hWok>vz84O*3vc8>;(Xl;s24_CPvfE8m?QFqG
zbiR{`Jhh#|fo7QKk#lo<8~Vnl_jL8(cPH6>4d@foeoAagC>$tO5a+HWdO0%(OY7@C
zmg9rd_bz?03r-1z1GO_g58b1Iz=kkz*FWI?U`sPIxUwpLS<<^upq8vml&@xy)&bAf
z7W7a2bzAR%O%#D2k577=K~LVyDrf?~4xvC<ioKX72Oq~spq2e}gVq{lHy?i)+Pg5I
z_*`DMRngV~+If6Ew*Wua)`)UulM$L^?y^KdLZ>jG=TVg)J0*#*1b};U6P`-k);ka<
z5RaU6_Z1bCgaKt;oCl_6QOf7>VheiqjL?&Z=E`zNj*APD;q4FtG%+Ryu2fm5YfGc8
zbl{u$1^BVDD(&8D$3{f~F0N@MAwV(61O%2uE{_MEPtK57zP|0<U3lo6@U^8cB5pK7
zfU?~783O4-XH<?HjNJE3K|Y*FOO=~~$=3`tJJ|#{5YfmXNfKz|-YtBF@5?JRw&p6K
zW}rCb!?`Jm)=&V#fk+AMAouMZqX#9{MM25@nt`&Cg#L*saHEV!DfKYix6ph9>hp4y
zP8Bpx6VNJ@?v<mok4AFQRw_6A=?i>YT9$VE+FGot2`I~&E9kB{h>~_5!hetH9b>12
z(F%&;q%~Co#brrco}^Kqa~d`{+}1k}tMZVRm;e_orQV@jPu0JsHI^1ZMv{@b*y7TX
zs?sG6YuFo1lxzrl(GyC&iK+}@s0M1UwXx=fuBHa)f(GUoHOx!MqNxe-@SAdvrOm0z
zbxo-7g$rN@LD7+s&{}QfURo7UT*{0?CC!5(H7TJgpseEbet<unp9cl$>0C>31I1-X
z{By%W6R%adfp!S4&Z*rnUZC7jx7kugEj+7LT8&&f`li+%KL+o=E-Df?g#WLrXrDr7
z5ce4k9cY1?hJgm|N9ec077cwH1|kSsG;lvczjbIV`Uf@}0T|pBL$3e;002ovPDHLk
FV1lDsAjJRx

diff --git a/apollos-church-api/wallet-passes/checkin.pass/logo.png b/apollos-church-api/wallet-passes/checkin.pass/logo.png
deleted file mode 100644
index 66c5d6acadd9847001564a64d3cef75337d6027b..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 619
zcmV-x0+juUP)<h;3K|Lk000e1NJLTq0012T0012b1^@s6R+DEB00001b5ch_0Itp)
z=>Px%B}qg<R7ef&RLzRiKoG8KH)hPZ2n&KJ9z1y1gLrXa51zz>_yhjHs;ld>_zL<K
zs|(^y5J3?<`4WmCh$6zwB%Plwzo3=r>?WDSi<b#BRrRH-zN+f#CR%>W4*ZV}WN~~c
zi6^4V#*-f+a(GBCX2|ApuQP7P_YtDCG>xzM*dl!pDJqIc<j#ShB99JW9l#*cG)-=b
z&}u`xt4L_A0dIr`k%~C4BL2k8MH#g`)6CB9H8M1Sy-7tTCz$AR6@&SSki1nJ9jKkP
z;!UzQskLSs6&)&rph5{ldTxYwH7F9;Op@fR+Fi0YDbsvdP}K+K=u0q)ULb*730R6=
z)%GH_)}BL^=QX(DKNW)TJFd(d#f9l1_Tdz|zh0yyMKwSmazQA28rBFsQymj^CeM?L
zmEEE&Bt_;1Yg_%Hzh@qQRr_y?GqsDN{&*<v%Y~%5onm6;q&lIs^U46C@}Cf|^*_#j
z3yF=?ZjuX0op%*LPy}IAwN?YNk@*x09mBJDL;p3&PEuri6s6o!M_h|{ApWMd${-lO
z1fHsmv#n;J!aSvuG|Q&9K|I#|hUWKDu~LHY7sM+My8^%Co?TN{YSuo(x%w-E>v7%2
zvzF<U)9Mbw6>H=Bu%9aC%ho$3GCP%8`HTRa-SC6?Ium~kkBm2bO!d})Y3d&QD`6QN
z=YIi@%DNKyvc0{+Tg+tr&4YE9--XZP!G24JWe56n;5TEM+8QPN!ZiQ@002ovPDHLk
FV1lg7AM5}C

diff --git a/apollos-church-api/wallet-passes/checkin.pass/logo@2x.png b/apollos-church-api/wallet-passes/checkin.pass/logo@2x.png
deleted file mode 100644
index c47ad00a6c448de33f13033da23e6c089de00b67..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1207
zcmV;o1W5adP)<h;3K|Lk000e1NJLTq0024w0024&1^@s6;k!yG00001b5ch_0Itp)
z=>Px(aY;l$RA>e5S#66HM-c9w-J6@c^W}qRd_fTcA;@6_69geBh8XdKh$tpe^JDx6
z{)s>|CPt%T3?hi1{23AgA{x)z-I>|FE}vQ1b9bofo1W<r0==+IPrY>2Q(fI%-J?|a
zg$RTQgb0KPgb0KPgb0KPypMqX7=g&L{sl7Tx@b$Qhe@*Oq{#Qch&=SMaTi2C*@U#x
zCy08xY%)!Gtpg>Z?Qrrto1>8FWEowy$u#A)4m8UKKLE(wMvh_*{l9@~qAMGLEcis~
zV4kmjQAM_nOsgZBW!dMX=*!BE8D*WzmHS}?TLr4j$jNa-x=8a5<7Z=1Ye3<!CZ#U9
zc}TlPS?^mnoodpp0Uf33am>7Z)!g_XWk^+;(;qadwORveA|pDCee<f;>MiS{)@P9o
zn^;~0Vk<!5=mM6}^PFE=>tUQMUQ?uQbA0G74$~g1%gI-zwE{HH2N)H#S#aWSfPF<;
z|03{}(f(K8R)Atu#MKu2>bT~epI>}{^nJsDMQR@->hI-vb!py#0^}#Ca@ds<Bbm=7
zOScMVi?$*?ZkL@$A5oqg#}&KW%j~;%peXq+!BJ^1{0jj8o47z)$tN1mtFL#UT3Jdy
z9nH*3r0+wd@9PQh=_ls+fjsXWo~AWvdj*P;ZyBR`h;s-dnZ<E3v(kb#L=OMX$&YD9
zp6jBH!0-xG(VDmj!Tx;!TPgby5zUP9G#|yo_Xu2fnpU^%4QR1|;QyoOh}P_U?9MMe
zg3e1pZwGECP6<3GvNxckEc*r}-yY67Msg6x3wH$G2<iJ9$17-6k9m^*gzgQfA-Uv(
zv3mf!Ix$*)b|_*;dn~8*8Dz@VvX1M!7oc!t386nH8n;wIg-$m~9^>(%XqSKJI~k_^
z3uU_NyBDCtVei}+EMpxb*+bgiWmxMZ$gClKZ>|$c4P)D~O0v?c7of&ij#fl}0!UwS
zU_$S7X7|_$y?8?ZYZ?spPt#o6je+8tayM#IEJVUDvdq6Jm2NkA0!aT(k=C2Y7M(|?
z(dAiVptz<iN<Ow9jKnI^_TIY3mIh>v(&|@Hq~ax;q|Z7i33GH5@N$trbQ=ItPLHD@
zeZ|!mCE;gz-ao?WRiQNkitEWka9~+7WIJ<mI!NEANZ)@rUO_VrO2S4!mF0R8#rjHd
z=9HY~=oo#9G~M8M1r5c+MNE@9iEpFV1`30n;(Ai-9A`~9o{4;k5y`7BZWXs7eNRiO
zHhS%X88s-re$h@#=g)^}${xTiI>^rv;-gkDCAP3~G+q<_V0ji|?azkUVD)E2SRPS}
z(IzZJA&=)5cjC#OW2L@pr7qHTGj{Q_Qm1XwVLKjX{fn+PY5^^-BVlmC)tE1Nq_ucw
zEZL|96xWf?h9n2-(DC8wD5dGAF1pS@i)%=fe8*jkv>}_*np3cyf#MqSGSas8BIXM;
zJa7W)zP%WI2KzdD@$3skwSEYDYVWH!UV2tdK1hWKgb0KPgb0KPgb0KPgb2Kkz&jnu
VcU*cLS`+{P002ovPDHLkV1mczIo<#O

diff --git a/apollos-church-api/wallet-passes/checkin.pass/pass.json b/apollos-church-api/wallet-passes/checkin.pass/pass.json
deleted file mode 100644
index 8909bd1..0000000
--- a/apollos-church-api/wallet-passes/checkin.pass/pass.json
+++ /dev/null
@@ -1,56 +0,0 @@
-{
-  "description": "Apollos Church",
-  "formatVersion": 1,
-  "organizationName": "Apollos Church",
-  "passTypeIdentifier": "pass.com.apollos.testing",
-  "teamIdentifier": "7TM8C6252Z",
-  "logoText": "Apollos Church",
-  "backgroundColor": "rgb(0,103,109)",
-  "foregroundColor": "rgb(248,247,244)",
-  "serialNumber": "checkinpass-{{ person | GetPersonAlternateId }}",
-  "thumbnail": {
-    "uri": "{{ person.Photo.Url }}&format=png&height=200"
-  },
-  "thumbnail@2x": {
-    "uri": "{{ person.Photo.Url }}&format=png&height=400"
-  },
-  "barcodes": [
-    {
-      "message": "{{ person | GetPersonAlternateId }}",
-      "format": "PKBarcodeFormatQR",
-      "messageEncoding": "iso-8859-1"
-    }
-  ],
-{% assign personCampus = person | Campus %}
-{% if personCampus.Location.Latitude %}
-  "locations": [
-    {
-      "latitude": {{ personCampus.Location.Latitude }},
-      "longitude": {{ personCampus.Location.Longitude }},
-      "relevantText": "Tap to check-in at {{ personCampus.Name }}"
-    }
-  ],
-{% endif %}
-  "generic": {
-    "primaryFields": [
-      {
-        "key": "member",
-        "value": "{{ person.FullName }}"
-      }
-    ],
-    "secondaryFields": [
-      {
-        "key": "home",
-        "label": "home",
-        "value": "{{ person | Address:'Home','[[City]], [[State]]' }}"
-      },
-      {
-        "key": "campus",
-        "label": "campus",
-        "textAlignment": "PKTextAlignmentRight",
-        "value":
-          "{% assign personCampus = person | Campus %}{{ personCampus.Name  }}"
-      }
-    ]
-  }
-}
