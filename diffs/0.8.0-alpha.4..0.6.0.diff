diff --git a/apollos-church-api/.babelrc b/apollos-church-api/.babelrc
index f644de5..5cb8e6a 100644
--- a/apollos-church-api/.babelrc
+++ b/apollos-church-api/.babelrc
@@ -1,5 +1,5 @@
 {
-  "presets": ["@apollosproject/apollos"],
+  "presets": ["apollos"],
   "env": {
     "development": {
       "sourceMaps": "inline"
diff --git a/apollos-church-api/.envExample b/apollos-church-api/.envExample
index 8a33ffe..33c14f5 100644
--- a/apollos-church-api/.envExample
+++ b/apollos-church-api/.envExample
@@ -1,4 +1,3 @@
 ROCK_API=
 ROCK_TOKEN=
 ESV_KEY=
-CLOUDINARY_URL=
\ No newline at end of file
diff --git a/apollos-church-api/.npmignore b/apollos-church-api/.npmignore
deleted file mode 100644
index 93f3929..0000000
--- a/apollos-church-api/.npmignore
+++ /dev/null
@@ -1,2 +0,0 @@
-*
-!lib/**
diff --git a/apollos-church-api/__mocks__/analytics-node.js b/apollos-church-api/__mocks__/analytics-node.js
new file mode 100644
index 0000000..97db17d
--- /dev/null
+++ b/apollos-church-api/__mocks__/analytics-node.js
@@ -0,0 +1,7 @@
+export const mockTrack = jest.fn();
+export const mockIdentify = jest.fn();
+const mock = jest
+  .fn()
+  .mockImplementation(() => ({ track: mockTrack, identify: mockIdentify }));
+
+export default mock;
diff --git a/apollos-church-api/__mocks__/apollo-datasource-mocks/bible.js b/apollos-church-api/__mocks__/apollo-datasource-mocks/bible.js
new file mode 100644
index 0000000..921d98d
--- /dev/null
+++ b/apollos-church-api/__mocks__/apollo-datasource-mocks/bible.js
@@ -0,0 +1,17 @@
+export default () => ({
+  data: {
+    passages: [
+      {
+        id: 'SNG.1.1',
+        orgId: 'SNG.1.1',
+        bibleId: '9879dbb7cfe39e4d-01',
+        bookId: 'SNG',
+        chapterIds: ['SNG.1'],
+        reference: 'Song of Solomon 1:1',
+        content:
+          '<p class="p"><span data-number="1" class="v">1</span>The Song of songs, which is Solomon’s.</p>',
+        copyright: 'PUBLIC DOMAIN',
+      },
+    ],
+  },
+});
diff --git a/apollos-church-api/__mocks__/apollo-datasource-mocks/index.js b/apollos-church-api/__mocks__/apollo-datasource-mocks/index.js
new file mode 100644
index 0000000..f53054e
--- /dev/null
+++ b/apollos-church-api/__mocks__/apollo-datasource-mocks/index.js
@@ -0,0 +1,2 @@
+export { default as liveStreamLive } from './live-stream';
+export { default as Scripture } from './bible';
diff --git a/apollos-church-api/__mocks__/apollo-datasource-mocks/live-stream.js b/apollos-church-api/__mocks__/apollo-datasource-mocks/live-stream.js
new file mode 100644
index 0000000..13fe0d1
--- /dev/null
+++ b/apollos-church-api/__mocks__/apollo-datasource-mocks/live-stream.js
@@ -0,0 +1,6 @@
+export default () => ({
+  meta: { status: 200 },
+  response: {
+    item: { isLive: true, eventStartTime: '2018-08-06T17:00:00Z' },
+  },
+});
diff --git a/apollos-church-api/__mocks__/apollo-server-env.js b/apollos-church-api/__mocks__/apollo-server-env.js
index 5ec2ff7..88fdf3f 100644
--- a/apollos-church-api/__mocks__/apollo-server-env.js
+++ b/apollos-church-api/__mocks__/apollo-server-env.js
@@ -1,5 +1,221 @@
-import createMock from '@apollosproject/apollo-server-env-mock';
+import fetch from 'jest-fetch-mock';
+
+import { Constants } from '../src/connectors/rock';
+import * as apolloDatasourceMocks from './apollo-datasource-mocks';
+import * as rockMocks from './rock-api-mocks';
 
 const apolloServerEnv = require.requireActual('apollo-server-env');
 
-module.exports = createMock(apolloServerEnv);
+// eslint-disable-next-line
+const Response = apolloServerEnv.Response;
+
+const resolveWith = (data, url) =>
+  Promise.resolve(
+    new Response(JSON.stringify(data), {
+      url,
+      status: 200,
+      statusText: 'OK',
+      headers: new apolloServerEnv.Headers({
+        'Content-Type': 'application/json',
+      }),
+    })
+  );
+
+fetch.mockLiveDataSourceApis = () => {
+  fetch.mockImplementation((request) => {
+    if (request.url.match('/api/v1/events/current')) {
+      return resolveWith(apolloDatasourceMocks.liveStreamLive(), request.url);
+    }
+    if (request.url.match('api.scripture.api.bible')) {
+      return resolveWith(apolloDatasourceMocks.Scripture(), request.url);
+    }
+    return Promise.reject();
+  });
+};
+
+fetch.mockRockDataSourceAPI = () => {
+  fetch.mockImplementation((request) => {
+    let { url } = request;
+    url = decodeURI(url);
+    if (!url.match(Constants.ROCK_API)) {
+      if (request.url.match('/api.scripture.api.bible/v1')) {
+        return resolveWith(apolloDatasourceMocks.Scripture());
+      }
+      return Promise.reject();
+    }
+
+    if (url.match('api/EntityTypes')) {
+      return resolveWith(
+        [
+          {
+            Id: 201,
+          },
+        ],
+        url
+      );
+    }
+
+    if (url.match('api/InteractionChannels')) {
+      return resolveWith(
+        [
+          {
+            Id: 10,
+          },
+        ],
+        url
+      );
+    }
+
+    if (url.match('api/InteractionComponents')) {
+      return resolveWith(
+        [
+          {
+            Id: 101,
+          },
+        ],
+        url
+      );
+    }
+
+    if (url.match('api/ContentChannels/\\d')) {
+      return resolveWith(rockMocks.contentChannel());
+    }
+
+    if (url.match('api/Groups/GetFamilies/\\d')) {
+      return resolveWith(rockMocks.families());
+    }
+
+    if (url.match('api/ContentChannels')) {
+      return resolveWith([rockMocks.contentChannel()]);
+    }
+
+    if (url.match('api/ContentChannelItems/test-case-no-attributes')) {
+      const mock = rockMocks.contentItem();
+      mock.AttributeValues = {};
+      mock.Attributes = {};
+      return resolveWith(mock);
+    }
+
+    if (url.match('api/ContentChannelItems/123')) {
+      const contentItem = rockMocks.contentItem();
+      contentItem.AttributeValues.Scriptures = { Value: 'John 3:16' };
+      return resolveWith(contentItem);
+    }
+
+    if (url.match('api/ContentChannelItems/\\d')) {
+      return resolveWith(rockMocks.contentItem());
+    }
+
+    if (url.match('api/ContentChannelItems')) {
+      return resolveWith([rockMocks.contentItem()]);
+    }
+
+    if (url.match('api/ContentChannelItemAssociations')) {
+      return resolveWith([rockMocks.contentChannelItemAssociation()]);
+    }
+
+    if (url.match('api/Auth/Login')) {
+      const body = JSON.parse(request.body);
+      const response = new Response('');
+      if (body.Password === 'good') {
+        response.headers.set('set-cookie', 'some cookie');
+        return Promise.resolve(response);
+      }
+      return Promise.reject({ ...response, status: 401 });
+    }
+
+    if (url.match('api/People/GetCurrentPerson')) {
+      return resolveWith(rockMocks.people());
+    }
+
+    if (url.match('api/People/\\d')) {
+      return resolveWith(rockMocks.people());
+    }
+
+    if (url.match('api/People')) {
+      if (request.method === 'POST') {
+        const { Email } = JSON.parse(request.body);
+        if (!Email) {
+          const response = new Response('');
+          response.status = 400;
+          return Promise.reject(response);
+        }
+        return resolveWith({ personId: 35 });
+      }
+
+      return resolveWith([rockMocks.people()]);
+    }
+
+    if (url.match('api/Interactions/\\d')) {
+      return resolveWith(rockMocks.interaction());
+    }
+
+    if (url.match('api/Interactions')) {
+      if (request.method === 'GET') {
+        return resolveWith([rockMocks.interaction()]);
+      }
+      if (request.method === 'POST') {
+        const response = new Response('456', {
+          status: 200,
+          statusText: 'OK',
+          headers: new apolloServerEnv.Headers({
+            'Content-Type': 'application/json',
+          }),
+        });
+        return Promise.resolve(response);
+      }
+    }
+
+    if (url.match('api/InteractionSessions')) {
+      if (request.method === 'GET') {
+        return resolveWith(rockMocks.session());
+      }
+      if (request.method === 'POST') {
+        const response = new Response('123', {
+          status: 200,
+          statusText: 'OK',
+          headers: new apolloServerEnv.Headers({
+            'Content-Type': 'application/json',
+          }),
+        });
+        return Promise.resolve(response);
+      }
+    }
+
+    if (url.match('api/UserLogins')) {
+      if (request.method === 'POST') {
+        const { UserName } = JSON.parse(request.body);
+        if (!UserName) {
+          const response = new Response('');
+          response.status = 400;
+          return Promise.reject(response);
+        }
+        return resolveWith({ id: 21 });
+      }
+      const identity = url // identity = UserName
+        .split('eq')
+        .pop()
+        .trim(' '); // EXAMPLE URL: /api/UserLogins?$filter=UserName eq 'isaac.hardy@newspring.cc'
+
+      if (!identity) {
+        const response = new Response('');
+        response.status = 400;
+        return Promise.reject(response);
+      }
+      if (identity === `'isaac.hardy@newspring.cc'`)
+        return resolveWith([rockMocks.userLogins()]);
+
+      return resolveWith([]);
+    }
+    console.log(`No route matching ${url}`);
+    return Promise.reject(`No route matching ${url}`);
+  });
+};
+
+const apolloServerEnvMocked = {
+  ...apolloServerEnv,
+  Response: fetch.Response,
+  fetch,
+};
+
+module.exports = apolloServerEnvMocked;
diff --git a/apollos-church-api/__mocks__/dotenv/config.js b/apollos-church-api/__mocks__/dotenv/config.js
deleted file mode 100644
index c312228..0000000
--- a/apollos-church-api/__mocks__/dotenv/config.js
+++ /dev/null
@@ -1 +0,0 @@
-// console.log('Disable reading from `env` file in test env.');
diff --git a/apollos-church-api/__mocks__/isomorphic-fetch.js b/apollos-church-api/__mocks__/isomorphic-fetch.js
new file mode 100644
index 0000000..70a2ed0
--- /dev/null
+++ b/apollos-church-api/__mocks__/isomorphic-fetch.js
@@ -0,0 +1,104 @@
+import 'isomorphic-fetch';
+import fetch from 'jest-fetch-mock';
+
+import { Constants } from '../src/connectors/rock';
+
+import * as rockMocks from './rock-api-mocks';
+
+const resolveWith = (data) =>
+  Promise.resolve(new fetch.Response(JSON.stringify(data)));
+
+fetch.mockRockAPI = () => {
+  fetch.mockImplementation((url, options) => {
+    if (!url.match(Constants.ROCK_API)) return Promise.reject();
+
+    if (url.match('api/ContentChannels/\\d')) {
+      return resolveWith(rockMocks.contentChannel());
+    }
+
+    if (url.match('api/ContentChannels')) {
+      return resolveWith([rockMocks.contentChannel()]);
+    }
+
+    if (url.match('api/ContentChannelItems/test-case-no-attributes')) {
+      const mock = rockMocks.contentItem();
+      mock.AttributeValues = {};
+      mock.Attributes = {};
+      return resolveWith(mock);
+    }
+
+    if (url.match('api/ContentChannelItems/\\d')) {
+      return resolveWith(rockMocks.contentItem());
+    }
+
+    if (url.match('api/ContentChannelItems')) {
+      return resolveWith([rockMocks.contentItem()]);
+    }
+
+    if (url.match('api/ContentChannelItemAssociations')) {
+      return resolveWith([rockMocks.contentChannelItemAssociation()]);
+    }
+
+    if (url.match('api/Auth/Login')) {
+      const body = JSON.parse(options.body);
+      const response = new fetch.Response('');
+      if (body.Password === 'good') {
+        response.headers.set('set-cookie', 'some cookie');
+        return Promise.resolve(response);
+      }
+      response.status = 401;
+      return Promise.reject(response);
+    }
+
+    if (url.match('api/People/GetCurrentPerson')) {
+      return resolveWith(rockMocks.people());
+    }
+
+    if (url.match('api/People/\\d')) {
+      return resolveWith(rockMocks.people());
+    }
+
+    if (url.match('api/People')) {
+      if (options.method === 'POST') {
+        const { Email } = JSON.parse(options.body);
+        if (!Email) {
+          const response = new fetch.Response('');
+          response.status = 400;
+          return Promise.reject(response);
+        }
+        return resolveWith({ personId: 35 });
+      }
+
+      return resolveWith([rockMocks.people()]);
+    }
+
+    if (url.match('api/UserLogins')) {
+      if (options.method === 'POST') {
+        const { UserName } = JSON.parse(options.body);
+        if (!UserName) {
+          const response = new fetch.Response('');
+          response.status = 400;
+          return Promise.reject(response);
+        }
+        return resolveWith({ id: 21 });
+      }
+      const identity = url // identity = UserName
+        .split('eq')
+        .pop()
+        .trim(' '); // EXAMPLE URL: /api/UserLogins?$filter=UserName eq 'isaac.hardy@newspring.cc'
+      if (!identity) {
+        const response = new fetch.Response('');
+        response.status = 400;
+        return Promise.reject(response);
+      }
+      if (identity === `'isaac.hardy@newspring.cc'`)
+        return resolveWith([rockMocks.userLogins()]);
+
+      return resolveWith([]);
+    }
+
+    return Promise.reject();
+  });
+};
+
+export default fetch;
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/content-channel-item-association.js b/apollos-church-api/__mocks__/rock-api-mocks/content-channel-item-association.js
new file mode 100644
index 0000000..b59aadb
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/content-channel-item-association.js
@@ -0,0 +1,18 @@
+export default () => ({
+  ContentChannelItemId: 1,
+  ChildContentChannelItemId: 1,
+  Order: 0,
+  ChildContentChannelItem: null,
+  CreatedDateTime: null,
+  ModifiedDateTime: null,
+  CreatedByPersonAliasId: null,
+  ModifiedByPersonAliasId: null,
+  ModifiedAuditValuesAlreadyUpdated: false,
+  Attributes: null,
+  AttributeValues: null,
+  Id: 1,
+  Guid: 'some-really-long-guid-yo',
+  ForeignId: null,
+  ForeignGuid: null,
+  ForeignKey: null,
+});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/content-channel.js b/apollos-church-api/__mocks__/rock-api-mocks/content-channel.js
new file mode 100644
index 0000000..c3f88a3
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/content-channel.js
@@ -0,0 +1,27 @@
+export default () => ({
+  ContentChannelTypeId: 6,
+  Name: 'My super cool content channel',
+  Description: 'Some description',
+  IconCssClass: 'fa fa-star',
+  RequiresApproval: false,
+  ItemsManuallyOrdered: false,
+  ChildItemsManuallyOrdered: false,
+  EnableRss: false,
+  ChannelUrl: '',
+  ItemUrl: '',
+  TimeToLive: 0,
+  ContentControlType: 0,
+  RootImageDirectory: '',
+  IsIndexEnabled: false,
+  IsTaggingEnabled: false,
+  ItemTagCategoryId: null,
+  CreatedDateTime: null,
+  ModifiedDateTime: '2018-01-01T01:01:01.001',
+  CreatedByPersonAliasId: null,
+  ModifiedByPersonAliasId: 61,
+  Id: 'some-id',
+  Guid: 'some-sort-of-long-guid',
+  ForeignId: null,
+  ForeignGuid: null,
+  ForeignKey: null,
+});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/content-item.js b/apollos-church-api/__mocks__/rock-api-mocks/content-item.js
new file mode 100644
index 0000000..f42515b
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/content-item.js
@@ -0,0 +1,494 @@
+export default () => ({
+  ContentChannelId: 1,
+  ContentChannelTypeId: 1,
+  Title: 'SAMPLE: Easter',
+  Content:
+    '<p>\r\n\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sollicitudin condimentum aliquet. In est nulla, lacinia ac dictum et, laoreet vitae elit. Proin tempus tellus ligula, a consequat diam consectetur a. Phasellus luctus velit sed lorem mollis commodo. Nunc sit amet blandit velit. Donec tincidunt congue facilisis. Sed iaculis at neque non porttitor. Phasellus ultrices egestas erat feugiat pellentesque. Duis venenatis, dolor quis fringilla tempus, sem lorem euismod lectus, sed egestas felis magna at felis. Pellentesque ut rhoncus erat, a pulvinar purus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Ut sit amet consequat est. Maecenas et porta dui, non condimentum lectus.</p>\r\n<p>\r\n\tSuspendisse vel nibh odio. Pellentesque porta sapien ligula, in laoreet diam tempus sed. Morbi nunc erat, mattis eu pulvinar blandit, adipiscing quis magna. Ut quis dui lobortis velit suscipit consectetur. Nulla iaculis fermentum egestas. Aenean venenatis sagittis mauris, sed rhoncus purus accumsan ac. Suspendisse potenti. Sed sed tempor turpis. Duis sit amet nisi nec purus fringilla condimentum. Phasellus non lacus arcu. Donec scelerisque, erat sed tempor elementum, nulla risus scelerisque ante, ac imperdiet velit magna ut quam. Nam tristique orci auctor consequat laoreet. Quisque malesuada metus sed sodales eleifend. Aenean rhoncus, mi sit amet ullamcorper tincidunt, sem sem rutrum felis, in semper enim massa ut sem.</p>\r\n<p>\r\n\tVivamus diam urna, cursus in sapien in, porta gravida enim. Cras non fringilla arcu, tincidunt laoreet lacus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Aliquam volutpat felis quis augue faucibus ultrices. Morbi lobortis vestibulum sodales. Sed tincidunt urna vitae felis ultrices, pharetra placerat quam dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel adipiscing tellus. In vitae sodales diam. Aliquam pharetra orci a porta molestie. In et neque bibendum, viverra leo sit amet, auctor magna. Morbi posuere massa sed metus euismod, et adipiscing sem dictum. Cras eget elementum risus, non imperdiet ligula.</p>\r\n',
+  Priority: 100,
+  Status: 2,
+  ApprovedByPersonAliasId: 10,
+  ApprovedDateTime: '2013-08-01T00:00:00',
+  StartDateTime: '2013-08-01T00:00:00',
+  ExpireDateTime: '2020-08-02T00:00:00',
+  Permalink: null,
+  Order: 0,
+  ContentChannel: null,
+  ContentChannelType: null,
+  CreatedDateTime: null,
+  ModifiedDateTime: null,
+  CreatedByPersonAliasId: null,
+  ModifiedByPersonAliasId: null,
+  ModifiedAuditValuesAlreadyUpdated: false,
+  Attributes: {
+    SummaryText: {
+      IsSystem: false,
+      FieldTypeId: 21,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelTypeId',
+      EntityTypeQualifierValue: '1',
+      Key: 'SummaryText',
+      Name: 'Summary Text',
+      Description: 'Short description',
+      Order: 0,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {
+        allowhtml: {
+          Name: null,
+          Description: null,
+          Value: 'True',
+        },
+      },
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1265,
+      Guid: '35993d3b-57d3-4f41-88a5-a83ee380d2dd',
+    },
+    Image: {
+      IsSystem: false,
+      FieldTypeId: 10,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelTypeId',
+      EntityTypeQualifierValue: '1',
+      Key: 'Image',
+      Name: 'Image',
+      Description: '',
+      Order: 1,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {
+        binaryFileType: {
+          Name: null,
+          Description: null,
+          Value: '8DBF874C-F3C2-4848-8137-C963C431EB0B',
+        },
+      },
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1266,
+      Guid: 'ffdf621c-ecff-4199-ab90-d678c36dce38',
+    },
+    DetailImage: {
+      IsSystem: false,
+      FieldTypeId: 10,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelTypeId',
+      EntityTypeQualifierValue: '1',
+      Key: 'DetailImage',
+      Name: 'Detail Image',
+      Description: '',
+      Order: 2,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {
+        binaryFileType: {
+          Name: null,
+          Description: null,
+          Value: '8DBF874C-F3C2-4848-8137-C963C431EB0B',
+        },
+      },
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1267,
+      Guid: '43758fc4-906e-46cd-a6fb-8f21176c1cc5',
+    },
+    ImageByUrlTest: {
+      IsSystem: false,
+      FieldTypeId: 1,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelId',
+      EntityTypeQualifierValue: '5',
+      Key: 'ImageByUrlTest',
+      Name: 'Image By Url Test',
+      Description: '',
+      Order: 1001,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {},
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1923,
+      Guid: '9293638a-a176-d7a0-4916-b57e6cde94d2',
+    },
+    ImageBySchemalessUrlTest: {
+      IsSystem: false,
+      FieldTypeId: 10,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelId',
+      EntityTypeQualifierValue: '5',
+      Key: 'ImageBySchemalessUrlTest',
+      Name: 'Image By Schemaless Url Test',
+      Description: '',
+      Order: 1001,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {},
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1923,
+      Guid: '9293638a-a176-d7a0-4916-b57e6cde94d2',
+    },
+    ImageUnknownFormat: {
+      IsSystem: false,
+      FieldTypeId: 10,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelId',
+      EntityTypeQualifierValue: '5',
+      Key: 'ImageUnknownFormat',
+      Name: 'Image Of Unknown format',
+      Description: '',
+      Order: 1001,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {},
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1923,
+      Guid: '9293638a-a176-d7a0-4916-b57e6cde94d2',
+    },
+    Campuses: {
+      IsSystem: false,
+      FieldTypeId: 26,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelTypeId',
+      EntityTypeQualifierValue: '1',
+      Key: 'Campuses',
+      Name: 'Campuses',
+      Description: 'The campus or campuses that the item is associated with',
+      Order: 3,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {},
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1268,
+      Guid: 'fd8df8ac-0af2-4738-8dda-3b1030c3e0ce',
+    },
+    PrimaryAudience: {
+      IsSystem: false,
+      FieldTypeId: 16,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelTypeId',
+      EntityTypeQualifierValue: '1',
+      Key: 'PrimaryAudience',
+      Name: 'Primary Audience',
+      Description: 'The primary audience that the item is targeted towards.',
+      Order: 4,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {
+        allowmultiple: {
+          Name: null,
+          Description: null,
+          Value: 'False',
+        },
+        definedtype: {
+          Name: null,
+          Description: null,
+          Value: '16',
+        },
+      },
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1269,
+      Guid: 'ca97aadd-9795-434a-b924-250cc15cd7a5',
+    },
+    SecondaryAudiences: {
+      IsSystem: false,
+      FieldTypeId: 16,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelTypeId',
+      EntityTypeQualifierValue: '1',
+      Key: 'SecondaryAudiences',
+      Name: 'Secondary Audiences',
+      Description: 'Any secondary audiences that the item is targeted towards.',
+      Order: 5,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {
+        allowmultiple: {
+          Name: null,
+          Description: null,
+          Value: 'True',
+        },
+        definedtype: {
+          Name: null,
+          Description: null,
+          Value: '16',
+        },
+      },
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1270,
+      Guid: '95e68a40-c987-4b53-8d9a-0c5605284e4c',
+    },
+    AudioLink: {
+      IsSystem: false,
+      FieldTypeId: 1,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelId',
+      EntityTypeQualifierValue: '5',
+      Key: 'AudioLink',
+      Name: 'Audio Link',
+      Description: '',
+      Order: 1000,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {},
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1925,
+      Guid: 'b9ed0214-752e-f289-43b6-9cda40c1aba9',
+    },
+    Speaker: {
+      IsSystem: false,
+      FieldTypeId: 1,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelId',
+      EntityTypeQualifierValue: '5',
+      Key: 'Speaker',
+      Name: 'Speaker',
+      Description: '',
+      Order: 1001,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {},
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1923,
+      Guid: '9293638a-a176-d7a0-4916-b57e6cde94d2',
+    },
+    VideoLink: {
+      IsSystem: false,
+      FieldTypeId: 1,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelId',
+      EntityTypeQualifierValue: '5',
+      Key: 'VideoLink',
+      Name: 'Video Link',
+      Description: '',
+      Order: 1002,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {},
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1924,
+      Guid: 'dd8b4442-ca91-2780-4ffe-c3d97e95dfa4',
+    },
+    VideoEmbed: {
+      IsSystem: false,
+      FieldTypeId: 51,
+      EntityTypeId: 208,
+      EntityTypeQualifierColumn: 'ContentChannelId',
+      EntityTypeQualifierValue: '5',
+      Key: 'VideoEmbed',
+      Name: 'VideoEmbed',
+      Description: '',
+      Order: 1003,
+      IsGridColumn: false,
+      DefaultValue: '',
+      IsMultiValue: false,
+      IsRequired: false,
+      AllowSearch: false,
+      IsIndexEnabled: false,
+      IsAnalytic: false,
+      IsAnalyticHistory: false,
+      QualifierValues: {
+        editorHeight: {
+          Name: null,
+          Description: null,
+          Value: '200',
+        },
+        editorMode: {
+          Name: null,
+          Description: null,
+          Value: '2',
+        },
+        editorTheme: {
+          Name: null,
+          Description: null,
+          Value: '0',
+        },
+      },
+      CategoryIds: [],
+      TypeId: 49,
+      TypeName: 'Rock.Model.Attribute',
+      AttributeValues: {},
+      Id: 1926,
+      Guid: '0a7c6ae7-7236-029c-4487-4413921b21ee',
+    },
+  },
+  AttributeValues: {
+    SummaryText: {
+      AttributeId: 1265,
+      EntityId: 1,
+      Value:
+        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sollicitudin condimentum aliquet. In est nulla, lacinia ac dictum et, laoreet vitae elit. Proin tempus tellus ligula, a consequat diam consectetur a.',
+    },
+    Image: {
+      AttributeId: 1266,
+      EntityId: 1,
+      Value: '0241ED2F-B527-424C-917C-1142A398711F',
+    },
+    DetailImage: {
+      AttributeId: 1267,
+      EntityId: 1,
+      Value: '3DA90982-118A-4BFE-9A32-58D9F610090A',
+    },
+    ImageByUrlTest: {
+      AttributeId: 1267,
+      EntityId: 1,
+      Value: 'https://some-domain.com/some/path/to/image.jpg',
+    },
+    ImageBySchemalessUrlTest: {
+      AttributeId: 1267,
+      EntityId: 1,
+      Value: '//some-domain.com/some/path/to/image.jpg',
+    },
+    ImageUnknownFormat: {
+      AttributeId: 1267,
+      EntityId: 1,
+      Value: 'ftp://some-domain.com/some/path/to/image.jpg',
+    },
+    Campuses: {
+      AttributeId: 1268,
+      EntityId: null,
+      Value: '',
+    },
+    PrimaryAudience: {
+      AttributeId: 1269,
+      EntityId: 1,
+      Value: 'B364CDEE-F000-4965-AE67-0C80DDA365DC',
+    },
+    SecondaryAudiences: {
+      AttributeId: 1270,
+      EntityId: null,
+      Value: '',
+    },
+    AudioLink: {
+      AttributeId: 1925,
+      EntityId: 33,
+      Value:
+        'https://rockrms.blob.core.windows.net/sampledata/podcasting/sample.mp3',
+    },
+    Speaker: {
+      AttributeId: 1923,
+      EntityId: 33,
+      Value: 'Pete Foster',
+    },
+    VideoLink: {
+      AttributeId: 1924,
+      EntityId: 33,
+      Value:
+        'https://rockrms.blob.core.windows.net/sampledata/podcasting/money-wise.mp4',
+    },
+    VideoEmbed: {
+      AttributeId: 1926,
+      EntityId: 33,
+      Value:
+        '<script src="//fast.wistia.com/embed/medias/kqykx8xbzq.jsonp" async></script><script src="//fast.wistia.com/assets/external/E-v1.js" async></script><div class="wistia_responsive_padding" style="padding:56.25% 0 0 0;position:relative;"><div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;"><div class="wistia_embed wistia_async_kqykx8xbzq videoFoam=true" style="height:100%;width:100%">&nbsp;</div></div></div>',
+    },
+  },
+  Id: 1,
+  Guid: '3b8e1859-e42f-4f01-9007-d3e04429f17d',
+  ForeignId: null,
+  ForeignGuid: null,
+  ForeignKey: null,
+});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/families.js b/apollos-church-api/__mocks__/rock-api-mocks/families.js
new file mode 100644
index 0000000..e907e75
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/families.js
@@ -0,0 +1,117 @@
+export default () => [
+  {
+    Campus: {
+      IsSystem: false,
+      Name: 'Main Campus',
+      Description: null,
+      IsActive: true,
+      ShortCode: 'MAIN',
+      Url: null,
+      LocationId: 2,
+      PhoneNumber: null,
+      LeaderPersonAliasId: null,
+      ServiceTimes: null,
+      Order: 0,
+      TimeZoneId: null,
+      CreatedDateTime: null,
+      ModifiedDateTime: null,
+      CreatedByPersonAliasId: null,
+      ModifiedByPersonAliasId: null,
+      Id: 1,
+      Guid: '76882ae3-1ce8-42a6-a2b6-8c0b29cf8cf8',
+      ForeignId: null,
+      ForeignGuid: null,
+      ForeignKey: null,
+    },
+    GroupLocations: [
+      {
+        Location: {
+          ParentLocationId: null,
+          Name: null,
+          IsActive: true,
+          LocationTypeValueId: null,
+          Street1: '6414 S Green St',
+          Street2: null,
+          City: 'Chicago',
+          County: 'Cook',
+          State: 'IL',
+          Country: 'US',
+          PostalCode: '60621-1924',
+          Barcode: '606211924144',
+          AssessorParcelId: null,
+          StandardizeAttemptedDateTime: '2018-10-02T11:11:29.873',
+          StandardizeAttemptedServiceType: 'Smarty Streets',
+          StandardizeAttemptedResult:
+            'RecordType:S; DPV MatchCode:Y; Precision:Zip9',
+          StandardizedDateTime: '2018-10-02T11:11:29.873',
+          GeocodeAttemptedDateTime: '2018-10-02T11:11:29.873',
+          GeocodeAttemptedServiceType: 'Smarty Streets',
+          GeocodeAttemptedResult:
+            'RecordType:S; DPV MatchCode:Y; Precision:Zip9',
+          GeocodedDateTime: '2018-10-02T11:11:29.873',
+          IsGeoPointLocked: null,
+          PrinterDeviceId: null,
+          ImageId: null,
+          SoftRoomThreshold: null,
+          FirmRoomThreshold: null,
+          Latitude: 41.77745,
+          Longitude: -87.64603,
+          Distance: 0,
+          CreatedDateTime: '2018-10-02T11:11:29.953',
+          ModifiedDateTime: '2018-10-02T11:11:29.953',
+          CreatedByPersonAliasId: 106,
+          ModifiedByPersonAliasId: 106,
+          Id: 45,
+          Guid: '571c6044-695e-45c3-bf53-b9728c270298',
+          ForeignId: null,
+          ForeignGuid: null,
+          ForeignKey: null,
+        },
+        GroupId: 373,
+        LocationId: 45,
+        GroupLocationTypeValueId: 19,
+        IsMailingLocation: true,
+        IsMappedLocation: true,
+        GroupMemberPersonAliasId: null,
+        Order: 0,
+        CreatedDateTime: '2018-10-02T11:16:02.487',
+        ModifiedDateTime: '2018-10-02T11:16:02.487',
+        CreatedByPersonAliasId: 106,
+        ModifiedByPersonAliasId: 106,
+        Id: 58,
+        Guid: '91312c3b-f211-4e11-9b5f-321080d22c30',
+        ForeignId: null,
+        ForeignGuid: null,
+        ForeignKey: null,
+      },
+    ],
+    IsSystem: false,
+    ParentGroupId: null,
+    GroupTypeId: 10,
+    CampusId: 1,
+    ScheduleId: null,
+    Name: 'Family',
+    Description: null,
+    IsSecurityRole: false,
+    IsActive: true,
+    Order: 0,
+    AllowGuests: null,
+    WelcomeSystemEmailId: null,
+    ExitSystemEmailId: null,
+    SyncDataViewId: null,
+    AddUserAccountsDuringSync: null,
+    MustMeetRequirementsToAddMember: null,
+    IsPublic: true,
+    GroupCapacity: null,
+    RequiredSignatureDocumentTemplateId: null,
+    CreatedDateTime: '2018-08-09T13:04:43.097',
+    ModifiedDateTime: '2018-10-02T11:15:58.4',
+    CreatedByPersonAliasId: 64,
+    ModifiedByPersonAliasId: 106,
+    Id: 373,
+    Guid: '23534528-6236-4038-980c-39c7c332ead2',
+    ForeignId: null,
+    ForeignGuid: null,
+    ForeignKey: null,
+  },
+];
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/index.js b/apollos-church-api/__mocks__/rock-api-mocks/index.js
new file mode 100644
index 0000000..0e57c13
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/index.js
@@ -0,0 +1,10 @@
+export {
+  default as contentChannelItemAssociation,
+} from './content-channel-item-association';
+export { default as contentChannel } from './content-channel';
+export { default as contentItem } from './content-item';
+export { default as people } from './people';
+export { default as userLogins } from './user-logins';
+export { default as session } from './session';
+export { default as interaction } from './interaction';
+export { default as families } from './families';
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/interaction.js b/apollos-church-api/__mocks__/rock-api-mocks/interaction.js
new file mode 100644
index 0000000..fb31c98
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/interaction.js
@@ -0,0 +1,8 @@
+export default () => ({
+  Id: 456,
+  RelatedEntityId: 1,
+  Operation: 'Like',
+  InteractionDateTime: new Date(
+    'Tue Aug 21 2018 09:55:01 GMT-0500 (Central Daylight Time)'
+  ).toJSON(),
+});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/people.js b/apollos-church-api/__mocks__/rock-api-mocks/people.js
new file mode 100644
index 0000000..e5f2474
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/people.js
@@ -0,0 +1,11 @@
+export default () => ({
+  Id: 51,
+  FirstName: 'Isaac',
+  LastName: 'Hardy',
+  NickName: 'Isaac',
+  Email: 'isaac.hardy@newspring.cc',
+  Photo: {
+    Url:
+      'https://apollosrock.newspring.cc:443/GetImage.ashx?guid=60fd5f35-3167-4c26-9a30-d44937287b87',
+  },
+});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/session.js b/apollos-church-api/__mocks__/rock-api-mocks/session.js
new file mode 100644
index 0000000..8ffdfb4
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/session.js
@@ -0,0 +1,3 @@
+export default () => ({
+  Id: 123,
+});
diff --git a/apollos-church-api/__mocks__/rock-api-mocks/user-logins.js b/apollos-church-api/__mocks__/rock-api-mocks/user-logins.js
new file mode 100644
index 0000000..9bc8c10
--- /dev/null
+++ b/apollos-church-api/__mocks__/rock-api-mocks/user-logins.js
@@ -0,0 +1,5 @@
+export default () => ({
+  UserName: 'isaac.hardy@newspring.cc',
+  PersonId: 35,
+  Id: 21,
+});
diff --git a/apollos-church-api/__mocks__/universal-analytics.js b/apollos-church-api/__mocks__/universal-analytics.js
new file mode 100644
index 0000000..c3e0c99
--- /dev/null
+++ b/apollos-church-api/__mocks__/universal-analytics.js
@@ -0,0 +1,15 @@
+export const mockUA = jest.fn();
+export const mockEvent = jest.fn();
+export const mockSend = jest.fn();
+
+function event(...args) {
+  mockEvent(args);
+  return { send: mockSend };
+}
+
+export default function(...args) {
+  mockUA(args);
+  return {
+    event,
+  };
+}
diff --git a/apollos-church-api/config.yml b/apollos-church-api/config.yml
deleted file mode 100644
index 0e1a2dc..0000000
--- a/apollos-church-api/config.yml
+++ /dev/null
@@ -1,189 +0,0 @@
-# This file, in conjuction with your .env file,
-# should be used to configure the apollos server.
-
-# Any values you wish to keep secret should be placed in `.env`
-# You can access those values (and any other values in your environment)
-# using the ${VARIABLE_NAME} syntax
-
-# This file should be checked into version control.
-# `.env` should NOT be checked into version control.
-APP:
-  # This variable is used for generating deep links.
-  # It should match whatver is in your Info.plist `CFBundleURLTypes`
-  DEEP_LINK_HOST: apolloschurchapp
-ROCK:
-  API_URL: https://apollosrock.newspring.cc/api
-  API_TOKEN: ${ROCK_TOKEN}
-  IMAGE_URL: https://apollosrock.newspring.cc/GetImage.ashx
-ANALYTICS:
-  # Filling out these fields will automatically enable analytics tracking
-  # on the accompanying service
-  SEGMENT_KEY:
-  GA_ID:
-BIBLE_API:
-  KEY: ${BIBLE_API_KEY}
-  BIBLE_ID: "9879dbb7cfe39e4d-01"
-CLOUDINARY:
-  # Cloudinary is used to improve image loading
-  # value should look something like
-  # cloudinary://123123123:adkfnla_adASDv_adAS@test
-  URL: ${CLOUDINARY_URL}
-
-# This key holds various properties that allow our GraphQL server to map to your Rock Instance
-ROCK_MAPPINGS:
-
-  INTERACTIONS:
-    # Name of the InteractionChannel that will be created
-    CHANNEL_NAME: Apollos App
-    # Name of the InteractionComponent that will be created for Content Items
-    COMPONENT_NAME: Apollos Content Item
-    # 512 is "Mobile App"
-    CHANNEL_MEDIUM_TYPE_ID: 512
-
-  CONTENT_ITEM_TYPES:
-    - ContentItem
-    - UniversalContentItem
-    - DevotionalContentItem
-    - MediaContentItem
-  # Apollos will pull these content channels and expose them in the app on the discover screen.
-  DISCOVER_CONTENT_CHANNEL_IDS:
-    - 2
-    - 3
-    - 4
-    - 6
-    - 8
-  # Apollos will pull content items from these channels and expose them on the user feed
-  # However, it will not expose the channel itself.
-  FEED_CONTENT_CHANNEL_IDS:
-    - 1
-    - 2
-    - 3
-    - 4
-    - 5
-    - 6
-    - 8
-
-  # The apollos app will show scripture for specific ContentChannelTypeIds, specified here.
-  # As of right now, it will pull from the 'scriptures' field.
-  # Ignore if this doesn't apply to you.
-  DEVOTIONAL_TYPE_IDS:
-    - 1
-
-  # The apollos app will use the content channel types as "Content Series" types. A Content Series
-  # is any content item that represents a series of content - Sermon Series, Devotional Series, Podcast Series etc
-  SERIES_CONTENT_CHANNEL_TYPE_IDS:
-    - 6
-    - 7
-
-# Default mapping of field types -> ids. There's probably no reason to edit this.
-ROCK_CONSTANTS:
-  TEXT: 1
-  MULTI_SELECT: 2
-  BOOLEAN: 3
-  COLOR: 4
-  SINGLE_SELECT: 6
-  INTEGER: 7
-  PAGE_REFERENCE: 8
-  IMAGE: 10
-  DATE: 11
-  DECIMAL: 14
-  DEFINED_TYPE: 15
-  DEFINED_VALUE: 16
-  PERSON: 18
-  HTML: 20
-  MEMO: 21
-  GROUP_TYPES: 22
-  GROUP: 23
-  CAMPUSES: 26
-  ENTITY_TYPE: 29
-  CAMPUS: 30
-  EMAIL_TEMPLATE: 31
-  FILE: 32
-  GROUP_TYPE: 33
-  KEY_VALUE_LIST: 34
-  BINARY_FILE_TYPE: 35
-  WORKFLOW_TYPE: 36
-  BINARY_FILE: 37
-  FINANCIAL_ACCOUNT: 38
-  FINANCIAL_ACCOUNTS: 39
-  COMPONENT: 40
-  COMPONENTS: 41
-  CATEGORIES: 42
-  GROUP_ROLE: 43
-  CATEGORY: 44
-  LOCATION: 45
-  DATE_RANGE: 46
-  DECIMAL_RANGE: 47
-  INTEGER_RANGE: 48
-  TIME: 49
-  GROUP_LOCATION_TYPE: 50
-  CODE_EDITOR: 51
-  PERSON_BADGES: 52
-  SITE: 53
-  COMMUNICATION_TEMPLATE: 54
-  DAY_OF_WEEK: 55
-  DAYS_OF_WEEK: 56
-  REMOTE_AUTHS: 57
-  COMPARISON: 58
-  METRIC_ENTITY: 59
-  WORKFLOW_ACTIVITY: 60
-  WORKFLOW_ATTRIBUTE: 61
-  METRICS: 62
-  ENTITY: 63
-  METRIC_CATEGORIES: 64
-  WORKFLOW_TEXT_OR_ATTRIBUTE: 65
-  SLIDING_DATE_RANGE: 66
-  GROUP_TYPE_GROUP: 67
-  SECURITY_ROLE: 68
-  VALUE_LIST: 69
-  CURRENCY: 70
-  EMAIL: 71
-  URL_LINK: 72
-  WORKFLOW_TYPES: 73
-  ATTRIBUTE: 74
-  SCHEDULES: 75
-  CONTENT_CHANNEL: 76
-  AUDIO_FILE: 77
-  AUDIO_URL: 78
-  VIDEO_FILE: 79
-  VIDEO_URL: 80
-  ENCRYPTED_TEXT: 81
-  FILTER_DATE: 82
-  DATE_TIME: 83
-  DEFINED_VALUE_RANGE: 84
-  RATING: 85
-  SYSTEM_EMAIL: 86
-  FINANCIAL_GATEWAY: 87
-  GROUP_AND_ROLE: 88
-  NOTE_TYPE: 89
-  NOTE_TYPES: 90
-  EVENT_CALENDAR: 91
-  EVENT_ITEM: 92
-  CONNECTION_ACTIVITY_TYPE: 93
-  CONNECTION_OPPORTUNITY: 94
-  CONNECTION_REQUEST: 95
-  CONNECTION_STATE: 96
-  CONNECTION_STATUS: 97
-  CONNECTION_TYPE: 98
-  CONNECTION_TYPES: 99
-  MERGE_TEMPLATE: 100
-  RANGE_SLIDER: 101
-  BINARY_FILE_TYPES: 102
-  MARKDOWN: 103
-  DATA_VIEW: 104
-  PHONE_NUMBER: 105
-  SCHEDULE: 106
-  LAVA_COMMANDS: 107
-  ADDRESS: 108
-  BENEVOLENCE_REQUEST: 109
-  CONTENT_CHANNEL_TYPES: 110
-  WORKFLOW: 111
-  SSN: 112
-  MATRIX: 113
-  LAVA: 114
-  DATA_VIEWS: 115
-  COMMUNICATION_PREFERENCE: 116
-  INTERACTION_CHANNEL: 117
-  GROUP_MEMBER: 118
-  TIME_ZONE: 119
-  LABEL: 120
\ No newline at end of file
diff --git a/apollos-church-api/package.json b/apollos-church-api/package.json
index 272b8c9..d3eb5b0 100644
--- a/apollos-church-api/package.json
+++ b/apollos-church-api/package.json
@@ -1,15 +1,15 @@
 {
   "name": "apollos-church-api",
-  "version": "0.8.0-alpha.4",
+  "version": "0.6.0",
   "private": true,
-  "main": "lib/index.js",
+  "main": "src/index.js",
   "scripts": {
     "start": "if test \"$NOW_ENV\" = \"true\" ; then yarn start:now ; else yarn start:dev ; fi",
-    "start:dev": "nodemon ./src/index.js --exec babel-node --delay 2",
+    "start:dev": "nodemon ./src/index.js --exec babel-node",
     "start:now": "babel-node ./src/index.js",
     "start:prod": "NODE_ENV=production node ./lib/index.js",
     "build": "NODE_ENV=production rm -rf ./lib && mkdir -p lib && babel ./src -d ./lib",
-    "test": "echo \"No tests in apollos-church-api, all tested code is located in @apollosproject npm modules\"",
+    "test": "jest",
     "test:watch": "jest --maxWorkers=2 --watch",
     "lint": "eslint ./src --ext .js",
     "fixlint": "eslint ./src --ext .js --fix",
@@ -22,47 +22,40 @@
   "jest": {
     "collectCoverage": true,
     "testMatch": [
-      "<rootDir>/src/**/__tests__/**/*.{js,jsx,mjs}",
-      "<rootDir>/src/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
+      "<rootDir>/**/__tests__/**/*.{js,jsx,mjs}",
+      "<rootDir>/**/?(*.)(spec|test|tests).{js,jsx,mjs}"
     ],
     "testEnvironment": "node"
   },
   "dependencies": {
-    "@apollosproject/config": "^0.8.0-alpha.4",
-    "@apollosproject/data-connector-analytics": "^0.8.0-alpha.4",
-    "@apollosproject/data-connector-bible": "^0.8.0-alpha.4",
-    "@apollosproject/data-connector-church-online": "^0.8.0-alpha.4",
-    "@apollosproject/data-connector-cloudinary": "^0.8.0-alpha.4",
-    "@apollosproject/data-connector-people": "^0.8.0-alpha.4",
-    "@apollosproject/data-connector-rock-actions": "^0.8.0-alpha.4",
-    "@apollosproject/data-connector-rock-auth": "^0.8.0-alpha.4",
-    "@apollosproject/data-connector-rock-content": "^0.8.0-alpha.4",
-    "@apollosproject/rock-apollo-data-source": "^0.8.0-alpha.4",
-    "@apollosproject/server-core": "^0.8.0-alpha.4",
+    "analytics-node": "^3.3.0",
     "apollo-datasource-rest": "0.1.1",
     "apollo-server": "^2.0.5",
     "casual": "1.5.19",
     "color": "3.0.0",
+    "crypto": "1.0.1",
     "dataloader": "1.4.0",
     "dotenv": "6.0.0",
+    "form-data": "^2.3.2",
     "graphql": "0.13.2",
     "isomorphic-fetch": "2.2.1",
+    "jsonwebtoken": "8.3.0",
     "lodash": "4.17.10",
     "prettier": "1.12.1",
     "randomcolor": "0.5.3",
     "sanitize-html": "1.18.2",
+    "universal-analytics": "^0.4.17",
     "url-join": "4.0.0",
     "with-query": "1.0.2"
   },
   "devDependencies": {
-    "@apollosproject/apollo-server-env-mock": "^0.8.0-alpha.4",
-    "@apollosproject/babel-preset-apollos": "^0.8.0-alpha.4",
-    "@babel/cli": "7.1.5",
-    "@babel/core": "7.1.6",
+    "@babel/cli": "7.0.0-beta.47",
+    "@babel/core": "7.0.0-beta.47",
+    "babel-preset-apollos": "link:../babel-preset-apollos",
     "codecov": "3.0.2",
     "coveralls": "3.0.1",
-    "jest": "23.6.0",
+    "jest": "23.0.0",
     "jest-fetch-mock": "1.6.2",
-    "nodemon": "1.18.7"
+    "nodemon": "1.17.5"
   }
 }
diff --git a/apollos-church-api/src/config.js b/apollos-church-api/src/config.js
deleted file mode 100644
index 59a4853..0000000
--- a/apollos-church-api/src/config.js
+++ /dev/null
@@ -1,7 +0,0 @@
-import path from 'path';
-import dotenv from 'dotenv/config'; // eslint-disable-line
-import ApollosConfig from '@apollosproject/config';
-
-ApollosConfig.loadYaml({
-  configPath: path.join(__dirname, '..', 'config.yml'),
-});
diff --git a/apollos-church-api/src/connectors/rock/RequestBuilder.js b/apollos-church-api/src/connectors/rock/RequestBuilder.js
new file mode 100644
index 0000000..6c60a65
--- /dev/null
+++ b/apollos-church-api/src/connectors/rock/RequestBuilder.js
@@ -0,0 +1,123 @@
+import withQuery from 'with-query';
+
+// Simple request builder for querying the Rock API.
+// Would probably work against most OData APIs, but built to just
+// tackle the specific needs of Apollos on top of Rock.
+export default class RockRequestBuilder {
+  constructor({ connector, resource, defaultOptions = null }) {
+    this.connector = connector;
+    this.resource = resource;
+    if (defaultOptions) {
+      this.query = defaultOptions;
+    }
+  }
+
+  query = {};
+
+  transforms = [];
+
+  options = {};
+
+  get path() {
+    let path = [this.resource];
+    if (this.resourceId) path.push(this.resourceId);
+    path = path.join('/');
+    path = withQuery(path, this.query);
+    return path;
+  }
+
+  /**
+   * Sends a GET request to the server, resolves with results
+   * @returns promise
+   */
+  get = ({ options = {}, body = {} } = {}) =>
+    this.connector
+      .get(this.path, body, { ...options, ...this.options })
+      .then((results) => {
+        if (this.transforms.length)
+          return this.transforms.reduce(
+            (current, transformer) => transformer(current),
+            results
+          );
+        return results;
+      });
+
+  /**
+   * Find a single resource by ID
+   */
+  find = (id) => {
+    this.resourceId = id;
+    return this;
+  };
+
+  /**
+   * Filter resources by an odata string
+   */
+  filter = (filter) => {
+    const key = '$filter';
+    if (this.query[key]) {
+      this.query[key] = `(${this.query[key]}) or (${filter})`;
+    } else {
+      this.query[key] = filter;
+    }
+    return this;
+  };
+
+  cache = ({ ttl }) => {
+    this.options.ttl = ttl;
+    return this;
+  };
+
+  /**
+   * Expands resources inline
+   */
+  expand = (expand) => {
+    let { $expand } = this.query;
+    if (!$expand) {
+      $expand = [];
+    } else {
+      $expand = $expand.split(',');
+    }
+    $expand.push(expand);
+    this.query.$expand = $expand.join(',');
+    return this;
+  };
+
+  /**
+   * Order resources by a given attribute and direction
+   * @param {string} name The name of the attribute to order by
+   * @param {string} direction The direction to order results by. Defaults to 'asc'
+   */
+  orderBy = (name, direction = 'asc') => {
+    this.query.$orderby = `${name} ${direction}`;
+    return this;
+  };
+
+  /**
+   * Only return the top N results. Used for pagination
+   * @param {number} top
+   */
+  top = (top) => {
+    this.query.$top = top;
+    return this;
+  };
+
+  /**
+   * Skip the first N results. Used for pagination
+   * @param {number} skip
+   */
+  skip = (skip) => {
+    this.query.$skip = skip;
+    return this;
+  };
+
+  /**
+   * Transform the shape of the results.
+   * This is ran _after_ data is requested and not
+   * affected by other methods that are chained to the request
+   */
+  transform = (func) => {
+    this.transforms.push(func);
+    return this;
+  };
+}
diff --git a/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js b/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js
new file mode 100644
index 0000000..876db73
--- /dev/null
+++ b/apollos-church-api/src/connectors/rock/__tests__/DataSource.tests.js
@@ -0,0 +1,53 @@
+import { createCursor } from '../../../utils/cursor';
+import RestDataSource from '../data-source';
+import RequestBuilder from '../RequestBuilder';
+
+describe('RestDataSource', () => {
+  it('constructs', () => {
+    expect(new RestDataSource()).toBeTruthy();
+  });
+
+  describe('the paginate method', () => {
+    let get;
+    let dataSource;
+    beforeEach(() => {
+      get = jest.fn();
+      get.mockReturnValue(new Promise((resolve) => resolve([1, 2, 3])));
+      dataSource = new RestDataSource();
+      dataSource.request = (resource) =>
+        new RequestBuilder({
+          resource,
+          connector: { get },
+        });
+    });
+
+    it('paginates a cursor', () => {
+      const cursor = dataSource.request('TestResource');
+      const result = dataSource.paginate({ cursor });
+      expect(result).toBeTruthy();
+      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=20&%24skip=0');
+    });
+
+    it('skips pages', () => {
+      const cursor = dataSource.request('TestResource');
+      const after = createCursor({ position: 25 });
+      const result = dataSource.paginate({ cursor, args: { after } });
+      expect(result).toBeTruthy();
+      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=20&%24skip=26');
+    });
+
+    it('throws on an invalid `after` cursor', () => {
+      const cursor = dataSource.request('TestResource');
+      const after = createCursor({ position: 25 });
+      const result = dataSource.paginate({ cursor, args: { after } });
+      expect(result).rejects.toThrow();
+    });
+
+    it('sets page size', () => {
+      const cursor = dataSource.request('TestResource');
+      const result = dataSource.paginate({ cursor, args: { first: 2 } });
+      expect(result).toBeTruthy();
+      expect(get.mock.calls[0][0]).toBe('TestResource?%24top=2&%24skip=0');
+    });
+  });
+});
diff --git a/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js b/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js
new file mode 100644
index 0000000..56dd747
--- /dev/null
+++ b/apollos-church-api/src/connectors/rock/__tests__/RequestBuilder.tests.js
@@ -0,0 +1,104 @@
+import RequestBuilder from '../RequestBuilder';
+
+describe('RequestBuilder', () => {
+  let request;
+  let connector;
+  let get;
+
+  beforeEach(() => {
+    get = jest.fn((...args) => new Promise((resolve) => resolve(args)));
+    connector = { get };
+    request = new RequestBuilder({
+      connector,
+      resource: 'SomeResource',
+    });
+  });
+
+  it('constructs', () => {
+    expect(request).toBeTruthy();
+  });
+
+  it('gets requests', () => {
+    expect(request.get()).resolves.toMatchSnapshot();
+  });
+
+  it('finds by id', () => {
+    expect(request.find(1).get()).resolves.toMatchSnapshot();
+  });
+
+  it('filters', () => {
+    expect(
+      request.filter('Something eq SomethingElse').get()
+    ).resolves.toMatchSnapshot();
+  });
+
+  it('chains multiple filters', () => {
+    expect(
+      request
+        .filter('A eq Ab')
+        .filter('B eq Bc')
+        .get()
+    ).resolves.toMatchSnapshot();
+  });
+
+  it('expands', () => {
+    expect(request.expand('Puppies').get()).resolves.toMatchSnapshot();
+  });
+
+  it('chains multiple expands', () => {
+    expect(
+      request
+        .expand('Puppies')
+        .expand('Cats')
+        .get()
+    ).resolves.toMatchSnapshot();
+  });
+
+  it('chains mixed-format expands', () => {
+    expect(
+      request
+        .expand('Dogs/Puppies')
+        .expand('Cats,Kittens')
+        .get()
+    ).resolves.toMatchSnapshot();
+  });
+
+  it('allows for pagination', () => {
+    expect(
+      request
+        .top(2)
+        .skip(5)
+        .get()
+    ).resolves.toMatchSnapshot();
+  });
+
+  it('caches', () => {
+    expect(request.cache({ ttl: 20 }).get()).resolves.toMatchSnapshot();
+  });
+
+  it('orders', () => {
+    expect(request.orderBy('MyField').get()).resolves.toMatchSnapshot();
+  });
+
+  it('orders in custom order', () => {
+    expect(request.orderBy('MyField', 'desc').get()).resolves.toMatchSnapshot();
+  });
+
+  it('transforms result shapes', () => {
+    get = jest.fn(() => new Promise((resolve) => resolve({ a: 'yo' })));
+    connector = { get };
+    request = new RequestBuilder({
+      connector,
+      resource: 'SomeResource',
+    });
+
+    expect(
+      request
+        .transform((input) => {
+          expect(input).toMatchSnapshot();
+          return { b: 'neigh' };
+        })
+        .get()
+    ).resolves.toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/connectors/rock/__tests__/rock-constants.tests.js b/apollos-church-api/src/connectors/rock/__tests__/rock-constants.tests.js
new file mode 100644
index 0000000..324301c
--- /dev/null
+++ b/apollos-church-api/src/connectors/rock/__tests__/rock-constants.tests.js
@@ -0,0 +1,68 @@
+import { fetch } from 'apollo-server-env';
+import { buildGetMock } from '../../../utils/testUtils';
+
+import RockConstants from '../rock-constants';
+
+describe('RockConstants', () => {
+  beforeEach(() => {
+    fetch.resetMocks();
+  });
+  it("creates a Channel if it doesn't exist", async () => {
+    const dataSource = new RockConstants();
+    dataSource.get = buildGetMock([[], { Id: 1 }], dataSource);
+    dataSource.post = buildGetMock('1', dataSource);
+    const result = await dataSource.interactionChannel();
+    expect(result).toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+    expect(dataSource.post.mock.calls).toMatchSnapshot();
+  });
+  it('finds the Channel if it exists', async () => {
+    const dataSource = new RockConstants();
+    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
+    dataSource.post = jest.fn();
+    const result = await dataSource.interactionChannel();
+    expect(result).toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+    expect(dataSource.post.mock.calls.length).toBe(0);
+  });
+  it("creates a Component if it doesn't exist", async () => {
+    const dataSource = new RockConstants();
+    dataSource.get = buildGetMock([[], { Id: 1 }], dataSource);
+    dataSource.post = buildGetMock('1', dataSource);
+    const result = await dataSource.interactionComponent();
+    expect(result).toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+    expect(dataSource.post.mock.calls).toMatchSnapshot();
+  });
+  it('finds the Component if it exists', async () => {
+    const dataSource = new RockConstants();
+    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
+    dataSource.post = jest.fn();
+    const result = await dataSource.interactionComponent();
+    expect(result).toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+    expect(dataSource.post.mock.calls.length).toBe(0);
+  });
+  it('finds a ContentItem model ID', async () => {
+    const dataSource = new RockConstants();
+    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
+    const result = await dataSource.modelTypeId('ContentItem');
+    expect(result).toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+  it('finds a UniversalContentItem model ID', async () => {
+    const dataSource = new RockConstants();
+    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
+    const result = await dataSource.modelTypeId('UniversalContentItem');
+    expect(result).toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+  it('Throws when finding an unknown model ', () => {
+    const dataSource = new RockConstants();
+    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
+    const prom = dataSource.modelTypeId('IDontExist');
+    expect(prom).rejects.toEqual(
+      new Error('IDontExist has not been mapped into a Rock type!')
+    );
+  });
+});
diff --git a/apollos-church-api/src/connectors/rock/constants.js b/apollos-church-api/src/connectors/rock/constants.js
new file mode 100644
index 0000000..eeb9bae
--- /dev/null
+++ b/apollos-church-api/src/connectors/rock/constants.js
@@ -0,0 +1,121 @@
+import url from 'url';
+
+export const {
+  ROCK_API = 'https://apollosrock.newspring.cc/api',
+  ROCK_TOKEN = 'some-rock-token',
+} = process.env;
+
+export const GET_IMAGE = url.resolve(ROCK_API, 'GetImage.ashx');
+
+export const FIELD_TYPES = {
+  TEXT: 1,
+  MULTI_SELECT: 2,
+  BOOLEAN: 3,
+  COLOR: 4,
+  SINGLE_SELECT: 6,
+  INTEGER: 7,
+  PAGE_REFERENCE: 8,
+  IMAGE: 10,
+  DATE: 11,
+  DECIMAL: 14,
+  DEFINED_TYPE: 15,
+  DEFINED_VALUE: 16,
+  PERSON: 18,
+  HTML: 20,
+  MEMO: 21,
+  GROUP_TYPES: 22,
+  GROUP: 23,
+  CAMPUSES: 26,
+  ENTITY_TYPE: 29,
+  CAMPUS: 30,
+  EMAIL_TEMPLATE: 31,
+  FILE: 32,
+  GROUP_TYPE: 33,
+  KEY_VALUE_LIST: 34,
+  BINARY_FILE_TYPE: 35,
+  WORKFLOW_TYPE: 36,
+  BINARY_FILE: 37,
+  FINANCIAL_ACCOUNT: 38,
+  FINANCIAL_ACCOUNTS: 39,
+  COMPONENT: 40,
+  COMPONENTS: 41,
+  CATEGORIES: 42,
+  GROUP_ROLE: 43,
+  CATEGORY: 44,
+  LOCATION: 45,
+  DATE_RANGE: 46,
+  DECIMAL_RANGE: 47,
+  INTEGER_RANGE: 48,
+  TIME: 49,
+  GROUP_LOCATION_TYPE: 50,
+  CODE_EDITOR: 51,
+  PERSON_BADGES: 52,
+  SITE: 53,
+  COMMUNICATION_TEMPLATE: 54,
+  DAY_OF_WEEK: 55,
+  DAYS_OF_WEEK: 56,
+  REMOTE_AUTHS: 57,
+  COMPARISON: 58,
+  METRIC_ENTITY: 59,
+  WORKFLOW_ACTIVITY: 60,
+  WORKFLOW_ATTRIBUTE: 61,
+  METRICS: 62,
+  ENTITY: 63,
+  METRIC_CATEGORIES: 64,
+  WORKFLOW_TEXT_OR_ATTRIBUTE: 65,
+  SLIDING_DATE_RANGE: 66,
+  GROUP_TYPE_GROUP: 67,
+  SECURITY_ROLE: 68,
+  VALUE_LIST: 69,
+  CURRENCY: 70,
+  EMAIL: 71,
+  URL_LINK: 72,
+  WORKFLOW_TYPES: 73,
+  ATTRIBUTE: 74,
+  SCHEDULES: 75,
+  CONTENT_CHANNEL: 76,
+  AUDIO_FILE: 77,
+  AUDIO_URL: 78,
+  VIDEO_FILE: 79,
+  VIDEO_URL: 80,
+  ENCRYPTED_TEXT: 81,
+  FILTER_DATE: 82,
+  DATE_TIME: 83,
+  DEFINED_VALUE_RANGE: 84,
+  RATING: 85,
+  SYSTEM_EMAIL: 86,
+  FINANCIAL_GATEWAY: 87,
+  GROUP_AND_ROLE: 88,
+  NOTE_TYPE: 89,
+  NOTE_TYPES: 90,
+  EVENT_CALENDAR: 91,
+  EVENT_ITEM: 92,
+  CONNECTION_ACTIVITY_TYPE: 93,
+  CONNECTION_OPPORTUNITY: 94,
+  CONNECTION_REQUEST: 95,
+  CONNECTION_STATE: 96,
+  CONNECTION_STATUS: 97,
+  CONNECTION_TYPE: 98,
+  CONNECTION_TYPES: 99,
+  MERGE_TEMPLATE: 100,
+  RANGE_SLIDER: 101,
+  BINARY_FILE_TYPES: 102,
+  MARKDOWN: 103,
+  DATA_VIEW: 104,
+  PHONE_NUMBER: 105,
+  SCHEDULE: 106,
+  LAVA_COMMANDS: 107,
+  ADDRESS: 108,
+  BENEVOLENCE_REQUEST: 109,
+  CONTENT_CHANNEL_TYPES: 110,
+  WORKFLOW: 111,
+  SSN: 112,
+  MATRIX: 113,
+  LAVA: 114,
+  DATA_VIEWS: 115,
+  COMMUNICATION_PREFERENCE: 116,
+  INTERACTION_CHANNEL: 117,
+  GROUP_MEMBER: 118,
+  TIME_ZONE: 119,
+  LABEL: 120,
+};
diff --git a/apollos-church-api/src/connectors/rock/data-source.js b/apollos-church-api/src/connectors/rock/data-source.js
new file mode 100644
index 0000000..046c063
--- /dev/null
+++ b/apollos-church-api/src/connectors/rock/data-source.js
@@ -0,0 +1,82 @@
+/* eslint-disable class-methods-use-this */
+import { RESTDataSource } from 'apollo-datasource-rest';
+import { mapKeys, mapValues, camelCase } from 'lodash';
+import { fetch } from 'apollo-server-env';
+
+import { createCursor, parseCursor } from '../../utils/cursor';
+
+import { ROCK_API, ROCK_TOKEN } from './constants'; // eslint-disable-line import/named
+import RequestBuilder from './RequestBuilder';
+
+export default class RockApolloDataSource extends RESTDataSource {
+  // Subclasses can set this to true to force all requests to turn extended responses.
+  expanded = false;
+
+  baseURL = ROCK_API;
+
+  get rockToken() {
+    if (process.env.NODE_ENV === 'test') {
+      return 'some-rock-token';
+    }
+    return ROCK_TOKEN;
+  }
+
+  nodeFetch = fetch;
+
+  didReceiveResponse(response, request) {
+    // Can't use await b/c of `super` keyword
+    return super
+      .didReceiveResponse(response, request)
+      .then((parsedResponse) => this.normalize(parsedResponse));
+  }
+
+  willSendRequest(request) {
+    request.headers.set('Authorization-Token', ROCK_TOKEN);
+    request.headers.set('user-agent', 'Apollos');
+    request.headers.set('Content-Type', 'application/json');
+  }
+
+  normalize = (data) => {
+    if (Array.isArray(data)) return data.map(this.normalize);
+    if (typeof data !== 'object') return data;
+    const normalizedValues = mapValues(data, this.normalize);
+    return mapKeys(normalizedValues, (value, key) => camelCase(key));
+  };
+
+  request(resource = this.resource) {
+    return new RequestBuilder({
+      resource,
+      connector: this,
+      defaultOptions: this.expanded ? { loadAttributes: 'expanded' } : null,
+    });
+  }
+
+  async paginate({ cursor, args: { after, first = 20 } = {} }) {
+    let skip = 0;
+    if (after) {
+      const parsed = parseCursor(after);
+      if (parsed && Object.hasOwnProperty.call(parsed, 'position')) {
+        skip = parsed.position + 1;
+      } else {
+        throw new Error(`An invalid 'after' cursor was provided: ${after}`);
+      }
+    }
+
+    const edges = cursor
+      ? cursor
+          .top(first)
+          .skip(skip)
+          .transform((result) =>
+            result.map((node, i) => ({
+              node,
+              cursor: createCursor({ position: i + skip }),
+            }))
+          )
+          .get()
+      : [];
+
+    return {
+      edges,
+    };
+  }
+}
diff --git a/apollos-church-api/src/connectors/rock/index.js b/apollos-church-api/src/connectors/rock/index.js
new file mode 100644
index 0000000..cc53a6f
--- /dev/null
+++ b/apollos-church-api/src/connectors/rock/index.js
@@ -0,0 +1,3 @@
+import * as Constants from './constants';
+
+export { Constants }; // eslint-disable-line import/prefer-default-export
diff --git a/apollos-church-api/src/connectors/rock/rock-constants.js b/apollos-church-api/src/connectors/rock/rock-constants.js
new file mode 100644
index 0000000..59884e2
--- /dev/null
+++ b/apollos-church-api/src/connectors/rock/rock-constants.js
@@ -0,0 +1,82 @@
+/* eslint-disable no-console */
+import RockApolloDataSource from './data-source';
+
+const mapApollosNameToRockName = (name) => {
+  switch (name) {
+    case 'ContentItem':
+    case 'UniversalContentItem':
+    case 'DevotionalContentItem':
+      return 'ContentChannelItem';
+    default:
+      throw new Error(`${name} has not been mapped into a Rock type!`);
+  }
+};
+
+export default class RockConstants extends RockApolloDataSource {
+  async findOrCreate({ model, objectAttributes }) {
+    // Turns {ChannelId: 7, Name: 'Something'} into '(ChannelId eq 7) and (Name eq 'Something')'
+    const filter = Object.keys(objectAttributes)
+      .map((key) => {
+        if (typeof objectAttributes[key] === 'string') {
+          return `(${key} eq '${objectAttributes[key]}')`;
+        }
+        return `(${key} eq ${objectAttributes[key]})`;
+      })
+      .join(' and ');
+
+    const objects = await this.request(model)
+      .filter(filter)
+      .cache({ ttl: 86400 })
+      .get();
+    if (objects.length) {
+      console.log('Found', objects[0]);
+      return objects[0];
+    }
+    const objectId = await this.post(`/${model}`, objectAttributes);
+    const ret = await this.get(`/${model}/${objectId}`);
+    console.log('Created', ret);
+    return ret;
+  }
+
+  async createOrFindInteractionComponent({ componentName, channelId }) {
+    return this.findOrCreate({
+      model: 'InteractionComponents',
+      objectAttributes: { Name: componentName, ChannelId: channelId },
+    });
+  }
+
+  async createOrFindInteractionChannel({ channelName }) {
+    return this.findOrCreate({
+      model: 'InteractionChannels',
+      objectAttributes: { Name: channelName, UsesSession: true },
+    });
+  }
+
+  async interactionChannel() {
+    return this.createOrFindInteractionChannel({
+      channelName: 'Apollos App',
+    });
+  }
+
+  async interactionComponent() {
+    const channel = await this.interactionChannel();
+    return this.createOrFindInteractionComponent({
+      componentName: 'Apollos Content Item',
+      channelId: channel.id,
+    });
+  }
+
+  async modelTypeId(nameInput) {
+    const name = mapApollosNameToRockName(nameInput);
+
+    const types = await this.request('EntityTypes')
+      .filter(`Name eq 'Rock.Model.${name}'`)
+      .cache({ ttl: 86400 })
+      .get();
+    if (types.length) {
+      return types[0];
+    }
+
+    return null;
+  }
+}
diff --git a/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js b/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js
new file mode 100644
index 0000000..c70a06c
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/__tests__/data-source.tests.js
@@ -0,0 +1,301 @@
+import { mockUA, mockSend, mockEvent } from 'universal-analytics';
+import Analytics, { mockTrack, mockIdentify } from 'analytics-node';
+import { AuthenticationError } from 'apollo-server';
+import DataSource from '../data-source';
+import RockAnalytics from '../interfaces/rock_interactions';
+
+const mockCurrentPerson = jest.fn().mockImplementation(() => ({
+  id: 5,
+  email: 'test@test.com',
+  firstName: 'Rick',
+  lastName: 'Hampton',
+}));
+
+const mockNoPerson = () => {
+  throw new AuthenticationError();
+};
+const mockOtherError = () => {
+  throw new Error('Some other error');
+};
+
+const clearMocks = () => {
+  [mockUA, mockSend, mockEvent, Analytics, mockTrack, mockIdentify].forEach(
+    (mock) => {
+      mock.mockClear();
+    }
+  );
+};
+
+const AuthWithUser = {
+  getCurrentPerson: mockCurrentPerson,
+};
+
+const AuthWithoutUser = {
+  getCurrentPerson: mockNoPerson,
+};
+
+const buildDataSource = (Auth = AuthWithUser) => {
+  const dataSource = new DataSource();
+  dataSource.initialize({ context: { dataSources: { Auth } } });
+  return dataSource;
+};
+
+describe('Analytics Data Source', () => {
+  const OLD_ENV = process.env;
+
+  beforeEach(() => {
+    clearMocks();
+    process.env = { ...OLD_ENV };
+
+    process.env.APOLLOS_SEGMENT_KEY = 'something';
+    process.env.APOLLOS_GA_KEY = 'something-else';
+  });
+  afterEach(() => {
+    process.env = OLD_ENV;
+  });
+
+  it('must accept arbitrary interfaces', async () => {
+    const track = jest.fn();
+    const identify = jest.fn();
+    const fakeClient = {
+      track,
+      identify,
+      shouldTrack: true,
+      shouldIdentify: true,
+      eventWhitelist: null,
+      initialize: () => ({}),
+    };
+    const dataSource = new DataSource([fakeClient]);
+    dataSource.initialize({ context: { dataSources: { Auth: AuthWithUser } } });
+
+    const resultTrack = await dataSource.track({
+      anonymousId: 'deviceId5',
+      eventName: 'View Content',
+    });
+
+    const resultIdentify = await dataSource.identify({
+      anonymousId: 'deviceId5',
+    });
+
+    expect(resultTrack).toMatchSnapshot();
+    expect(track).toHaveBeenCalledTimes(1);
+    expect(track).toMatchSnapshot();
+
+    expect(resultIdentify).toMatchSnapshot();
+    expect(identify).toHaveBeenCalledTimes(1);
+    expect(identify).toMatchSnapshot();
+  });
+
+  describe('track', () => {
+    it('must track specific events using the Rock adapter', async () => {
+      const rockAnalytics = new RockAnalytics();
+      const dataSource = new DataSource([rockAnalytics]);
+      const mockCreateInteraction = jest.fn();
+      dataSource.initialize({
+        context: {
+          sessionId: 'Session:123',
+          dataSources: {
+            Auth: AuthWithUser,
+            Interactions: {
+              createInteraction: mockCreateInteraction,
+            },
+          },
+        },
+      });
+
+      const result = await dataSource.track({
+        eventName: 'View Content',
+        properties: [
+          { field: 'ContentId', value: 'Content:123' },
+          { field: 'SessionId', value: 'Session:123' },
+        ],
+      });
+
+      expect(result).toMatchSnapshot();
+      expect(mockCreateInteraction).toHaveBeenCalledTimes(1);
+      expect(mockCreateInteraction.mock.calls).toMatchSnapshot();
+    });
+    it('must not track events using the Rock adapter without required attrs', async () => {
+      const rockAnalytics = new RockAnalytics();
+      const dataSource = new DataSource([rockAnalytics]);
+      const mockCreateInteraction = jest.fn();
+      dataSource.initialize({
+        context: {
+          dataSources: {
+            Auth: AuthWithUser,
+            Interactions: {
+              createInteraction: mockCreateInteraction,
+            },
+          },
+        },
+      });
+
+      // Without session id.
+      await dataSource.track({
+        eventName: 'View Content',
+        properties: [{ field: 'SessionId', value: 'Session:123' }],
+      });
+
+      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
+
+      // Without content id.
+      await dataSource.track({
+        eventName: 'View Content',
+        properties: [{ field: 'ContentId', value: 'Content:123' }],
+      });
+
+      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
+
+      // without a current user
+      dataSource.context.dataSources.Auth = AuthWithoutUser;
+      await dataSource.track({
+        eventName: 'View Content',
+        properties: [
+          { field: 'ContentId', value: 'Content:123' },
+          { field: 'SessionId', value: 'Session:123' },
+        ],
+      });
+
+      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
+      dataSource.context.dataSources.Auth = AuthWithUser;
+
+      // With an unhandled event
+      rockAnalytics.eventWhitelist = ['Some Event'];
+
+      await dataSource.track({
+        eventName: 'Some Event',
+        properties: [
+          { field: 'ContentId', value: 'Content:123' },
+          { field: 'SessionId', value: 'Session:123' },
+        ],
+      });
+
+      expect(mockCreateInteraction).toHaveBeenCalledTimes(0);
+    });
+    it('must track an event with a name and no properties', async () => {
+      const analytics = buildDataSource();
+      const result = await analytics.track({
+        eventName: 'View Content',
+        anonymousId: 'deviceId5',
+      });
+      expect(result).toMatchSnapshot();
+      expect(mockTrack).toHaveBeenCalledTimes(1);
+      expect(mockTrack.mock.calls).toMatchSnapshot();
+
+      expect(mockSend).toHaveBeenCalledTimes(1);
+      expect(mockUA).toHaveBeenCalledTimes(1);
+      expect(mockUA.mock.calls).toMatchSnapshot();
+    });
+
+    it('must not track segment without a key', async () => {
+      delete process.env.APOLLOS_SEGMENT_KEY;
+      const analytics = buildDataSource();
+      const result = await analytics.track({
+        eventName: 'View Content',
+      });
+      expect(result).toMatchSnapshot();
+      expect(mockTrack).toHaveBeenCalledTimes(0);
+
+      expect(mockSend).toHaveBeenCalledTimes(1);
+      expect(mockUA).toHaveBeenCalledTimes(1);
+      expect(mockUA.mock.calls).toMatchSnapshot();
+    });
+
+    it('must not track google analytics without a key', async () => {
+      delete process.env.APOLLOS_GA_KEY;
+      const analytics = buildDataSource();
+      const result = await analytics.track({
+        eventName: 'View Content',
+      });
+      expect(result).toMatchSnapshot();
+      expect(mockTrack).toHaveBeenCalledTimes(1);
+
+      expect(mockSend).toHaveBeenCalledTimes(0);
+      expect(mockUA).toHaveBeenCalledTimes(0);
+    });
+
+    it('must track an event with a name and properties', async () => {
+      const analytics = buildDataSource();
+      const result = await analytics.track({
+        eventName: 'View Content',
+        anonymousId: 'deviceId5',
+        properties: [{ field: 'ContentId', value: 7 }],
+      });
+      expect(result).toMatchSnapshot();
+      expect(mockTrack).toHaveBeenCalledTimes(1);
+      expect(mockTrack.mock.calls).toMatchSnapshot();
+
+      expect(mockSend).toHaveBeenCalledTimes(1);
+      expect(mockUA).toHaveBeenCalledTimes(1);
+      expect(mockUA.mock.calls).toMatchSnapshot();
+    });
+
+    it('must track without a user', async () => {
+      const analytics = buildDataSource(AuthWithoutUser);
+      const result = await analytics.track({
+        eventName: 'View Content',
+      });
+      expect(result).toMatchSnapshot();
+      expect(mockTrack).toHaveBeenCalledTimes(1);
+      expect(mockTrack.mock.calls).toMatchSnapshot();
+
+      expect(mockSend).toHaveBeenCalledTimes(1);
+      expect(mockUA).toHaveBeenCalledTimes(1);
+      expect(mockUA.mock.calls).toMatchSnapshot();
+    });
+
+    it('must reraise a non-auth Error', () => {
+      const analytics = buildDataSource({ getCurrentPerson: mockOtherError });
+      const result = analytics.track({
+        eventName: 'View Content',
+      });
+      expect(result).rejects.toThrow();
+
+      expect(mockSend).toHaveBeenCalledTimes(0);
+      expect(mockTrack).toHaveBeenCalledTimes(0);
+    });
+  });
+
+  describe('identify', () => {
+    it('must identify a user without traits', async () => {
+      const analytics = buildDataSource();
+      const result = await analytics.identify({
+        anonymousId: 'deviceId5',
+      });
+      expect(result).toMatchSnapshot();
+      expect(mockIdentify).toHaveBeenCalledTimes(1);
+      expect(mockIdentify.mock.calls).toMatchSnapshot();
+
+      expect(mockUA).toHaveBeenCalledTimes(0);
+    });
+    it('must identify a user with traits', async () => {
+      const analytics = buildDataSource();
+      const result = await analytics.identify({
+        anonymousId: 'deviceId5',
+        traits: [{ field: 'ChurchRole', value: 'Pastor' }],
+      });
+      expect(result).toMatchSnapshot();
+      expect(mockIdentify).toHaveBeenCalledTimes(1);
+      expect(mockIdentify.mock.calls).toMatchSnapshot();
+
+      expect(mockUA).toHaveBeenCalledTimes(0);
+    });
+    it('must identify a user with device info', async () => {
+      const analytics = buildDataSource();
+      const result = await analytics.identify({
+        anonymousId: 'deviceId5',
+        deviceInfo: {
+          platform: 'iOS',
+          deviceId: 'gibberish',
+          deviceMode: 'Latest iPhone',
+          appVersion: '72.0.1',
+        },
+      });
+      expect(result).toMatchSnapshot();
+      expect(mockIdentify).toHaveBeenCalledTimes(1);
+      expect(mockIdentify.mock.calls).toMatchSnapshot();
+
+      expect(mockUA).toHaveBeenCalledTimes(0);
+    });
+  });
+});
diff --git a/apollos-church-api/src/data/analytics/data-source.js b/apollos-church-api/src/data/analytics/data-source.js
new file mode 100644
index 0000000..5077b64
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/data-source.js
@@ -0,0 +1,113 @@
+import { AuthenticationError } from 'apollo-server';
+import { DataSource } from 'apollo-datasource';
+import GAInterface from './interfaces/ga';
+import SegmentInterface from './interfaces/segment';
+
+// Utility function to convert GQL array of key/values to Object.
+const mapArrayToObject = (array = []) =>
+  array.reduce((accum, { field, value }) => {
+    // eslint-disable-next-line no-param-reassign
+    accum[field] = value;
+    return accum;
+  }, {});
+
+// Add interfaces to this function to get picked up automatically.
+export const getInterfaces = () => {
+  const interfaces = [];
+  if (process.env.APOLLOS_SEGMENT_KEY) {
+    interfaces.push(new SegmentInterface(process.env.APOLLOS_SEGMENT_KEY));
+  }
+  if (process.env.APOLLOS_GA_KEY) {
+    interfaces.push(new GAInterface(process.env.APOLLOS_GA_KEY));
+  }
+  return interfaces;
+};
+
+export default class Analytics extends DataSource {
+  // Interfaces should extend BaseInterface in the interfaces folder.
+  // They should extend BaseAnalytics and implement
+  // track({ event: String, anonymousId: String, userId: String, properties: Obj, context: Obj })
+  // and
+  // track({ event: String, anonymousId: String, userId: String, traits: Obj, context: Obj })
+  constructor(interfaces = []) {
+    super();
+    this.interfaces = interfaces.length ? interfaces : getInterfaces();
+  }
+
+  // Called automatically b/c extends DataSource.
+  initialize({ context }) {
+    this.context = context;
+    this.interfaces.forEach((iface) => {
+      iface.initialize({ context });
+    });
+  }
+
+  get identifyInterfaces() {
+    return this.interfaces.filter((i) => i.shouldIdentify);
+  }
+
+  get trackInterfaces() {
+    return this.interfaces.filter((i) => i.shouldTrack);
+  }
+
+  // Shorthand to get Auth module.
+  get Auth() {
+    return this.context.dataSources.Auth;
+  }
+
+  async getCurrentPerson() {
+    let user;
+    try {
+      user = await this.Auth.getCurrentPerson();
+    } catch (e) {
+      if (!(e instanceof AuthenticationError)) {
+        throw e;
+      }
+    }
+    return user;
+  }
+
+  // Called via the `identify` mutation.
+  // traits is an array of objects matching the pattern [{ field: String, value: String}]
+  async identify({ anonymousId, deviceInfo, traits }) {
+    const currentUser = await this.getCurrentPerson();
+    this.identifyInterfaces.forEach(async (iface) => {
+      const parsedTraits = mapArrayToObject(traits);
+      iface.identify({
+        userId: currentUser && currentUser.id,
+        anonymousId,
+        traits: {
+          firstName: currentUser.firstName,
+          lastName: currentUser.lastName,
+          email: currentUser.email,
+          ...parsedTraits,
+        },
+        context: deviceInfo,
+      });
+    });
+    return { success: true };
+  }
+
+  // Called via the `track` mutation.
+  // properties is an array of objects matching the pattern [{ field: String, value: String}]
+  async track({ anonymousId, deviceInfo, eventName, properties }) {
+    const currentUser = await this.getCurrentPerson();
+    const parsedProps = mapArrayToObject(properties);
+    this.trackInterfaces.forEach(async (iface) => {
+      if (
+        iface.eventWhitelist === null ||
+        iface.eventWhitelist.includes(eventName)
+      ) {
+        iface.track({
+          userId: currentUser && currentUser.id,
+          anonymousId,
+          properties: parsedProps,
+          event: eventName,
+          context: deviceInfo,
+          sessionId: this.context.sessionId, // used for the rock interface
+        });
+      }
+    });
+    return { success: true };
+  }
+}
diff --git a/apollos-church-api/src/data/analytics/index.js b/apollos-church-api/src/data/analytics/index.js
new file mode 100644
index 0000000..38d9e28
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/index.js
@@ -0,0 +1,5 @@
+import resolver from './resolver';
+import schema from './schema';
+import dataSource from './data-source';
+
+export { resolver, schema, dataSource };
diff --git a/apollos-church-api/src/data/analytics/interfaces/base.js b/apollos-church-api/src/data/analytics/interfaces/base.js
new file mode 100644
index 0000000..972ef56
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/interfaces/base.js
@@ -0,0 +1,33 @@
+/* eslint-disable */
+/* istanbul ignore next */
+export default class BaseAnalytics {
+  shouldIdentify = false;
+
+  // override this property if you want `identify` to be called.
+  shouldTrack = true; // override this property if `track` shouldn't be called.
+
+  // override this property to only track specific events
+  eventWhitelist = null;
+
+  initialize({ context }) {
+    this.context = context;
+  }
+
+  // called when a user is identified.
+  identify({ anonymousId, userId, traits, context }) {
+    /* istanbul ignore next */
+    console.log({ anonymousId, userId, traits, context });
+  }
+
+  // called when an event is tracked
+  track({ event, anonymousId, userId, properties, context }) {
+    /* istanbul ignore next */
+    console.log({
+      event,
+      anonymousId,
+      userId,
+      properties,
+      context,
+    });
+  }
+}
diff --git a/apollos-church-api/src/data/analytics/interfaces/ga.js b/apollos-church-api/src/data/analytics/interfaces/ga.js
new file mode 100644
index 0000000..40310f4
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/interfaces/ga.js
@@ -0,0 +1,14 @@
+import ua from 'universal-analytics';
+import BaseAnalytics from './base';
+
+export default class GoogleAnalytics extends BaseAnalytics {
+  constructor(accountId) {
+    super();
+    this.accountId = accountId;
+  }
+
+  track({ event, anonymousId }) {
+    const visitor = ua(this.accountId, anonymousId, { strictCidFormat: false });
+    visitor.event('Apollos App', event).send();
+  }
+}
diff --git a/apollos-church-api/src/data/analytics/interfaces/rock_interactions.js b/apollos-church-api/src/data/analytics/interfaces/rock_interactions.js
new file mode 100644
index 0000000..64a880b
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/interfaces/rock_interactions.js
@@ -0,0 +1,34 @@
+import BaseAnalytics from './base';
+
+export default class RockInteractionAnalytics extends BaseAnalytics {
+  eventWhitelist = ['View Content'];
+
+  track({ event, userId, sessionId, properties }) {
+    if (!userId) {
+      return null;
+    }
+    switch (event) {
+      case 'View Content': {
+        return this.trackViewContent({
+          contentId: properties.ContentId,
+          sessionId,
+        });
+      }
+      default:
+        console.log(`${event} not supported by RockInteraction Analytics`);
+        return null;
+    }
+  }
+
+  trackViewContent({ contentId, sessionId }) {
+    if (!contentId || !sessionId) {
+      console.log('No ContentId or SessionId included in `track` call.');
+      return null;
+    }
+    return this.context.dataSources.Interactions.createInteraction({
+      nodeId: contentId,
+      sessionId,
+      operationName: 'View Content',
+    });
+  }
+}
diff --git a/apollos-church-api/src/data/analytics/interfaces/segment.js b/apollos-church-api/src/data/analytics/interfaces/segment.js
new file mode 100644
index 0000000..8c157ad
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/interfaces/segment.js
@@ -0,0 +1,30 @@
+import Analytics from 'analytics-node';
+import BaseAnalytics from './base';
+
+export default class GoogleAnalytics extends BaseAnalytics {
+  constructor(writeKey) {
+    super();
+    this.client = new Analytics(writeKey);
+  }
+
+  shouldIdentify = true;
+
+  identify({ anonymousId, userId, traits, context }) {
+    this.client.identify({
+      anonymousId,
+      userId,
+      traits,
+      context,
+    });
+  }
+
+  track({ event, anonymousId, userId, properties, context }) {
+    this.client.track({
+      event,
+      anonymousId,
+      userId,
+      properties,
+      context,
+    });
+  }
+}
diff --git a/apollos-church-api/src/data/analytics/resolver.js b/apollos-church-api/src/data/analytics/resolver.js
new file mode 100644
index 0000000..bf3585a
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/resolver.js
@@ -0,0 +1,8 @@
+export default {
+  Mutation: {
+    identifySelf: (root, { input }, { dataSources: { Analytics } }) =>
+      Analytics.identify({ ...input }),
+    trackEvent: (root, { input }, { dataSources: { Analytics } }) =>
+      Analytics.track({ ...input }),
+  },
+};
diff --git a/apollos-church-api/src/data/analytics/schema.js b/apollos-church-api/src/data/analytics/schema.js
new file mode 100644
index 0000000..48c3842
--- /dev/null
+++ b/apollos-church-api/src/data/analytics/schema.js
@@ -0,0 +1,47 @@
+import { gql } from 'apollo-server';
+
+export default gql`
+  # Not supported right now...
+  # union AnalyticsValue = String | Float | Boolean | Int
+  scalar AnalyticsValue
+
+  input AnalyticsMetaField {
+    field: String!
+    value: AnalyticsValue
+  }
+
+  enum AnalyticsPlatform {
+    iOS
+    Android
+  }
+
+  input AnalyticsDeviceInfo {
+    platform: AnalyticsPlatform
+    deviceId: String
+    deviceModel: String
+    osVersion: String
+    appVersion: String
+  }
+
+  input AnalyticsIdentifyInput {
+    traits: [AnalyticsMetaField]
+    anonymousId: String!
+    deviceInfo: AnalyticsDeviceInfo
+  }
+
+  input AnalyticsTrackInput {
+    eventName: String!
+    properties: [AnalyticsMetaField]
+    anonymousId: String
+    deviceInfo: AnalyticsDeviceInfo
+  }
+
+  type AnalyticsResult {
+    success: Boolean
+  }
+
+  extend type Mutation {
+    identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
+    trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
+  }
+`;
diff --git a/apollos-church-api/src/data/auth/__tests__/index.tests.js b/apollos-church-api/src/data/auth/__tests__/index.tests.js
new file mode 100644
index 0000000..9d70095
--- /dev/null
+++ b/apollos-church-api/src/data/auth/__tests__/index.tests.js
@@ -0,0 +1,240 @@
+import { graphql } from 'graphql';
+import { fetch } from 'apollo-server-env';
+import { makeExecutableSchema } from 'apollo-server';
+
+import { getTestContext } from '../../../utils/testUtils';
+import { testSchema as typeDefs, resolvers } from '../..';
+import { generateToken, registerToken } from '../token';
+
+// we import the root-level schema and resolver so we test the entire integration:
+
+describe('Auth', () => {
+  let schema;
+  let context;
+  beforeEach(() => {
+    fetch.resetMocks();
+    fetch.mockRockDataSourceAPI();
+    schema = makeExecutableSchema({ typeDefs, resolvers });
+    context = getTestContext();
+  });
+
+  it('logs in a user', async () => {
+    const query = `
+      mutation {
+        authenticate(identity: "some-identity", password: "good") {
+          user {
+            id
+            profile {
+              id
+            }
+          }
+        }
+      }
+    `;
+    const rootValue = {};
+
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('throws invalid credentials error on bad password', async () => {
+    const query = `
+      mutation {
+        authenticate(identity: "some-identity", password: "bad") {
+          user {
+            id
+          }
+        }
+      }
+    `;
+    const rootValue = {};
+
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  describe('currentUser query', () => {
+    const query = `
+      query {
+        currentUser {
+          id
+          profile {
+            id
+          }
+        }
+      }
+    `;
+    it('requires you to be logged in', async () => {
+      const rootValue = {};
+
+      const result = await graphql(schema, query, rootValue, context);
+      expect(result).toMatchSnapshot();
+    });
+
+    it('queries current user when logged in', async () => {
+      const rootValue = {};
+      const token = generateToken({ cookie: 'some-cookie', sessionId: 123 });
+
+      context = getTestContext({
+        req: {
+          headers: { authorization: token },
+        },
+      });
+
+      const result = await graphql(schema, query, rootValue, context);
+      expect(result).toMatchSnapshot();
+    });
+
+    it('logs a user out without a sessionId', async () => {
+      const rootValue = {};
+      const token = generateToken({ cookie: 'some-cookie' });
+      context = getTestContext({
+        req: {
+          headers: { authorization: token },
+        },
+      });
+
+      const result = await graphql(schema, query, rootValue, context);
+      expect(result).toMatchSnapshot();
+    });
+
+    it('queries current user when logged in', async () => {
+      const rootValue = {};
+      try {
+        const { userToken, rockCookie } = registerToken('asdfasdfasdf');
+        context.userToken = userToken;
+        context.rockCookie = rockCookie;
+
+        await graphql(schema, query, rootValue, context);
+      } catch (e) {
+        expect(e.message).toEqual('Invalid token');
+      }
+    });
+  });
+
+  it('registers an auth token and passes the cookie on requests to rock', async () => {
+    const token = generateToken({ cookie: 'some-cookie', sessionId: 123 });
+    const secondContext = getTestContext({
+      req: {
+        headers: { authorization: token },
+      },
+    });
+    const query = `
+      query {
+        currentUser {
+          id
+        }
+      }
+    `;
+    const rootValue = {};
+    await graphql(schema, query, rootValue, secondContext);
+    expect(fetch.mock.calls[0][0].headers).toMatchSnapshot();
+  });
+
+  describe('Change Password', () => {
+    it('throws error without a current user', async () => {
+      try {
+        await context.dataSources.Auth.changePassword({
+          password: 'newPassword',
+        });
+      } catch (e) {
+        expect(e.message).toEqual('Must be logged in');
+      }
+    });
+
+    it('generates a new token', async () => {
+      const { userToken, rockCookie } = registerToken(
+        generateToken({ cookie: 'some-cookie' })
+      );
+      context.userToken = userToken;
+      context.rockCookie = rockCookie;
+      const {
+        rockCookie: newCookie,
+        token: newToken,
+      } = await context.dataSources.Auth.changePassword({
+        password: 'good',
+      });
+      expect(newCookie).toEqual('some cookie');
+      expect(typeof newToken).toEqual('string');
+    });
+  });
+
+  describe('User Registration', () => {
+    it('checks if user is already registered', async () => {
+      const result = await context.dataSources.Auth.personExists({
+        identity: 'isaac.hardy@newspring.cc',
+      });
+
+      expect(result).toEqual(true);
+    });
+
+    it('throws error in personExists', async () => {
+      const result = await context.dataSources.Auth.personExists({
+        identity: 'fake',
+      });
+
+      expect(result).toEqual(false);
+    });
+
+    it('creates user profile', async () => {
+      const result = await context.dataSources.Auth.createUserProfile({
+        email: 'isaac.hardy@newspring.cc',
+      });
+
+      expect(result).toEqual({ personId: 35 });
+    });
+
+    it('throws error in createUserProfile', async () => {
+      try {
+        await context.dataSources.Auth.createUserProfile({
+          email: '',
+        });
+      } catch (e) {
+        expect(e.message).toEqual('Unable to create profile!');
+      }
+    });
+
+    it('creates user login', async () => {
+      const result = await context.dataSources.Auth.createUserLogin({
+        email: 'isaac.hardy@newspring.cc',
+        password: 'password',
+        personId: 35,
+      });
+
+      expect(result).toEqual({ id: 21 });
+    });
+
+    it('throws error in createUserLogin', async () => {
+      try {
+        await context.dataSources.Auth.createUserLogin({
+          email: '',
+          password: 'password',
+          personId: 35,
+        });
+      } catch (e) {
+        expect(e.message).toEqual('Unable to create user login!');
+      }
+    });
+
+    it('creates new registration', async () => {
+      const query = `
+        mutation {
+          registerPerson(email: "hello.world@earth.org", password: "good") {
+            user {
+              id
+              profile {
+                id
+                email
+              }
+            }
+          }
+        }
+      `;
+
+      const rootValue = {};
+
+      const result = await graphql(schema, query, rootValue, context);
+      expect(result).toMatchSnapshot();
+    });
+  });
+});
diff --git a/apollos-church-api/src/data/auth/data-source.js b/apollos-church-api/src/data/auth/data-source.js
new file mode 100644
index 0000000..cf81fe0
--- /dev/null
+++ b/apollos-church-api/src/data/auth/data-source.js
@@ -0,0 +1,150 @@
+import { AuthenticationError } from 'apollo-server';
+import { fetch, Request } from 'apollo-server-env';
+import moment from 'moment';
+
+import RockApolloDataSource from '../../connectors/rock/data-source';
+import { generateToken, registerToken } from './token';
+
+export default class AuthDataSource extends RockApolloDataSource {
+  resource = 'Auth';
+
+  rockCookie = null;
+
+  userToken = null;
+
+  getCurrentPerson = async ({ cookie } = { cookie: null }) => {
+    const { rockCookie } = this.context;
+    const userCookie = cookie || rockCookie;
+    if (userCookie) {
+      const request = await this.request('People/GetCurrentPerson').get({
+        options: { headers: { cookie: userCookie } },
+      });
+      return request;
+    }
+    throw new AuthenticationError('Must be logged in');
+  };
+
+  fetchUserCookie = async (Username, Password) => {
+    try {
+      // We use `new Response` rather than string/options b/c if conforms more closely with ApolloRESTDataSource
+      // (makes mocking in tests WAY easier to use `new Request` as an input in both places)
+      const response = await fetch(
+        new Request(`${this.baseURL}/Auth/Login`, {
+          method: 'POST',
+          body: JSON.stringify({
+            Username,
+            Password,
+          }),
+          headers: {
+            'Content-Type': 'Application/Json',
+          },
+        })
+      );
+      if (response.status >= 400) throw new AuthenticationError();
+      const cookie = response.headers.get('set-cookie');
+      return cookie;
+    } catch (err) {
+      throw new AuthenticationError('Invalid Credentials');
+    }
+  };
+
+  createSession = async ({ cookie }) => {
+    const currentUser = await this.getCurrentPerson({ cookie });
+    return this.post('/InteractionSessions', {
+      PersonAliasId: currentUser.primaryAliasId,
+    });
+  };
+
+  authenticate = async ({ identity, password }) => {
+    try {
+      const cookie = await this.fetchUserCookie(identity, password);
+      const sessionId = await this.createSession({ cookie });
+      const token = generateToken({ cookie, sessionId });
+      const { userToken, rockCookie } = registerToken(token);
+      this.context.rockCookie = rockCookie;
+      this.context.userToken = userToken;
+      this.context.sessionId = sessionId;
+      return { token, rockCookie };
+    } catch (e) {
+      throw e;
+    }
+  };
+
+  personExists = async ({ identity }) => {
+    const hasUserName = await this.request(
+      `/UserLogins?$filter=UserName eq '${identity}'`
+    ).get();
+
+    if (hasUserName.length) {
+      return true;
+    }
+    return false;
+  };
+
+  createUserProfile = async (props = {}) => {
+    try {
+      const { email } = props;
+
+      return await this.post('/People', {
+        Email: email,
+        IsSystem: false, // Required by Rock
+        Gender: 0, // Required by Rock
+      });
+    } catch (err) {
+      throw new Error('Unable to create profile!');
+    }
+  };
+
+  createUserLogin = async (props = {}) => {
+    try {
+      const { email, password, personId } = props;
+
+      return await this.post('/UserLogins', {
+        PersonId: personId,
+        EntityTypeId: 27, // A default setting we use in Rock-person-creation-flow
+        UserName: email,
+        PlainTextPassword: password,
+        LastLoginDateTime: `${moment().toISOString()}`,
+      });
+    } catch (err) {
+      throw new Error('Unable to create user login!');
+    }
+  };
+
+  changePassword = async ({ password }) => {
+    const currentUser = await this.getCurrentPerson();
+    const { email, id } = currentUser;
+    const logins = await this.request('/UserLogins')
+      .filter(`UserName eq '${email}'`)
+      .get();
+
+    if (logins.length > 0) {
+      await this.delete(`/UserLogins/${logins[0].id}`);
+    }
+    await this.createUserLogin({
+      personId: id,
+      email,
+      password,
+    });
+    return this.authenticate({
+      identity: email,
+      password,
+    });
+  };
+
+  registerPerson = async ({ email, password }) => {
+    const personExists = await this.personExists({ identity: email });
+    if (personExists) throw new Error('User already exists!');
+
+    const { personId } = await this.createUserProfile({ email });
+
+    await this.createUserLogin({
+      email,
+      password,
+      personId,
+    });
+
+    const token = await this.authenticate({ identity: email, password });
+    return token;
+  };
+}
diff --git a/apollos-church-api/src/data/auth/index.js b/apollos-church-api/src/data/auth/index.js
new file mode 100644
index 0000000..0500a2c
--- /dev/null
+++ b/apollos-church-api/src/data/auth/index.js
@@ -0,0 +1,50 @@
+import { gql } from 'apollo-server';
+import { createGlobalId } from '../node';
+
+// export { default as model } from './model';
+export { default as dataSource } from './data-source';
+
+export const schema = gql`
+  type AuthenticatedUser {
+    id: ID!
+    profile: Person
+  }
+
+  type Authentication {
+    user: AuthenticatedUser
+    token: String
+  }
+
+  extend type Mutation {
+    authenticate(identity: String!, password: String!): Authentication
+    changePassword(password: String!): Authentication
+    registerPerson(email: String!, password: String!): Authentication
+  }
+
+  extend type Query {
+    currentUser: AuthenticatedUser
+  }
+`;
+
+export const resolver = {
+  Query: {
+    currentUser: (root, args, { dataSources }) =>
+      dataSources.Auth.getCurrentPerson(),
+  },
+  AuthenticatedUser: {
+    id: ({ id }, args, context, { parentType }) =>
+      createGlobalId(id, parentType.name),
+    profile: (authUser) => authUser,
+  },
+  Authentication: {
+    user: (root, args, { dataSources }) => dataSources.Auth.getCurrentPerson(),
+  },
+  Mutation: {
+    authenticate: (root, { identity, password }, { dataSources }) =>
+      dataSources.Auth.authenticate({ identity, password }),
+    changePassword: (root, { password }, { dataSources }) =>
+      dataSources.Auth.changePassword({ password }),
+    registerPerson: (root, args, { dataSources }) =>
+      dataSources.Auth.registerPerson(args),
+  },
+};
diff --git a/apollos-church-api/src/data/auth/token.js b/apollos-church-api/src/data/auth/token.js
new file mode 100644
index 0000000..ad562ab
--- /dev/null
+++ b/apollos-church-api/src/data/auth/token.js
@@ -0,0 +1,23 @@
+import { AuthenticationError } from 'apollo-server';
+import jwt from 'jsonwebtoken';
+
+const secret = process.env.SECRET || 'ASea$2gadj#asd0';
+
+export const parseToken = (token) => jwt.verify(token, secret);
+
+export const registerToken = (token) => {
+  try {
+    const { cookie, sessionId } = parseToken(token);
+
+    return {
+      userToken: token,
+      rockCookie: cookie,
+      sessionId,
+    };
+  } catch (e) {
+    throw new AuthenticationError('Invalid token');
+  }
+};
+
+export const generateToken = (params) =>
+  jwt.sign({ ...params }, secret, { expiresIn: '60d' });
diff --git a/apollos-church-api/src/data/bible/_tests_/resolver.tests.js b/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
new file mode 100644
index 0000000..dc35d17
--- /dev/null
+++ b/apollos-church-api/src/data/bible/_tests_/resolver.tests.js
@@ -0,0 +1,33 @@
+import { graphql } from 'graphql';
+import { fetch } from 'apollo-server-env';
+import { makeExecutableSchema } from 'apollo-server';
+import { testSchema as typeDefs, resolvers } from '../..';
+import { getTestContext } from '../../../utils/testUtils';
+
+describe('Scripture', () => {
+  let schema;
+  let context;
+  beforeEach(() => {
+    schema = makeExecutableSchema({ typeDefs, resolvers });
+    context = getTestContext();
+
+    fetch.resetMocks();
+    fetch.mockLiveDataSourceApis();
+  });
+
+  it('returns', async () => {
+    const query = `
+      query {
+        scripture (query: "SNG.1.1") {
+          html
+          reference
+          copyright
+        }
+      }
+    `;
+    const rootValue = {};
+
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/bible/data-source.js b/apollos-church-api/src/data/bible/data-source.js
new file mode 100644
index 0000000..6ef562b
--- /dev/null
+++ b/apollos-church-api/src/data/bible/data-source.js
@@ -0,0 +1,18 @@
+import { RESTDataSource } from 'apollo-datasource-rest';
+
+export default class Scripture extends RESTDataSource {
+  resource = 'Scripture';
+
+  baseURL = 'https://api.scripture.api.bible/v1/bibles/';
+
+  token = process.env.BIBLE_API_KEY;
+
+  willSendRequest(request) {
+    request.headers.set('api-key', `${this.token}`);
+  }
+
+  async getScripture(query) {
+    const bibleId = process.env.BIBLE_ID;
+    return this.get(`${bibleId}/search?query=${query}`);
+  }
+}
diff --git a/apollos-church-api/src/data/bible/index.js b/apollos-church-api/src/data/bible/index.js
new file mode 100644
index 0000000..5a77220
--- /dev/null
+++ b/apollos-church-api/src/data/bible/index.js
@@ -0,0 +1,6 @@
+import schema from './schema';
+import resolver from './resolver';
+import model from './model';
+import dataSource from './data-source';
+
+export { schema, resolver, model, dataSource };
diff --git a/apollos-church-api/src/data/bible/model.js b/apollos-church-api/src/data/bible/model.js
new file mode 100644
index 0000000..49b466c
--- /dev/null
+++ b/apollos-church-api/src/data/bible/model.js
@@ -0,0 +1,3 @@
+export default class {
+  resource = 'Scripture';
+}
diff --git a/apollos-church-api/src/data/bible/resolver.js b/apollos-church-api/src/data/bible/resolver.js
new file mode 100644
index 0000000..d2c0df4
--- /dev/null
+++ b/apollos-church-api/src/data/bible/resolver.js
@@ -0,0 +1,13 @@
+import { get } from 'lodash';
+
+export default {
+  Query: {
+    scripture: (root, { query }, { dataSources }) =>
+      dataSources.Scripture.getScripture(query),
+  },
+  Scripture: {
+    html: ({ data: { passages } = {} }) => get(passages, '[0].content'),
+    reference: ({ data: { passages } = {} }) => get(passages, '[0].reference'),
+    copyright: ({ data: { passages } = {} }) => get(passages, '[0].copyright'),
+  },
+};
diff --git a/apollos-church-api/src/data/bible/schema.js b/apollos-church-api/src/data/bible/schema.js
new file mode 100644
index 0000000..5b4a81f
--- /dev/null
+++ b/apollos-church-api/src/data/bible/schema.js
@@ -0,0 +1,13 @@
+import { gql } from 'apollo-server';
+
+export default gql`
+  type Scripture {
+    reference: String
+    html: String
+    copyright: String
+  }
+
+  extend type Query {
+    scripture(query: String!): Scripture
+  }
+`;
diff --git a/apollos-church-api/src/data/content-channels/__tests__/model.tests.js b/apollos-church-api/src/data/content-channels/__tests__/model.tests.js
new file mode 100644
index 0000000..393f8ad
--- /dev/null
+++ b/apollos-church-api/src/data/content-channels/__tests__/model.tests.js
@@ -0,0 +1,23 @@
+import { buildGetMock } from '../../../utils/testUtils';
+import ContentChannelDataSource from '../data-source';
+
+describe('ContentChannelModel', () => {
+  it('constructs', () => {
+    expect(new ContentChannelDataSource()).toBeTruthy();
+  });
+  it('gets all', () => {
+    const dataSource = new ContentChannelDataSource();
+    dataSource.get = buildGetMock([{ Id: 1 }, { Id: 2 }], dataSource);
+    const result = dataSource.all();
+    expect(result).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it('gets by id', () => {
+    const dataSource = new ContentChannelDataSource();
+    dataSource.get = buildGetMock([{ Id: 1 }], dataSource);
+    const result = dataSource.getFromId(1);
+    expect(result).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js b/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js
new file mode 100644
index 0000000..a228d13
--- /dev/null
+++ b/apollos-church-api/src/data/content-channels/__tests__/resolvers.tests.js
@@ -0,0 +1,75 @@
+import { graphql } from 'graphql';
+import { fetch } from 'apollo-server-env';
+import { makeExecutableSchema } from 'apollo-server';
+import { createGlobalId } from '../../node/model';
+import { getTestContext } from '../../../utils/testUtils';
+// we import the root-level schema and resolver so we test the entire integration:
+import { testSchema as typeDefs, resolvers } from '../..';
+
+const contentChannelFragment = `
+  fragment ContentChannelFragment on ContentChannel {
+    id
+    __typename
+    name
+    description
+    childContentChannels {
+      id
+      __typename
+      name
+      description
+    }
+    iconName
+    childContentItemsConnection {
+      edges {
+        cursor
+        node {
+          id
+          __typename
+        }
+      }
+    }
+  }
+`;
+
+describe('ContentChannel', () => {
+  let schema;
+  let context;
+  beforeEach(() => {
+    fetch.resetMocks();
+    fetch.mockRockDataSourceAPI();
+    schema = makeExecutableSchema({ typeDefs, resolvers });
+    context = getTestContext();
+  });
+
+  it('gets a list of content channels', async () => {
+    const query = `
+      query {
+        contentChannels {
+          ...ContentChannelFragment
+        }
+      }
+      ${contentChannelFragment}
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('gets a single content channel when querying by root node', async () => {
+    const query = `
+      query {
+        node(
+          id: "${createGlobalId(1, 'ContentChannel')}"
+        ) {
+          ...on ContentChannel {
+            ...ContentChannelFragment
+          }
+        }
+      }
+      ${contentChannelFragment}
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/content-channels/data-source.js b/apollos-church-api/src/data/content-channels/data-source.js
new file mode 100644
index 0000000..d225c44
--- /dev/null
+++ b/apollos-church-api/src/data/content-channels/data-source.js
@@ -0,0 +1,27 @@
+import RockApolloDataSource from '../../connectors/rock/data-source';
+
+export default class ContentChannel extends RockApolloDataSource {
+  resource = 'ContentChannels';
+
+  all = () =>
+    this.request()
+      .expand('ChildContentChannels')
+      .get();
+
+  getRootChannels = () =>
+    this.request()
+      .filter('Id eq 2')
+      .filter('Id eq 3')
+      .filter('Id eq 4')
+      .filter('Id eq 6')
+      .filter('Id eq 8')
+      .get();
+
+  getFromId = (id) =>
+    this.request()
+      .filter(`Id eq ${id}`)
+      .expand('ChildContentChannels')
+      .top(1)
+      .transform((list) => list[0])
+      .get();
+}
diff --git a/apollos-church-api/src/data/content-channels/index.js b/apollos-church-api/src/data/content-channels/index.js
new file mode 100644
index 0000000..fe61ec4
--- /dev/null
+++ b/apollos-church-api/src/data/content-channels/index.js
@@ -0,0 +1,42 @@
+import { gql } from 'apollo-server';
+import { createGlobalId } from '../node';
+
+// export { default as model } from './model';
+export { default as dataSource } from './data-source';
+
+export const schema = gql`
+  type ContentChannel implements Node {
+    id: ID!
+    name: String!
+    description: String
+
+    childContentChannels: [ContentChannel]
+    childContentItemsConnection(
+      first: Int
+      after: String
+    ): ContentItemsConnection
+
+    iconName: String
+  }
+
+  extend type Query {
+    contentChannels: [ContentChannel]
+  }
+`;
+
+export const resolver = {
+  Query: {
+    contentChannels: (root, args, context) =>
+      context.dataSources.ContentChannel.getRootChannels(),
+  },
+  ContentChannel: {
+    id: ({ id }, args, context, { parentType }) =>
+      createGlobalId(id, parentType.name),
+    childContentItemsConnection: ({ id }, args, { dataSources }) =>
+      dataSources.ContentItem.paginate({
+        cursor: dataSources.ContentItem.byContentChannelId(id),
+        args,
+      }),
+    iconName: () => 'text', // TODO
+  },
+};
diff --git a/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js b/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js
new file mode 100644
index 0000000..878c940
--- /dev/null
+++ b/apollos-church-api/src/data/content-items/__tests__/data-source.tests.js
@@ -0,0 +1,93 @@
+import { fetch } from 'apollo-server-env';
+import { buildGetMock } from '../../../utils/testUtils';
+
+import ContentItemsDataSource from '../data-source';
+
+describe('ContentItemsModel', () => {
+  beforeEach(() => {
+    fetch.resetMocks();
+  });
+  it('constructs', () => {
+    expect(new ContentItemsDataSource()).toBeTruthy();
+  });
+  it('filters by content channel id', () => {
+    const dataSource = new ContentItemsDataSource();
+    dataSource.get = buildGetMock([{ Id: 1 }, { Id: 2 }], dataSource);
+    const result = dataSource.byContentChannelId(1).get();
+    expect(result).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it('gets by id', () => {
+    const dataSource = new ContentItemsDataSource();
+    dataSource.get = buildGetMock({ Id: 1 }, dataSource);
+    const result = dataSource.getFromId(1);
+    expect(result).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it('gets a cursor finding child content items of a provided parent', async () => {
+    const dataSource = new ContentItemsDataSource();
+    dataSource.get = buildGetMock(
+      [
+        [
+          { ChildContentChannelItemId: 101 },
+          { ChildContentChannelItemId: 201 },
+        ],
+        [{ Id: 1 }, { Id: 2 }],
+      ],
+      dataSource
+    );
+    const cursor = await dataSource.getCursorByParentContentItemId(1);
+    expect(cursor.get()).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it('returns null when there are no child content items', async () => {
+    const dataSource = new ContentItemsDataSource();
+    dataSource.get = buildGetMock([], dataSource);
+    const cursor = await dataSource.getCursorByParentContentItemId(1);
+    expect(cursor).toBe(null);
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it('gets a cursor finding parent content items of a provided child', async () => {
+    const dataSource = new ContentItemsDataSource();
+    dataSource.get = buildGetMock(
+      [
+        [{ ContentChannelItemId: 101 }, { ContentChannelItemId: 201 }],
+        [{ Id: 1 }, { Id: 2 }],
+      ],
+      dataSource
+    );
+    const cursor = await dataSource.getCursorByChildContentItemId(1);
+    expect(cursor.get()).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it('gets a cursor finding sibling content items of a provided item', async () => {
+    const dataSource = new ContentItemsDataSource();
+    dataSource.get = buildGetMock(
+      [
+        [{ ContentChannelItemId: 101 }],
+        [
+          { ContentChannelId: 201, ChildContentChannelItemId: 1 },
+          { ContentChannelId: 202, ChildContentChannelItemId: 2 },
+        ],
+        [{ Id: 1 }, { Id: 2 }],
+      ],
+      dataSource
+    );
+    const cursor = await dataSource.getCursorBySiblingContentItemId(1);
+    expect(cursor.get()).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it('returns null when there are no parent content items', async () => {
+    const dataSource = new ContentItemsDataSource();
+    dataSource.get = buildGetMock([], dataSource);
+    const cursor = await dataSource.getCursorByChildContentItemId(1);
+    expect(cursor).toBe(null);
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js b/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js
new file mode 100644
index 0000000..6295a2d
--- /dev/null
+++ b/apollos-church-api/src/data/content-items/__tests__/resolvers.tests.js
@@ -0,0 +1,201 @@
+import { graphql } from 'graphql';
+import { fetch } from 'apollo-server-env';
+import { makeExecutableSchema } from 'apollo-server';
+
+import { testSchema as typeDefs, resolvers } from '../..';
+import { getTestContext } from '../../../utils/testUtils';
+// we import the root-level schema and resolver so we test the entire integration:
+import { createGlobalId } from '../../node/model';
+
+const contentItemFragment = `
+  fragment ContentItemFragment on UniversalContentItem {
+    id
+    __typename
+    title
+    coverImage {
+      name
+      key
+      sources {
+        uri
+      }
+    }
+    images {
+      __typename # Typenames here to increase test coverage
+      name
+      key
+      sources {
+        __typename
+        uri
+      }
+    }
+    videos {
+      __typename
+      name
+      key
+      sources {
+        __typename
+        uri
+      }
+      embedHtml
+    }
+    audios {
+      __typename
+      name
+      key
+      sources {
+        __typename
+        uri
+      }
+    }
+    htmlContent
+    childContentItemsConnection {
+      edges {
+        node {
+          id
+          __typename
+        }
+        cursor
+      }
+    }
+    parentChannel {
+      id
+      __typename
+    }
+    terms {
+      key
+      value
+    }
+    sharing {
+      __typename
+      url
+      title
+      message
+    }
+  }
+`;
+
+describe('UniversalContentItem', () => {
+  let schema;
+  let context;
+  beforeEach(() => {
+    fetch.resetMocks();
+    fetch.mockRockDataSourceAPI();
+    schema = makeExecutableSchema({ typeDefs, resolvers });
+    context = getTestContext();
+  });
+
+  it('gets a user feed', async () => {
+    const query = `
+      query {
+        userFeed {
+          edges {
+            node {
+              ...ContentItemFragment
+            }
+          }
+        }
+      }
+      ${contentItemFragment}
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('gets a content item', async () => {
+    const query = `
+      query {
+        node(id: "${createGlobalId(1, 'UniversalContentItem')}") {
+          ...ContentItemFragment
+        }
+      }
+      ${contentItemFragment}
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('gets a devotional item', async () => {
+    const query = `
+      query {
+        node(id: "${createGlobalId(123, 'DevotionalContentItem')}") {
+          id
+          ... on DevotionalContentItem {
+            id
+            title
+            scriptures {
+              html
+            }
+          }
+        }
+      }
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it("gets a content item and it's siblings", async () => {
+    const query = `
+      query {
+        userFeed {
+          edges {
+            node {
+              ...ContentItemFragment
+              ... on UniversalContentItem {
+                siblingContentItemsConnection {
+                        edges {
+                    node {
+                      id
+                      __typename
+                    }
+                    cursor
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+      ${contentItemFragment}
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('properly handles empty attribute values', async () => {
+    const query = `
+      query {
+        node(id: "${createGlobalId(
+          'test-case-no-attributes',
+          'UniversalContentItem'
+        )}") {
+          ...ContentItemFragment
+        }
+      }
+      ${contentItemFragment}
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('filters terms by a match string', async () => {
+    const query = `
+    query {
+      node(id: "${createGlobalId(1, 'UniversalContentItem')}") {
+        ...on UniversalContentItem {
+          terms(match: "speaker") {
+            value
+          }
+        }
+      }
+    }
+  `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/content-items/data-source.js b/apollos-church-api/src/data/content-items/data-source.js
new file mode 100644
index 0000000..6d458da
--- /dev/null
+++ b/apollos-church-api/src/data/content-items/data-source.js
@@ -0,0 +1,86 @@
+import RockApolloDataSource from '../../connectors/rock/data-source';
+
+export default class ContentItem extends RockApolloDataSource {
+  resource = 'ContentChannelItems';
+
+  expanded = true;
+
+  getCursorByParentContentItemId = async (id) => {
+    const associations = await this.request('ContentChannelItemAssociations')
+      .filter(`ContentChannelItemId eq ${id}`)
+      .get();
+
+    if (!associations || !associations.length) return null;
+    const request = this.request();
+    associations.forEach(({ childContentChannelItemId }) => {
+      request.filter(`Id eq ${childContentChannelItemId}`);
+    });
+
+    return request.orderBy('Order');
+  };
+
+  getCursorByChildContentItemId = async (id) => {
+    const associations = await this.request('ContentChannelItemAssociations')
+      .filter(`ChildContentChannelItemId eq ${id}`)
+      .get();
+
+    if (!associations || !associations.length) return null;
+    const request = this.request();
+    associations.forEach(({ contentChannelItemId }) => {
+      request.filter(`Id eq ${contentChannelItemId}`);
+    });
+
+    return request.orderBy('Order');
+  };
+
+  getCursorBySiblingContentItemId = async (id) => {
+    // Get all parents for the current item.
+    const parentAssociations = await this.request(
+      'ContentChannelItemAssociations'
+    )
+      .filter(`ChildContentChannelItemId eq ${id}`)
+      .get();
+
+    if (!parentAssociations || !parentAssociations.length) return null;
+
+    // Now, fetch all children relations for those parents (excluding the original item)
+    const siblingAssociationsRequest = await this.request(
+      'ContentChannelItemAssociations'
+    );
+    parentAssociations.forEach(({ contentChannelItemId }) => {
+      siblingAssociationsRequest.filter(
+        `(ContentChannelItemId eq ${contentChannelItemId}) and (ChildContentChannelItemId ne ${id})`
+      );
+    });
+    const siblingAssociations = await siblingAssociationsRequest.get();
+    if (!siblingAssociations || !siblingAssociations.length) return null;
+
+    const request = this.request();
+    siblingAssociations.forEach(({ childContentChannelItemId }) => {
+      request.filter(`Id eq ${childContentChannelItemId}`);
+    });
+
+    return request.orderBy('Order');
+  };
+
+  byUserFeed = () =>
+    this.request() // TODO: load these IDs dynamically
+      .filter(`ContentChannelId eq 1`)
+      .filter(`ContentChannelId eq 2`)
+      .filter(`ContentChannelId eq 3`)
+      .filter(`ContentChannelId eq 4`)
+      .filter(`ContentChannelId eq 5`)
+      .filter(`ContentChannelId eq 6`)
+      .filter(`ContentChannelId eq 8`)
+      .orderBy('StartDateTime', 'desc');
+
+  byContentChannelId = (id) =>
+    this.request()
+      .filter(`ContentChannelId eq ${id}`)
+      .orderBy('StartDateTime', 'desc');
+
+  getFromId = (id) =>
+    this.request()
+      .find(id)
+      .get();
+}
diff --git a/apollos-church-api/src/data/content-items/index.js b/apollos-church-api/src/data/content-items/index.js
new file mode 100644
index 0000000..94b92e4
--- /dev/null
+++ b/apollos-church-api/src/data/content-items/index.js
@@ -0,0 +1,366 @@
+import { gql } from 'apollo-server';
+import { get } from 'lodash';
+import flow from 'lodash/fp/flow';
+import omitBy from 'lodash/fp/omitBy';
+import pickBy from 'lodash/fp/pickBy';
+import mapValues from 'lodash/fp/mapValues';
+import values from 'lodash/fp/values';
+import sanitizeHtml from '../../utils/sanitize-html';
+import { Constants } from '../../connectors/rock';
+import { createGlobalId } from '../node';
+
+const mapValuesWithKey = mapValues.convert({ cap: false });
+
+// export { default as model } from './model';
+export { default as dataSource } from './data-source';
+
+export const schema = gql`
+  type SharableContentItem implements Sharable {
+    url: String
+    message: String
+    title: String
+  }
+
+  interface ContentItem {
+    id: ID!
+    title: String
+    coverImage: ImageMedia
+    images: [ImageMedia]
+    videos: [VideoMedia]
+    audios: [AudioMedia]
+    htmlContent: String
+    childContentItemsConnection(
+      first: Int
+      after: String
+    ): ContentItemsConnection
+    siblingContentItemsConnection(
+      first: Int
+      after: String
+    ): ContentItemsConnection
+    parentChannel: ContentChannel
+
+    sharing: SharableContentItem
+    theme: Theme
+    isLiked: Boolean
+  }
+
+  type UniversalContentItem implements ContentItem & Node {
+    id: ID!
+    title: String
+    coverImage: ImageMedia
+    images: [ImageMedia]
+    videos: [VideoMedia]
+    audios: [AudioMedia]
+    htmlContent: String
+    childContentItemsConnection(
+      first: Int
+      after: String
+    ): ContentItemsConnection
+    siblingContentItemsConnection(
+      first: Int
+      after: String
+    ): ContentItemsConnection
+    parentChannel: ContentChannel
+    terms(match: String): [Term]
+
+    sharing: SharableContentItem
+    theme: Theme
+    isLiked: Boolean
+  }
+
+  type DevotionalContentItem implements ContentItem & Node {
+    id: ID!
+    title: String
+    coverImage: ImageMedia
+    images: [ImageMedia]
+    videos: [VideoMedia]
+    audios: [AudioMedia]
+    htmlContent: String
+    childContentItemsConnection(
+      first: Int
+      after: String
+    ): ContentItemsConnection
+    siblingContentItemsConnection(
+      first: Int
+      after: String
+    ): ContentItemsConnection
+    parentChannel: ContentChannel
+
+    sharing: SharableContentItem
+    theme: Theme
+    isLiked: Boolean
+    scriptures: Scripture
+  }
+
+  type Term {
+    key: String
+    value: String
+  }
+
+  input ContentItemsConnectionInput {
+    first: Int
+    after: String
+  }
+
+  type ContentItemsConnection {
+    edges: [ContentItemsConnectionEdge]
+    # TODO totalCount: Int
+    # TODO pageInfo: PaginationInfo
+  }
+
+  type ContentItemsConnectionEdge {
+    node: ContentItem
+    cursor: String
+  }
+
+  extend type Query {
+    userFeed(first: Int, after: String): ContentItemsConnection
+    getAllLikedContent: [ContentItem]
+  }
+`;
+
+const hasScripture = ({ attributeValues }) =>
+  get(attributeValues, 'scriptures.value') != null;
+
+const isImage = ({ key, attributeValues, attributes }) =>
+  attributes[key].fieldTypeId === Constants.FIELD_TYPES.IMAGE ||
+  (key.toLowerCase().includes('image') &&
+    typeof attributeValues[key].value === 'string' &&
+    attributeValues[key].value.startsWith('http')); // looks like an image url
+
+const isVideo = ({ key, attributeValues, attributes }) =>
+  attributes[key].fieldTypeId === Constants.FIELD_TYPES.VIDEO_FILE ||
+  attributes[key].fieldTypeId === Constants.FIELD_TYPES.VIDEO_URL ||
+  (key.toLowerCase().includes('video') &&
+    typeof attributeValues[key].value === 'string' &&
+    attributeValues[key].value.startsWith('http')); // looks like a video url
+
+const isAudio = ({ key, attributeValues, attributes }) =>
+  attributes[key].fieldTypeId === Constants.FIELD_TYPES.AUDIO_FILE ||
+  attributes[key].fieldTypeId === Constants.FIELD_TYPES.AUDIO_URL ||
+  (key.toLowerCase().includes('audio') &&
+    typeof attributeValues[key].value === 'string' &&
+    attributeValues[key].value.startsWith('http')); // looks like an audio url
+
+export const defaultContentItemResolvers = {
+  id: ({ id }, args, context, { parentType }) =>
+    createGlobalId(id, parentType.name),
+  htmlContent: ({ content }) => sanitizeHtml(content),
+  childContentItemsConnection: async ({ id }, args, { dataSources }) =>
+    dataSources.ContentItem.paginate({
+      cursor: await dataSources.ContentItem.getCursorByParentContentItemId(id),
+      args,
+    }),
+
+  parentChannel: ({ contentChannelId }, args, { dataSources }) =>
+    dataSources.ContentChannel.getFromId(contentChannelId),
+
+  siblingContentItemsConnection: async ({ id }, args, { dataSources }) =>
+    dataSources.ContentItem.paginate({
+      cursor: await dataSources.ContentItem.getCursorBySiblingContentItemId(id),
+      args,
+    }),
+
+  images: ({ attributeValues, attributes }) => {
+    const imageKeys = Object.keys(attributes).filter((key) =>
+      isImage({
+        key,
+        attributeValues,
+        attributes,
+      })
+    );
+    return imageKeys.map((key) => ({
+      __typename: 'ImageMedia',
+      key,
+      name: attributes[key].name,
+      sources: attributeValues[key].value
+        ? [{ uri: attributeValues[key].value }]
+        : [],
+    }));
+  },
+
+  videos: ({ attributeValues, attributes }) => {
+    const videoKeys = Object.keys(attributes).filter((key) =>
+      isVideo({
+        key,
+        attributeValues,
+        attributes,
+      })
+    );
+    return videoKeys.map((key) => ({
+      __typename: 'VideoMedia',
+      key,
+      name: attributes[key].name,
+      embedHtml: get(attributeValues, 'videoEmbed.value', null), // TODO: this assumes that the key `VideoEmebed` is always used on Rock
+      sources: attributeValues[key].value
+        ? [{ uri: attributeValues[key].value }]
+        : [],
+    }));
+  },
+
+  audios: ({ attributeValues, attributes }) => {
+    const audioKeys = Object.keys(attributes).filter((key) =>
+      isAudio({
+        key,
+        attributeValues,
+        attributes,
+      })
+    );
+    return audioKeys.map((key) => ({
+      __typename: 'AudioMedia',
+      key,
+      name: attributes[key].name,
+      sources: attributeValues[key].value
+        ? [{ uri: attributeValues[key].value }]
+        : [],
+    }));
+  },
+
+  coverImage: async (root, args, { dataSources }) => {
+    const pickBestImage = (images) => {
+      // TODO: there's probably a _much_ more explicit and better way to handle this
+      const squareImage = images.find((image) =>
+        image.key.toLowerCase().includes('square')
+      );
+      if (squareImage) return { ...squareImage, __typename: 'ImageMedia' };
+      return { ...images[0], __typename: 'ImageMedia' };
+    };
+
+    let defaultImages = defaultContentItemResolvers.images(root) || [];
+    defaultImages = defaultImages.filter((image) => image.sources.length); // filter images w/o URLs
+    if (defaultImages.length) return pickBestImage(defaultImages);
+
+    // If no image, check parent for image:
+    const parentItemsCursor = await dataSources.ContentItem.getCursorByChildContentItemId(
+      root.id
+    );
+    if (!parentItemsCursor) return null;
+
+    const parentItems = await parentItemsCursor.get();
+
+    if (parentItems.length) {
+      const parentImages = parentItems
+        .map(defaultContentItemResolvers.images)
+        .find((images) => images.length)
+        .filter((image) => image.sources.length); // filter images w/o URLs
+
+      if (parentImages && parentImages.length)
+        return pickBestImage(parentImages);
+    }
+
+    return null;
+  },
+
+  // This resolver function is temporary, and is just used to get a seed to generate a random theme from
+  theme: (root) => {
+    if (![6, 5, 4].includes(root.contentChannelId)) return null; // todo: don't generate a theme for these content channel ids
+    return root.guid; // todo: this `guid` is just being used as a seed to generate colors for now
+  },
+  isLiked: async ({ id, isLiked }, args, { dataSources }) => {
+    if (isLiked != null) return isLiked;
+
+    const interactions = await dataSources.Interactions.getForContentItem({
+      contentItemId: id,
+    });
+
+    const likes = interactions.filter((i) => i.operation === 'Like').length;
+    const unlike = interactions.filter((i) => i.operation === 'Unlike').length;
+    // If likes / unlikes equal we have either unliked the content or haven't liked it yet (both are 0)
+    return likes > unlike;
+  },
+  sharing: (root) => ({ __type: 'SharableContentItem', ...root }),
+};
+
+export const resolver = {
+  Query: {
+    userFeed: (root, args, { dataSources }) =>
+      dataSources.ContentItem.paginate({
+        cursor: dataSources.ContentItem.byUserFeed(),
+        args,
+      }),
+    getAllLikedContent: async (root, args, { dataSources }) => {
+      // Get All Interactions from current user
+      const interactions = await dataSources.Interactions.getForContentItems();
+
+      const likeCounts = {};
+
+      // Iterate over the interactions and determine which pieces of content
+      // has more likes than unlikes
+      interactions.forEach(({ operation, relatedEntityId }) => {
+        if (!likeCounts[relatedEntityId]) {
+          likeCounts[relatedEntityId] = 0;
+        }
+        if (operation === 'Like') {
+          likeCounts[relatedEntityId] += 1;
+        }
+        if (operation === 'Unlike') {
+          likeCounts[relatedEntityId] -= 1;
+        }
+      });
+
+      const itemIds = [];
+      Object.keys(likeCounts).forEach((relatedEntityId) => {
+        if (likeCounts[relatedEntityId] > 0) {
+          itemIds.push(relatedEntityId);
+        }
+      });
+
+      // Grab content related to user's interactions
+      const getUserContentFromInteractions = itemIds.map((id) =>
+        dataSources.ContentItem.getFromId(id)
+      );
+
+      const resolveUserContentFromInteractions = await Promise.all(
+        getUserContentFromInteractions
+      );
+
+      // Determine the isLiked value on contentitems and create an obj that we
+      // can merge with our main set of data later
+      const calculateIsLikedOnContentItems = resolveUserContentFromInteractions.map(
+        (item) => ({ ...item, isLiked: true })
+      );
+
+      return calculateIsLikedOnContentItems;
+    },
+  },
+  DevotionalContentItem: {
+    ...defaultContentItemResolvers,
+    scriptures: ({ attributeValues }, args, { dataSources }) => {
+      const reference = get(attributeValues, 'scriptures.value');
+      if (reference && reference != null) {
+        return dataSources.Scripture.getScripture(reference);
+      }
+      return null;
+    },
+  },
+  UniversalContentItem: {
+    ...defaultContentItemResolvers,
+    terms: ({ attributeValues, attributes }, { match }) =>
+      flow([
+        omitBy((value, key) => isImage({ key, attributes, attributeValues })),
+        omitBy((value, key) => isVideo({ key, attributes, attributeValues })),
+        omitBy((value, key) => isAudio({ key, attributes, attributeValues })),
+        omitBy((value, key) => key === 'videoEmbed'),
+        pickBy((value, key) => (match ? key.match(match) : true)),
+        mapValuesWithKey(({ value }, key) => ({
+          key,
+          value,
+        })),
+        values,
+      ])(attributeValues),
+  },
+  ContentItem: {
+    ...defaultContentItemResolvers,
+    __resolveType: ({ attributeValues }) => {
+      if (hasScripture({ attributeValues })) {
+        return 'DevotionalContentItem';
+      }
+      return 'UniversalContentItem';
+    },
+  },
+  SharableContentItem: {
+    url: () => 'https://apollosrock.newspring.cc/', // todo: return a dynamic url that links to the content item
+    title: ({ title }) => title,
+    message: () => '',
+  },
+};
diff --git a/apollos-church-api/src/data/family/__tests__/data-source.tests.js b/apollos-church-api/src/data/family/__tests__/data-source.tests.js
new file mode 100644
index 0000000..81c3fa7
--- /dev/null
+++ b/apollos-church-api/src/data/family/__tests__/data-source.tests.js
@@ -0,0 +1,56 @@
+import { buildGetMock } from '../../../utils/testUtils';
+import DataSource from '../data-source';
+
+describe('Family Data Source', () => {
+  it('must fetch a users location w/ family location', async () => {
+    const dataSource = new DataSource();
+    dataSource.get = buildGetMock(
+      [
+        {
+          GroupLocations: [{ Location: { City: 'Chicago', State: 'IL' } }],
+          Campus: { Name: 'Main Campus' },
+        },
+      ],
+      dataSource
+    );
+
+    const location = await dataSource.getFamilyLocation({
+      userId: 'something',
+    });
+    expect(location).toEqual('Chicago, IL');
+  });
+  it('must fetch a users location w/ campus', async () => {
+    const dataSource = new DataSource();
+    dataSource.get = buildGetMock(
+      [
+        {
+          GroupLocations: [],
+          Campus: { Name: 'Main Campus' },
+        },
+      ],
+      dataSource
+    );
+
+    const location = await dataSource.getFamilyLocation({
+      userId: 'something',
+    });
+    expect(location).toEqual('Main Campus');
+  });
+  it('must return null without data', async () => {
+    const dataSource = new DataSource();
+    dataSource.get = buildGetMock([{ GroupLocations: [] }], dataSource);
+
+    const location = await dataSource.getFamilyLocation({
+      userId: 'something',
+    });
+    expect(location).toEqual(null);
+  });
+  it('raise an error without a userId', async () => {
+    const dataSource = new DataSource();
+    await expect(
+      dataSource.getFamilyLocation({
+        userId: null,
+      })
+    ).rejects.toThrow();
+  });
+});
diff --git a/apollos-church-api/src/data/family/__tests__/schema.tests.js b/apollos-church-api/src/data/family/__tests__/schema.tests.js
new file mode 100644
index 0000000..6c2f511
--- /dev/null
+++ b/apollos-church-api/src/data/family/__tests__/schema.tests.js
@@ -0,0 +1,38 @@
+import { graphql } from 'graphql';
+import { fetch } from 'apollo-server-env';
+import { makeExecutableSchema } from 'apollo-server';
+
+import { testSchema as typeDefs, resolvers } from '../..';
+import { generateToken } from '../../auth/token';
+// we import the root-level schema and resolver so we test the entire integration:
+import { getTestContext } from '../../../utils/testUtils';
+
+describe('Person', () => {
+  let schema;
+  let context;
+  beforeEach(() => {
+    fetch.resetMocks();
+    fetch.mockRockDataSourceAPI();
+    schema = makeExecutableSchema({ typeDefs, resolvers });
+    const token = generateToken({
+      cookie: 'some-cookie',
+      sessionId: 'somessessionid',
+    });
+    context = getTestContext({ req: { headers: { authorization: token } } });
+  });
+
+  it("returns a user's location", async () => {
+    const query = `
+      query {
+        currentUser {
+          profile {
+            location
+          }
+        }
+      }
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/family/data-source.js b/apollos-church-api/src/data/family/data-source.js
new file mode 100644
index 0000000..6494ee7
--- /dev/null
+++ b/apollos-church-api/src/data/family/data-source.js
@@ -0,0 +1,34 @@
+import RockApolloDataSource from '../../connectors/rock/data-source';
+
+export default class Family extends RockApolloDataSource {
+  resource = 'Family';
+
+  getFamily({ userId }) {
+    if (!userId) {
+      throw new Error('UserID is required to fetch a family');
+    }
+    return this.request(`/Groups/GetFamilies/${userId}`);
+  }
+
+  async getFamilyLocation({ userId }) {
+    const familyReq = await this.getFamily({ userId })
+      .expand('GroupLocations,Campus,GroupLocations/Location')
+      .get();
+
+    if (familyReq.length === 0) return null;
+
+    const family = familyReq[0];
+    // First option - a user's address city/state.
+    if (family.groupLocations.length && family.groupLocations[0].location) {
+      const { location } = family.groupLocations[0];
+      return `${location.city}, ${location.state}`;
+    }
+
+    // Second option - their campus name
+    if (family.campus) {
+      return family.campus.name;
+    }
+
+    return null;
+  }
+}
diff --git a/apollos-church-api/src/data/family/index.js b/apollos-church-api/src/data/family/index.js
new file mode 100644
index 0000000..8f21b34
--- /dev/null
+++ b/apollos-church-api/src/data/family/index.js
@@ -0,0 +1,4 @@
+import { schema, resolver } from './schema';
+import dataSource from './data-source';
+
+export { schema, resolver, dataSource };
diff --git a/apollos-church-api/src/data/family/schema.js b/apollos-church-api/src/data/family/schema.js
new file mode 100644
index 0000000..5810ca9
--- /dev/null
+++ b/apollos-church-api/src/data/family/schema.js
@@ -0,0 +1,19 @@
+import { gql } from 'apollo-server';
+
+export const schema = gql`
+  extend type Person {
+    location: String
+  }
+`;
+
+export const resolver = {
+  Person: {
+    location: async (root, args, context) => {
+      const location = await context.dataSources.Family.getFamilyLocation({
+        userId: root.id,
+      });
+
+      return location || 'No Location Set';
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/index.js b/apollos-church-api/src/data/index.js
index aa2e01d..17aea27 100644
--- a/apollos-church-api/src/data/index.js
+++ b/apollos-church-api/src/data/index.js
@@ -1,59 +1,61 @@
 import { gql } from 'apollo-server';
+import { mapValues, values, merge, compact } from 'lodash';
 
-import { createApolloServerConfig } from '@apollosproject/server-core';
-
-import * as Auth from '@apollosproject/data-connector-rock-auth';
-import {
-  ContentItem,
-  ContentChannel,
-  Sharable,
-} from '@apollosproject/data-connector-rock-content';
-import * as Analytics from '@apollosproject/data-connector-analytics';
-import { Person, Family } from '@apollosproject/data-connector-people';
-import * as Scripture from '@apollosproject/data-connector-bible';
-import * as LiveStream from '@apollosproject/data-connector-church-online';
-import * as Cloudinary from '@apollosproject/data-connector-cloudinary';
-import {
-  Followings,
-  Interactions,
-  RockConstants,
-} from '@apollosproject/data-connector-rock-actions';
+import RockConstants from '../connectors/rock/rock-constants';
+import * as Node from './node';
+import * as ContentChannel from './content-channels';
+import * as ContentItem from './content-items';
+import * as Person from './people';
+import * as Media from './media';
+import * as Auth from './auth';
+import * as LiveStream from './live';
 import * as Theme from './theme';
+import * as Scripture from './bible';
+import * as Interactions from './interactions';
+import * as Sharable from './sharable';
+import * as Analytics from './analytics';
+import * as Family from './family';
 
 const data = {
-  Followings,
+  Node,
   ContentChannel,
   ContentItem,
   Person,
-  Cloudinary,
+  Media,
   Auth,
   LiveStream,
   Theme,
   Scripture,
   Interactions,
-  RockConstants,
+  RockConstants: { dataSource: RockConstants },
   Sharable,
   Analytics,
   Family,
-  UniversalContentItem: {
-    dataSource: ContentItem.dataSource,
-  }, // alias
-  DevotionalContentItem: {
-    dataSource: ContentItem.dataSource,
-  }, // alias
-  ContentSeriesContentItem: {
-    dataSource: ContentItem.dataSource,
-  }, // alias
-  MediaContentItem: {
-    dataSource: ContentItem.dataSource,
-  }, // alias
 };
 
-const { dataSources, resolvers, schema, context } = createApolloServerConfig(
-  data
+export const schema = [
+  gql`
+    type Query {
+      _placeholder: Boolean # needed, empty schema defs aren't supported
+    }
+
+    type Mutation {
+      _placeholder: Boolean # needed, empty schema defs aren't supported
+    }
+  `,
+  ...compact(values(data).map((datum) => datum.schema)),
+];
+
+export const resolvers = merge(
+  ...compact(values(data).map((datum) => datum.resolver))
 );
 
-export { dataSources, resolvers, schema, context };
+export const dataSources = mapValues(data, (datum) => datum.dataSource);
+
+export const models = {
+  ...mapValues(data, (datum) => datum.model),
+  UniversalContentItem: ContentItem.model, // alias
+};
 
 // the upload Scalar is added
 export const testSchema = [
diff --git a/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js b/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
new file mode 100644
index 0000000..8fcba7a
--- /dev/null
+++ b/apollos-church-api/src/data/interactions/__tests__/resolvers.tests.js
@@ -0,0 +1,90 @@
+import { graphql } from 'graphql';
+import { fetch } from 'apollo-server-env';
+import { makeExecutableSchema } from 'apollo-server';
+
+import { getTestContext } from '../../../utils/testUtils';
+import { createGlobalId } from '../../node/model';
+import { generateToken } from '../../auth/token';
+import { testSchema as typeDefs, resolvers } from '../..';
+
+describe('Interactions', () => {
+  let schema;
+  let context;
+  beforeEach(() => {
+    fetch.resetMocks();
+    fetch.mockRockDataSourceAPI();
+    schema = makeExecutableSchema({ typeDefs, resolvers });
+    const token = generateToken({ cookie: 'some-cookie', sessionId: 123 });
+    context = getTestContext({
+      req: {
+        headers: { authorization: token },
+      },
+    });
+  });
+
+  it('likes an entity', async () => {
+    const query = `
+      mutation likeEntity {
+        updateLikeEntity(
+          input: {
+            nodeId: "${createGlobalId(1, 'UniversalContentItem')}"
+            operation: Like
+          }
+        ) {
+          id
+          operation
+          interactionDateTime
+        }
+      }
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+  it('uses interactions to track if a user liked content', async () => {
+    const query = `
+      query getContent {
+        node(id: "${createGlobalId(1, 'UniversalContentItem')}") {
+          id
+          ... on UniversalContentItem {
+            isLiked
+          }
+        }
+      }
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('gets all user liked content', async () => {
+    const query = `
+      query {
+        getAllLikedContent {
+          id
+          title
+          isLiked
+        }
+      }
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('returns an empty array for liked content without a user logged in', async () => {
+    const query = `
+      query {
+        getAllLikedContent {
+          id
+          title
+          isLiked
+        }
+      }
+    `;
+    const contextWithoutUser = getTestContext();
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, contextWithoutUser);
+    expect(result).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/interactions/data-source.js b/apollos-church-api/src/data/interactions/data-source.js
new file mode 100644
index 0000000..de31e93
--- /dev/null
+++ b/apollos-church-api/src/data/interactions/data-source.js
@@ -0,0 +1,72 @@
+import { AuthenticationError } from 'apollo-server';
+import { parseGlobalId } from '../node';
+import RockApolloDataSource from '../../connectors/rock/data-source';
+
+export default class Interactions extends RockApolloDataSource {
+  resource = 'Interactions';
+
+  async createInteraction({ nodeId, operationName }) {
+    const { dataSources } = this.context;
+    const { id, __type } = parseGlobalId(nodeId);
+    const contentItemType = await dataSources.RockConstants.modelTypeId(__type);
+    const interactionComponent = await this.context.dataSources.RockConstants.interactionComponent();
+    const currentUser = await dataSources.Auth.getCurrentPerson();
+
+    const interactionId = await this.post('/Interactions', {
+      RelatedEntityId: id,
+      RelatedEntityTypeId: contentItemType.id,
+      PersonAliasId: currentUser.primaryAliasId,
+      InteractionComponentId: interactionComponent.id,
+      InteractionSessionId: this.context.sessionId,
+      Operation: operationName,
+      InteractionDateTime: new Date().toJSON(),
+    });
+    return this.get(`/Interactions/${interactionId}`);
+  }
+
+  async getForContentItem({ contentItemId }) {
+    const { dataSources } = this.context;
+    const contentItemType = await dataSources.RockConstants.modelTypeId(
+      'ContentItem'
+    );
+    try {
+      const currentUser = await dataSources.Auth.getCurrentPerson();
+      return this.request('Interactions')
+        .filter(
+          // eslint-disable-next-line prettier/prettier
+          `(RelatedEntityId eq ${contentItemId}) and (RelatedEntityTypeId eq ${
+            contentItemType.id
+          }) and (PersonAliasId eq ${currentUser.primaryAliasId})`
+        )
+        .get();
+    } catch (e) {
+      if (e instanceof AuthenticationError) {
+        return [];
+      }
+      throw e;
+    }
+  }
+
+  async getForContentItems() {
+    const { dataSources } = this.context;
+    const contentItemType = await dataSources.RockConstants.modelTypeId(
+      'ContentItem'
+    );
+    try {
+      const currentUser = await dataSources.Auth.getCurrentPerson();
+      return this.request('Interactions')
+        .filter(
+          // eslint-disable-next-line prettier/prettier
+          `(RelatedEntityTypeId eq ${
+            contentItemType.id
+          }) and (PersonAliasId eq ${currentUser.primaryAliasId})`
+        )
+        .get();
+    } catch (e) {
+      if (e instanceof AuthenticationError) {
+        return [];
+      }
+      throw e;
+    }
+  }
+}
diff --git a/apollos-church-api/src/data/interactions/index.js b/apollos-church-api/src/data/interactions/index.js
new file mode 100644
index 0000000..47dcc05
--- /dev/null
+++ b/apollos-church-api/src/data/interactions/index.js
@@ -0,0 +1,5 @@
+import dataSource from './data-source';
+import schema from './schema';
+import resolver from './resolver';
+
+export { schema, resolver, dataSource };
diff --git a/apollos-church-api/src/data/interactions/resolver.js b/apollos-church-api/src/data/interactions/resolver.js
new file mode 100644
index 0000000..ef5c4ec
--- /dev/null
+++ b/apollos-church-api/src/data/interactions/resolver.js
@@ -0,0 +1,19 @@
+import { createGlobalId } from '../node/model';
+
+export default {
+  Mutation: {
+    updateLikeEntity: async (
+      root,
+      { input: { nodeId, sessionId, operation } },
+      { dataSources }
+    ) =>
+      dataSources.Interactions.createInteraction({
+        nodeId,
+        sessionId,
+        operationName: operation,
+      }),
+  },
+  Interaction: {
+    id: (root) => createGlobalId(root.id, 'Interaction'),
+  },
+};
diff --git a/apollos-church-api/src/data/interactions/schema.js b/apollos-church-api/src/data/interactions/schema.js
new file mode 100644
index 0000000..0188dc1
--- /dev/null
+++ b/apollos-church-api/src/data/interactions/schema.js
@@ -0,0 +1,23 @@
+import { gql } from 'apollo-server';
+
+export default gql`
+  type Interaction implements Node {
+    id: ID!
+    operation: LIKE_OPERATION!
+    interactionDateTime: String!
+  }
+
+  enum LIKE_OPERATION {
+    Like
+    Unlike
+  }
+
+  input LikeEntityInput {
+    nodeId: ID!
+    operation: LIKE_OPERATION!
+  }
+
+  extend type Mutation {
+    updateLikeEntity(input: LikeEntityInput!): Interaction
+  }
+`;
diff --git a/apollos-church-api/src/data/live/__tests__/resolver.tests.js b/apollos-church-api/src/data/live/__tests__/resolver.tests.js
new file mode 100644
index 0000000..ecbe6cb
--- /dev/null
+++ b/apollos-church-api/src/data/live/__tests__/resolver.tests.js
@@ -0,0 +1,34 @@
+import { fetch } from 'apollo-server-env';
+
+import { graphql } from 'graphql';
+import { makeExecutableSchema } from 'apollo-server';
+import { testSchema as typeDefs, resolvers } from '../..';
+import { getTestContext } from '../../../utils/testUtils';
+// we import the root-level schema and resolver so we test the entire integration:
+
+describe('LiveStream', () => {
+  let schema;
+  let context;
+  beforeEach(() => {
+    schema = makeExecutableSchema({ typeDefs, resolvers });
+    context = getTestContext();
+
+    fetch.resetMocks();
+    fetch.mockLiveDataSourceApis();
+  });
+
+  it('returns', async () => {
+    const query = `
+      query {
+        liveStream {
+          isLive
+          eventStartTime
+        }
+      }
+    `;
+    const rootValue = {};
+
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/live/data-source.js b/apollos-church-api/src/data/live/data-source.js
new file mode 100644
index 0000000..d108c4b
--- /dev/null
+++ b/apollos-church-api/src/data/live/data-source.js
@@ -0,0 +1,11 @@
+import { RESTDataSource } from 'apollo-datasource-rest';
+
+export default class LiveStream extends RESTDataSource {
+  resource = 'LiveStream';
+
+  baseURL = 'https://apollos.churchonline.org/api/v1/';
+
+  async getLiveStream() {
+    return this.get('events/current');
+  }
+}
diff --git a/apollos-church-api/src/data/live/index.js b/apollos-church-api/src/data/live/index.js
new file mode 100644
index 0000000..5a77220
--- /dev/null
+++ b/apollos-church-api/src/data/live/index.js
@@ -0,0 +1,6 @@
+import schema from './schema';
+import resolver from './resolver';
+import model from './model';
+import dataSource from './data-source';
+
+export { schema, resolver, model, dataSource };
diff --git a/apollos-church-api/src/data/live/model.js b/apollos-church-api/src/data/live/model.js
new file mode 100644
index 0000000..68710b2
--- /dev/null
+++ b/apollos-church-api/src/data/live/model.js
@@ -0,0 +1,3 @@
+export default class LiveStream {
+  resource = 'LiveStream';
+}
diff --git a/apollos-church-api/src/data/live/resolver.js b/apollos-church-api/src/data/live/resolver.js
new file mode 100644
index 0000000..509df21
--- /dev/null
+++ b/apollos-church-api/src/data/live/resolver.js
@@ -0,0 +1,11 @@
+export default {
+  Query: {
+    liveStream: (root, args, { dataSources }) =>
+      dataSources.LiveStream.getLiveStream(),
+  },
+  LiveStream: {
+    isLive: ({ response: { item: { isLive } = {} } = {} }) => isLive,
+    eventStartTime: ({ response: { item: { eventStartTime } = {} } = {} }) =>
+      eventStartTime,
+  },
+};
diff --git a/apollos-church-api/src/data/live/schema.js b/apollos-church-api/src/data/live/schema.js
new file mode 100644
index 0000000..fe8678d
--- /dev/null
+++ b/apollos-church-api/src/data/live/schema.js
@@ -0,0 +1,12 @@
+import { gql } from 'apollo-server';
+
+export default gql`
+  type LiveStream {
+    isLive: Boolean
+    eventStartTime: String
+  }
+
+  extend type Query {
+    liveStream: LiveStream
+  }
+`;
diff --git a/apollos-church-api/src/data/media/index.js b/apollos-church-api/src/data/media/index.js
new file mode 100644
index 0000000..423651d
--- /dev/null
+++ b/apollos-church-api/src/data/media/index.js
@@ -0,0 +1,97 @@
+import { gql } from 'apollo-server';
+import { Constants } from '../../connectors/rock';
+
+export { default as model } from './model';
+
+export const schema = gql`
+  interface Media {
+    name: String
+    key: String
+    sources: [MediaSource]
+  }
+
+  interface MediaSource {
+    uri: String
+  }
+
+  type ImageMedia implements Media {
+    name: String
+    key: String
+    sources: [ImageMediaSource]
+  }
+
+  type VideoMedia implements Media {
+    name: String
+    key: String
+    sources: [VideoMediaSource]
+    # duration: Float
+    embedHtml: String
+  }
+
+  type AudioMedia implements Media {
+    name: String
+    key: String
+    # duration: Float
+    sources: [AudioMediaSource]
+  }
+
+  type AudioMediaSource implements MediaSource {
+    uri: String
+    # format: String
+    # size: String
+  }
+
+  type ImageMediaSource implements MediaSource {
+    uri: String
+    # width: Int
+    # height: Int
+  }
+
+  type VideoMediaSource implements MediaSource {
+    uri: String
+    # format: String
+    # size: String
+  }
+
+  enum MediaInputType {
+    IMAGE
+    VIDEO
+    AUDIO
+  }
+`;
+
+const addTypenameToSources = (__typename) => ({ sources }) =>
+  sources.map((s) => ({ __typename, ...s }));
+
+export const resolver = {
+  Media: {
+    // Implementors must attach __typename to root.
+    __resolveType: ({ __typename }) => __typename,
+  },
+  MediaSource: {
+    // Implementors must attach __typename to root.
+    __resolveType: ({ __typename }) => __typename,
+  },
+  ImageMedia: {
+    sources: addTypenameToSources('ImageMediaSource'),
+  },
+  AudioMedia: {
+    sources: addTypenameToSources('AudioMediaSource'),
+  },
+  VideoMedia: {
+    sources: addTypenameToSources('VideoMediaSource'),
+  },
+  ImageMediaSource: {
+    uri: ({ uri = '' }) => {
+      if (!uri || typeof uri !== 'string') return null;
+      if (uri.startsWith('http')) return uri;
+      if (uri.startsWith('//')) return `https:${uri}`;
+
+      // Handle Rock GUID:
+      if (uri.split('-').length === 5)
+        return `${Constants.GET_IMAGE}?guid=${uri}`;
+
+      return uri;
+    },
+  },
+};
diff --git a/apollos-church-api/src/data/media/model.js b/apollos-church-api/src/data/media/model.js
new file mode 100644
index 0000000..c59adde
--- /dev/null
+++ b/apollos-church-api/src/data/media/model.js
@@ -0,0 +1 @@
+export default class MediaModel {}
diff --git a/apollos-church-api/src/data/node/__tests__/model.js b/apollos-church-api/src/data/node/__tests__/model.js
new file mode 100644
index 0000000..ae59c1f
--- /dev/null
+++ b/apollos-church-api/src/data/node/__tests__/model.js
@@ -0,0 +1,126 @@
+import casual from 'casual';
+import Node, { createGlobalId, parseGlobalId } from '../model';
+
+describe('Node', () => {
+  it('`createGlobalId` should take two arguments and return a string', () => {
+    const id = casual.word;
+    const type = casual.word;
+
+    expect(typeof createGlobalId(id, type)).toEqual('string');
+  });
+
+  it('`createGlobalId` should be decodeable by `parseGlobalId`', () => {
+    const id = casual.word;
+    const __type = casual.word;
+    const globalId = createGlobalId(id, __type);
+
+    expect(parseGlobalId(globalId)).toEqual({
+      __type,
+      id,
+    });
+  });
+
+  it('`parseGlobalId` should take a global id and return the type and id', () => {
+    const id = casual.word;
+    const __type = casual.word;
+    const globalId = createGlobalId(id, __type);
+
+    expect(parseGlobalId(globalId)).toEqual({
+      __type,
+      id,
+    });
+  });
+
+  it('`parseGlobalId` should throw an error if ID is invalid', () => {
+    expect(() => parseGlobalId('blah-blah')).toThrow();
+  });
+
+  it('Node class should parse an encoded id to get the type to resolve', async () => {
+    const id = casual.word;
+    const __type = 'Test';
+    const globalId = createGlobalId(id, __type);
+
+    const dataSources = {
+      Test: {
+        getFromId(_id) {
+          expect(_id).toEqual(id);
+          return {};
+        },
+      },
+    };
+
+    const node = new Node();
+    node.get(globalId, dataSources);
+  });
+
+  it("Node class should throw error if it can't find a matching model", async () => {
+    const id = casual.word;
+    const __type = 'NoModel';
+    const globalId = createGlobalId(id, __type);
+
+    const node = new Node({});
+    expect(node.get(globalId)).rejects.toBeDefined();
+  });
+
+  it("Node class doesn't assign __type if model returns falsey", async () => {
+    const id = casual.word;
+    const __type = 'Test';
+    const globalId = createGlobalId(id, __type);
+
+    const dataSources = {
+      Test: {
+        getFromId() {
+          return '';
+        },
+      },
+    };
+
+    const node = new Node(dataSources);
+    const record = node.get(globalId);
+    expect(record).not.toHaveProperty('__type');
+  });
+
+  it('Node class should return data from the models `getFromId` method', async () => {
+    const id = casual.word;
+    const __type = 'Test';
+    const globalId = createGlobalId(id, __type);
+    const data = {
+      test: casual.word,
+    };
+
+    const dataSources = {
+      Test: {
+        getFromId() {
+          return Promise.resolve(data);
+        },
+      },
+    };
+
+    const node = new Node();
+    const result = await node.get(globalId, dataSources);
+
+    expect(result.test).toEqual(data.test);
+  });
+
+  it('Node class should attach the __type to the resulting data', async () => {
+    const id = casual.word;
+    const __type = 'Test';
+    const globalId = createGlobalId(id, __type);
+    const data = {
+      test: casual.word,
+    };
+
+    const dataSources = {
+      Test: {
+        getFromId() {
+          return Promise.resolve(data);
+        },
+      },
+    };
+
+    const node = new Node();
+    const result = await node.get(globalId, dataSources);
+
+    expect(result.__type).toEqual(__type);
+  });
+});
diff --git a/apollos-church-api/src/data/node/__tests__/resolver.js b/apollos-church-api/src/data/node/__tests__/resolver.js
new file mode 100644
index 0000000..65a6957
--- /dev/null
+++ b/apollos-church-api/src/data/node/__tests__/resolver.js
@@ -0,0 +1,56 @@
+import casual from 'casual';
+import Resolver from '../resolver';
+
+const sampleData = {
+  _id: casual.word,
+  __type: 'Test',
+};
+
+it('Node should only have a __resolveType on the resolver', () => {
+  const { Node } = Resolver;
+
+  expect(Node.__resolveType).toBeTruthy();
+  expect(Object.keys(Node).length).toEqual(1);
+  expect(Object.keys(Node)[0]).toEqual('__resolveType');
+});
+
+it('Node should return the type from the data passed to it', () => {
+  const { Node } = Resolver;
+
+  const schema = {
+    getType(type) {
+      expect(type).toEqual(sampleData.__type);
+      return type;
+    },
+  };
+
+  const __type = Node.__resolveType(sampleData, null, {
+    schema,
+  });
+  expect(__type).toEqual(sampleData.__type);
+});
+
+it('Query node should return the data via the `Node` class', () => {
+  const { Query } = Resolver;
+
+  const fakeId = casual.word;
+  const models = {
+    Node: {
+      get(id) {
+        expect(id).toEqual(fakeId);
+        return sampleData;
+      },
+    },
+  };
+
+  const data = Query.node(
+    null,
+    {
+      id: fakeId,
+    },
+    {
+      models,
+    }
+  );
+  expect(data).toEqual(sampleData);
+});
diff --git a/apollos-church-api/src/data/node/index.js b/apollos-church-api/src/data/node/index.js
new file mode 100644
index 0000000..8943216
--- /dev/null
+++ b/apollos-church-api/src/data/node/index.js
@@ -0,0 +1,5 @@
+import schema from './schema';
+import resolver from './resolver';
+import model, { createGlobalId, parseGlobalId } from './model';
+
+export { schema, resolver, model, createGlobalId, parseGlobalId };
diff --git a/apollos-church-api/src/data/node/model.js b/apollos-church-api/src/data/node/model.js
new file mode 100644
index 0000000..1317273
--- /dev/null
+++ b/apollos-church-api/src/data/node/model.js
@@ -0,0 +1,48 @@
+/* eslint-disable class-methods-use-this */
+import Crypto from 'crypto';
+
+const secret = process.env.SECRET || 'LZEVhlgzFZKClu1r';
+
+export function createGlobalId(id, type) {
+  const cipher = Crypto.createCipher('aes192', secret);
+
+  let encrypted = cipher.update(`${id}`, 'utf8', 'hex');
+  encrypted += cipher.final('hex');
+
+  return `${type}:${encrypted}`;
+}
+
+export function parseGlobalId(encodedId) {
+  try {
+    const decipher = Crypto.createDecipher('aes192', secret);
+
+    const [__type, encryptedId] = encodedId.split(':');
+    let decrypted = decipher.update(encryptedId, 'hex', 'utf8');
+    decrypted += decipher.final('utf8');
+
+    const id = decrypted.toString();
+    return {
+      __type,
+      id,
+    };
+  } catch (e) {
+    throw new Error('Error parsing ID');
+  }
+}
+
+export default class Node {
+  async get(encodedId, dataSources) {
+    const { __type, id } = parseGlobalId(encodedId);
+    if (
+      !dataSources ||
+      !dataSources[__type] ||
+      !dataSources[__type].getFromId
+    ) {
+      throw new Error(`No dataSource found using ${__type}`);
+    }
+
+    const data = await dataSources[__type].getFromId(id, encodedId);
+    if (data) data.__type = __type;
+    return data;
+  }
+}
diff --git a/apollos-church-api/src/data/node/resolver.js b/apollos-church-api/src/data/node/resolver.js
new file mode 100644
index 0000000..f7b4be4
--- /dev/null
+++ b/apollos-church-api/src/data/node/resolver.js
@@ -0,0 +1,9 @@
+export default {
+  Query: {
+    node: (root, { id }, { models, dataSources }) =>
+      models.Node.get(id, dataSources),
+  },
+  Node: {
+    __resolveType: ({ __type }, args, { schema }) => schema.getType(__type),
+  },
+};
diff --git a/apollos-church-api/src/data/node/schema.js b/apollos-church-api/src/data/node/schema.js
new file mode 100644
index 0000000..58f9fb1
--- /dev/null
+++ b/apollos-church-api/src/data/node/schema.js
@@ -0,0 +1,11 @@
+import { gql } from 'apollo-server';
+
+export default gql`
+  extend type Query {
+    node(id: ID!): Node
+  }
+
+  interface Node {
+    id: ID!
+  }
+`;
diff --git a/apollos-church-api/src/data/people/__tests__/data-source.tests.js b/apollos-church-api/src/data/people/__tests__/data-source.tests.js
new file mode 100644
index 0000000..be750f5
--- /dev/null
+++ b/apollos-church-api/src/data/people/__tests__/data-source.tests.js
@@ -0,0 +1,79 @@
+import { buildGetMock } from '../../../utils/testUtils';
+import Person from '../data-source';
+
+const auth = (dataSource) => ({
+  getCurrentPerson: buildGetMock(
+    { Id: 51, FirstName: 'Vincent', LastName: 'Wilson' },
+    dataSource
+  ),
+});
+describe('Person', () => {
+  it('constructs', () => {
+    expect(new Person()).toBeTruthy();
+  });
+  it('gets person from email', () => {
+    const dataSource = new Person();
+    dataSource.get = buildGetMock(
+      { Email: 'isaac.hardy@newspring.cc' },
+      dataSource
+    );
+    const result = dataSource.getFromEmail('isaac.hardy@newspring.cc');
+    expect(result).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it('gets person from id', () => {
+    const dataSource = new Person();
+    dataSource.get = buildGetMock({ Id: 51 }, dataSource);
+    const result = dataSource.getFromId(51);
+    expect(result).resolves.toMatchSnapshot();
+    expect(dataSource.get.mock.calls).toMatchSnapshot();
+  });
+
+  it("updates a user's profile attributes", () => {
+    const dataSource = new Person();
+    const Auth = auth(dataSource);
+    dataSource.context = {
+      rockCookie: 'fakeCookie',
+      dataSource: { Auth },
+    };
+    dataSource.patch = buildGetMock({}, dataSource);
+    const result = dataSource.updateProfile([
+      {
+        field: 'FirstName',
+        value: 'Nick',
+      },
+    ]);
+    expect(result).resolves.toMatchSnapshot();
+    expect(Auth.getCurrentPerson.mock.calls).toMatchSnapshot();
+    expect(dataSource.patch.mock.calls).toMatchSnapshot();
+  });
+
+  it("uploads a user's profile picture", async () => {
+    const dataSource = new Person();
+    dataSource.context = { rockCookie: 'fakeCookie' };
+    dataSource.updateProfile = buildGetMock(
+      { Id: 51, FirstName: 'Vincent', LastName: 'Wilson' },
+      dataSource
+    );
+    dataSource.nodeFetch = buildGetMock({ text: () => '245' }, dataSource);
+
+    const result = await dataSource.uploadProfileImage({ stream: '123' }, 456);
+    expect(result).toMatchSnapshot();
+    const nodeFetchCalls = dataSource.nodeFetch.mock.calls;
+    // Remove randomly generated multipart boundary.
+    nodeFetchCalls[0][1].body._boundary = nodeFetchCalls[0][1].body._boundary.replace(
+      /\d+/,
+      ''
+    );
+    nodeFetchCalls[0][1].body._streams[0] = nodeFetchCalls[0][1].body._streams[0].replace(
+      /\d+/,
+      ''
+    );
+    nodeFetchCalls[0][1].headers['content-type'] = nodeFetchCalls[0][1].headers[
+      'content-type'
+    ].replace(/\d+/, '');
+    expect(nodeFetchCalls).toMatchSnapshot();
+    expect(dataSource.updateProfile.mock.calls).toMatchSnapshot({});
+  });
+});
diff --git a/apollos-church-api/src/data/people/__tests__/resolvers.test.js b/apollos-church-api/src/data/people/__tests__/resolvers.test.js
new file mode 100644
index 0000000..8dad30b
--- /dev/null
+++ b/apollos-church-api/src/data/people/__tests__/resolvers.test.js
@@ -0,0 +1,121 @@
+import { graphql } from 'graphql';
+import { fetch } from 'apollo-server-env';
+import { makeExecutableSchema } from 'apollo-server';
+
+import { generateToken, registerToken } from '../../auth/token';
+// we import the root-level schema and resolver so we test the entire integration:
+import { testSchema as typeDefs, resolvers } from '../..';
+import { getTestContext } from '../../../utils/testUtils';
+import { createGlobalId } from '../../node/model';
+
+describe('Person', () => {
+  let schema;
+  let context;
+  beforeEach(() => {
+    fetch.resetMocks();
+    fetch.mockRockDataSourceAPI();
+    schema = makeExecutableSchema({ typeDefs, resolvers });
+    context = getTestContext();
+  });
+
+  it("updates a user's attributes, if there is a current user", async () => {
+    const query = `
+      mutation {
+        updateProfileField(input: { field: FirstName, value: "Richard" }) {
+          firstName
+          id
+        }
+      }
+    `;
+    const { userToken, rockCookie } = registerToken(
+      generateToken({ cookie: 'some-cookie' })
+    );
+    context.userToken = userToken;
+    context.rockCookie = rockCookie;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('updates multiple fields', async () => {
+    const query = `
+      mutation {
+        updateProfileFields(input: [
+          { field: FirstName, value: "Richard" },
+          { field: LastName, value: "Walkerton" }
+        ]) {
+          firstName
+          lastName
+          id
+        }
+      }
+    `;
+    const { userToken, rockCookie } = registerToken(
+      generateToken({ cookie: 'some-cookie' })
+    );
+    context.userToken = userToken;
+    context.rockCookie = rockCookie;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it("fails to update a user's attributes, without a current user", async () => {
+    const query = `
+      mutation {
+        updateProfileField(input: { field: FirstName, value: "Richard" }) {
+          firstName
+          id
+        }
+      }
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('gets people by an email', async () => {
+    const query = `
+      query {
+        people(email: "isaac.hardy@newspring.cc") {
+          id
+          firstName
+          lastName
+          nickName
+          email
+          photo {
+            uri
+          }
+        }
+      }
+    `;
+    const rootValue = {};
+
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+
+  it('gets a single person when querying by root node', async () => {
+    const query = `
+      query {
+        node(
+          id: "${createGlobalId(51, 'Person')}"
+        ) {
+          ... on Person {
+            id
+            firstName
+            lastName
+            nickName
+            email
+            photo {
+              uri
+            }
+          }
+        }
+      }
+    `;
+    const rootValue = {};
+    const result = await graphql(schema, query, rootValue, context);
+    expect(result).toMatchSnapshot();
+  });
+});
diff --git a/apollos-church-api/src/data/people/data-source.js b/apollos-church-api/src/data/people/data-source.js
new file mode 100644
index 0000000..9b98e0f
--- /dev/null
+++ b/apollos-church-api/src/data/people/data-source.js
@@ -0,0 +1,63 @@
+import { AuthenticationError } from 'apollo-server';
+import FormData from 'form-data';
+import { camelCase, mapKeys } from 'lodash';
+import RockApolloDataSource from '../../connectors/rock/data-source';
+
+export default class Person extends RockApolloDataSource {
+  resource = 'People';
+
+  getFromId = (id) =>
+    this.request()
+      .find(id)
+      .get();
+
+  getFromEmail = (email) =>
+    this.request()
+      .filter(`Email eq '${email}'`)
+      .get();
+
+  // fields is an array of objects matching the pattern
+  // [{ field: String, value: String }]
+  updateProfile = async (fields) => {
+    const currentPerson = await this.context.dataSources.Auth.getCurrentPerson();
+
+    if (!currentPerson) throw new AuthenticationError('Invalid Credentials');
+
+    const fieldsAsObject = fields.reduce(
+      (accum, { field, value }) => ({
+        ...accum,
+        [field]: value,
+      }),
+      {}
+    );
+
+    await this.patch(`/People/${currentPerson.id}`, fieldsAsObject);
+
+    return {
+      ...currentPerson,
+      ...mapKeys(fieldsAsObject, (_, key) => camelCase(key)),
+    };
+  };
+
+  uploadProfileImage = async (file, length) => {
+    const { stream, filename } = await file;
+    const data = new FormData();
+    data.append('file', stream, {
+      filename,
+      knownLength: length,
+    });
+    const response = await this.nodeFetch(
+      `${this.baseURL}/BinaryFiles/Upload?binaryFileTypeId=5`,
+      {
+        method: 'POST',
+        body: data,
+        headers: {
+          'Authorization-Token': this.rockToken,
+          ...data.getHeaders(),
+        },
+      }
+    );
+    const photoId = await response.text();
+    return this.updateProfile([{ field: 'PhotoId', value: photoId }]);
+  };
+}
diff --git a/apollos-church-api/src/data/people/index.js b/apollos-church-api/src/data/people/index.js
new file mode 100644
index 0000000..9f2881c
--- /dev/null
+++ b/apollos-church-api/src/data/people/index.js
@@ -0,0 +1,6 @@
+import schema from './schema';
+import resolver from './resolver';
+// import model from './model';
+import dataSource from './data-source';
+
+export { schema, resolver, dataSource };
diff --git a/apollos-church-api/src/data/people/resolver.js b/apollos-church-api/src/data/people/resolver.js
new file mode 100644
index 0000000..f58e3c0
--- /dev/null
+++ b/apollos-church-api/src/data/people/resolver.js
@@ -0,0 +1,24 @@
+import { createGlobalId } from '../node';
+
+export default {
+  Query: {
+    people: (root, { email }, { dataSources }) =>
+      dataSources.Person.getFromEmail(email),
+  },
+  Mutation: {
+    updateProfileField: (root, { input: { field, value } }, { dataSources }) =>
+      dataSources.Person.updateProfile([{ field, value }]),
+    updateProfileFields: (root, { input }, { dataSources }) =>
+      dataSources.Person.updateProfile(input),
+    uploadProfileImage: async (root, { file, size }, { dataSources }) =>
+      dataSources.Person.uploadProfileImage(file, size),
+  },
+  Person: {
+    id: ({ id }, args, context, { parentType }) =>
+      createGlobalId(id, parentType.name),
+    photo: ({ photo: { url } }) => ({ uri: url }),
+    firstName: ({ firstName }) =>
+      typeof firstName === 'object' ? '' : firstName,
+    lastName: ({ lastName }) => (typeof lastName === 'object' ? '' : lastName),
+  },
+};
diff --git a/apollos-church-api/src/data/people/schema.js b/apollos-church-api/src/data/people/schema.js
new file mode 100644
index 0000000..712e3d3
--- /dev/null
+++ b/apollos-church-api/src/data/people/schema.js
@@ -0,0 +1,34 @@
+import { gql } from 'apollo-server';
+
+export default gql`
+  enum UPDATEABLE_PROFILE_FIELDS {
+    FirstName
+    LastName
+    Email
+    NickName
+  }
+
+  input UpdateProfileInput {
+    field: UPDATEABLE_PROFILE_FIELDS!
+    value: String!
+  }
+
+  type Person implements Node {
+    id: ID!
+    firstName: String!
+    lastName: String!
+    nickName: String
+    email: String
+    photo: ImageMediaSource
+  }
+
+  extend type Mutation {
+    updateProfileField(input: UpdateProfileInput!): Person
+    updateProfileFields(input: [UpdateProfileInput]!): Person
+    uploadProfileImage(file: Upload!, size: Int!): Person
+  }
+
+  extend type Query {
+    people(email: String!): [Person]
+  }
+`;
diff --git a/apollos-church-api/src/data/sharable/index.js b/apollos-church-api/src/data/sharable/index.js
new file mode 100644
index 0000000..aab622a
--- /dev/null
+++ b/apollos-church-api/src/data/sharable/index.js
@@ -0,0 +1,14 @@
+export const schema = `
+interface Sharable {
+  url: String
+  message: String
+  title: String
+}
+`;
+
+export const resolver = {
+  Sharable: {
+    // Implementors must attach __typename to root.
+    __resolveType: ({ __typename }) => __typename,
+  },
+};
diff --git a/apollos-church-api/src/getContext.js b/apollos-church-api/src/getContext.js
new file mode 100644
index 0000000..fc2af43
--- /dev/null
+++ b/apollos-church-api/src/getContext.js
@@ -0,0 +1,39 @@
+import dotenv from 'dotenv/config'; // eslint-disable-line
+import { get } from 'lodash';
+
+import { registerToken } from './data/auth/token';
+
+import { models } from './data';
+
+// Construct a context object for each request
+export default ({ req = {} } = {}) => {
+  // initialize connectors for every request so API fetches
+  // are deduplicated per-request only.
+  const connectors = {};
+
+  const initiatedModels = {};
+
+  const context = {
+    models: initiatedModels,
+    connectors,
+  };
+
+  Object.keys(models).forEach((modelName) => {
+    if (models[modelName]) {
+      initiatedModels[modelName] = new models[modelName](context);
+    }
+  });
+
+  if (get(req, 'headers.authorization')) {
+    const { userToken, rockCookie, sessionId } = registerToken(
+      req.headers.authorization
+    );
+    if (sessionId) {
+      context.userToken = userToken;
+      context.rockCookie = rockCookie;
+      context.sessionId = sessionId;
+    }
+  }
+
+  return context;
+};
diff --git a/apollos-church-api/src/getDataSources.js b/apollos-church-api/src/getDataSources.js
new file mode 100644
index 0000000..100f28f
--- /dev/null
+++ b/apollos-church-api/src/getDataSources.js
@@ -0,0 +1,16 @@
+import { dataSources } from './data';
+
+export default () => {
+  const sources = {};
+  Object.keys(dataSources).forEach((dataSourceName) => {
+    if (dataSources[dataSourceName]) {
+      sources[dataSourceName] = new dataSources[dataSourceName]();
+    }
+  });
+
+  return {
+    ...sources,
+    UniversalContentItem: sources.ContentItem, // alias
+    DevotionalContentItem: sources.ContentItem, // alias
+  };
+};
diff --git a/apollos-church-api/src/index.js b/apollos-church-api/src/index.js
index a7f0ca1..afb3fd0 100644
--- a/apollos-church-api/src/index.js
+++ b/apollos-church-api/src/index.js
@@ -1,16 +1,11 @@
-import dotenv from 'dotenv/config'; // eslint-disable-line
-import config from './config'; // eslint-disable-line
 import server from './server';
 
 export { testSchema } from './server'; // eslint-disable-line import/prefer-default-export
 
 // Use the port, if provided.
 const { PORT } = process.env;
-if (!PORT && process.env.NODE_ENV !== 'test')
-  console.warn(
-    'Add `ENV=4000` if you are having trouble connecting to the server. By default, PORT is random.'
-  );
+const options = PORT ? { port: PORT } : {};
 
-server.listen({ port: PORT }).then(({ url }) => {
+server.listen(options).then(({ url }) => {
   console.log(`🚀 Server ready at ${url}`);
 });
diff --git a/apollos-church-api/src/server.js b/apollos-church-api/src/server.js
index e82048c..cfeb876 100644
--- a/apollos-church-api/src/server.js
+++ b/apollos-church-api/src/server.js
@@ -1,14 +1,17 @@
+import dotenv from 'dotenv/config'; // eslint-disable-line
 import { ApolloServer } from 'apollo-server';
+import { resolvers, schema, testSchema } from './data';
 
-import { resolvers, schema, testSchema, context, dataSources } from './data';
+import getContext from './getContext';
+import getDataSources from './getDataSources';
 
 export { resolvers, schema, testSchema };
 
 export default new ApolloServer({
   typeDefs: schema,
   resolvers,
-  dataSources,
-  context,
+  dataSources: getDataSources,
+  context: getContext,
   introspection: true,
   formatError: (error) => {
     console.error(error.extensions.exception.stacktrace.join('\n'));
diff --git a/apollos-church-api/src/utils/cursor.js b/apollos-church-api/src/utils/cursor.js
new file mode 100644
index 0000000..8727100
--- /dev/null
+++ b/apollos-church-api/src/utils/cursor.js
@@ -0,0 +1,25 @@
+import Crypto from 'crypto';
+
+const secret = process.env.SECRET || 'SEfjsvoSDFnvblaE';
+
+export function createCursor(obj) {
+  const str = JSON.stringify(obj);
+  const cipher = Crypto.createCipher('aes192', secret);
+  let encrypted = cipher.update(str, 'utf8', 'hex');
+  encrypted += cipher.final('hex');
+
+  return encodeURI(encrypted);
+}
+
+export function parseCursor(str) {
+  try {
+    const decipher = Crypto.createDecipher('aes192', secret);
+
+    let decrypted = decipher.update(decodeURI(str), 'hex', 'utf8');
+    decrypted += decipher.final('utf8');
+
+    return JSON.parse(decrypted);
+  } catch (e) {
+    throw new Error('Error parsing cursor');
+  }
+}
diff --git a/apollos-church-api/src/utils/cursor.tests.js b/apollos-church-api/src/utils/cursor.tests.js
new file mode 100644
index 0000000..2d9d958
--- /dev/null
+++ b/apollos-church-api/src/utils/cursor.tests.js
@@ -0,0 +1,21 @@
+import casual from 'casual';
+import { createCursor, parseCursor } from './cursor';
+
+describe('Node', () => {
+  it('`createCursor` should take a valid json shape and return a string', () => {
+    const id = casual.word;
+
+    expect(typeof createCursor({ id })).toEqual('string');
+  });
+
+  it('`createCursor` should be decodeable by `parseCursor`', () => {
+    const id = 'molestiae';
+    const cursor = createCursor({ id });
+
+    expect(parseCursor(cursor)).toMatchSnapshot();
+  });
+
+  it('`parseCursor` should throw an error if cursor is invalid', () => {
+    expect(() => parseCursor('blah-blah')).toThrow();
+  });
+});
diff --git a/apollos-church-api/src/utils/sanitize-html.js b/apollos-church-api/src/utils/sanitize-html.js
new file mode 100644
index 0000000..3e3478a
--- /dev/null
+++ b/apollos-church-api/src/utils/sanitize-html.js
@@ -0,0 +1,36 @@
+import sanitizeHtml from 'sanitize-html';
+
+const allowedTags = [
+  'h1',
+  'h2',
+  'h3',
+  'h4',
+  'h5',
+  'h6',
+  'blockquote',
+  'p',
+  'a',
+  'ul',
+  'ol',
+  'li',
+  'b',
+  'i',
+  'strong',
+  'em',
+  'br',
+  'caption',
+  'img',
+];
+
+const allowedAttributes = {
+  a: ['href'],
+  img: ['src'],
+};
+
+// A very picky HTML sanitizer
+export default function(dirty) {
+  return sanitizeHtml(dirty, {
+    allowedTags,
+    allowedAttributes,
+  });
+}
diff --git a/apollos-church-api/src/utils/testUtils.js b/apollos-church-api/src/utils/testUtils.js
index 5f1c527..b9e5a55 100644
--- a/apollos-church-api/src/utils/testUtils.js
+++ b/apollos-church-api/src/utils/testUtils.js
@@ -1,11 +1,10 @@
 import { KeyValueCache } from 'apollo-server-caching';
-import {
-  context as getContext,
-  dataSources as getDataSources,
-} from '../data/index';
+import getContext from '../getContext';
+import getDataSources from '../getDataSources';
 
 export function getTestContext(req) {
   const context = getContext(req);
+
   const dataSources = getDataSources();
   // Apollo Server does this internally.
   Object.values(dataSources).forEach((dataSource) => {
diff --git a/apolloschurchapp/.babelrc b/apolloschurchapp/.babelrc
index 25c8292..5df9466 100644
--- a/apolloschurchapp/.babelrc
+++ b/apolloschurchapp/.babelrc
@@ -1,5 +1,5 @@
 {
-  "presets": ["module:metro-react-native-babel-preset", "module:react-native-dotenv"],
+  "presets": ["react-native", "module:react-native-dotenv"],
   "plugins": [
     ["@babel/plugin-proposal-decorators", {
       "legacy": true
diff --git a/apolloschurchapp/.env.production b/apolloschurchapp/.env.production
index 4f37d9c..d3b0b34 100644
--- a/apolloschurchapp/.env.production
+++ b/apolloschurchapp/.env.production
@@ -1,3 +1,2 @@
-APP_DATA_URL=https://apollos-church-api.herokuapp.com/
+APP_DATA_URL=https://apollos-church-api.now.sh
 ONE_SIGNAL_KEY=$ONE_SIGNAL_KEY
-ANDROID_URL=doesnotmatter
\ No newline at end of file
diff --git a/apolloschurchapp/.flowconfig b/apolloschurchapp/.flowconfig
index 1043c82..3c0adb5 100644
--- a/apolloschurchapp/.flowconfig
+++ b/apolloschurchapp/.flowconfig
@@ -29,9 +29,6 @@ node_modules/react-native/flow-github/
 [options]
 emoji=true
 
-esproposal.optional_chaining=enable
-esproposal.nullish_coalescing=enable
-
 module.system=haste
 module.system.haste.use_name_reducers=true
 # get basename
@@ -67,4 +64,4 @@ suppress_comment=\\(.\\|\n\\)*\\$FlowFixedInNextDeploy
 suppress_comment=\\(.\\|\n\\)*\\$FlowExpectedError
 
 [version]
-^0.78.0
+^0.75.0
diff --git a/apolloschurchapp/.npmignore b/apolloschurchapp/.npmignore
deleted file mode 100644
index 93f3929..0000000
--- a/apolloschurchapp/.npmignore
+++ /dev/null
@@ -1,2 +0,0 @@
-*
-!lib/**
diff --git a/apolloschurchapp/android/app/build.gradle b/apolloschurchapp/android/app/build.gradle
index 6be0c59..0cc8441 100644
--- a/apolloschurchapp/android/app/build.gradle
+++ b/apolloschurchapp/android/app/build.gradle
@@ -108,11 +108,11 @@ android {
     buildToolsVersion rootProject.ext.buildToolsVersion
 
     defaultConfig {
-        applicationId "com.apolloschurch.app"
+        applicationId "com.apolloschurchapp"
         minSdkVersion rootProject.ext.minSdkVersion
         targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 5
-        versionName "0.7.0"
+        versionCode 3
+        versionName "0.5.0"
         ndk {
             abiFilters "armeabi-v7a", "x86"
         }
@@ -147,7 +147,6 @@ android {
 }
 
 dependencies {
-    compile project(':react-native-screens')
     compile project(':react-native-onesignal')
     compile project(':react-native-image-picker')
     compile project(':react-native-music-control')
@@ -157,9 +156,9 @@ dependencies {
     compile project(':react-native-splash-screen')
     compile project(':react-native-linear-gradient')
     compile project(':react-native-custom-tabs')
-    implementation fileTree(dir: "libs", include: ["*.jar"])
-    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
-    implementation "com.facebook.react:react-native:+"  // From node_modules
+    compile fileTree(dir: "libs", include: ["*.jar"])
+    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
+    compile "com.facebook.react:react-native:+"  // From node_modules
 }
 
 // Run this once to be able to run the application with BUCK
diff --git a/apolloschurchapp/android/app/src/main/java/com/apolloschurchapp/MainActivity.java b/apolloschurchapp/android/app/src/main/java/com/apolloschurchapp/MainActivity.java
index 0b9f1ce..3824a3a 100644
--- a/apolloschurchapp/android/app/src/main/java/com/apolloschurchapp/MainActivity.java
+++ b/apolloschurchapp/android/app/src/main/java/com/apolloschurchapp/MainActivity.java
@@ -1,4 +1,5 @@
 package com.apolloschurchapp;
+
 import android.os.Bundle;
 import com.facebook.react.ReactActivity;
 import org.devio.rn.splashscreen.SplashScreen;
diff --git a/apolloschurchapp/android/app/src/main/java/com/apolloschurchapp/MainApplication.java b/apolloschurchapp/android/app/src/main/java/com/apolloschurchapp/MainApplication.java
index 95e9084..31d896b 100644
--- a/apolloschurchapp/android/app/src/main/java/com/apolloschurchapp/MainApplication.java
+++ b/apolloschurchapp/android/app/src/main/java/com/apolloschurchapp/MainApplication.java
@@ -3,7 +3,6 @@ package com.apolloschurchapp;
 import android.app.Application;
 
 import com.facebook.react.ReactApplication;
-import com.swmansion.rnscreens.RNScreenPackage;
 import com.geektime.rnonesignalandroid.ReactNativeOneSignalPackage;
 import com.imagepicker.ImagePickerPackage;
 import com.tanguyantoine.react.MusicControl;
@@ -33,7 +32,6 @@ public class MainApplication extends Application implements ReactApplication {
     protected List<ReactPackage> getPackages() {
       return Arrays.<ReactPackage>asList(
           new MainReactPackage(),
-            new RNScreenPackage(),
             new ReactNativeOneSignalPackage(),
             new ImagePickerPackage(),
             new MusicControl(),
diff --git a/apolloschurchapp/android/app/src/main/res/drawable/background_splash.xml b/apolloschurchapp/android/app/src/main/res/drawable/background_splash.xml
index 4f85728..cee9de4 100644
--- a/apolloschurchapp/android/app/src/main/res/drawable/background_splash.xml
+++ b/apolloschurchapp/android/app/src/main/res/drawable/background_splash.xml
@@ -7,7 +7,7 @@
     <item
         android:width="95.28dp"
         android:height="100dp"
-        android:top="-24dp"
         android:drawable="@mipmap/splash_icon"
         android:gravity="center" />
+
 </layer-list>
diff --git a/apolloschurchapp/android/app/src/main/res/layout/launch_screen.xml b/apolloschurchapp/android/app/src/main/res/layout/launch_screen.xml
index 0009481..852bd17 100644
--- a/apolloschurchapp/android/app/src/main/res/layout/launch_screen.xml
+++ b/apolloschurchapp/android/app/src/main/res/layout/launch_screen.xml
@@ -5,9 +5,11 @@
     android:layout_height="match_parent"
     android:background="@color/deep_water"
     android:gravity="center">
-
     <ImageView
+
         android:layout_width="95.28dp"
         android:layout_height="100dp"
-        android:src="@mipmap/splash_icon" />
+        android:layout_marginTop="-24dp"
+        android:src="@mipmap/splash_icon"
+    />
 </LinearLayout>
diff --git a/apolloschurchapp/android/build.gradle b/apolloschurchapp/android/build.gradle
index dea1a1c..4d334b9 100644
--- a/apolloschurchapp/android/build.gradle
+++ b/apolloschurchapp/android/build.gradle
@@ -1,13 +1,6 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 
 buildscript {
-    ext {
-        buildToolsVersion = "27.0.3"
-        minSdkVersion = 16
-        compileSdkVersion = 27
-        targetSdkVersion = 26
-        supportLibVersion = "27.1.1"
-    }
     repositories {
         jcenter()
         maven {
@@ -50,7 +43,7 @@ ext {
 }
 
 subprojects {
-    afterEvaluate { project ->
+    afterEvaluate {project ->
         if (project.hasProperty("android")) {
             android {
                 compileSdkVersion rootProject.ext.compileSdkVersion
@@ -59,8 +52,3 @@ subprojects {
         }
     }
 }
-
-task wrapper(type: Wrapper) {
-    gradleVersion = '4.4'
-    distributionUrl = distributionUrl.replace("bin", "all")
-}
diff --git a/apolloschurchapp/android/gradle.properties b/apolloschurchapp/android/gradle.properties
index 89e0d99..1fd964e 100644
--- a/apolloschurchapp/android/gradle.properties
+++ b/apolloschurchapp/android/gradle.properties
@@ -16,3 +16,5 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
+
+android.useDeprecatedNdk=true
diff --git a/apolloschurchapp/android/gradle/wrapper/gradle-wrapper.jar b/apolloschurchapp/android/gradle/wrapper/gradle-wrapper.jar
index 01b8bf6b1f99cad9213fc495b33ad5bbab8efd20..b5166dad4d90021f6a0b45268c0755719f1d5cd4 100644
GIT binary patch
delta 40346
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
MR6yud!{M+00Sm=Wj{pDw

delta 42314
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
Bz<B@w

diff --git a/apolloschurchapp/android/gradle/wrapper/gradle-wrapper.properties b/apolloschurchapp/android/gradle/wrapper/gradle-wrapper.properties
index b6517bb..e796cbc 100644
--- a/apolloschurchapp/android/gradle/wrapper/gradle-wrapper.properties
+++ b/apolloschurchapp/android/gradle/wrapper/gradle-wrapper.properties
@@ -1,3 +1,4 @@
+#Fri Oct 05 11:32:34 EDT 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
diff --git a/apolloschurchapp/android/gradlew b/apolloschurchapp/android/gradlew
index cccdd3d..91a7e26 100755
--- a/apolloschurchapp/android/gradlew
+++ b/apolloschurchapp/android/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env sh
+#!/usr/bin/env bash
 
 ##############################################################################
 ##
@@ -6,38 +6,20 @@
 ##
 ##############################################################################
 
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn () {
+warn ( ) {
     echo "$*"
 }
 
-die () {
+die ( ) {
     echo
     echo "$*"
     echo
@@ -48,7 +30,6 @@ die () {
 cygwin=false
 msys=false
 darwin=false
-nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -59,11 +40,31 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
-  NONSTOP* )
-    nonstop=true
-    ;;
 esac
 
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -89,7 +90,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -113,7 +114,6 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
@@ -154,19 +154,11 @@ if $cygwin ; then
     esac
 fi
 
-# Escape application args
-save () {
-    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
-    echo " "
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
 }
-APP_ARGS=$(save "$@")
-
-# Collect all arguments for the java command, following the shell quoting and substitution rules
-eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
-
-# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
-if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
-  cd "$(dirname "$0")"
-fi
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
 
-exec "$JAVACMD" "$@"
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/apolloschurchapp/android/gradlew.bat b/apolloschurchapp/android/gradlew.bat
index e95643d..aec9973 100644
--- a/apolloschurchapp/android/gradlew.bat
+++ b/apolloschurchapp/android/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,9 +46,10 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windows variants
+@rem Get command-line arguments, handling Windowz variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -59,6 +60,11 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/apolloschurchapp/android/settings.gradle b/apolloschurchapp/android/settings.gradle
index e1ecbb9..f6c1313 100644
--- a/apolloschurchapp/android/settings.gradle
+++ b/apolloschurchapp/android/settings.gradle
@@ -1,6 +1,4 @@
 rootProject.name = 'apolloschurchapp'
-include ':react-native-screens'
-project(':react-native-screens').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-screens/android')
 include ':react-native-onesignal'
 project(':react-native-onesignal').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-onesignal/android')
 include ':react-native-image-picker'
diff --git a/apolloschurchapp/appcenter-pre-build.sh b/apolloschurchapp/appcenter-pre-build.sh
index c666ab2..492aef8 100644
--- a/apolloschurchapp/appcenter-pre-build.sh
+++ b/apolloschurchapp/appcenter-pre-build.sh
@@ -3,6 +3,3 @@
 droid_dir=$(pwd)/android
 
 cp $droid_dir/gradle.properties.appcenter $droid_dir/gradle.properties
-
-cd ../../
-yarn
diff --git a/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist b/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
index aed24ed..e1fe057 100644
--- a/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp-tvOS/Info.plist
@@ -15,13 +15,13 @@
 	<key>CFBundlePackageType</key>
 	<string>APPL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.7.0</string>
+	<string>0.5.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>5</string>
+	<string>3</string>
 	<key>LSRequiresIPhoneOS</key>
-	<true />
+	<true/>
 	<key>UILaunchStoryboardName</key>
 	<string>LaunchScreen</string>
 	<key>UIRequiredDeviceCapabilities</key>
@@ -35,9 +35,9 @@
 		<string>UIInterfaceOrientationLandscapeRight</string>
 	</array>
 	<key>UIViewControllerBasedStatusBarAppearance</key>
-	<false />
+	<false/>
 	<key>NSLocationWhenInUseUsageDescription</key>
-	<string />
+	<string/>
 	<key>NSAppTransportSecurity</key>
 	<dict>
 		<key>NSExceptionDomains</key>
@@ -45,7 +45,7 @@
 			<key>localhost</key>
 			<dict>
 				<key>NSExceptionAllowsInsecureHTTPLoads</key>
-				<true />
+				<true/>
 			</dict>
 		</dict>
 	</dict>
diff --git a/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist b/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
index e358b6d..4491f31 100644
--- a/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp-tvOSTests/Info.plist
@@ -15,10 +15,10 @@
 	<key>CFBundlePackageType</key>
 	<string>BNDL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.7.0</string>
+	<string>0.5.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>5</string>
+	<string>3</string>
 </dict>
 </plist>
diff --git a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
index a1d174c..4fca692 100644
--- a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
+++ b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/project.pbxproj
@@ -5,7 +5,6 @@
 	};
 	objectVersion = 46;
 	objects = {
-
 /* Begin PBXBuildFile section */
 		00C302E51ABCBA2D00DB3ED1 /* libRCTActionSheet.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 00C302AC1ABCB8CE00DB3ED1 /* libRCTActionSheet.a */; };
 		00C302E71ABCBA2D00DB3ED1 /* libRCTGeolocation.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 00C302BA1ABCB90400DB3ED1 /* libRCTGeolocation.a */; };
@@ -42,7 +41,6 @@
 		417027FD83CA4902AB4DB2B4 /* Inter-UI-Black.otf in Resources */ = {isa = PBXBuildFile; fileRef = 8E13C8F9AE60487C9ED95C21 /* Inter-UI-Black.otf */; };
 		4B29B8AACC2A4FB7BA6A8EEB /* libSafariViewManager.a in Frameworks */ = {isa = PBXBuildFile; fileRef = BF5A2B416EB74A44923FED7B /* libSafariViewManager.a */; };
 		59D8DFA78CDF4642892CC142 /* DroidSerif-BoldItalic.ttf in Resources */ = {isa = PBXBuildFile; fileRef = D979B537509247C099CE3F24 /* DroidSerif-BoldItalic.ttf */; };
-		5C862E57737C4032A378868D /* libRNScreens.a in Frameworks */ = {isa = PBXBuildFile; fileRef = B16900D1DAC94F96B742B4EA /* libRNScreens.a */; };
 		5CA1D8E805684478B04ABB60 /* Inter-UI-Italic.otf in Resources */ = {isa = PBXBuildFile; fileRef = 8CA3C04F98954FB2895CD36D /* Inter-UI-Italic.otf */; };
 		5E9157361DD0AC6A00FF2AA8 /* libRCTAnimation.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 5E9157331DD0AC6500FF2AA8 /* libRCTAnimation.a */; };
 		6C6BE3C2189E4FBA9FB66BE5 /* libRCTOneSignal.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 828255630B3246AEA19CF24D /* libRCTOneSignal.a */; };
@@ -312,13 +310,6 @@
 			remoteGlobalIDString = 3245CDED1BFEE35C00EABF68;
 			remoteInfo = RCTOneSignal;
 		};
-		42B4B6CB219DD7CB00162F25 /* PBXContainerItemProxy */ = {
-			isa = PBXContainerItemProxy;
-			containerPortal = 59AF37DEFAA847DBAB3A0526 /* RNScreens.xcodeproj */;
-			proxyType = 2;
-			remoteGlobalIDString = 134814201AA4EA6300B7C361;
-			remoteInfo = RNScreens;
-		};
 		5E9157321DD0AC6500FF2AA8 /* PBXContainerItemProxy */ = {
 			isa = PBXContainerItemProxy;
 			containerPortal = 5E91572D1DD0AC6500FF2AA8 /* RCTAnimation.xcodeproj */;
@@ -403,13 +394,6 @@
 			remoteGlobalIDString = 3D7682761D8E76B80014119E;
 			remoteInfo = SplashScreen;
 		};
-		794FE987219DF8880046142B /* PBXContainerItemProxy */ = {
-			isa = PBXContainerItemProxy;
-			containerPortal = 59AF37DEFAA847DBAB3A0526 /* RNScreens.xcodeproj */;
-			proxyType = 2;
-			remoteGlobalIDString = 134814201AA4EA6300B7C361;
-			remoteInfo = RNScreens;
-		};
 		796F2532212CAD5D00C6935E /* PBXContainerItemProxy */ = {
 			isa = PBXContainerItemProxy;
 			containerPortal = 239ECFF08FA841B99DB1CAFA /* RNDeviceInfo.xcodeproj */;
@@ -512,7 +496,6 @@
 		4629759169AB4756B447B16A /* DroidSerif-Bold.ttf */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = unknown; name = "DroidSerif-Bold.ttf"; path = "../assets/fonts/DroidSerif-Bold.ttf"; sourceTree = "<group>"; };
 		46704FC4FCEB45B6B9DD92BB /* BVLinearGradient.xcodeproj */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = "wrapper.pb-project"; name = BVLinearGradient.xcodeproj; path = "../node_modules/react-native-linear-gradient/BVLinearGradient.xcodeproj"; sourceTree = "<group>"; };
 		4BD3C4E6742F4F6380640CA9 /* MusicControl.xcodeproj */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = "wrapper.pb-project"; name = MusicControl.xcodeproj; path = "../node_modules/react-native-music-control/ios/MusicControl.xcodeproj"; sourceTree = "<group>"; };
-		59AF37DEFAA847DBAB3A0526 /* RNScreens.xcodeproj */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = "wrapper.pb-project"; name = RNScreens.xcodeproj; path = "../node_modules/react-native-screens/ios/RNScreens.xcodeproj"; sourceTree = "<group>"; };
 		5E91572D1DD0AC6500FF2AA8 /* RCTAnimation.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = "wrapper.pb-project"; name = RCTAnimation.xcodeproj; path = "../node_modules/react-native/Libraries/NativeAnimation/RCTAnimation.xcodeproj"; sourceTree = "<group>"; };
 		60E52391C9744A46B3925A78 /* libBVLinearGradient.a */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = archive.ar; path = libBVLinearGradient.a; sourceTree = "<group>"; };
 		643D51DCF8F14993B9AA6990 /* libMusicControl.a */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = archive.ar; path = libMusicControl.a; sourceTree = "<group>"; };
@@ -532,7 +515,6 @@
 		A574C961754742F688E43151 /* libRNDeviceInfo-tvOS.a */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = archive.ar; path = "libRNDeviceInfo-tvOS.a"; sourceTree = "<group>"; };
 		A64D00F181AE4927A4632B6E /* SplashScreen.xcodeproj */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = "wrapper.pb-project"; name = SplashScreen.xcodeproj; path = "../node_modules/react-native-splash-screen/ios/SplashScreen.xcodeproj"; sourceTree = "<group>"; };
 		ADBDB91F1DFEBF0600ED6528 /* RCTBlob.xcodeproj */ = {isa = PBXFileReference; lastKnownFileType = "wrapper.pb-project"; name = RCTBlob.xcodeproj; path = "../node_modules/react-native/Libraries/Blob/RCTBlob.xcodeproj"; sourceTree = "<group>"; };
-		B16900D1DAC94F96B742B4EA /* libRNScreens.a */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = archive.ar; path = libRNScreens.a; sourceTree = "<group>"; };
 		BF5A2B416EB74A44923FED7B /* libSafariViewManager.a */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = archive.ar; path = libSafariViewManager.a; sourceTree = "<group>"; };
 		CFAF46FBA8B44C7B8DCA7707 /* libRNSVG.a */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = archive.ar; path = libRNSVG.a; sourceTree = "<group>"; };
 		D979B537509247C099CE3F24 /* DroidSerif-BoldItalic.ttf */ = {isa = PBXFileReference; explicitFileType = undefined; fileEncoding = 9; includeInIndex = 0; lastKnownFileType = unknown; name = "DroidSerif-BoldItalic.ttf"; path = "../assets/fonts/DroidSerif-BoldItalic.ttf"; sourceTree = "<group>"; };
@@ -579,7 +561,6 @@
 				B5DE58C6CF1E4E7ABDD1B48D /* libRNImagePicker.a in Frameworks */,
 				1C1FD8B313AB4A6583A0D31B /* libRNDeviceInfo.a in Frameworks */,
 				1680179655164C96985B5731 /* libMusicControl.a in Frameworks */,
-				5C862E57737C4032A378868D /* libRNScreens.a in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -747,14 +728,6 @@
 			name = Products;
 			sourceTree = "<group>";
 		};
-		42B4B698219DD7CA00162F25 /* Products */ = {
-			isa = PBXGroup;
-			children = (
-				42B4B6CC219DD7CB00162F25 /* libRNScreens.a */,
-			);
-			name = Products;
-			sourceTree = "<group>";
-		};
 		4446111C6E474E038489E599 /* Resources */ = {
 			isa = PBXGroup;
 			children = (
@@ -808,7 +781,7 @@
 				A574C961754742F688E43151 /* libRNDeviceInfo-tvOS.a */,
 				643D51DCF8F14993B9AA6990 /* libMusicControl.a */,
 				67E66409EF8A4BC7A1B9E054 /* libMusicControl-tvOS.a */,
-				B16900D1DAC94F96B742B4EA /* libRNScreens.a */,
+				A3ED0F5641694C579CA8E52D /* libRNBlur.a */,
 			);
 			name = "Recovered References";
 			sourceTree = "<group>";
@@ -864,14 +837,6 @@
 			name = Products;
 			sourceTree = "<group>";
 		};
-		794FE954219DF8880046142B /* Products */ = {
-			isa = PBXGroup;
-			children = (
-				794FE988219DF8880046142B /* libRNScreens.a */,
-			);
-			name = Products;
-			sourceTree = "<group>";
-		};
 		796F252E212CAD5D00C6935E /* Products */ = {
 			isa = PBXGroup;
 			children = (
@@ -915,7 +880,6 @@
 				3BD7DCDF7B194D7BB9BE3C6C /* RNImagePicker.xcodeproj */,
 				239ECFF08FA841B99DB1CAFA /* RNDeviceInfo.xcodeproj */,
 				4BD3C4E6742F4F6380640CA9 /* MusicControl.xcodeproj */,
-				59AF37DEFAA847DBAB3A0526 /* RNScreens.xcodeproj */,
 			);
 			name = Libraries;
 			sourceTree = "<group>";
@@ -1169,10 +1133,6 @@
 					ProductGroup = BF99316D2138673B0077FD20 /* Products */;
 					ProjectRef = 3BD7DCDF7B194D7BB9BE3C6C /* RNImagePicker.xcodeproj */;
 				},
-				{
-					ProductGroup = 42B4B698219DD7CA00162F25 /* Products */;
-					ProjectRef = 59AF37DEFAA847DBAB3A0526 /* RNScreens.xcodeproj */;
-				},
 				{
 					ProductGroup = 791434702126017A006F13B7 /* Products */;
 					ProjectRef = 01441BF099BE44EE8BA8E390 /* RNSVG.xcodeproj */;
@@ -1428,13 +1388,6 @@
 			remoteRef = 427787EC2149B96A0045AD7F /* PBXContainerItemProxy */;
 			sourceTree = BUILT_PRODUCTS_DIR;
 		};
-		42B4B6CC219DD7CB00162F25 /* libRNScreens.a */ = {
-			isa = PBXReferenceProxy;
-			fileType = archive.ar;
-			path = libRNScreens.a;
-			remoteRef = 42B4B6CB219DD7CB00162F25 /* PBXContainerItemProxy */;
-			sourceTree = BUILT_PRODUCTS_DIR;
-		};
 		5E9157331DD0AC6500FF2AA8 /* libRCTAnimation.a */ = {
 			isa = PBXReferenceProxy;
 			fileType = archive.ar;
@@ -1519,13 +1472,6 @@
 			remoteRef = 7914348D2126017B006F13B7 /* PBXContainerItemProxy */;
 			sourceTree = BUILT_PRODUCTS_DIR;
 		};
-		794FE988219DF8880046142B /* libRNScreens.a */ = {
-			isa = PBXReferenceProxy;
-			fileType = archive.ar;
-			path = libRNScreens.a;
-			remoteRef = 794FE987219DF8880046142B /* PBXContainerItemProxy */;
-			sourceTree = BUILT_PRODUCTS_DIR;
-		};
 		796F2533212CAD5D00C6935E /* libRNDeviceInfo.a */ = {
 			isa = PBXReferenceProxy;
 			fileType = archive.ar;
@@ -1737,14 +1683,12 @@
 					"$(SRCROOT)/../node_modules/react-native-image-picker/ios",
 					"$(SRCROOT)/../node_modules/react-native-device-info/ios/RNDeviceInfo",
 					"$(SRCROOT)/../node_modules/react-native-music-control/ios",
-					"$(SRCROOT)/../node_modules/react-native-screens/ios",
 				);
 				INFOPLIST_FILE = apolloschurchappTests/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
 				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks @loader_path/Frameworks";
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
-					"\"$(SRCROOT)/$(TARGET_NAME)\"",
 				);
 				OTHER_LDFLAGS = (
 					"-ObjC",
@@ -1772,14 +1716,12 @@
 					"$(SRCROOT)/../node_modules/react-native-image-picker/ios",
 					"$(SRCROOT)/../node_modules/react-native-device-info/ios/RNDeviceInfo",
 					"$(SRCROOT)/../node_modules/react-native-music-control/ios",
-					"$(SRCROOT)/../node_modules/react-native-screens/ios",
 				);
 				INFOPLIST_FILE = apolloschurchappTests/Info.plist;
 				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
 				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks @loader_path/Frameworks";
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
-					"\"$(SRCROOT)/$(TARGET_NAME)\"",
 				);
 				OTHER_LDFLAGS = (
 					"-ObjC",
@@ -1796,7 +1738,7 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CODE_SIGN_ENTITLEMENTS = apolloschurchapp/apolloschurchapp.entitlements;
 				CODE_SIGN_IDENTITY = "iPhone Developer";
-				CURRENT_PROJECT_VERSION = 5;
+				CURRENT_PROJECT_VERSION = 3;
 				DEAD_CODE_STRIPPING = NO;
 				DEVELOPMENT_TEAM = 7TM8C6252Z;
 				HEADER_SEARCH_PATHS = (
@@ -1811,7 +1753,6 @@
 					"$(SRCROOT)/../node_modules/react-native-image-picker/ios",
 					"$(SRCROOT)/../node_modules/react-native-device-info/ios/RNDeviceInfo",
 					"$(SRCROOT)/../node_modules/react-native-music-control/ios",
-					"$(SRCROOT)/../node_modules/react-native-screens/ios",
 				);
 				INFOPLIST_FILE = apolloschurchapp/Info.plist;
 				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
@@ -1831,7 +1772,7 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CODE_SIGN_ENTITLEMENTS = apolloschurchapp/apolloschurchapp.entitlements;
 				CODE_SIGN_IDENTITY = "iPhone Developer";
-				CURRENT_PROJECT_VERSION = 5;
+				CURRENT_PROJECT_VERSION = 3;
 				DEVELOPMENT_TEAM = 7TM8C6252Z;
 				HEADER_SEARCH_PATHS = (
 					"$(inherited)",
@@ -1845,7 +1786,6 @@
 					"$(SRCROOT)/../node_modules/react-native-image-picker/ios",
 					"$(SRCROOT)/../node_modules/react-native-device-info/ios/RNDeviceInfo",
 					"$(SRCROOT)/../node_modules/react-native-music-control/ios",
-					"$(SRCROOT)/../node_modules/react-native-screens/ios",
 				);
 				INFOPLIST_FILE = apolloschurchapp/Info.plist;
 				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
@@ -1883,13 +1823,11 @@
 					"$(SRCROOT)/../node_modules/react-native-image-picker/ios",
 					"$(SRCROOT)/../node_modules/react-native-device-info/ios/RNDeviceInfo",
 					"$(SRCROOT)/../node_modules/react-native-music-control/ios",
-					"$(SRCROOT)/../node_modules/react-native-screens/ios",
 				);
 				INFOPLIST_FILE = "apolloschurchapp-tvOS/Info.plist";
 				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
-					"\"$(SRCROOT)/$(TARGET_NAME)\"",
 				);
 				OTHER_LDFLAGS = (
 					"-ObjC",
@@ -1927,13 +1865,11 @@
 					"$(SRCROOT)/../node_modules/react-native-image-picker/ios",
 					"$(SRCROOT)/../node_modules/react-native-device-info/ios/RNDeviceInfo",
 					"$(SRCROOT)/../node_modules/react-native-music-control/ios",
-					"$(SRCROOT)/../node_modules/react-native-screens/ios",
 				);
 				INFOPLIST_FILE = "apolloschurchapp-tvOS/Info.plist";
 				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
-					"\"$(SRCROOT)/$(TARGET_NAME)\"",
 				);
 				OTHER_LDFLAGS = (
 					"-ObjC",
@@ -1970,13 +1906,11 @@
 					"$(SRCROOT)/../node_modules/react-native-image-picker/ios",
 					"$(SRCROOT)/../node_modules/react-native-device-info/ios/RNDeviceInfo",
 					"$(SRCROOT)/../node_modules/react-native-music-control/ios",
-					"$(SRCROOT)/../node_modules/react-native-screens/ios",
 				);
 				INFOPLIST_FILE = "apolloschurchapp-tvOSTests/Info.plist";
 				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks @loader_path/Frameworks";
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
-					"\"$(SRCROOT)/$(TARGET_NAME)\"",
 				);
 				OTHER_LDFLAGS = (
 					"-ObjC",
@@ -2013,13 +1947,11 @@
 					"$(SRCROOT)/../node_modules/react-native-image-picker/ios",
 					"$(SRCROOT)/../node_modules/react-native-device-info/ios/RNDeviceInfo",
 					"$(SRCROOT)/../node_modules/react-native-music-control/ios",
-					"$(SRCROOT)/../node_modules/react-native-screens/ios",
 				);
 				INFOPLIST_FILE = "apolloschurchapp-tvOSTests/Info.plist";
 				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks @loader_path/Frameworks";
 				LIBRARY_SEARCH_PATHS = (
 					"$(inherited)",
-					"\"$(SRCROOT)/$(TARGET_NAME)\"",
 				);
 				OTHER_LDFLAGS = (
 					"-ObjC",
diff --git a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/xcshareddata/xcschemes/apolloschurchapp-tvOS.xcscheme b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/xcshareddata/xcschemes/apolloschurchapp-tvOS.xcscheme
index e872aa3..d6df8e6 100644
--- a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/xcshareddata/xcschemes/apolloschurchapp-tvOS.xcscheme
+++ b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/xcshareddata/xcschemes/apolloschurchapp-tvOS.xcscheme
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <Scheme
-   LastUpgradeVersion = "0940"
+   LastUpgradeVersion = "0820"
    version = "1.3">
    <BuildAction
       parallelizeBuildables = "NO"
diff --git a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/xcshareddata/xcschemes/apolloschurchapp.xcscheme b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/xcshareddata/xcschemes/apolloschurchapp.xcscheme
index 8fd35ce..37bdc76 100644
--- a/apolloschurchapp/ios/apolloschurchapp.xcodeproj/xcshareddata/xcschemes/apolloschurchapp.xcscheme
+++ b/apolloschurchapp/ios/apolloschurchapp.xcodeproj/xcshareddata/xcschemes/apolloschurchapp.xcscheme
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <Scheme
-   LastUpgradeVersion = "0940"
+   LastUpgradeVersion = "0620"
    version = "1.3">
    <BuildAction
       parallelizeBuildables = "NO"
diff --git a/apolloschurchapp/ios/apolloschurchapp/Base.lproj/LaunchScreen.xib b/apolloschurchapp/ios/apolloschurchapp/Base.lproj/LaunchScreen.xib
index 035b378..ce50ff1 100644
--- a/apolloschurchapp/ios/apolloschurchapp/Base.lproj/LaunchScreen.xib
+++ b/apolloschurchapp/ios/apolloschurchapp/Base.lproj/LaunchScreen.xib
@@ -29,4 +29,4 @@
     <resources>
         <image name="splash-icon" width="94" height="99"/>
     </resources>
-</document>
\ No newline at end of file
+</document>
diff --git a/apolloschurchapp/ios/apolloschurchapp/Images.xcassets/Contents.json b/apolloschurchapp/ios/apolloschurchapp/Images.xcassets/Contents.json
index 2d92bd5..da4a164 100644
--- a/apolloschurchapp/ios/apolloschurchapp/Images.xcassets/Contents.json
+++ b/apolloschurchapp/ios/apolloschurchapp/Images.xcassets/Contents.json
@@ -3,4 +3,4 @@
     "version" : 1,
     "author" : "xcode"
   }
-}
+}
\ No newline at end of file
diff --git a/apolloschurchapp/ios/apolloschurchapp/Info.plist b/apolloschurchapp/ios/apolloschurchapp/Info.plist
index 0d5c926..df2c677 100644
--- a/apolloschurchapp/ios/apolloschurchapp/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchapp/Info.plist
@@ -26,15 +26,15 @@
 	<key>CFBundlePackageType</key>
 	<string>APPL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.7.0</string>
+	<string>0.5.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>5</string>
+	<string>3</string>
 	<key>ITSAppUsesNonExemptEncryption</key>
-	<false />
+	<false/>
 	<key>LSRequiresIPhoneOS</key>
-	<true />
+	<true/>
 	<key>NSAppTransportSecurity</key>
 	<dict>
 		<key>NSExceptionDomains</key>
@@ -42,17 +42,17 @@
 			<key>embed.wistia.com</key>
 			<dict>
 				<key>NSExceptionAllowsInsecureHTTPLoads</key>
-				<true />
+				<true/>
 			</dict>
 			<key>localhost</key>
 			<dict>
 				<key>NSExceptionAllowsInsecureHTTPLoads</key>
-				<true />
+				<true/>
 			</dict>
 		</dict>
 	</dict>
 	<key>NSLocationWhenInUseUsageDescription</key>
-	<string />
+	<string></string>
 	<key>UIAppFonts</key>
 	<array>
 		<string>DroidSerif-Bold.ttf</string>
@@ -88,7 +88,7 @@
 		<string>UIInterfaceOrientationLandscapeRight</string>
 	</array>
 	<key>UIViewControllerBasedStatusBarAppearance</key>
-	<false />
+	<false/>
 	<key>NSPhotoLibraryUsageDescription</key>
 	<string>$(PRODUCT_NAME) would like access to your photo gallery (for uploading profile pictures)</string>
 	<key>NSCameraUsageDescription</key>
diff --git a/apolloschurchapp/ios/apolloschurchappTests/Info.plist b/apolloschurchapp/ios/apolloschurchappTests/Info.plist
index e358b6d..4491f31 100644
--- a/apolloschurchapp/ios/apolloschurchappTests/Info.plist
+++ b/apolloschurchapp/ios/apolloschurchappTests/Info.plist
@@ -15,10 +15,10 @@
 	<key>CFBundlePackageType</key>
 	<string>BNDL</string>
 	<key>CFBundleShortVersionString</key>
-	<string>0.7.0</string>
+	<string>0.5.0</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
-	<string>5</string>
+	<string>3</string>
 </dict>
 </plist>
diff --git a/apolloschurchapp/package.json b/apolloschurchapp/package.json
index 9e18a5a..ef14df1 100644
--- a/apolloschurchapp/package.json
+++ b/apolloschurchapp/package.json
@@ -1,23 +1,31 @@
 {
   "name": "apolloschurchapp",
-  "version": "0.8.0-alpha.4",
+  "version": "0.6.0",
   "private": true,
+  "workspaces": {
+    "nohoist": [
+      "*"
+    ]
+  },
   "devDependencies": {
-    "@storybook/addon-actions": "4.0.7",
-    "@storybook/addon-links": "4.0.7",
-    "@storybook/addons": "4.0.7",
-    "@storybook/react-native": "4.0.7",
+    "@storybook/addon-actions": "4.0.0-alpha.2",
+    "@storybook/addon-links": "4.0.0-alpha.2",
+    "@storybook/addons": "4.0.0-alpha.2",
+    "@storybook/react-native": "4.0.0-alpha.2",
+    "apollos-church-api": "link:../apollos-church-api",
+    "babel-preset-apollos": "link:../babel-preset-apollos",
+    "babel-preset-react-native": "5",
     "codecov": "3.0.2",
-    "get-dev-paths": "^0.1.0",
-    "jest": "23.6.0",
+    "get-yarn-workspaces": "1.0.2",
+    "jest": "^23.5.0",
     "jest-react-native": "18.0.0",
-    "nodemon": "1.18.7",
+    "nodemon": "1.17.5",
     "prop-types": "15.6.1",
-    "react-dom": "16.6.3",
+    "react-dom": "16.3.1",
     "react-native-dotenv": "0.2.0",
     "react-native-storybook-loader": "1.8.0",
     "react-native-version": "2.6.2",
-    "react-test-renderer": "16.6.1",
+    "react-test-renderer": "16.4.1",
     "waait": "1.0.2"
   },
   "engines": {
@@ -33,7 +41,7 @@
     "ios": "react-native run-ios --simulator=\"iPhone X\"",
     "lint": "eslint ./src --ext .js",
     "postversion": "react-native-version --never-amend --android android/app/build.gradle --ios ios/",
-    "prestart": "babel-node ./scripts/get-introspection-data.js",
+    "prestart": "node ./scripts/get-introspection-data.js",
     "start": "react-native start",
     "storybook": "rnstl --searchDir ./storybook ./src --pattern \"**/*.stories.js\" && storybook start -p 7007 --root ../../",
     "test": "jest",
@@ -43,7 +51,7 @@
     "preset": "react-native",
     "collectCoverage": true,
     "transformIgnorePatterns": [
-      "node_modules/(?!((jest-)?react-native|rn-*|react-clone-referenced-element|react-navigation|@apollosproject))"
+      "node_modules/(?!((jest-)?react-native|rn-*|react-clone-referenced-element|react-navigation))"
     ],
     "testMatch": [
       "<rootDir>/src/**/?(*.)(test|tests).{js,jsx,mjs}"
@@ -51,9 +59,6 @@
     "modulePaths": [
       "<rootDir>/src/"
     ],
-    "modulePathIgnorePatterns": [
-      "node_modules/.*/node_modules/react-native"
-    ],
     "setupFiles": [
       "./jest.setup.js"
     ],
@@ -62,55 +67,51 @@
     }
   },
   "dependencies": {
-    "@apollosproject/ui-kit": "^0.8.0-alpha.4",
-    "apollo-cache-inmemory": "1.3.5",
+    "apollo-cache-inmemory": "1.2.2",
     "apollo-cache-persist": "0.1.1",
-    "apollo-client": "2.4.2",
-    "apollo-link": "1.2.3",
-    "apollo-link-context": "1.0.9",
-    "apollo-link-http": "1.5.5",
-    "apollo-link-schema": "1.1.1",
-    "apollo-link-state": "0.4.2",
-    "apollo-upload-client": "9.0.0",
-    "buffer": "^5.2.1",
+    "apollo-client": "2.3.2",
+    "apollo-link": "1.2.2",
+    "apollo-link-context": "1.0.8",
+    "apollo-link-http": "1.5.4",
+    "apollo-link-schema": "1.1.0",
+    "apollo-link-state": "0.4.1",
+    "apollo-upload-client": "^8.1.0",
     "color": "3.0.0",
     "entities": "1.1.1",
-    "events": "^3.0.0",
     "formik": "0.11.11",
     "graphql": "0.13.2",
     "graphql-tag": "2.9.2",
     "graphql-tools": "3.1.1",
     "htmlparser2": "3.9.2",
-    "lodash": "^4.17.11",
-    "memoize-one": "4.0.0",
+    "lodash": "4.17.10",
+    "memoize-one": "^4.0.0",
     "moment": "2.22.2",
-    "node-fetch": "2.2.0",
-    "numeral": "^2.0.6",
-    "prettier": "1.14.2",
-    "querystring": "^0.2.0",
-    "react": "16.6.1",
-    "react-apollo": "2.2.4",
-    "react-native": "0.57.5",
+    "node-fetch": "^2.2.0",
+    "prettier": "^1.14.2",
+    "react": "16.4.1",
+    "react-apollo": "2.1.11",
+    "react-native": "0.56.0",
     "react-native-custom-tabs": "0.1.7",
     "react-native-device-info": "0.22.5",
-    "react-native-image-picker": "0.26.10",
+    "react-native-image-picker": "^0.26.10",
     "react-native-keyboard-aware-scroll-view": "0.7.0",
     "react-native-linear-gradient": "2.4.0",
-    "react-native-music-control": "0.7.3",
-    "react-native-onesignal": "3.2.7",
+    "react-native-modal-datetime-picker": "6.0.0",
+    "react-native-music-control": "^0.7.3",
+    "react-native-onesignal": "^3.2.7",
     "react-native-safari-view": "2.1.0",
-    "react-native-safe-area-view": "0.11.0",
-    "react-native-screens": "1.0.0-alpha.12",
-    "react-native-splash-screen": "^3.1.1",
+    "react-native-safe-area-view": "^0.11.0",
+    "react-native-screens": "^1.0.0-alpha.12",
+    "react-native-splash-screen": "3.1.1",
     "react-native-svg": "6.5.2",
+    "react-native-tab-view": "1.0.2",
     "react-native-video": "3.2.0",
     "react-native-video-controls": "2.2.3",
     "react-navigation": "2.11.2",
-    "recompose": "^0.30.0",
+    "recompose": "0.27.1",
     "rn-placeholder": "1.2.0",
     "stream": "0.0.2",
-    "url": "^0.11.0",
-    "yup": "0.26.6"
+    "yup": "0.26.2"
   },
   "rnpm": {
     "assets": [
diff --git a/apolloschurchapp/rn-cli.config.js b/apolloschurchapp/rn-cli.config.js
index 4235fa0..40501d8 100644
--- a/apolloschurchapp/rn-cli.config.js
+++ b/apolloschurchapp/rn-cli.config.js
@@ -1,35 +1,77 @@
+/**
+ * This file is mainly copy-pasta scattered throughout the interwebs.
+ * I'll try and leave comments to make it easier to understand what's going on,
+ * but essentially this file is currently required to get react-native to play nice
+ * with yarn workspaces.
+ */
 const path = require('path');
-const blacklist = require('metro-config/src/defaults/blacklist');
+const fs = require('fs');
+const blacklist = require('metro/src/blacklist');
+const getWorkspaces = require('get-yarn-workspaces');
 
-const localDeps = [path.resolve('..', 'apollos-ui-kit')];
+/**
+ * used to resolve node_modules that might be symlinked by yarn
+ */
+function getNodeModulesForDirectory(rootPath) {
+  const nodeModulePath = path.join(rootPath, 'node_modules');
+  const folders = fs.readdirSync(nodeModulePath);
+  return folders.reduce((modules, folderName) => {
+    const folderPath = path.join(nodeModulePath, folderName);
+    if (folderName.startsWith('@')) {
+      const scopedModuleFolders = fs.readdirSync(folderPath);
+      const scopedModules = scopedModuleFolders.reduce(
+        (scopedModules, scopedFolderName) => {
+          scopedModules[
+            `${folderName}/${scopedFolderName}`
+          ] = maybeResolveSymlink(path.join(folderPath, scopedFolderName));
+          return scopedModules;
+        },
+        {}
+      );
+      return Object.assign({}, modules, scopedModules);
+    }
+    modules[folderName] = maybeResolveSymlink(folderPath);
+    return modules;
+  }, {});
+}
 
+function maybeResolveSymlink(maybeSymlinkPath) {
+  if (fs.lstatSync(maybeSymlinkPath).isSymbolicLink()) {
+    const resolved = path.resolve(
+      path.dirname(maybeSymlinkPath),
+      fs.readlinkSync(maybeSymlinkPath)
+    );
+    return resolved;
+  }
+  return maybeSymlinkPath;
+}
+
+const workspaces = getWorkspaces(path.resolve('.'));
+
+/**
+ * Options used by Metro builder
+ */
 module.exports = {
-  resolver: {
-    extraNodeModules: {
-      'react-native': path.resolve('.', 'node_modules/react-native'),
-      'react-native-linear-gradient': path.resolve(
-        '.',
-        'node_modules/react-native-linear-gradient'
-      ),
-    },
-    blacklistRE: blacklist([
-      ...localDeps.map(
-        (depPath) => new RegExp(`${depPath}/node_modules/react-native/.*`)
-      ),
-      ...localDeps.map(
-        (depPath) =>
-          new RegExp(`${depPath}/node_modules/react-native-linear-gradient/.*`)
-      ),
-      new RegExp(
-        `${path.resolve('..', '..', 'node_modules', 'react-native')}/.*`
-      ),
-      new RegExp(
-        `${path.resolve('..', '..', 'node_modules')}/.*/react-native/.*`
-      ),
-      new RegExp(
-        `${path.resolve('../../node_modules/react-native-linear-gradient')}/.*`
-      ),
-    ]),
+  extraNodeModules: getNodeModulesForDirectory(path.resolve('.')),
+  getBlacklistRE() {
+    return blacklist(
+      workspaces.map(
+        (workspacePath) =>
+          `/${workspacePath.replace(
+            /\//g,
+            '[/\\\\]'
+          )}[/\\\\]node_modules[/\\\\]react-native[/\\\\].*/`
+      )
+    );
+  },
+  // I think this is the most important bit here - without this, a lot of modules aren't resolving
+  getProjectRoots() {
+    return [
+      // Keep your project directory.
+      path.resolve(path.resolve('.')),
+
+      // Include your forked package as a new root.
+      path.resolve('..', '..', 'node_modules'),
+    ].concat(workspaces);
   },
-  watchFolders: [...localDeps, path.resolve('..', '..', 'node_modules')],
 };
diff --git a/apolloschurchapp/scripts/get-introspection-data.js b/apolloschurchapp/scripts/get-introspection-data.js
index f2c7e28..8acfcf3 100755
--- a/apolloschurchapp/scripts/get-introspection-data.js
+++ b/apolloschurchapp/scripts/get-introspection-data.js
@@ -1,15 +1,11 @@
-import fs from 'fs';
-import Path from 'path';
-import { APP_DATA_URL } from 'react-native-dotenv';
-import fetch from 'node-fetch';
+const fs = require('fs');
+const Path = require('path');
 
-const attempts = 0;
-const maxAttempts = 3;
-const timeBetweenAttempts = 5 * 1000;
+const fetch = require('node-fetch');
 
-const getIntrospectionData = async () => {
+(async () => {
   try {
-    const query = await fetch(APP_DATA_URL, {
+    const query = await fetch(`https://apollos-church-api.now.sh/graphql`, {
       method: 'POST',
       headers: { 'Content-Type': 'application/json' },
       body: JSON.stringify({
@@ -40,20 +36,7 @@ const getIntrospectionData = async () => {
       Path.resolve(__dirname, '../src/client/fragmentTypes.json'),
       JSON.stringify(data)
     );
-
-    console.log('Successfully wrote fragmentTypes!');
   } catch (e) {
-    if (attempts < maxAttempts) {
-      console.log(
-        `Error writing fragmentTypes (-api probably hasn't started yet). Trying again after wait. Attempt: ${attempts +
-          1} of ${maxAttempts}`
-      );
-      await new Promise((resolve) => setTimeout(resolve, timeBetweenAttempts)); // try again after waiting
-      getIntrospectionData();
-    } else {
-      // throw new Error('Error writing fragmentTypes file', e);
-    }
+    throw new Error('Error writing fragmentTypes file', e);
   }
-};
-
-getIntrospectionData();
+})();
diff --git a/apolloschurchapp/src/Providers.js b/apolloschurchapp/src/Providers.js
index da98513..e2cd8e8 100644
--- a/apolloschurchapp/src/Providers.js
+++ b/apolloschurchapp/src/Providers.js
@@ -1,5 +1,13 @@
 import { nest } from 'recompose';
-import { Providers } from '@apollosproject/ui-kit';
-import ClientProvider from './client';
 
-export default nest(ClientProvider, Providers);
+import ClientProvider from 'apolloschurchapp/src/client';
+import { ThemeProvider } from 'apolloschurchapp/src/ui/theme';
+import { WebBrowserProvider } from 'apolloschurchapp/src/ui/WebBrowser';
+import { LayoutProvider } from 'apolloschurchapp/src/ui/LayoutContext';
+
+export default nest(
+  ClientProvider,
+  ThemeProvider,
+  WebBrowserProvider,
+  LayoutProvider
+);
diff --git a/apolloschurchapp/src/auth/LoginButton/index.js b/apolloschurchapp/src/auth/LoginButton/index.js
index 66c7753..4e932e2 100644
--- a/apolloschurchapp/src/auth/LoginButton/index.js
+++ b/apolloschurchapp/src/auth/LoginButton/index.js
@@ -3,7 +3,7 @@ import { withNavigation } from 'react-navigation';
 import { Query } from 'react-apollo';
 import PropTypes from 'prop-types';
 
-import { Button } from '@apollosproject/ui-kit';
+import Button from 'apolloschurchapp/src/ui/Button';
 
 import getLoginState from '../getLoginState';
 
diff --git a/apolloschurchapp/src/auth/ProtectedTouchable.js b/apolloschurchapp/src/auth/ProtectedTouchable.js
index 82bb73b..df86cc4 100644
--- a/apolloschurchapp/src/auth/ProtectedTouchable.js
+++ b/apolloschurchapp/src/auth/ProtectedTouchable.js
@@ -1,6 +1,6 @@
 import React from 'react';
 import PropTypes from 'prop-types';
-import { Touchable } from '@apollosproject/ui-kit';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
 import ProtectedAction from './ProtectedAction';
 
 const ProtectedTouchable = ({
diff --git a/apolloschurchapp/src/auth/index.js b/apolloschurchapp/src/auth/index.js
index dcdc09a..4b7d059 100644
--- a/apolloschurchapp/src/auth/index.js
+++ b/apolloschurchapp/src/auth/index.js
@@ -2,18 +2,13 @@ import React, { PureComponent } from 'react';
 import PropTypes from 'prop-types';
 import { View, SafeAreaView } from 'react-native';
 
-import {
-  FlexedView,
-  TabView,
-  TabSceneMap as SceneMap,
-  H2,
-  H5,
-  styled,
-  Icon,
-  ButtonLink,
-  withTheme,
-} from '@apollosproject/ui-kit';
-
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import TabView, { SceneMap } from 'apolloschurchapp/src/ui/TabView';
+import { H1, H5 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
 import { track } from 'apolloschurchapp/src/analytics';
 
 import LoginForm from './login';
@@ -22,17 +17,12 @@ import SignUpForm from './signup';
 export LoginButton from './LoginButton';
 export ProtectedAction from './ProtectedAction';
 
-const Title = styled(({ theme }) => ({
-  color: theme.colors.primary,
-}))(H2);
-
-const StyledH5 = styled(() => ({
-  padding: 0,
-}))(H5);
+const Title = styled(({ theme }) => ({ color: theme.colors.primary }))(H1);
 
 const BrandIcon = withTheme(({ theme }) => ({
   name: 'brand-icon',
-  size: theme.sizing.baseUnit * 3.0,
+  size: theme.sizing.baseUnit * 2.25,
+  marginVertical: theme.sizing.baseUnit,
   fill: theme.colors.primary,
 }))(Icon);
 
@@ -43,17 +33,6 @@ const HeaderContainer = styled(({ theme }) => ({
 const Header = styled(({ theme }) => ({
   padding: theme.sizing.baseUnit,
   paddingBottom: theme.sizing.baseUnit * 1.5,
-  flexDirection: 'row',
-  alignItems: 'center',
-}))(View);
-
-const HeaderText = styled(({ theme }) => ({
-  flexDirection: 'column',
-  paddingTop: 0,
-  paddingBottom: 0,
-  paddingRight: 0,
-  paddingLeft: theme.sizing.baseUnit,
-  marginBottom: 0,
 }))(View);
 
 const CancelButton = styled(({ theme }) => ({
@@ -64,7 +43,7 @@ const CancelButton = styled(({ theme }) => ({
 
 class Auth extends PureComponent {
   static navigationOptions = {
-    header: null,
+    title: 'Login',
   };
 
   tabRoutes = [
@@ -95,10 +74,8 @@ class Auth extends PureComponent {
           <CancelButton onPress={this.handleFinish}>Cancel</CancelButton>
           <Header>
             <BrandIcon />
-            <HeaderText>
-              <Title>Welcome!</Title>
-              <StyledH5>Please sign in to continue</StyledH5>
-            </HeaderText>
+            <Title>Welcome!</Title>
+            <H5>Please sign in to continue</H5>
           </Header>
         </HeaderContainer>
         <TabView
diff --git a/apolloschurchapp/src/auth/login/Form.js b/apolloschurchapp/src/auth/login/Form.js
index 7551d9e..b45e525 100644
--- a/apolloschurchapp/src/auth/login/Form.js
+++ b/apolloschurchapp/src/auth/login/Form.js
@@ -5,14 +5,11 @@ import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view
 
 import { track, events } from 'apolloschurchapp/src/analytics';
 import { WebBrowserConsumer } from 'apolloschurchapp/src/ui/WebBrowser';
-import {
-  FlexedView,
-  PaddedView,
-  TextInput,
-  Button,
-  ButtonLink,
-  styled,
-} from '@apollosproject/ui-kit';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { Text as TextInput } from 'apolloschurchapp/src/ui/inputs';
+import Button, { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+import styled from 'apolloschurchapp/src/ui/styled';
 
 const BottomSafeAreaView = styled({
   position: 'absolute',
diff --git a/apolloschurchapp/src/auth/signup/Form.js b/apolloschurchapp/src/auth/signup/Form.js
index 640342e..6f219d8 100644
--- a/apolloschurchapp/src/auth/signup/Form.js
+++ b/apolloschurchapp/src/auth/signup/Form.js
@@ -3,13 +3,11 @@ import { View, SafeAreaView } from 'react-native';
 import PropTypes from 'prop-types';
 import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
 
-import {
-  FlexedView,
-  PaddedView,
-  TextInput,
-  Button,
-  styled,
-} from '@apollosproject/ui-kit';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { Text as TextInput } from 'apolloschurchapp/src/ui/inputs';
+import Button from 'apolloschurchapp/src/ui/Button';
+import styled from 'apolloschurchapp/src/ui/styled';
 
 const BottomSafeAreaView = styled({
   position: 'absolute',
diff --git a/apolloschurchapp/src/client/cache.js b/apolloschurchapp/src/client/cache.js
index 3979a8a..2963286 100644
--- a/apolloschurchapp/src/client/cache.js
+++ b/apolloschurchapp/src/client/cache.js
@@ -14,16 +14,14 @@ import introspectionQueryResultData from './fragmentTypes.json';
 const SCHEMA_VERSION = `${DeviceInfo.getVersion()}${DeviceInfo.getBuildNumber()}`; // Must be a string.
 const SCHEMA_VERSION_KEY = 'apollo-schema-version';
 
-const nodeCacheRedirect = (_, { id }, { getCacheKey }) =>
-  id ? getCacheKey({ __typename: id.split(':')[0], id }) : null;
-
 const cache = new InMemoryCache({
   fragmentMatcher: new IntrospectionFragmentMatcher({
     introspectionQueryResultData,
   }),
   cacheRedirects: {
     Query: {
-      node: nodeCacheRedirect,
+      node: (_, { id }, { getCacheKey }) =>
+        id ? getCacheKey({ __typename: id.split(':')[0], id }) : null,
     },
   },
 });
@@ -39,6 +37,7 @@ export const ensureCacheHydration = (async () => {
     if (currentVersion === SCHEMA_VERSION) {
       // If the current version matches the latest version,
       // we're good to go and can restore the cache.
+      console.log('Restoring cache...');
       await persistor.restore();
     } else {
       // Otherwise, we'll want to purge the outdated persisted cache
diff --git a/apolloschurchapp/src/client/fragmentTypes.json b/apolloschurchapp/src/client/fragmentTypes.json
index cf7174a..8b9885f 100644
--- a/apolloschurchapp/src/client/fragmentTypes.json
+++ b/apolloschurchapp/src/client/fragmentTypes.json
@@ -1 +1 @@
-{"__schema":{"types":[{"kind":"INTERFACE","name":"Node","possibleTypes":[{"name":"ContentChannel"},{"name":"Person"},{"name":"UniversalContentItem"},{"name":"DevotionalContentItem"},{"name":"MediaContentItem"},{"name":"ContentSeriesContentItem"}]},{"kind":"INTERFACE","name":"ContentItem","possibleTypes":[{"name":"UniversalContentItem"},{"name":"DevotionalContentItem"},{"name":"MediaContentItem"},{"name":"ContentSeriesContentItem"}]},{"kind":"INTERFACE","name":"Media","possibleTypes":[{"name":"ImageMedia"},{"name":"VideoMedia"},{"name":"AudioMedia"}]},{"kind":"INTERFACE","name":"MediaSource","possibleTypes":[{"name":"ImageMediaSource"},{"name":"VideoMediaSource"},{"name":"AudioMediaSource"}]},{"kind":"INTERFACE","name":"Sharable","possibleTypes":[{"name":"SharableContentItem"}]}]}}
\ No newline at end of file
+{"__schema":{"types":[{"kind":"INTERFACE","name":"Node","possibleTypes":[{"name":"ContentChannel"},{"name":"Person"},{"name":"Interaction"},{"name":"UniversalContentItem"},{"name":"DevotionalContentItem"}]},{"kind":"INTERFACE","name":"ContentItem","possibleTypes":[{"name":"UniversalContentItem"},{"name":"DevotionalContentItem"}]},{"kind":"INTERFACE","name":"Media","possibleTypes":[{"name":"ImageMedia"},{"name":"VideoMedia"},{"name":"AudioMedia"}]},{"kind":"INTERFACE","name":"MediaSource","possibleTypes":[{"name":"ImageMediaSource"},{"name":"VideoMediaSource"},{"name":"AudioMediaSource"}]},{"kind":"INTERFACE","name":"Sharable","possibleTypes":[{"name":"SharableContentItem"}]}]}}
\ No newline at end of file
diff --git a/apolloschurchapp/src/client/httpLink.js b/apolloschurchapp/src/client/httpLink.js
index 157fb8e..39a48f0 100644
--- a/apolloschurchapp/src/client/httpLink.js
+++ b/apolloschurchapp/src/client/httpLink.js
@@ -1,11 +1,10 @@
 import { Platform } from 'react-native';
 import { createUploadLink } from 'apollo-upload-client';
-import { APP_DATA_URL, ANDROID_URL } from 'react-native-dotenv';
+import { APP_DATA_URL } from 'react-native-dotenv';
 
 let uri = APP_DATA_URL;
-const androidUri = ANDROID_URL || '10.0.2.2';
 
 // Android's emulator requires localhost network traffic to go through 10.0.2.2
-if (Platform.OS === 'android') uri = uri.replace('localhost', androidUri);
+if (Platform.OS === 'android') uri = uri.replace('localhost', '10.0.2.2');
 
 export default createUploadLink({ uri });
diff --git a/apolloschurchapp/src/client/index.js b/apolloschurchapp/src/client/index.js
index 84c6cda..76cff4a 100644
--- a/apolloschurchapp/src/client/index.js
+++ b/apolloschurchapp/src/client/index.js
@@ -19,8 +19,6 @@ export const client = new ApolloClient({
   shouldBatch: true,
 });
 
-client.onResetStore(clientStateLink.writeDefaults);
-
 class ClientProvider extends PureComponent {
   static propTypes = {
     client: PropTypes.shape({
diff --git a/apolloschurchapp/src/content-feed/getContentFeed.js b/apolloschurchapp/src/content-feed/getContentFeed.js
index 2e47d19..5bc3bc6 100644
--- a/apolloschurchapp/src/content-feed/getContentFeed.js
+++ b/apolloschurchapp/src/content-feed/getContentFeed.js
@@ -1,6 +1,5 @@
 import gql from 'graphql-tag';
 
-import { largeCardFragment } from 'apolloschurchapp/src/ui/ContentCardConnected';
 import { contentItemFragment } from '../content-single/getContentItem';
 
 export default gql`
@@ -11,7 +10,21 @@ export default gql`
           edges {
             node {
               ...contentItemFragment
-              ...largeCardFragment
+              __typename
+              id
+              coverImage {
+                name
+                sources {
+                  uri
+                }
+              }
+              isLiked
+              parentChannel {
+                id
+                name
+                iconName
+              }
+              title
             }
           }
         }
@@ -19,5 +32,4 @@ export default gql`
     }
   }
   ${contentItemFragment}
-  ${largeCardFragment}
 `;
diff --git a/apolloschurchapp/src/content-feed/index.js b/apolloschurchapp/src/content-feed/index.js
index 8662d8a..38ecc37 100644
--- a/apolloschurchapp/src/content-feed/index.js
+++ b/apolloschurchapp/src/content-feed/index.js
@@ -3,9 +3,8 @@ import { Query } from 'react-apollo';
 import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
-import { BackgroundView, FeedView } from '@apollosproject/ui-kit';
-
-import ContentCardConnected from 'apolloschurchapp/src/ui/ContentCardConnected';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import FeedView from 'apolloschurchapp/src/ui/FeedView';
 
 import getContentFeed from './getContentFeed';
 /**
@@ -52,7 +51,6 @@ class ContentFeed extends PureComponent {
         >
           {({ loading, error, data, refetch }) => (
             <FeedView
-              ListItemComponent={ContentCardConnected}
               content={get(
                 data,
                 'node.childContentItemsConnection.edges',
diff --git a/apolloschurchapp/src/content-single/ActionContainer/index.js b/apolloschurchapp/src/content-single/ActionContainer/index.js
index 2df4bae..a6b1408 100644
--- a/apolloschurchapp/src/content-single/ActionContainer/index.js
+++ b/apolloschurchapp/src/content-single/ActionContainer/index.js
@@ -6,8 +6,9 @@ import { get } from 'lodash';
 
 import Share from 'apolloschurchapp/src/ui/Share';
 
-import { SideBySideView, styled } from '@apollosproject/ui-kit';
+import SideBySideView from 'apolloschurchapp/src/ui/SideBySideView';
 import LikeButton from 'apolloschurchapp/src/ui/LikeButton';
+import styled from 'apolloschurchapp/src/ui/styled';
 import { MediaPlayerSpacer } from 'apolloschurchapp/src/ui/MediaPlayer';
 
 import getShareContent from './getShareContent';
diff --git a/apolloschurchapp/src/content-single/ContentSingle.js b/apolloschurchapp/src/content-single/ContentSingle.js
deleted file mode 100644
index f5b2709..0000000
--- a/apolloschurchapp/src/content-single/ContentSingle.js
+++ /dev/null
@@ -1,104 +0,0 @@
-import React, { PureComponent } from 'react';
-import { Query } from 'react-apollo';
-import { get } from 'lodash';
-import PropTypes from 'prop-types';
-
-import { ErrorCard, ThemeMixin } from '@apollosproject/ui-kit';
-
-import TrackEventWhenLoaded from 'apolloschurchapp/src/analytics/TrackEventWhenLoaded';
-import { events } from 'apolloschurchapp/src/analytics';
-
-import ActionContainer from './ActionContainer';
-import getContentItem from './getContentItem';
-
-import DevotionalContentItem from './DevotionalContentItem';
-import UniversalContentItem from './UniversalContentItem';
-
-import NavigationHeader from './NavigationHeader';
-
-class ContentSingle extends PureComponent {
-  static propTypes = {
-    navigation: PropTypes.shape({
-      getParam: PropTypes.func,
-      push: PropTypes.func,
-    }),
-  };
-
-  static navigationOptions = {
-    header: NavigationHeader,
-  };
-
-  get itemId() {
-    return this.props.navigation.getParam('itemId', []);
-  }
-
-  get queryVariables() {
-    return { itemId: this.itemId };
-  }
-
-  renderContent = ({ content, loading, error }) => {
-    let { __typename } = content;
-    if (!__typename && this.itemId) {
-      [__typename] = this.itemId.split(':');
-    }
-    switch (__typename) {
-      case 'DevotionalContentItem':
-        return (
-          <DevotionalContentItem
-            id={this.itemId}
-            content={content}
-            loading={loading}
-            error={error}
-          />
-        );
-      case 'UniversalContentItem':
-      default:
-        return (
-          <UniversalContentItem
-            id={this.itemId}
-            content={content}
-            loading={loading}
-            error={error}
-          />
-        );
-    }
-  };
-
-  renderWithData = ({ loading, error, data }) => {
-    if (error) return <ErrorCard error={error} />;
-
-    const content = data.node || {};
-
-    const { theme = {}, id } = content;
-
-    return (
-      <ThemeMixin
-        mixin={{
-          type: get(theme, 'type', 'light').toLowerCase(),
-          colors: get(theme, 'colors'),
-        }}
-      >
-        <TrackEventWhenLoaded
-          loaded={!!(!loading && content.title)}
-          eventName={events.ViewContent}
-          properties={{
-            title: content.title,
-            itemId: this.itemId,
-          }}
-        />
-        {this.renderContent({ content, loading, error })}
-        <ActionContainer itemId={id} />
-      </ThemeMixin>
-    );
-  };
-
-  render() {
-    return (
-      <Query query={getContentItem} variables={this.queryVariables}>
-        {this.renderWithData}
-      </Query>
-    );
-  }
-}
-
-export default ContentSingle;
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/ContentTab.js b/apolloschurchapp/src/content-single/Devotional/ContentTab.js
similarity index 54%
rename from apolloschurchapp/src/content-single/DevotionalContentItem/ContentTab.js
rename to apolloschurchapp/src/content-single/Devotional/ContentTab.js
index 9a4b521..3dd8316 100644
--- a/apolloschurchapp/src/content-single/DevotionalContentItem/ContentTab.js
+++ b/apolloschurchapp/src/content-single/Devotional/ContentTab.js
@@ -1,10 +1,12 @@
 import React from 'react';
-import { ScrollView } from 'react-native';
+import { ScrollView, View } from 'react-native';
 import PropTypes from 'prop-types';
-import { PaddedView, H2, styled } from '@apollosproject/ui-kit';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { H2 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+import HTMLView from 'apolloschurchapp/src/ui/HTMLView';
 import { ScriptureList } from 'apolloschurchapp/src/ui/Scripture';
-import HorizontalContentFeed from '../HorizontalContentFeed';
-import HTMLContent from '../HTMLContent';
+import Placeholder from 'apolloschurchapp/src/ui/Placeholder';
 
 const ContentContainer = styled({ paddingVertical: 0 })(PaddedView);
 
@@ -14,34 +16,39 @@ const ContentContainer = styled({ paddingVertical: 0 })(PaddedView);
  * and the body text of the devo.
  */
 const ContentTab = ({
-  id,
   title,
   references,
+  body,
   isLoading,
   navigationState,
-  navigation,
 }) => (
   <ScrollView>
     <ContentContainer>
-      <H2 padded isLoading={!title && isLoading}>
-        {title}
-      </H2>
-      {references && references.length ? (
-        <ScriptureList
-          references={references}
-          onPress={navigationState.route.jumpTo} // eslint-disable-line react/jsx-handler-names
-          tabDestination={'scripture'}
-        />
-      ) : null}
-      <HTMLContent contentId={id} />
+      <Placeholder.Paragraph
+        lineNumber={15}
+        onReady={!isLoading}
+        lastLineWidth="60%"
+        firstLineWidth="40%"
+      >
+        <View>
+          <H2 padded>{title}</H2>
+          {references && references.length ? (
+            <ScriptureList
+              references={references}
+              onPress={navigationState.route.jumpTo} // eslint-disable-line react/jsx-handler-names
+              tabDestination={'scripture'}
+            />
+          ) : null}
+          <HTMLView>{body}</HTMLView>
+        </View>
+      </Placeholder.Paragraph>
     </ContentContainer>
-    <HorizontalContentFeed contentId={id} navigation={navigation} />
   </ScrollView>
 );
 
 ContentTab.propTypes = {
-  /** The id of the devotional item */
-  id: PropTypes.string,
+  /** The devotional text */
+  body: PropTypes.string,
   /** Toggles placeholders */
   isLoading: PropTypes.bool,
   /**
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.stories.js b/apolloschurchapp/src/content-single/Devotional/Devotional.stories.js
similarity index 93%
rename from apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.stories.js
rename to apolloschurchapp/src/content-single/Devotional/Devotional.stories.js
index 109a669..9caae7b 100644
--- a/apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.stories.js
+++ b/apolloschurchapp/src/content-single/Devotional/Devotional.stories.js
@@ -25,16 +25,6 @@ const content = {
   title: 'God is Our Banner',
 };
 
-const renderItem = () => {};
-
-const loadingStateObject = {
-  node: {
-    id: 'fakeId0',
-    title: '',
-    isLoading: true,
-  },
-};
-
 const stories = storiesOf('Devotional', module);
 
 stories.add('Example', () => (
@@ -43,8 +33,6 @@ stories.add('Example', () => (
     title={content.title}
     isLoading={false}
     scripture={scripture}
-    renderItem={renderItem}
-    loadingStateObject={loadingStateObject}
   />
 ));
 
@@ -54,7 +42,5 @@ stories.add('isLoading', () => (
     title={content.title}
     isLoading
     scripture={scripture}
-    renderItem={renderItem}
-    loadingStateObject={loadingStateObject}
   />
 ));
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.tests.js b/apolloschurchapp/src/content-single/Devotional/Devotional.tests.js
similarity index 76%
rename from apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.tests.js
rename to apolloschurchapp/src/content-single/Devotional/Devotional.tests.js
index 59ed7e1..470ef8b 100644
--- a/apolloschurchapp/src/content-single/DevotionalContentItem/Devotional.tests.js
+++ b/apolloschurchapp/src/content-single/Devotional/Devotional.tests.js
@@ -2,8 +2,6 @@ import React from 'react';
 import renderer from 'react-test-renderer';
 import wait from 'waait';
 import Providers from 'apolloschurchapp/src/Providers';
-import getContentItemContent from '../HTMLContent/getContentItemContent';
-import getScripture from './getScripture';
 import Devotional from '.';
 
 const content = {
@@ -13,16 +11,14 @@ const content = {
   title: 'God is Our Banner',
 };
 
-const scriptures = [
+const scripture = [
   {
-    __typename: 'Scripture',
     id: '1CO.15.57',
     reference: '1 Corinthians 15:57',
     html:
       '<p class="p"><span data-number="57" class="v">57</span>But thanks be to God, who gives us the victory through our Lord Jesus Christ. </p>',
   },
   {
-    __typename: 'Scripture',
     id: 'EXO.17.8-EXO.17.15',
     reference: 'Exodus 17:8-15',
     html:
@@ -30,68 +26,30 @@ const scriptures = [
   },
 ];
 
-const scriptureMock = {
-  request: {
-    query: getScripture,
-    variables: { itemId: '1' },
-  },
-  result: {
-    data: {
-      node: { scriptures, id: '1', __typename: 'DevotionalContentItem' },
-    },
-  },
-};
-
-const contentItemHTMLMock = {
-  request: {
-    query: getContentItemContent,
-    variables: { contentId: '1' },
-  },
-  result: {
-    data: {
-      node: {
-        id: '1',
-        htmlContent: '<b>Some content!</b>',
-        __typename: 'DevotionalContentItem',
-      },
-    },
-  },
-};
-
-const mocks = [scriptureMock, contentItemHTMLMock];
-
-const navigation = {
-  push: jest.fn(),
-};
-
 describe('the Devotional component', () => {
   it('renders a devotional', async () => {
     const tree = renderer.create(
-      <Providers mocks={mocks}>
+      <Providers>
         <Devotional
-          id="1"
-          content={content}
-          loading={false}
-          navigation={navigation}
+          body={content.body}
+          title={content.title}
+          isLoading={false}
+          scripture={scripture}
         />
       </Providers>
     );
     await wait(0); // wait for response
     expect(tree).toMatchSnapshot();
   });
-  it('renders even with empty scripture array', async () => {
-    const tree = renderer.create(
-      <Providers mocks={mocks}>
-        <Devotional id="1" content={content} loading navigation={navigation} />
-      </Providers>
-    );
-    await wait(0); // wait for response
-    expect(tree).toMatchSnapshot();
-  });
   it('renders a loading state', async () => {
     const tree = renderer.create(
-      <Providers mocks={mocks}>
-        <Devotional id="1" content={content} loading navigation={navigation} />
+      <Providers>
+        <Devotional
+          body={content.body}
+          title={content.title}
+          isLoading
+          scripture={scripture}
+        />
       </Providers>
     );
     await wait(0); // wait for response
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/ScriptureTab.js b/apolloschurchapp/src/content-single/Devotional/ScriptureTab.js
similarity index 77%
rename from apolloschurchapp/src/content-single/DevotionalContentItem/ScriptureTab.js
rename to apolloschurchapp/src/content-single/Devotional/ScriptureTab.js
index 9458010..bbf39a9 100644
--- a/apolloschurchapp/src/content-single/DevotionalContentItem/ScriptureTab.js
+++ b/apolloschurchapp/src/content-single/Devotional/ScriptureTab.js
@@ -1,16 +1,15 @@
 import React from 'react';
 import { ScrollView } from 'react-native';
 import PropTypes from 'prop-types';
-import { PaddedView } from '@apollosproject/ui-kit';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
 import ScriptureItem from 'apolloschurchapp/src/ui/Scripture';
-import HorizontalContentFeed from '../HorizontalContentFeed';
 
 /**
  * This is the Scripture side of the Devotional tabbed component.
  * Maps over an array of scripture references and renders them
  * using the ScriptureItem component.
  */
-const ScriptureTab = ({ id, scripture, isLoading, navigation }) => (
+const ScriptureTab = ({ scripture, isLoading }) => (
   <ScrollView>
     <PaddedView>
       {scripture.map((ref) => (
@@ -22,13 +21,10 @@ const ScriptureTab = ({ id, scripture, isLoading, navigation }) => (
         />
       ))}
     </PaddedView>
-    <HorizontalContentFeed contentId={id} navigation={navigation} />
   </ScrollView>
 );
 
 ScriptureTab.propTypes = {
-  /** The id of the devotional content item */
-  id: PropTypes.string,
   /** Toggles placeholders */
   isLoading: PropTypes.bool,
   /** An array of scripture objects */
diff --git a/apolloschurchapp/src/content-single/Devotional/index.js b/apolloschurchapp/src/content-single/Devotional/index.js
new file mode 100644
index 0000000..5683d0b
--- /dev/null
+++ b/apolloschurchapp/src/content-single/Devotional/index.js
@@ -0,0 +1,84 @@
+import React, { PureComponent } from 'react';
+import PropTypes from 'prop-types';
+
+import TabView, { SceneMap } from 'apolloschurchapp/src/ui/TabView';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import ContentTab from './ContentTab';
+import ScriptureTab from './ScriptureTab';
+
+/**
+ * The devotional component.
+ * Displays a TabView with two tabs: ContentTab and ScriptureTab.
+ */
+class Devotional extends PureComponent {
+  static propTypes = {
+    /** The devotional text */
+    body: PropTypes.string,
+    /** The devotional title */
+    title: PropTypes.string,
+    /** Toggles placeholders */
+    isLoading: PropTypes.bool,
+    /** An array of scripture objects */
+    scripture: PropTypes.arrayOf(
+      PropTypes.shape({
+        /** The ID of the verse (i.e. '1CO.15.57') */
+        id: PropTypes.string,
+        /** A human readable reference (i.e. '1 Corinthians 15:57') */
+        reference: PropTypes.string,
+        /** The scripture source to render */
+        html: PropTypes.string,
+      })
+    ),
+  };
+
+  /**
+   * Function to get the scripture references from the larger scripture object.
+   * Props: full scripture array of objects
+   * Returns: an array of scripture references.
+   */
+  getScriptureReferences = (scripture) => scripture.map((ref) => ref.reference);
+
+  /**
+   * The route that TabView uses to render the ContentTab.
+   * Note: navigationState gets passed down automatically from the TabView.
+   */
+  contentRoute = (navigationState) => (
+    <ContentTab
+      body={this.props.body}
+      isLoading={this.props.isLoading}
+      references={this.getScriptureReferences(this.props.scripture)}
+      title={this.props.title}
+      navigationState={navigationState}
+    />
+  );
+
+  /**
+   * The route that TabView uses to render the ScriptureTab
+   */
+  scriptureRoute = () => (
+    <ScriptureTab
+      scripture={this.props.scripture}
+      isLoading={this.props.isLoading}
+    />
+  );
+
+  render() {
+    const hasScripture = this.props.isLoading || this.props.scripture.length;
+    const tabRoutes = [{ title: 'Devotional', key: 'content' }];
+    if (hasScripture) tabRoutes.push({ title: 'Scripture', key: 'scripture' });
+
+    return (
+      <BackgroundView>
+        <TabView
+          routes={tabRoutes}
+          renderScene={SceneMap({
+            content: this.contentRoute,
+            scripture: this.scriptureRoute,
+          })}
+        />
+      </BackgroundView>
+    );
+  }
+}
+
+export default Devotional;
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/getScripture.js b/apolloschurchapp/src/content-single/DevotionalContentItem/getScripture.js
deleted file mode 100644
index 1f0fb59..0000000
--- a/apolloschurchapp/src/content-single/DevotionalContentItem/getScripture.js
+++ /dev/null
@@ -1,17 +0,0 @@
-import gql from 'graphql-tag';
-
-export default gql`
-  query getScripture($itemId: ID!) {
-    node(id: $itemId) {
-      __typename
-      id
-      ... on DevotionalContentItem {
-        scriptures {
-          id
-          html
-          reference
-        }
-      }
-    }
-  }
-`;
diff --git a/apolloschurchapp/src/content-single/DevotionalContentItem/index.js b/apolloschurchapp/src/content-single/DevotionalContentItem/index.js
deleted file mode 100644
index 8544eba..0000000
--- a/apolloschurchapp/src/content-single/DevotionalContentItem/index.js
+++ /dev/null
@@ -1,121 +0,0 @@
-import React, { PureComponent } from 'react';
-import { SafeAreaView } from 'react-native';
-import PropTypes from 'prop-types';
-import { Query } from 'react-apollo';
-
-import {
-  ErrorCard,
-  TabView,
-  TabSceneMap as SceneMap,
-  BackgroundView,
-  styled,
-} from '@apollosproject/ui-kit';
-import ContentTab from './ContentTab';
-import ScriptureTab from './ScriptureTab';
-
-import getScripture from './getScripture';
-
-const FlexedSafeAreaView = styled({ flex: 1 })(SafeAreaView);
-
-/**
- * The devotional component.
- * Displays a TabView with two tabs: ContentTab and ScriptureTab.
- */
-class DevotionalContentItem extends PureComponent {
-  static propTypes = {
-    /** The id of the devotional item */
-    id: PropTypes.string.isRequired,
-    content: PropTypes.shape({
-      /** The devotional title */
-      title: PropTypes.string,
-    }),
-    /** Toggles placeholders */
-    loading: PropTypes.bool,
-    navigation: PropTypes.shape({}),
-  };
-
-  /**
-   * Function to get the scripture references from the larger scripture object.
-   * Props: full scripture array of objects
-   * Returns: an array of scripture references.
-   */
-  getScriptureReferences = (scripture) => {
-    let arrayOfRefrences = null;
-
-    if (scripture) {
-      arrayOfRefrences = scripture.map(
-        (ref) =>
-          // only add refs to the array if they exist
-          ref.reference || ''
-      );
-    }
-
-    return arrayOfRefrences;
-  };
-
-  /**
-   * The route that TabView uses to render the ContentTab.
-   * Note: navigationState gets passed down automatically from the TabView.
-   */
-  contentRoute = ({ scriptures, loading }) => (navigationState) => (
-    <ContentTab
-      id={this.props.id}
-      references={this.getScriptureReferences(scriptures)}
-      title={this.props.content.title}
-      navigationState={navigationState}
-      navigation={this.props.navigation}
-      isLoading={this.props.loading || loading}
-    />
-  );
-
-  /**
-   * The route that TabView uses to render the ScriptureTab
-   */
-  scriptureRoute = ({ scriptures, loading }) => () => (
-    <ScriptureTab
-      id={this.props.id}
-      scripture={scriptures}
-      navigation={this.props.navigation}
-      isLoading={this.props.loading || loading}
-    />
-  );
-
-  renderTabs = ({
-    data: { node: { scriptures = [] } = {} } = {},
-    error,
-    loading,
-  }) => {
-    if (error) return <ErrorCard error={error} />;
-    // only include scriptures where the references are not null
-    const validScriptures = scriptures.filter(
-      (scripture) => scripture.reference != null
-    );
-
-    const hasScripture = loading || validScriptures.length;
-    const tabRoutes = [{ title: 'Devotional', key: 'content' }];
-    if (hasScripture) tabRoutes.push({ title: 'Scripture', key: 'scripture' });
-    return (
-      <TabView
-        routes={tabRoutes}
-        renderScene={SceneMap({
-          content: this.contentRoute({ scriptures, loading }),
-          scripture: this.scriptureRoute({ scriptures, loading }),
-        })}
-      />
-    );
-  };
-
-  render() {
-    return (
-      <BackgroundView>
-        <FlexedSafeAreaView>
-          <Query query={getScripture} variables={{ itemId: this.props.id }}>
-            {this.renderTabs}
-          </Query>
-        </FlexedSafeAreaView>
-      </BackgroundView>
-    );
-  }
-}
-
-export default DevotionalContentItem;
diff --git a/apolloschurchapp/src/content-single/HTMLContent/getContentItemContent.js b/apolloschurchapp/src/content-single/HTMLContent/getContentItemContent.js
index 207df6d..cd7ddc6 100644
--- a/apolloschurchapp/src/content-single/HTMLContent/getContentItemContent.js
+++ b/apolloschurchapp/src/content-single/HTMLContent/getContentItemContent.js
@@ -1,7 +1,7 @@
 import gql from 'graphql-tag';
 
 export default gql`
-  query getContentItemHTML($contentId: ID!) {
+  query getContentItem($contentId: ID!) {
     node(id: $contentId) {
       ... on ContentItem {
         id
diff --git a/apolloschurchapp/src/content-single/HTMLContent/index.js b/apolloschurchapp/src/content-single/HTMLContent/index.js
index 4d4f384..8fd994f 100644
--- a/apolloschurchapp/src/content-single/HTMLContent/index.js
+++ b/apolloschurchapp/src/content-single/HTMLContent/index.js
@@ -3,7 +3,7 @@ import PropTypes from 'prop-types';
 import { Query } from 'react-apollo';
 
 import HTMLView from 'apolloschurchapp/src/ui/HTMLView';
-import { ErrorCard } from '@apollosproject/ui-kit';
+import { ErrorCard } from 'apolloschurchapp/src/ui/Card';
 
 import getContentItemContent from './getContentItemContent';
 
diff --git a/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js b/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
index c0a236f..3a22052 100644
--- a/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
+++ b/apolloschurchapp/src/content-single/HorizontalContentFeed/index.js
@@ -4,14 +4,18 @@ import PropTypes from 'prop-types';
 import { withNavigation } from 'react-navigation';
 import { Query } from 'react-apollo';
 
-import {
-  CardTile,
-  HorizontalTileFeed,
-  TouchableScale,
-} from '@apollosproject/ui-kit';
+import CardTile from 'apolloschurchapp/src/ui/CardTile';
+import HorizontalTileFeed from 'apolloschurchapp/src/ui/HorizontalTileFeed';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import styled from 'apolloschurchapp/src/ui/styled';
+import TouchableScale from 'apolloschurchapp/src/ui/TouchableScale';
 
 import getHorizontalContent from './getHorizontalContent';
 
+const FeedContainer = styled({
+  paddingHorizontal: 0,
+})(PaddedView);
+
 const loadingStateObject = {
   node: {
     id: 'fakeId0',
@@ -40,11 +44,11 @@ class HorizontalContentFeed extends Component {
         number={index + 1}
         title={get(item, 'title', '')}
         /*
-         * These are props that are not yet being passed in the data.
-         * We will need to make sure they get added back when that data is available.
-         * byLine={item.content.speaker}
-         * date={item.meta.date}
-         */
+            * These are props that are not yet being passed in the data.
+            * We will need to make sure they get added back when that data is available.
+            * byLine={item.content.speaker}
+            * date={item.meta.date}
+            */
       />
     </TouchableScale>
   );
@@ -67,12 +71,14 @@ class HorizontalContentFeed extends Component {
     const content = siblingContent.length ? siblingContent : childContent;
 
     return (content && content.length) || loading ? (
-      <HorizontalTileFeed
-        content={content}
-        isLoading={loading}
-        loadingStateObject={loadingStateObject}
-        renderItem={this.renderItem}
-      />
+      <FeedContainer>
+        <HorizontalTileFeed
+          content={content}
+          isLoading={loading}
+          loadingStateObject={loadingStateObject}
+          renderItem={this.renderItem}
+        />
+      </FeedContainer>
     ) : null;
   };
 
diff --git a/apolloschurchapp/src/content-single/MediaControls/index.js b/apolloschurchapp/src/content-single/MediaControls/index.js
index 994e4b0..c2bfffc 100644
--- a/apolloschurchapp/src/content-single/MediaControls/index.js
+++ b/apolloschurchapp/src/content-single/MediaControls/index.js
@@ -5,39 +5,32 @@ import { View } from 'react-native';
 import { get } from 'lodash';
 
 import { playVideoMutation } from 'apolloschurchapp/src/ui/MediaPlayer/mutations';
-import { Icon, styled, Button } from '@apollosproject/ui-kit';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import TouchableScale from 'apolloschurchapp/src/ui/TouchableScale';
+import styled from 'apolloschurchapp/src/ui/styled';
 import getContentMedia from './getContentMedia';
 
-const buttonSizeDifferential = 4;
+const buttonSizeDifferential = 3.5;
 
 const MediaIcon = Icon; // todo: add back styles
 const MediaButton = styled(({ theme }) => ({
   width: theme.sizing.baseUnit * buttonSizeDifferential,
   height: theme.sizing.baseUnit * buttonSizeDifferential,
   borderRadius: theme.sizing.baseUnit * (buttonSizeDifferential / 2),
-  backgroundColor: theme.colors.secondary,
+  overflow: 'hidden',
+  backgroundColor: theme.colors.primary,
   justifyContent: 'center',
   alignItems: 'center',
-  borderWidth: 0, // remove default button border
-}))(Button);
-
-/** MediaButtton "border styles" live in a seperate component so that Android places it's elevation
- * shadow in the right place. */
-const MediaButtonBorder = styled(({ theme }) => ({
-  borderRadius:
-    theme.sizing.baseUnit * (buttonSizeDifferential / 2) +
-    buttonSizeDifferential, // this is eqivalent to the MediaButton size above + the padding below
-  padding: buttonSizeDifferential, // padding + backgroundColor = MediaButton + "borderStyles"
-  backgroundColor: theme.colors.paper,
+  borderWidth: buttonSizeDifferential,
+  borderColor: theme.colors.paper,
+  marginHorizontal: theme.sizing.baseUnit / 2,
 }))(View);
 
 const Container = styled(({ theme }) => ({
   flexDirection: 'row',
   alignItems: 'center',
   justifyContent: 'center',
-  marginTop:
-    -theme.sizing.baseUnit * (buttonSizeDifferential / 2) -
-    buttonSizeDifferential, // MediaButton size / 2 + border
+  marginTop: -theme.sizing.baseUnit * (buttonSizeDifferential / 2),
 }))(View);
 
 class MediaControls extends PureComponent {
@@ -62,25 +55,23 @@ class MediaControls extends PureComponent {
         {(play) => (
           <Container>
             {videoSource ? (
-              <MediaButtonBorder>
-                <MediaButton
-                  type="primary"
-                  onPress={() =>
-                    play({
-                      variables: {
-                        mediaSource: videoSource,
-                        posterSources: coverImageSources,
-                        title,
-                        isVideo: true,
-                        artist: parentChannel.name,
-                      },
-                    })
-                  }
-                  useForeground
-                >
+              <TouchableScale
+                onPress={() =>
+                  play({
+                    variables: {
+                      mediaSource: videoSource,
+                      posterSources: coverImageSources,
+                      title,
+                      isVideo: true,
+                      artist: parentChannel.name,
+                    },
+                  })
+                }
+              >
+                <MediaButton>
                   <MediaIcon name="play" />
                 </MediaButton>
-              </MediaButtonBorder>
+              </TouchableScale>
             ) : null}
           </Container>
         )}
diff --git a/apolloschurchapp/src/content-single/NavigationHeader.js b/apolloschurchapp/src/content-single/NavigationHeader.js
deleted file mode 100644
index 50a10ff..0000000
--- a/apolloschurchapp/src/content-single/NavigationHeader.js
+++ /dev/null
@@ -1,36 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import { ModalViewHeader } from '@apollosproject/ui-kit';
-
-const NavigationHeader = ({ scene, navigation }) => {
-  let onBack = null;
-  if (scene.index > 0) onBack = () => navigation.pop();
-
-  const onClose = () => {
-    // Since we're dealing with nested navigators, we have to trigger two actions:
-    // One action that pops us to the top of the modal's navigation history
-    // Another action that pops us one more level, which triggers the modal to close.
-    //
-    // FWIW, calling something like `.pop(scenes.length + 1)` or something does not work,
-    // as that results in the same thing as `.popToTop()`. React-Navigation must have some special-case
-    // handling for calling `.pop()` at the top of a nested navigators stack.
-    //
-    // Because react (or redux?) chains renders, this still results in only one clean animation!
-    navigation.popToTop();
-    navigation.pop();
-  };
-
-  return <ModalViewHeader onClose={onClose} onBack={onBack} />;
-};
-
-NavigationHeader.propTypes = {
-  scene: PropTypes.shape({
-    index: PropTypes.number,
-  }),
-  navigation: PropTypes.shape({
-    pop: PropTypes.func,
-    popToTop: PropTypes.func,
-  }),
-};
-
-export default NavigationHeader;
diff --git a/apolloschurchapp/src/content-single/UniversalContentItem/index.js b/apolloschurchapp/src/content-single/UniversalContentItem/index.js
deleted file mode 100644
index f34789c..0000000
--- a/apolloschurchapp/src/content-single/UniversalContentItem/index.js
+++ /dev/null
@@ -1,65 +0,0 @@
-import React from 'react';
-import { ScrollView } from 'react-native';
-import { get } from 'lodash';
-import PropTypes from 'prop-types';
-import {
-  styled,
-  GradientOverlayImage,
-  BackgroundView,
-  PaddedView,
-  H2,
-} from '@apollosproject/ui-kit';
-import MediaControls from '../MediaControls';
-import HTMLContent from '../HTMLContent';
-import HorizontalContentFeed from '../HorizontalContentFeed';
-
-const FlexedScrollView = styled({ flex: 1 })(ScrollView);
-
-const UniversalContentItem = ({ content, loading }) => {
-  const coverImageSources = get(content, 'coverImage.sources', []);
-  return (
-    <FlexedScrollView>
-      {coverImageSources.length || loading ? (
-        <GradientOverlayImage
-          isLoading={!coverImageSources.length && loading}
-          source={coverImageSources}
-        />
-      ) : null}
-      <BackgroundView>
-        <MediaControls contentId={content.id} />
-        <PaddedView>
-          <H2 padded isLoading={!content.title && loading}>
-            {content.title}
-          </H2>
-          <HTMLContent contentId={content.id} />
-        </PaddedView>
-        <HorizontalContentFeed contentId={content.id} />
-      </BackgroundView>
-    </FlexedScrollView>
-  );
-};
-
-UniversalContentItem.propTypes = {
-  content: PropTypes.shape({
-    __typename: PropTypes.string,
-    parentChannel: PropTypes.shape({
-      name: PropTypes.string,
-    }),
-    id: PropTypes.string,
-    htmlContent: PropTypes.string,
-    title: PropTypes.string,
-    scriptures: PropTypes.arrayOf(
-      PropTypes.shape({
-        /** The ID of the verse (i.e. '1CO.15.57') */
-        id: PropTypes.string,
-        /** A human readable reference (i.e. '1 Corinthians 15:57') */
-        reference: PropTypes.string,
-        /** The scripture source to render */
-        html: PropTypes.string,
-      })
-    ),
-  }),
-  loading: PropTypes.bool,
-};
-
-export default UniversalContentItem;
diff --git a/apolloschurchapp/src/content-single/getContentItem.js b/apolloschurchapp/src/content-single/getContentItem.js
index b4ebc19..fcbfbac 100644
--- a/apolloschurchapp/src/content-single/getContentItem.js
+++ b/apolloschurchapp/src/content-single/getContentItem.js
@@ -4,9 +4,8 @@ export const contentItemFragment = gql`
   fragment contentItemFragment on ContentItem {
     id
     title
+    htmlContent
     isLiked
-    likedCount
-    summary
     coverImage {
       name
       sources {
@@ -42,7 +41,6 @@ export const contentItemFragment = gql`
 export default gql`
   query getContentItem($itemId: ID!) {
     node(id: $itemId) {
-      __typename
       ... on ContentItem {
         ...contentItemFragment
       }
diff --git a/apolloschurchapp/src/content-single/index.js b/apolloschurchapp/src/content-single/index.js
index 83072a7..8f00a5c 100644
--- a/apolloschurchapp/src/content-single/index.js
+++ b/apolloschurchapp/src/content-single/index.js
@@ -1,20 +1,98 @@
-import { createStackNavigator } from 'react-navigation';
-
-import ContentSingle from './ContentSingle';
-
-const ContentSingleNavigator = createStackNavigator(
-  {
-    ContentSingle,
-  },
-  {
-    initialRouteName: 'ContentSingle',
-    headerMode: 'float',
-    headerTransitionPreset: 'fade-in-place',
+import React, { PureComponent } from 'react';
+import { ScrollView } from 'react-native';
+import { Query } from 'react-apollo';
+import { get } from 'lodash';
+import PropTypes from 'prop-types';
+
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import GradientOverlayImage from 'apolloschurchapp/src/ui/GradientOverlayImage';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { H2 } from 'apolloschurchapp/src/ui/typography';
+import { ErrorCard } from 'apolloschurchapp/src/ui/Card';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { ThemeMixin } from 'apolloschurchapp/src/ui/theme';
+
+import ModalView from 'apolloschurchapp/src/ui/ModalView';
+import TrackEventWhenLoaded from 'apolloschurchapp/src/analytics/TrackEventWhenLoaded';
+
+import { events } from 'apolloschurchapp/src/analytics';
+import ActionContainer from './ActionContainer';
+import HTMLContent from './HTMLContent';
+import HorizontalContentFeed from './HorizontalContentFeed';
+import MediaControls from './MediaControls';
+
+import getContentItem from './getContentItem';
+
+const FlexedScrollView = styled({ flex: 1 })(ScrollView);
+
+class ContentSingle extends PureComponent {
+  static propTypes = {
+    navigation: PropTypes.shape({
+      getParam: PropTypes.func,
+      push: PropTypes.func,
+    }),
+  };
+
+  get queryVariables() {
+    return { itemId: this.props.navigation.getParam('itemId', []) };
   }
-);
 
-ContentSingleNavigator.navigationOptions = {
-  header: null,
-};
+  renderWithData = ({ loading, error, data }) => {
+    if (error) return <ErrorCard error={error} />;
+
+    const content = data.node || {};
+
+    const coverImageSources = get(content, 'coverImage.sources', []);
+
+    const { theme = {}, title, id } = content;
+
+    return (
+      <ThemeMixin
+        mixin={{
+          type: get(theme, 'type', 'light').toLowerCase(),
+          colors: get(theme, 'colors'),
+        }}
+      >
+        <ModalView>
+          <TrackEventWhenLoaded
+            loaded={!!(!loading && content.title)}
+            eventName={events.ViewContent}
+            properties={{
+              title: content.title,
+              itemId: this.id,
+            }}
+          />
+          <FlexedScrollView>
+            {coverImageSources.length || loading ? (
+              <GradientOverlayImage
+                isLoading={!coverImageSources.length && loading}
+                source={coverImageSources}
+              />
+            ) : null}
+            <BackgroundView>
+              <MediaControls contentId={id} />
+              <PaddedView>
+                <H2 padded isLoading={!title && loading}>
+                  {title}
+                </H2>
+                <HTMLContent contentId={id} />
+              </PaddedView>
+              <HorizontalContentFeed contentId={id} />
+            </BackgroundView>
+          </FlexedScrollView>
+          <ActionContainer itemId={id} />
+        </ModalView>
+      </ThemeMixin>
+    );
+  };
+
+  render() {
+    return (
+      <Query query={getContentItem} variables={this.queryVariables}>
+        {this.renderWithData}
+      </Query>
+    );
+  }
+}
 
-export default ContentSingleNavigator;
+export default ContentSingle;
diff --git a/apolloschurchapp/src/index.js b/apolloschurchapp/src/index.js
index 7fe89f1..8e18ef1 100644
--- a/apolloschurchapp/src/index.js
+++ b/apolloschurchapp/src/index.js
@@ -3,16 +3,20 @@ import { StatusBar } from 'react-native';
 import { createStackNavigator } from 'react-navigation';
 // import { Sentry } from 'react-native-sentry';
 
-import { BackgroundView, withTheme } from '@apollosproject/ui-kit';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
 import MediaPlayer from 'apolloschurchapp/src/ui/MediaPlayer';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
 import Providers from './Providers';
 import NotificationsInit from './Notifications';
 import NavigationService from './NavigationService';
 import ContentSingle from './content-single';
-import Tabs from './tabs';
-import Auth from './auth';
+import UserSettings from './user-settings';
 import PersonalDetails from './user-settings/PersonalDetails';
 import ChangePassword from './user-settings/ChangePassword';
+import LikedContentList from './tabs/connect/LikedContentList';
+import Tabs from './tabs';
+import Auth from './auth';
 
 // Sentry.config(
 //   'https://5908fa19ed37447f86b2717423cadec5:45dd3b58792b413cb67109c5e63a0bb7@sentry.io/1241658'
@@ -28,13 +32,15 @@ const AppNavigator = createStackNavigator(
     Tabs,
     ContentSingle,
     Auth,
+    UserSettings,
+    LikedContentList,
     PersonalDetails,
     ChangePassword,
   },
   {
     initialRouteName: 'Tabs',
     mode: 'modal',
-    headerMode: 'screen',
+    headerMode: 'none',
   }
 );
 
diff --git a/apolloschurchapp/src/live/LiveButton.js b/apolloschurchapp/src/live/LiveButton.js
index c5760e3..5b5726f 100644
--- a/apolloschurchapp/src/live/LiveButton.js
+++ b/apolloschurchapp/src/live/LiveButton.js
@@ -2,14 +2,11 @@ import React from 'react';
 import { Query } from 'react-apollo';
 import { get } from 'lodash';
 
-import {
-  Card,
-  CardContent,
-  TouchableScale,
-  styled,
-  ChannelLabel,
-  UIText,
-} from '@apollosproject/ui-kit';
+import { UIText } from 'apolloschurchapp/src/ui/typography';
+import Card, { CardContent } from 'apolloschurchapp/src/ui/Card';
+import TouchableScale from 'apolloschurchapp/src/ui/TouchableScale';
+import styled from 'apolloschurchapp/src/ui/styled';
+import ChannelLabel from 'apolloschurchapp/src/ui/ChannelLabel';
 import { WebBrowserConsumer } from 'apolloschurchapp/src/ui/WebBrowser';
 
 import getLiveStream from './getLiveStream';
diff --git a/apolloschurchapp/src/store/index.js b/apolloschurchapp/src/store/index.js
index f9bec86..3ca0f6f 100644
--- a/apolloschurchapp/src/store/index.js
+++ b/apolloschurchapp/src/store/index.js
@@ -57,7 +57,7 @@ export const schema = `
 `;
 
 export const defaults = {
-  __typename: 'Query',
+  __typename: 'ClientState',
   authToken: null,
   mediaPlayer: {
     __typename: 'MediaPlayerState',
@@ -87,8 +87,11 @@ export const resolvers = {
     },
   },
   Mutation: {
-    logout: () => {
+    logout: (root, variables, { cache }) => {
       client.resetStore();
+      cache.writeData({
+        data: defaults,
+      });
       track({ eventName: events.UserLogout });
       return null;
     },
diff --git a/apolloschurchapp/src/tabs/connect/ActionTable/index.js b/apolloschurchapp/src/tabs/connect/ActionTable/index.js
deleted file mode 100644
index c68be5c..0000000
--- a/apolloschurchapp/src/tabs/connect/ActionTable/index.js
+++ /dev/null
@@ -1,94 +0,0 @@
-import React from 'react';
-import { View } from 'react-native';
-
-import {
-  TableView,
-  Cell,
-  CellIcon,
-  CellText,
-  Divider,
-  Touchable,
-  styled,
-  PaddedView,
-  H4,
-} from '@apollosproject/ui-kit';
-import { WebBrowserConsumer } from 'apolloschurchapp/src/ui/WebBrowser';
-import NavigationActions from 'apolloschurchapp/src/NavigationService';
-
-const RowHeader = styled(({ theme }) => ({
-  flexDirection: 'row',
-  justifyContent: 'space-between',
-  alignItems: 'center',
-  paddingVertical: theme.sizing.baseUnit,
-}))(PaddedView);
-
-const Name = styled({
-  flexGrow: 1,
-})(View);
-
-const ActionTable = () => (
-  <WebBrowserConsumer>
-    {(openUrl) => (
-      <View>
-        <RowHeader>
-          <Name>
-            <H4>{'Connect with Apollos'}</H4>
-          </Name>
-        </RowHeader>
-        <TableView>
-          <Touchable
-            onPress={() => openUrl('https://apollosrock.newspring.cc/page/235')}
-          >
-            <Cell>
-              <CellIcon name="check" />
-              <CellText>Find a serving opportunity</CellText>
-            </Cell>
-          </Touchable>
-          <Divider />
-          <Touchable
-            onPress={() => openUrl('https://apollosrock.newspring.cc/page/236')}
-          >
-            <Cell>
-              <CellIcon name="groups" />
-              <CellText>Join a small group</CellText>
-            </Cell>
-          </Touchable>
-          <Divider />
-          <Touchable
-            onPress={() => openUrl('https://apollosrock.newspring.cc/page/233')}
-          >
-            <Cell>
-              <CellIcon name="share" />
-              <CellText>I need prayer</CellText>
-            </Cell>
-          </Touchable>
-          <Divider />
-          <Touchable
-            onPress={() => openUrl('https://apollosrock.newspring.cc/page/186')}
-          >
-            <Cell>
-              <CellIcon name="download" />
-              <CellText>I would like to give</CellText>
-            </Cell>
-          </Touchable>
-        </TableView>
-        <TableView>
-          <Touchable
-            onPress={() => NavigationActions.navigate('TestingControlPanel')}
-          >
-            <Cell>
-              <CellIcon name="settings" />
-              <CellText>Open Testing Panel</CellText>
-            </Cell>
-          </Touchable>
-        </TableView>
-      </View>
-    )}
-  </WebBrowserConsumer>
-);
-
-const StyledActionTable = styled(({ theme }) => ({
-  paddingBottom: theme.sizing.baseUnit * 100,
-}))(ActionTable);
-
-export default StyledActionTable;
diff --git a/apolloschurchapp/src/tabs/connect/Connect.js b/apolloschurchapp/src/tabs/connect/Connect.js
index 8de06b1..a61a421 100644
--- a/apolloschurchapp/src/tabs/connect/Connect.js
+++ b/apolloschurchapp/src/tabs/connect/Connect.js
@@ -1,21 +1,26 @@
 import React, { PureComponent } from 'react';
-import { ScrollView, SafeAreaView } from 'react-native';
+import { ScrollView, SafeAreaView, Platform } from 'react-native';
 import { Query } from 'react-apollo';
 import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
 import { LoginButton } from 'apolloschurchapp/src/auth';
-import {
-  H1,
-  BodyText,
-  Paragraph,
-  BackgroundView,
-  withTheme,
-  styled,
-  Icon,
-  PaddedView,
-} from '@apollosproject/ui-kit';
-import ActionTable from './ActionTable';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import TableView, {
+  Cell,
+  CellIcon,
+  CellText,
+  Divider,
+} from 'apolloschurchapp/src/ui/TableView';
+import { WebBrowserConsumer } from 'apolloschurchapp/src/ui/WebBrowser';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import { H1, BodyText, Paragraph } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import NavigationActions from 'apolloschurchapp/src/NavigationService';
+
 import { UserAvatarHeaderConnected } from './UserAvatarHeader';
 import { RecentlyLikedTileFeedConnected } from './RecentlyLikedTileFeed';
 import getLoginState from './getLoginState';
@@ -35,7 +40,16 @@ const BrandIcon = withTheme(({ theme }) => ({
 const Header = styled(({ theme }) => ({
   paddingBottom: theme.sizing.baseUnit * 1.5,
   backgroundColor: theme.colors.background.paper,
-  paddingTop: theme.sizing.baseUnit * 4,
+  // These conditional paddings are due to inconsistencies with SafeAreaView.
+  // TODO: revisit and update/remove these values after next RN upgrade.
+  ...Platform.select({
+    ios: {
+      paddingTop: theme.sizing.baseUnit * 5,
+    },
+    android: {
+      paddingTop: theme.sizing.baseUnit * 4,
+    },
+  }),
 }))(PaddedView);
 
 const StyledLoginButton = styled(({ theme }) => ({
@@ -58,45 +72,98 @@ class Connect extends PureComponent {
   render() {
     return (
       <BackgroundView>
-        <Query query={getLoginState}>
-          {({ data }) => {
-            if (get(data, 'isLoggedIn', false))
-              return (
-                <SafeAreaView>
-                  <ScrollView>
-                    <UserAvatarHeaderConnected key="UserAvatarHeaderConnected" />
-                    <RecentlyLikedTileFeedConnected key="RecentlyLikedTileFeedConnected" />
-                    <ActionTable />
-                  </ScrollView>
-                </SafeAreaView>
-              );
-            return (
+        <WebBrowserConsumer>
+          {(openUrl) => (
+            <ScrollView>
               <SafeAreaView>
-                <ScrollView>
-                  <Header>
-                    <BrandIcon />
-                    <Title>Connect!</Title>
-                    <Paragraph>
-                      <BodyText>
-                        Our mission is to help you connect to others as well as
-                        help you in your walk with Christ.
-                      </BodyText>
-                    </Paragraph>
-                    <Paragraph>
-                      <BodyText>
-                        By joining this community, you will unlock amazing
-                        features like; curated content and devotionals, simple
-                        event registration, and easy online giving!
-                      </BodyText>
-                    </Paragraph>
-                    <StyledLoginButton />
-                  </Header>
-                  <ActionTable />
-                </ScrollView>
+                <Query query={getLoginState}>
+                  {({ data }) => {
+                    if (get(data, 'isLoggedIn', false))
+                      return [
+                        <UserAvatarHeaderConnected key="UserAvatarHeaderConnected" />,
+                        <RecentlyLikedTileFeedConnected key="RecentlyLikedTileFeedConnected" />,
+                      ];
+                    return (
+                      <Header>
+                        <BrandIcon />
+                        <Title>Connect!</Title>
+                        <Paragraph>
+                          <BodyText>
+                            Our mission is to help you connect to others as well
+                            as help you in your walk with Christ.
+                          </BodyText>
+                        </Paragraph>
+                        <Paragraph>
+                          <BodyText>
+                            By joining this community, you will unlock amazing
+                            features like; curated content and devotionals,
+                            simple event registration, and easy online giving!
+                          </BodyText>
+                        </Paragraph>
+                        <StyledLoginButton />
+                      </Header>
+                    );
+                  }}
+                </Query>
+                <TableView>
+                  <Touchable
+                    onPress={() =>
+                      openUrl('https://apollosrock.newspring.cc/page/235')
+                    }
+                  >
+                    <Cell>
+                      <CellIcon name="check" />
+                      <CellText>Find a serving opportunity</CellText>
+                    </Cell>
+                  </Touchable>
+                  <Divider />
+                  <Touchable
+                    onPress={() =>
+                      openUrl('https://apollosrock.newspring.cc/page/236')
+                    }
+                  >
+                    <Cell>
+                      <CellIcon name="groups" />
+                      <CellText>Join a small group</CellText>
+                    </Cell>
+                  </Touchable>
+                  <Divider />
+                  <Touchable
+                    onPress={() =>
+                      openUrl('https://apollosrock.newspring.cc/page/233')
+                    }
+                  >
+                    <Cell>
+                      <CellIcon name="share" />
+                      <CellText>I need prayer</CellText>
+                    </Cell>
+                  </Touchable>
+                  <Divider />
+                  <Touchable
+                    onPress={() =>
+                      openUrl('https://apollosrock.newspring.cc/page/186')
+                    }
+                  >
+                    <Cell>
+                      <CellIcon name="download" />
+                      <CellText>I would like to give</CellText>
+                    </Cell>
+                  </Touchable>
+                  <Touchable
+                    onPress={() =>
+                      NavigationActions.navigate('TestingControlPanel')
+                    }
+                  >
+                    <Cell>
+                      <CellIcon name="download" />
+                      <CellText>I would like to test the app</CellText>
+                    </Cell>
+                  </Touchable>
+                </TableView>
               </SafeAreaView>
-            );
-          }}
-        </Query>
+            </ScrollView>
+          )}
+        </WebBrowserConsumer>
       </BackgroundView>
     );
   }
diff --git a/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js b/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js
index f6fadb7..fa6f98e 100644
--- a/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js
+++ b/apolloschurchapp/src/tabs/connect/LikedContentList/LikedContentList.tests.js
@@ -17,7 +17,6 @@ describe('LikedContentList component', () => {
         data: {
           getAllLikedContent: [
             {
-              __typename: 'UniversalContentItem',
               id: 'UniversalContentItem:4148aeb9482181025e9cad42826e676a',
               title: 'Making Prayer a Spiritual Habit',
               coverImage: {
@@ -35,7 +34,6 @@ describe('LikedContentList component', () => {
               },
             },
             {
-              __typename: 'UniversalContentItem',
               id: 'UniversalContentItem:9dbdc4e565dcaa3c9b17eb5ae42de96e',
               title: 'Vacations and Your Budget',
               coverImage: {
diff --git a/apolloschurchapp/src/tabs/connect/LikedContentList/index.js b/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
index 2fd7fda..7dbe57f 100644
--- a/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
+++ b/apolloschurchapp/src/tabs/connect/LikedContentList/index.js
@@ -2,15 +2,15 @@ import React, { PureComponent } from 'react';
 import PropTypes from 'prop-types';
 import { Query } from 'react-apollo';
 
-import { BackgroundView, FeedView } from '@apollosproject/ui-kit';
-import ContentCardConnected from '../../../ui/ContentCardConnected';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import FeedView from 'apolloschurchapp/src/ui/FeedView';
 
 import getLikedContent from '../getLikedContent';
 /** A FeedView wrapped in a query to pull content data. */
 class LikedContentList extends PureComponent {
   /** Function for React Navigation to set information in the header. */
   static navigationOptions = () => ({
-    title: 'Your Likes',
+    title: 'Liked Content',
   });
 
   static propTypes = {
@@ -38,7 +38,6 @@ class LikedContentList extends PureComponent {
         <Query query={getLikedContent} fetchPolicy="cache-and-network">
           {({ loading, error, data: { getAllLikedContent = [] }, refetch }) => (
             <FeedView
-              ListItemComponent={ContentCardConnected}
               initialNumToRender={5}
               content={getAllLikedContent}
               isLoading={loading}
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js
index 8b4437d..08fea62 100644
--- a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.js
@@ -3,25 +3,21 @@ import { View } from 'react-native';
 import { withNavigation } from 'react-navigation';
 import PropTypes from 'prop-types';
 
-import {
-  PaddedView,
-  H4,
-  UIText,
-  HorizontalTileFeed,
-  styled,
-  ButtonLink,
-  withIsLoading,
-  TouchableScale,
-} from '@apollosproject/ui-kit';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { H4, UIText } from 'apolloschurchapp/src/ui/typography';
+import HorizontalTileFeed from 'apolloschurchapp/src/ui/HorizontalTileFeed';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
 
-import ContentCard from 'apolloschurchapp/src/ui/ContentCardConnected';
+import TileImageItem from '../../discover/TileImageItem';
 
-const RowHeader = styled({
+const RowHeader = styled(({ theme }) => ({
   flexDirection: 'row',
   justifyContent: 'space-between',
   alignItems: 'center',
-  paddingVertical: 0,
-})(PaddedView);
+  paddingVertical: theme.sizing.baseUnit,
+}))(PaddedView);
 
 const Name = styled({
   flexGrow: 1,
@@ -50,20 +46,11 @@ class RecentlyLikedTileFeed extends Component {
   };
 
   titleImageItem = ({ item }) => (
-    <TouchableScale
-      onPress={() => {
-        this.props.navigation.push('ContentSingle', {
-          itemId: item.id,
-        });
-      }}
-    >
-      <ContentCard
-        isLoading={item.isLoading}
-        tile
-        contentId={item.id}
-        inHorizontalList
-      />
-    </TouchableScale>
+    <TileImageItem
+      item={item}
+      isLoading={this.props.isLoading}
+      navigation={this.props.navigation}
+    />
   );
 
   render() {
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js
index e57b4c6..7e2d3eb 100644
--- a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeed.tests.js
@@ -11,7 +11,6 @@ describe('RecentlyLikedTileFeed', () => {
         {
           id: 'UniversalContentItem:4148aeb9482181025e9cad42826e676a',
           title: 'Making Prayer a Spiritual Habit',
-          __typename: 'UniversalContentItem',
           coverImage: {
             sources: [
               {
@@ -29,7 +28,6 @@ describe('RecentlyLikedTileFeed', () => {
         {
           id: 'UniversalContentItem:9dbdc4e565dcaa3c9b17eb5ae42de96e',
           title: 'Vacations and Your Budget',
-          __typename: 'UniversalContentItem',
           coverImage: {
             sources: [
               {
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js
index a86843d..45dd4df 100644
--- a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.js
@@ -12,12 +12,12 @@ const RecentlyLikedTileFeedConnected = ({ navigation }) => (
       return (
         <RecentlyLikedTileFeed
           id={'liked'}
-          name={'Recently Liked'}
+          name={'Recently Like'}
           content={getAllLikedContent}
           isLoading={loading}
           navigation={navigation}
           loadingStateObject={{
-            title: 'Recently Liked',
+            title: 'Recently Like',
             isLoading: true,
           }}
         />
diff --git a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js
index 20e6417..349f4e9 100644
--- a/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js
+++ b/apolloschurchapp/src/tabs/connect/RecentlyLikedTileFeed/RecentlyLikedTileFeedConnected.tests.js
@@ -18,7 +18,6 @@ describe('RecentlyLikedTileFeedConnected', () => {
           getAllLikedContent: [
             {
               id: 'UniversalContentItem:296373ecb53580855cadffa0375ebe18',
-              __typename: 'UniversalContentItem',
               title: 'Guys Night!',
               coverImage: {
                 sources: [
@@ -36,7 +35,6 @@ describe('RecentlyLikedTileFeedConnected', () => {
             },
             {
               id: 'UniversalContentItem:39193b5ad28717ebfeab4d226664d8e7',
-              __typename: 'UniversalContentItem',
               title: 'This August at NewSpring',
               coverImage: {
                 sources: [
@@ -54,7 +52,6 @@ describe('RecentlyLikedTileFeedConnected', () => {
             },
             {
               id: 'UniversalContentItem:ae8ec75906ba7437c49ad2534b5024db',
-              __typename: 'UniversalContentItem',
               title: 'A Place to Worship Free of Fear',
               coverImage: {
                 sources: [
diff --git a/apolloschurchapp/src/tabs/connect/UserAvatarHeader/UserAvatarHeader.js b/apolloschurchapp/src/tabs/connect/UserAvatarHeader/UserAvatarHeader.js
index 1484a66..82f5f9c 100644
--- a/apolloschurchapp/src/tabs/connect/UserAvatarHeader/UserAvatarHeader.js
+++ b/apolloschurchapp/src/tabs/connect/UserAvatarHeader/UserAvatarHeader.js
@@ -3,24 +3,23 @@ import PropTypes from 'prop-types';
 import { compose } from 'recompose';
 import { withNavigation } from 'react-navigation';
 
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
 import UserAvatarView from 'apolloschurchapp/src/ui/UserAvatarView';
-
-import {
-  withIsLoading,
-  Touchable,
-  ConnectedImage,
-  Icon,
-  withTheme,
-  styled,
-  PaddedView,
-  FlexedView,
-} from '@apollosproject/ui-kit';
+import ConnectedImage from 'apolloschurchapp/src/ui/ConnectedImage';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import styled from 'apolloschurchapp/src/ui/styled';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
 
 const Container = styled(({ theme }) => ({
   alignItems: 'center',
   flexDirection: 'row',
-  paddingTop: theme.sizing.baseUnit * 2,
-  paddingBottom: 0,
+  /* This padding shouldn't be needed or at least not at such a high value but SafeAreaView doesn't
+   * appear to work so here it is 🤷‍♂️
+   * TODO: revisit and update/remove these values after next RN upgrade. */
+  paddingTop: theme.sizing.baseUnit * 3,
 }))(PaddedView);
 
 const SettingsIcon = compose(
diff --git a/apolloschurchapp/src/tabs/connect/getLikedContent.js b/apolloschurchapp/src/tabs/connect/getLikedContent.js
index 0252dd1..27e5260 100644
--- a/apolloschurchapp/src/tabs/connect/getLikedContent.js
+++ b/apolloschurchapp/src/tabs/connect/getLikedContent.js
@@ -1,17 +1,22 @@
 import gql from 'graphql-tag';
 
-import { largeCardFragment } from 'apolloschurchapp/src/ui/ContentCardConnected';
-import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
-
 export default gql`
   query getAllLikedContent {
     getAllLikedContent {
       ... on ContentItem {
-        ...contentItemFragment
-        ...largeCardFragment
+        id
+        title
+        coverImage {
+          sources {
+            uri
+          }
+        }
+        sharing {
+          title
+          message
+          url
+        }
       }
     }
   }
-  ${contentItemFragment}
-  ${largeCardFragment}
 `;
diff --git a/apolloschurchapp/src/tabs/connect/index.js b/apolloschurchapp/src/tabs/connect/index.js
index 7091870..00674fc 100644
--- a/apolloschurchapp/src/tabs/connect/index.js
+++ b/apolloschurchapp/src/tabs/connect/index.js
@@ -1,18 +1,14 @@
 import { createStackNavigator } from 'react-navigation';
 
-import UserSettings from 'apolloschurchapp/src/user-settings';
+import tabBarIcon from '../tabBarIcon';
 
 import TestingControlPanel from '../../testing-control-panel';
-import tabBarIcon from '../tabBarIcon';
 import Connect from './Connect';
-import LikedContentList from './LikedContentList';
 
 const ConnectNavigator = createStackNavigator(
   {
     Connect,
     TestingControlPanel,
-    UserSettings,
-    LikedContentList,
   },
   {
     initialRouteName: 'Connect',
diff --git a/apolloschurchapp/src/tabs/discover/Discover.js b/apolloschurchapp/src/tabs/discover/Discover.js
index 76d8b24..6bb4545 100644
--- a/apolloschurchapp/src/tabs/discover/Discover.js
+++ b/apolloschurchapp/src/tabs/discover/Discover.js
@@ -2,7 +2,8 @@ import React, { PureComponent } from 'react';
 import { Query } from 'react-apollo';
 import { get } from 'lodash';
 
-import { FeedView, BackgroundView } from '@apollosproject/ui-kit';
+import FeedView from 'apolloschurchapp/src/ui/FeedView';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
 
 import TileContentFeed from './TileContentFeed';
 import getContentChannels from './getContentChannels';
diff --git a/apolloschurchapp/src/tabs/discover/TileContentFeed.js b/apolloschurchapp/src/tabs/discover/TileContentFeed.js
index 4470a03..973eef1 100644
--- a/apolloschurchapp/src/tabs/discover/TileContentFeed.js
+++ b/apolloschurchapp/src/tabs/discover/TileContentFeed.js
@@ -2,30 +2,21 @@ import React from 'react';
 import { withNavigation } from 'react-navigation';
 import PropTypes from 'prop-types';
 
-import {
-  PaddedView,
-  H4,
-  HorizontalTileFeed,
-  styled,
-  ButtonLink,
-  TouchableScale,
-} from '@apollosproject/ui-kit';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+import HorizontalTileFeed from 'apolloschurchapp/src/ui/HorizontalTileFeed';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
 
-import ContentCardConnected from '../../ui/ContentCardConnected';
+import TileImageItem from './TileImageItem';
 
 const RowHeader = styled({
   flexDirection: 'row',
   justifyContent: 'space-between',
   alignItems: 'center',
-  paddingBottom: 0,
+  paddingVertical: 0,
 })(PaddedView);
 
-const loadingStateObject = {
-  id: 'fake_id',
-  title: '',
-  coverImage: [],
-};
-
 const TileContentFeed = ({ isLoading, id, name, navigation, content = [] }) => (
   <PaddedView horizontal={false}>
     <RowHeader>
@@ -46,22 +37,17 @@ const TileContentFeed = ({ isLoading, id, name, navigation, content = [] }) => (
     <HorizontalTileFeed
       content={content}
       renderItem={({ item }) => (
-        <TouchableScale
-          onPress={() => {
-            navigation.push('ContentSingle', {
-              itemId: item.id,
-            });
-          }}
-        >
-          <ContentCardConnected
-            contentId={item.id}
-            isLoading={isLoading}
-            tile
-            inHorizontalList
-          />
-        </TouchableScale>
+        <TileImageItem
+          item={item}
+          isLoading={isLoading}
+          navigation={navigation}
+        />
       )}
-      loadingStateObject={loadingStateObject}
+      loadingStateObject={{
+        id: 'fake_id',
+        title: '',
+        coverImage: [],
+      }}
       isLoading={isLoading}
     />
   </PaddedView>
diff --git a/apolloschurchapp/src/tabs/discover/TileImageItem.js b/apolloschurchapp/src/tabs/discover/TileImageItem.js
index da8c732..f6e6f77 100644
--- a/apolloschurchapp/src/tabs/discover/TileImageItem.js
+++ b/apolloschurchapp/src/tabs/discover/TileImageItem.js
@@ -2,7 +2,8 @@ import React from 'react';
 import { View } from 'react-native';
 import PropTypes from 'prop-types';
 
-import { TileImage, styled } from '@apollosproject/ui-kit';
+import TileImage from 'apolloschurchapp/src/ui/TileImage';
+import styled from 'apolloschurchapp/src/ui/styled';
 
 const Container = styled(({ theme }) => ({
   flex: 1,
diff --git a/apolloschurchapp/src/tabs/discover/getContentChannels.js b/apolloschurchapp/src/tabs/discover/getContentChannels.js
index bc9c243..d39573a 100644
--- a/apolloschurchapp/src/tabs/discover/getContentChannels.js
+++ b/apolloschurchapp/src/tabs/discover/getContentChannels.js
@@ -1,7 +1,6 @@
 import gql from 'graphql-tag';
 
 import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
-import { tileCardFragment } from 'apolloschurchapp/src/ui/ContentCardConnected';
 
 export default gql`
   query getContentChannels {
@@ -13,12 +12,21 @@ export default gql`
           node {
             id
             ...contentItemFragment
-            ...tileCardFragment
+            title
+            coverImage {
+              sources {
+                uri
+              }
+            }
+            sharing {
+              title
+              message
+              url
+            }
           }
         }
       }
     }
   }
   ${contentItemFragment}
-  ${tileCardFragment}
 `;
diff --git a/apolloschurchapp/src/tabs/home/Home.js b/apolloschurchapp/src/tabs/home/Home.js
index bb09a97..6a3bdcf 100644
--- a/apolloschurchapp/src/tabs/home/Home.js
+++ b/apolloschurchapp/src/tabs/home/Home.js
@@ -5,8 +5,9 @@ import SafeAreaView from 'react-native-safe-area-view';
 import { get } from 'lodash';
 import PropTypes from 'prop-types';
 
-import { styled, FeedView, BackgroundView } from '@apollosproject/ui-kit';
-import ContentCardConnected from '../../ui/ContentCardConnected';
+import styled from 'apolloschurchapp/src/ui/styled';
+import FeedView from 'apolloschurchapp/src/ui/FeedView';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
 
 import { LiveButton } from '../../live';
 
@@ -45,7 +46,6 @@ class Home extends PureComponent {
           <Query query={getUserFeed} fetchPolicy="cache-and-network">
             {({ loading, error, data, refetch }) => (
               <FeedView
-                ListItemComponent={ContentCardConnected}
                 content={get(data, 'userFeed.edges', []).map(
                   (edge) => edge.node
                 )}
diff --git a/apolloschurchapp/src/tabs/home/getUserFeed.js b/apolloschurchapp/src/tabs/home/getUserFeed.js
index 2d7cb9a..34ed66c 100644
--- a/apolloschurchapp/src/tabs/home/getUserFeed.js
+++ b/apolloschurchapp/src/tabs/home/getUserFeed.js
@@ -1,19 +1,40 @@
 import gql from 'graphql-tag';
 
 import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
-import { largeCardFragment } from 'apolloschurchapp/src/ui/ContentCardConnected';
 
 export default gql`
   query getUserFeed {
     userFeed {
       edges {
         node {
-          ...largeCardFragment
           ...contentItemFragment
+          __typename
+          id
+          coverImage {
+            name
+            sources {
+              uri
+            }
+          }
+          parentChannel {
+            id
+            name
+            iconName
+          }
+          theme {
+            type
+            colors {
+              primary
+              secondary
+              screen
+              paper
+            }
+          }
+          isLiked
+          title
         }
       }
     }
   }
   ${contentItemFragment}
-  ${largeCardFragment}
 `;
diff --git a/apolloschurchapp/src/tabs/tabBar.js b/apolloschurchapp/src/tabs/tabBar.js
index e806ab4..f93f00e 100644
--- a/apolloschurchapp/src/tabs/tabBar.js
+++ b/apolloschurchapp/src/tabs/tabBar.js
@@ -7,7 +7,8 @@ import gql from 'graphql-tag';
 import { get } from 'lodash';
 
 import { MediaPlayerSpacer } from 'apolloschurchapp/src/ui/MediaPlayer';
-import { styled, withTheme } from '@apollosproject/ui-kit';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
 
 const mediaPlayerIsVisibleQuery = gql`
   query {
diff --git a/apolloschurchapp/src/tabs/tabBarIcon.js b/apolloschurchapp/src/tabs/tabBarIcon.js
index 0d6e4ca..411c446 100644
--- a/apolloschurchapp/src/tabs/tabBarIcon.js
+++ b/apolloschurchapp/src/tabs/tabBarIcon.js
@@ -1,7 +1,7 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 
-import { Icon } from '@apollosproject/ui-kit';
+import Icon from 'apolloschurchapp/src/ui/Icon';
 
 const tabBarIcon = (name) => {
   function TabBarIcon({ tintColor }) {
diff --git a/apolloschurchapp/src/testing-control-panel/TouchableCell.js b/apolloschurchapp/src/testing-control-panel/TouchableCell.js
index bfe51df..c958596 100644
--- a/apolloschurchapp/src/testing-control-panel/TouchableCell.js
+++ b/apolloschurchapp/src/testing-control-panel/TouchableCell.js
@@ -1,6 +1,8 @@
 import React from 'react';
 import PropType from 'prop-types';
-import { Touchable, Cell, CellIcon, CellText } from '@apollosproject/ui-kit';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
+
+import { Cell, CellIcon, CellText } from 'apolloschurchapp/src/ui/TableView';
 
 const TouchableCell = ({ iconName, cellText, handlePress }) => (
   <Touchable onPress={handlePress}>
diff --git a/apolloschurchapp/src/testing-control-panel/index.js b/apolloschurchapp/src/testing-control-panel/index.js
index 121e804..3623e04 100644
--- a/apolloschurchapp/src/testing-control-panel/index.js
+++ b/apolloschurchapp/src/testing-control-panel/index.js
@@ -1,5 +1,5 @@
 import React, { PureComponent } from 'react';
-import { TableView, Divider } from '@apollosproject/ui-kit';
+import TableView, { Divider } from 'apolloschurchapp/src/ui/TableView';
 import ChangeLivestream from './ChangeLivestream';
 
 export default class TestingControlPanel extends PureComponent {
diff --git a/apolloschurchapp/src/ui/ActivityIndicator/index.js b/apolloschurchapp/src/ui/ActivityIndicator/index.js
new file mode 100644
index 0000000..434201d
--- /dev/null
+++ b/apolloschurchapp/src/ui/ActivityIndicator/index.js
@@ -0,0 +1,20 @@
+import {
+  ActivityIndicator as NativeActivityIndicator,
+  StyleSheet,
+} from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const ActivityIndicator = styled(
+  {
+    flex: 1,
+    ...StyleSheet.absoluteFillObject,
+    alignSelf: 'center',
+  },
+  'ActivityIndicator'
+)(NativeActivityIndicator);
+
+export {
+  ActivityIndicator as default,
+  NativeActivityIndicator as InlineActivityIndicator,
+};
diff --git a/apolloschurchapp/src/ui/Avatar/Avatar.stories.js b/apolloschurchapp/src/ui/Avatar/Avatar.stories.js
new file mode 100644
index 0000000..7d7f7bb
--- /dev/null
+++ b/apolloschurchapp/src/ui/Avatar/Avatar.stories.js
@@ -0,0 +1,19 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+
+import Avatar from '.';
+
+const source = {
+  uri:
+    'https://dg0ddngxdz549.cloudfront.net/images/cached/images/remote/http_s3.amazonaws.com/ns.images/all/member_images/members.nophoto_1000_1000_90_c1.jpg',
+};
+/* eslint-disable react-native/no-inline-styles */
+storiesOf('Avatar', module).add('default', () => (
+  <FlexedView style={{ flexWrap: 'wrap', flexDirection: 'row' }}>
+    <Avatar source={source} size="small" />
+    <Avatar source={source} size="medium" />
+    <Avatar source={source} size="large" />
+  </FlexedView>
+));
diff --git a/apolloschurchapp/src/ui/Avatar/Avatar.tests.js b/apolloschurchapp/src/ui/Avatar/Avatar.tests.js
new file mode 100644
index 0000000..da1bd21
--- /dev/null
+++ b/apolloschurchapp/src/ui/Avatar/Avatar.tests.js
@@ -0,0 +1,38 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import { ThemeProvider } from 'apolloschurchapp/src/ui/theme';
+
+import Avatar from '.';
+
+const source = {
+  uri:
+    'https://dg0ddngxdz549.cloudfront.net/images/cached/images/remote/http_s3.amazonaws.com/ns.images/all/member_images/members.nophoto_1000_1000_90_c1.jpg',
+};
+
+describe('The Avatar component', () => {
+  it('should render small', () => {
+    const tree = renderer.create(
+      <ThemeProvider>
+        <Avatar source={source} size="small" />
+      </ThemeProvider>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render medium', () => {
+    const tree = renderer.create(
+      <ThemeProvider>
+        <Avatar source={source} size="medium" />
+      </ThemeProvider>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render large', () => {
+    const tree = renderer.create(
+      <ThemeProvider>
+        <Avatar source={source} size="large" />
+      </ThemeProvider>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Avatar/List.js b/apolloschurchapp/src/ui/Avatar/List.js
new file mode 100644
index 0000000..ef6596e
--- /dev/null
+++ b/apolloschurchapp/src/ui/Avatar/List.js
@@ -0,0 +1,14 @@
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const AvatarList = styled(
+  {
+    flexDirection: 'row',
+    flexWrap: 'wrap',
+    maxWidth: '100%',
+  },
+  'Avatar.List'
+)(View);
+
+export default AvatarList;
diff --git a/apolloschurchapp/src/ui/Avatar/index.js b/apolloschurchapp/src/ui/Avatar/index.js
new file mode 100644
index 0000000..3cb204a
--- /dev/null
+++ b/apolloschurchapp/src/ui/Avatar/index.js
@@ -0,0 +1,74 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { View } from 'react-native';
+import { get } from 'lodash';
+import { compose, pure } from 'recompose';
+
+import ConnectedImage from 'apolloschurchapp/src/ui/ConnectedImage';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import ActivityIndicator from 'apolloschurchapp/src/ui/ActivityIndicator';
+
+export { default as AvatarList } from './List';
+
+const enhance = compose(
+  pure,
+  withTheme(({ theme, size }) => ({
+    themeSize: get(theme.sizing.avatar, size, theme.sizing.avatar.small),
+  }))
+);
+
+const Container = styled(
+  ({ theme, themeSize }) => ({
+    width: themeSize,
+    height: themeSize,
+    backgroundColor: theme.colors.background.inactive,
+    borderRadius: themeSize / 2,
+    marginRight: themeSize / 4,
+    marginBottom: themeSize / 4,
+    overflow: 'hidden',
+  }),
+  'Avatar'
+)(View);
+
+const LoadingIcon = compose(
+  withTheme(({ theme: { colors } = {} }) => ({ color: colors.white })),
+  styled({
+    zIndex: 1,
+  })
+)(ActivityIndicator);
+
+const Image = styled(({ themeSize }) => ({
+  width: '100%',
+  height: '100%',
+  position: 'absolute',
+  top: 0,
+  left: 0,
+  right: 0,
+  bottom: 0,
+  borderRadius: themeSize / 2,
+}))(ConnectedImage);
+
+const Avatar = enhance(
+  ({ themeSize, containerStyle, source, isLoading, ...imageProps }) => (
+    <Container style={containerStyle} themeSize={themeSize}>
+      {isLoading ? <LoadingIcon /> : null}
+      {source && source.uri ? (
+        <Image
+          source={source}
+          {...imageProps}
+          themeSize={themeSize}
+          isLoading={isLoading}
+        />
+      ) : null}
+    </Container>
+  )
+);
+
+Avatar.propTypes = {
+  size: PropTypes.oneOf(['small', 'medium', 'large']),
+  containerStyle: PropTypes.any, // eslint-disable-line
+  ...ConnectedImage.propTypes,
+};
+
+export default Avatar;
diff --git a/apolloschurchapp/src/ui/BackgroundView/BackgroundView.tests.js b/apolloschurchapp/src/ui/BackgroundView/BackgroundView.tests.js
new file mode 100644
index 0000000..01632b9
--- /dev/null
+++ b/apolloschurchapp/src/ui/BackgroundView/BackgroundView.tests.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import BackgroundView from '.';
+
+describe('The BackgroundView component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BackgroundView />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/BackgroundView/index.js b/apolloschurchapp/src/ui/BackgroundView/index.js
new file mode 100644
index 0000000..cfc47da
--- /dev/null
+++ b/apolloschurchapp/src/ui/BackgroundView/index.js
@@ -0,0 +1,14 @@
+import LinearGradient from 'react-native-linear-gradient';
+import { compose } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+const BackgroundView = compose(
+  withTheme(({ theme }) => ({
+    colors: [theme.colors.background.paper, theme.colors.background.screen],
+  })),
+  styled({ flex: 1 })
+)(LinearGradient);
+
+export default BackgroundView;
diff --git a/apolloschurchapp/src/ui/Button/Button.js b/apolloschurchapp/src/ui/Button/Button.js
new file mode 100644
index 0000000..2d86457
--- /dev/null
+++ b/apolloschurchapp/src/ui/Button/Button.js
@@ -0,0 +1,154 @@
+import React from 'react';
+import { View } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose } from 'recompose';
+import { get } from 'lodash';
+
+import { withTheme, withThemeMixin } from 'apolloschurchapp/src/ui/theme';
+import styled from 'apolloschurchapp/src/ui/styled';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+import { InlineActivityIndicator } from 'apolloschurchapp/src/ui/ActivityIndicator';
+import { withPlaceholder, Line } from 'apolloschurchapp/src/ui/Placeholder';
+
+const ButtonStyles = styled(
+  ({ theme, disabled, bordered, pill }) => ({
+    paddingHorizontal: theme.sizing.baseUnit,
+    overflow: 'hidden',
+    borderRadius: pill ? theme.sizing.baseUnit * 3 : theme.sizing.baseUnit / 2,
+    flexDirection: 'row',
+    height: theme.sizing.baseUnit * 3,
+    alignItems: 'center',
+    justifyContent: 'center',
+    opacity: disabled ? 0.5 : 1,
+    borderWidth: 2,
+    ...(bordered
+      ? {
+          backgroundColor: theme.colors.transparent,
+          borderColor: theme.colors.primary,
+        }
+      : {
+          backgroundColor: theme.colors.background.screen,
+          borderColor: theme.colors.background.screen,
+          elevation: 2,
+        }),
+  }),
+  'Button'
+)(View);
+
+const ButtonPlaceholder = styled(
+  ({ theme }) => ({
+    width: theme.sizing.baseUnit * 4,
+    height: theme.sizing.baseUnit + theme.helpers.rem(1),
+  }),
+  'Button.Placeholder'
+)(Line);
+
+export const withButtonPlaceholder = withPlaceholder(ButtonPlaceholder);
+
+const enhance = compose(
+  withButtonPlaceholder,
+  withTheme(({ theme, type = 'default' }) => ({
+    fill: get(theme, `buttons.${type}.fill`, theme.colors.action.default),
+    accent: get(theme, `buttons.${type}.accent`, theme.colors.text.primary),
+  })),
+  // makes non-text children inherit button styles by default :-D
+  withThemeMixin(({ fill, accent, bordered }) => {
+    const textColor = bordered ? fill : accent;
+    return {
+      colors: {
+        primary: bordered ? fill : accent,
+        text: {
+          primary: textColor,
+          secondary: textColor,
+          tertiary: textColor,
+        },
+        screen: fill,
+      },
+    };
+  }),
+  withTheme()
+);
+
+// API-Compatible to React-Native's base <Button> component,
+// except it supports the rendering of children, which will take precedence over the title prop,
+// so you can handle non text children.
+const Button = enhance(
+  ({
+    children,
+    disabled,
+    title,
+    to,
+    onPress,
+    style,
+    bordered,
+    loading,
+    accent,
+    pill,
+    TouchableComponent = Touchable,
+    theme,
+    ...touchableProps
+  }) => {
+    const accessibilityTraits = ['button'];
+    if (disabled || loading) accessibilityTraits.push('disabled');
+
+    const buttonContent = (
+      <ButtonStyles
+        style={style}
+        disabled={disabled}
+        bordered={bordered}
+        pill={pill}
+      >
+        {loading ? (
+          <InlineActivityIndicator color={accent} />
+        ) : (
+          children || <H4>{title}</H4>
+        )}
+      </ButtonStyles>
+    );
+
+    if (onPress) {
+      return (
+        <TouchableComponent
+          onPress={onPress}
+          disabled={disabled || loading}
+          accessibilityTraits={accessibilityTraits}
+          {...touchableProps}
+        >
+          {buttonContent}
+        </TouchableComponent>
+      );
+    }
+
+    return buttonContent;
+  }
+);
+
+Button.defaultProps = {
+  disabled: false,
+  bordered: false,
+  pill: true,
+  title: '',
+  accessibilityComponentType: 'button',
+  type: 'primary',
+};
+
+Button.propTypes = {
+  disabled: PropTypes.bool,
+  children: PropTypes.node,
+  title: PropTypes.string,
+  bordered: PropTypes.bool,
+  pill: PropTypes.bool,
+  to: PropTypes.string,
+  type: PropTypes.oneOf([
+    'default',
+    'primary',
+    'secondary',
+    'tertiary',
+    'ghost',
+    'alert',
+  ]), // keys in theme.colors.action
+  ...Touchable.propTypes,
+};
+
+export default Button;
diff --git a/apolloschurchapp/src/ui/Button/Button.stories.js b/apolloschurchapp/src/ui/Button/Button.stories.js
new file mode 100644
index 0000000..14548a6
--- /dev/null
+++ b/apolloschurchapp/src/ui/Button/Button.stories.js
@@ -0,0 +1,169 @@
+import React from 'react';
+import { View } from 'react-native';
+import { nest } from 'recompose';
+import { storiesOf } from '@storybook/react-native';
+
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import Button from '.';
+
+const ViewWithMargin = styled({ margin: 10 })(View);
+const ButtonWithMargin = nest(ViewWithMargin, Button);
+
+storiesOf('Buttons/Pill (default)', module)
+  .add('default', () => (
+    <FlexedView>
+      <ButtonWithMargin onPress={() => {}} title="Just a plain 'ole Button" />
+    </FlexedView>
+  ))
+  .add('Types', () => (
+    <FlexedView>
+      <ButtonWithMargin onPress={() => {}} title="Default" type="default" />
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Primary Action"
+        type="primary"
+      />
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Secondary Action"
+        type="secondary"
+      />
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Tertiary Action"
+        type="tertiary"
+      />
+    </FlexedView>
+  ))
+  .add('Disabled', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Disabled Button 😭"
+        disabled
+      />
+    </FlexedView>
+  ))
+  .add('Bordered', () => (
+    <FlexedView>
+      <ButtonWithMargin onPress={() => {}} title="Bordered Button" bordered />
+    </FlexedView>
+  ))
+  .add('Ghost', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Ghost Pill"
+        type={'ghost'}
+        bordered
+      />
+    </FlexedView>
+  ))
+  .add('With Children', () => (
+    <FlexedView>
+      <ButtonWithMargin onPress={() => {}} type="primary">
+        <H4>Non-Text Children</H4>
+        <Icon name="like" />
+      </ButtonWithMargin>
+    </FlexedView>
+  ))
+  .add('loading', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Just a plain 'ole Button"
+        loading
+      />
+    </FlexedView>
+  ));
+storiesOf('Buttons/Square', module)
+  .add('default', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Just a plain 'ole Square Button"
+        pill={false}
+      />
+    </FlexedView>
+  ))
+  .add('Types', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Default"
+        type="default"
+        pill={false}
+      />
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Primary Action"
+        type="primary"
+        pill={false}
+      />
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Secondary Action"
+        type="secondary"
+        pill={false}
+      />
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Tertiary Action"
+        type="tertiary"
+        pill={false}
+      />
+    </FlexedView>
+  ))
+  .add('Disabled', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Disabled Button 😭"
+        disabled
+        pill={false}
+      />
+    </FlexedView>
+  ))
+  .add('Bordered', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Bordered Button"
+        bordered
+        pill={false}
+      />
+    </FlexedView>
+  ))
+  .add('Ghost', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Ghost Square"
+        type={'ghost'}
+        bordered
+        pill={false}
+      />
+    </FlexedView>
+  ))
+  .add('With Children', () => (
+    <FlexedView>
+      <ButtonWithMargin onPress={() => {}} type="primary" pill={false}>
+        <H4>Non-Text Children</H4>
+        <Icon name="like" />
+      </ButtonWithMargin>
+    </FlexedView>
+  ))
+  .add('loading', () => (
+    <FlexedView>
+      <ButtonWithMargin
+        onPress={() => {}}
+        title="Just a plain 'ole Square Button"
+        pill={false}
+        loading
+      />
+    </FlexedView>
+  ));
diff --git a/apolloschurchapp/src/ui/Button/Button.tests.js b/apolloschurchapp/src/ui/Button/Button.tests.js
new file mode 100644
index 0000000..209796d
--- /dev/null
+++ b/apolloschurchapp/src/ui/Button/Button.tests.js
@@ -0,0 +1,119 @@
+import React from 'react';
+import { View } from 'react-native';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import Button from '.';
+
+describe('The Button component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button title="My Button!" onPress={() => {}} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as default type', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button title="My Button!" type="default" onPress={() => {}} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a primary button', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button onPress={() => {}} title="Primary Action" type="primary" />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a secondary button', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button onPress={() => {}} title="Secondary Action" type="secondary" />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a Tertiary button', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button onPress={() => {}} title="Tertiary Action" type="tertiary" />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a disabled button', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button onPress={() => {}} title="Disabled Button 😭" disabled />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a bordered button', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button onPress={() => {}} title="Ghost Button" bordered />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a pill button', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button onPress={() => {}} title="Pill Button" pill />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a ghost button', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button
+          onPress={() => {}}
+          title="Ghost Button"
+          type={'ghost'}
+          bordered
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a ghost pill button', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button
+          onPress={() => {}}
+          title="Ghost Button"
+          type={'ghost'}
+          bordered
+          pill
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with children', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button>
+          <View />
+        </Button>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Button title="My Button!" onPress={() => {}} loading />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Button/ButtonLink.js b/apolloschurchapp/src/ui/Button/ButtonLink.js
new file mode 100644
index 0000000..ea36124
--- /dev/null
+++ b/apolloschurchapp/src/ui/Button/ButtonLink.js
@@ -0,0 +1,12 @@
+import { Text } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const ButtonLink = styled(
+  ({ theme }) => ({
+    color: theme.colors.text.link,
+  }),
+  'Button.Link'
+)(Text);
+
+export default ButtonLink;
diff --git a/apolloschurchapp/src/ui/Button/ButtonLink.stories.js b/apolloschurchapp/src/ui/Button/ButtonLink.stories.js
new file mode 100644
index 0000000..b641336
--- /dev/null
+++ b/apolloschurchapp/src/ui/Button/ButtonLink.stories.js
@@ -0,0 +1,14 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import { BodyText } from 'apolloschurchapp/src/ui/typography';
+
+import ButtonLink from './ButtonLink';
+
+storiesOf('Buttons/Link', module)
+  .add('default', () => <ButtonLink onPress={() => {}}>Boom</ButtonLink>)
+  .add('Inherits typographic styles', () => (
+    <BodyText>
+      <ButtonLink onPress={() => {}}>Boom</ButtonLink>
+    </BodyText>
+  ));
diff --git a/apolloschurchapp/src/ui/Button/ButtonLink.tests.js b/apolloschurchapp/src/ui/Button/ButtonLink.tests.js
new file mode 100644
index 0000000..cb40e32
--- /dev/null
+++ b/apolloschurchapp/src/ui/Button/ButtonLink.tests.js
@@ -0,0 +1,28 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import { BodyText } from 'apolloschurchapp/src/ui/typography';
+
+import ButtonLink from './ButtonLink';
+
+describe('The Button component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ButtonLink onPress={() => {}}>Boom</ButtonLink>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render inherit typographic styles', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BodyText>
+          <ButtonLink onPress={() => {}}>Boom</ButtonLink>
+        </BodyText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Button/index.js b/apolloschurchapp/src/ui/Button/index.js
new file mode 100644
index 0000000..cda1fc4
--- /dev/null
+++ b/apolloschurchapp/src/ui/Button/index.js
@@ -0,0 +1,2 @@
+export default from './Button';
+export ButtonLink from './ButtonLink';
diff --git a/apolloschurchapp/src/ui/Card/Actions.js b/apolloschurchapp/src/ui/Card/Actions.js
new file mode 100644
index 0000000..28df7cb
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/Actions.js
@@ -0,0 +1,15 @@
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const Actions = styled(
+  ({ theme }) => ({
+    flexWrap: 'wrap',
+    flexDirection: 'row',
+    alignItems: 'center',
+    justifyContent: 'space-between',
+    paddingTop: theme.sizing.baseUnit / 4,
+  }),
+  'Card.Actions'
+)(PaddedView);
+
+export default Actions;
diff --git a/apolloschurchapp/src/ui/Card/Card.stories.js b/apolloschurchapp/src/ui/Card/Card.stories.js
new file mode 100644
index 0000000..3b64033
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/Card.stories.js
@@ -0,0 +1,50 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import {
+  H3,
+  H6,
+  BodyText,
+  Paragraph,
+} from 'apolloschurchapp/src/ui/typography';
+import Button, { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+
+import Card, { CardActions, CardContent, CardImage } from '.';
+
+storiesOf('Card', module)
+  .add('simple', () => (
+    <Card>
+      <CardImage source={'https://picsum.photos/600/400/?image=63'} />
+      <CardContent>
+        <H3>Coffee</H3>
+        <H6 padded>noun</H6>
+        <Paragraph>
+          <BodyText>
+            {
+              'A dark substance that turns "leave me alone" into "good morning!"'
+            }
+          </BodyText>
+        </Paragraph>
+      </CardContent>
+      <CardActions>
+        <Button title="Learn More" pill={false} />
+        <ButtonLink>Share</ButtonLink>
+      </CardActions>
+    </Card>
+  ))
+  .add('loading', () => (
+    <Card isLoading>
+      <CardImage />
+      <CardContent>
+        <H3 />
+        <H6 padded />
+        <Paragraph>
+          <BodyText />
+        </Paragraph>
+      </CardContent>
+      <CardActions>
+        <Button pill={false} />
+        <ButtonLink />
+      </CardActions>
+    </Card>
+  ));
diff --git a/apolloschurchapp/src/ui/Card/Card.tests.js b/apolloschurchapp/src/ui/Card/Card.tests.js
new file mode 100644
index 0000000..90fc0da
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/Card.tests.js
@@ -0,0 +1,61 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import {
+  H3,
+  H6,
+  BodyText,
+  Paragraph,
+} from 'apolloschurchapp/src/ui/typography';
+import Button, { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+
+import Card, { CardImage, CardContent, CardActions } from '.';
+
+describe('the Card component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Card>
+          <CardImage source={'https://picsum.photos/600/400/?image=63'} />
+          <CardContent>
+            <H3>Coffee</H3>
+            <H6 padded>noun</H6>
+            <Paragraph>
+              <BodyText>
+                {
+                  'A dark substance that turns "leave me alone" into "good morning!"'
+                }
+              </BodyText>
+            </Paragraph>
+          </CardContent>
+          <CardActions>
+            <Button title="Learn More" pill={false} />
+            <ButtonLink>Share</ButtonLink>
+          </CardActions>
+        </Card>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('it should render a placeholder', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Card isLoading>
+          <CardContent>
+            <H3 />
+            <H6 padded />
+            <Paragraph>
+              <BodyText />
+            </Paragraph>
+          </CardContent>
+          <CardActions>
+            <Button pill={false} />
+            <ButtonLink />
+          </CardActions>
+        </Card>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Card/CardWrapper/CardWrapper.stories.js b/apolloschurchapp/src/ui/Card/CardWrapper/CardWrapper.stories.js
new file mode 100644
index 0000000..71f9ea0
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/CardWrapper/CardWrapper.stories.js
@@ -0,0 +1,49 @@
+import React from 'react';
+import { View, Text } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import CardWrapper from '.';
+
+storiesOf('Card/CardWrapper', module)
+  .add('Default', () => {
+    const centered = {
+      justifyContent: 'center',
+      alignItems: 'center',
+      flex: 1,
+      backgroundColor: '#f7f7f7',
+    };
+
+    const cardDimensions = {
+      height: 400,
+      width: '92%',
+    };
+
+    return (
+      <View style={centered}>
+        <CardWrapper style={cardDimensions}>
+          <Text>Boom!</Text>
+        </CardWrapper>
+      </View>
+    );
+  })
+  .add('With backgroundColor', () => {
+    const centered = {
+      justifyContent: 'center',
+      alignItems: 'center',
+      flex: 1,
+      backgroundColor: '#f7f7f7',
+    };
+
+    const cardDimensions = {
+      height: 400,
+      width: '92%',
+    };
+
+    return (
+      <View style={centered}>
+        <CardWrapper style={cardDimensions} cardColor={'salmon'}>
+          <Text>Boom!</Text>
+        </CardWrapper>
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/Card/CardWrapper/CardWrapper.tests.js b/apolloschurchapp/src/ui/Card/CardWrapper/CardWrapper.tests.js
new file mode 100644
index 0000000..efcd5ee
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/CardWrapper/CardWrapper.tests.js
@@ -0,0 +1,59 @@
+import React from 'react';
+import { Text } from 'react-native';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import CardWrapper from '.';
+
+describe('the CardWrapper component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardWrapper />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render children', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardWrapper>
+          <Text>Boom!</Text>
+        </CardWrapper>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept a backgroundColor', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardWrapper backgroundColor={'salmon'}>
+          <Text>Boom!</Text>
+        </CardWrapper>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const cardDimensions = {
+      height: 400,
+      width: '92%',
+    };
+
+    const tree = renderer.create(
+      <Providers>
+        <CardWrapper style={cardDimensions} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardWrapper accessible={false} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Card/CardWrapper/index.js b/apolloschurchapp/src/ui/Card/CardWrapper/index.js
new file mode 100644
index 0000000..1bc13fd
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/CardWrapper/index.js
@@ -0,0 +1,49 @@
+import { compose, pure } from 'recompose';
+import React from 'react';
+import { Platform, View } from 'react-native';
+import PropTypes from 'prop-types';
+
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const StyledCard = compose(
+  withIsLoading,
+  styled(({ theme, cardColor, inHorizontalList = false }) => ({
+    // card styles
+    backgroundColor: cardColor || theme.colors.background.paper,
+    borderRadius: theme.sizing.baseUnit,
+    ...(inHorizontalList
+      ? {
+          marginLeft: theme.sizing.baseUnit * 0.5,
+          marginRight: 0,
+        }
+      : {
+          marginHorizontal: theme.sizing.baseUnit,
+          marginVertical: theme.sizing.baseUnit * 0.75,
+        }),
+    ...Platform.select(theme.shadows.default),
+  }))
+)(View);
+
+/*
+ * Overflow on iOS, when declared on the same element as a shadow, clips the shadow so overflow must
+ * live on a child wrapper. https://github.com/facebook/react-native/issues/449
+ */
+const OverflowFix = styled(({ theme }) => ({
+  borderRadius: theme.sizing.baseUnit,
+  overflow: 'hidden',
+}))(View);
+
+const Card = pure(({ children, isLoading, ...otherProps }) => (
+  <StyledCard {...otherProps}>
+    <OverflowFix>{children}</OverflowFix>
+  </StyledCard>
+));
+
+Card.propTypes = {
+  backgroundColor: PropTypes.string,
+  children: PropTypes.node,
+  style: PropTypes.any, // eslint-disable-line
+};
+
+export default Card;
diff --git a/apolloschurchapp/src/ui/Card/Content.js b/apolloschurchapp/src/ui/Card/Content.js
new file mode 100644
index 0000000..92584c5
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/Content.js
@@ -0,0 +1,11 @@
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const Content = styled(
+  ({ theme }) => ({
+    paddingVertical: theme.sizing.baseUnit * 0.75,
+  }),
+  'Card.Content'
+)(PaddedView);
+
+export default Content;
diff --git a/apolloschurchapp/src/ui/Card/ErrorCard/ErrorCard.stories.js b/apolloschurchapp/src/ui/Card/ErrorCard/ErrorCard.stories.js
new file mode 100644
index 0000000..b0eb03d
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/ErrorCard/ErrorCard.stories.js
@@ -0,0 +1,8 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import ErrorCard from '.';
+
+storiesOf('Card/ErrorCard', module).add('Example', () => (
+  <ErrorCard message={'Boom!'} error={'What?'} />
+));
diff --git a/apolloschurchapp/src/ui/Card/ErrorCard/ErrorCard.tests.js b/apolloschurchapp/src/ui/Card/ErrorCard/ErrorCard.tests.js
new file mode 100644
index 0000000..1293044
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/ErrorCard/ErrorCard.tests.js
@@ -0,0 +1,42 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import ErrorCard from '.';
+
+describe('the Card component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ErrorCard message={'Boom!'} error={'What?'} />
+      </Providers>
+    );
+
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with an error message inside an object', () => {
+    const errorObject = {
+      message: 'You have discovered an error message. Do you open it?',
+    };
+    const tree = renderer.create(
+      <Providers>
+        <ErrorCard error={errorObject} />
+      </Providers>
+    );
+
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with an error inside an object', () => {
+    const errorObject = {
+      error: 'Errors, errors, and more errors',
+    };
+    const tree = renderer.create(
+      <Providers>
+        <ErrorCard error={errorObject} />
+      </Providers>
+    );
+
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Card/ErrorCard/index.js b/apolloschurchapp/src/ui/Card/ErrorCard/index.js
new file mode 100644
index 0000000..ee0167b
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/ErrorCard/index.js
@@ -0,0 +1,40 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { H4, H6 } from 'apolloschurchapp/src/ui/typography';
+import Card, { CardContent } from 'apolloschurchapp/src/ui/Card';
+
+const Header = styled({ textAlign: 'center' }, 'Error.Header')(H4);
+const ErrorText = styled({ textAlign: 'center' }, 'Error.Text')(H6);
+
+const Err = ({ message = 'Uh oh!', error }) => {
+  let errorMessage;
+  if (typeof error !== 'string') {
+    if (error && error.message) {
+      errorMessage = error.message;
+    } else if (error && error.error && typeof error.error === 'string') {
+      errorMessage = error.error;
+    } else {
+      errorMessage = 'An unexpected error occured';
+    }
+  } else {
+    errorMessage = error;
+  }
+
+  return (
+    <Card>
+      <CardContent>
+        <Header>{message}</Header>
+        <ErrorText>{errorMessage}</ErrorText>
+      </CardContent>
+    </Card>
+  );
+};
+
+Err.propTypes = {
+  message: PropTypes.string,
+  error: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
+};
+
+export default Err;
diff --git a/apolloschurchapp/src/ui/Card/Image.js b/apolloschurchapp/src/ui/Card/Image.js
new file mode 100644
index 0000000..c6dbf87
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/Image.js
@@ -0,0 +1,28 @@
+import { Platform } from 'react-native';
+import { compose } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import ProgressiveImage from 'apolloschurchapp/src/ui/ProgressiveImage';
+import { getIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+
+const Image = compose(
+  getIsLoading,
+  styled(
+    ({ theme }) => ({
+      aspectRatio: 1,
+      width: '100%',
+      ...Platform.select({
+        android: {
+          // fixes android borderRadius overflow display issue
+          borderTopRightRadius: theme.sizing.baseUnit,
+          borderTopLeftRadius: theme.sizing.baseUnit,
+        },
+      }),
+    }),
+    'Card.Image'
+  )
+)(ProgressiveImage);
+
+Image.propTypes = ProgressiveImage.propTypes;
+
+export default Image;
diff --git a/apolloschurchapp/src/ui/Card/index.js b/apolloschurchapp/src/ui/Card/index.js
new file mode 100644
index 0000000..9efd6dc
--- /dev/null
+++ b/apolloschurchapp/src/ui/Card/index.js
@@ -0,0 +1,5 @@
+export { default } from './CardWrapper';
+export CardImage from './Image';
+export CardContent from './Content';
+export CardActions from './Actions';
+export ErrorCard from './ErrorCard';
diff --git a/apolloschurchapp/src/ui/CardTile/CardTile.stories.js b/apolloschurchapp/src/ui/CardTile/CardTile.stories.js
new file mode 100644
index 0000000..8699605
--- /dev/null
+++ b/apolloschurchapp/src/ui/CardTile/CardTile.stories.js
@@ -0,0 +1,61 @@
+import React from 'react';
+import { View, Text } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import CardTile from '.';
+
+const containerStyles = {
+  height: 300,
+  justifyContent: 'center',
+  alignItems: 'center',
+  backgroundColor: '#f7f7f7',
+};
+
+storiesOf('CardTile', module)
+  .add('Default', () => (
+    <View style={containerStyles}>
+      <CardTile title={'Why Jesus is Timeless'} />
+    </View>
+  ))
+  .add('Skeleton', () => (
+    <View style={containerStyles}>
+      <CardTile
+        number={7}
+        title={'Why Jesus is Timeless'}
+        byLine={'Marty McFly'}
+        date={'Sat Oct 26 1985 01:24:00 GMT+0008 (UTC)'}
+        isLoading
+      />
+    </View>
+  ))
+  .add('With Number Box', () => (
+    <View style={containerStyles}>
+      <CardTile number={7} title={'Why Jesus is Timeless'} />
+    </View>
+  ))
+  .add('With byLine', () => (
+    <View style={containerStyles}>
+      <CardTile
+        number={7}
+        title={'Why Jesus is Timeless'}
+        byLine={'Marty McFly'}
+      />
+    </View>
+  ))
+  .add('With date', () => (
+    <View style={containerStyles}>
+      <CardTile
+        number={7}
+        title={'Why Jesus is Timeless'}
+        byLine={'Marty McFly'}
+        date={'Sat Oct 26 1985 01:24:00 GMT+0008 (UTC)'} // this snapshot will expire in a year
+      />
+    </View>
+  ))
+  .add('With Children', () => (
+    <View style={containerStyles}>
+      <CardTile>
+        <Text>Biff Tannen was here</Text>
+      </CardTile>
+    </View>
+  ));
diff --git a/apolloschurchapp/src/ui/CardTile/CardTile.tests.js b/apolloschurchapp/src/ui/CardTile/CardTile.tests.js
new file mode 100644
index 0000000..28b9c14
--- /dev/null
+++ b/apolloschurchapp/src/ui/CardTile/CardTile.tests.js
@@ -0,0 +1,94 @@
+import React from 'react';
+import { Text } from 'react-native';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import CardTile from '.';
+
+describe('the CardTile component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardTile title={'Why Jesus is Timeless'} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading skeleton', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardTile title={'Why Jesus is Timeless'} isLoading />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a number box', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardTile number={7} title={'Why Jesus is Timeless'} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('number box should grow elegantly with larger numbers', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardTile number={7777} title={'Why Jesus is Timeless'} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render card details', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardTile
+          number={7}
+          title={'Why Jesus is Timeless'}
+          showDetails
+          byLine={'Marty McFly'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render card details with date', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardTile
+          number={7}
+          title={'Why Jesus is Timeless'}
+          showDetails
+          byLine={'Marty McFly'}
+          date={'Sat Oct 26 1985 01:24:00 GMT+0008 (UTC)'} // this snapshot will expire in a year
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render children', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardTile>
+          <Text>Biff Tannen was here</Text>
+        </CardTile>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading skeleton for all available props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CardTile
+          number={7}
+          title={'Why Jesus is Timeless'}
+          showDetails
+          byLine={'Marty McFly'}
+          date={'Sat Oct 26 1985 01:24:00 GMT+0008 (UTC)'}
+          isLoading
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/CardTile/index.js b/apolloschurchapp/src/ui/CardTile/index.js
new file mode 100644
index 0000000..2dc6549
--- /dev/null
+++ b/apolloschurchapp/src/ui/CardTile/index.js
@@ -0,0 +1,154 @@
+import React from 'react';
+import { View, StyleSheet } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, pure } from 'recompose';
+import moment from 'moment';
+
+import Placeholder from 'apolloschurchapp/src/ui/Placeholder';
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+import { withTheme, withThemeMixin } from 'apolloschurchapp/src/ui/theme';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { H3, H5, H6 } from 'apolloschurchapp/src/ui/typography';
+import { CardContent, CardActions } from 'apolloschurchapp/src/ui/Card';
+import ChannelLabel from 'apolloschurchapp/src/ui/ChannelLabel';
+
+const enhance = compose(
+  withIsLoading,
+  withThemeMixin(({ theme }) => ({
+    type: 'light',
+    colors: {
+      background: {
+        inactive: theme.colors.lightSecondary,
+      },
+    },
+  })),
+  withTheme(),
+  pure
+);
+
+const TileSpacer = styled(({ theme }) => ({
+  padding: theme.sizing.baseUnit / 2,
+}))(View);
+
+const Tile = styled(({ theme }) => ({
+  height: '100%',
+  aspectRatio: 1,
+  borderRadius: theme.sizing.baseUnit,
+  backgroundColor: theme.colors.lightTertiary,
+}))(View);
+
+const PlaceholderOverflowFix = styled(({ theme }) => ({
+  ...StyleSheet.absoluteFillObject,
+  justifyContent: 'center',
+  borderRadius: theme.sizing.baseUnit,
+  overflow: 'hidden',
+}))(View);
+
+const TileNumber = styled(({ theme, size }) => ({
+  position: 'absolute',
+  top: 0,
+  left: 0,
+  width: theme.helpers.rem(1 * (size < 2 ? 2 : size)),
+  height: theme.helpers.rem(1 * (size < 2 ? 2 : size)),
+  justifyContent: 'center',
+  alignItems: 'center',
+  borderTopLeftRadius: theme.sizing.baseUnit,
+  borderBottomRightRadius: theme.sizing.baseUnit,
+  backgroundColor: theme.colors.white,
+}))(View);
+
+const relativeTime = (date) => {
+  if (moment.updateLocale) {
+    moment.updateLocale('en', {
+      relativeTime: {
+        future: 'in %s',
+        past: '%s ago',
+        s: 's',
+        m: 'm',
+        mm: '%dm',
+        h: '1h',
+        hh: '%dh',
+        d: '1d',
+        dd: '%dd',
+        M: '1mo',
+        MM: '%dmo',
+        y: '1y',
+        yy: '%dy',
+      },
+    });
+  }
+
+  const time = moment(new Date(date));
+  return time.fromNow(true); // true omits 'ago'
+};
+
+export const CardTile = enhance(
+  ({
+    number,
+    title,
+    byLine,
+    date,
+    style: styleProp = {},
+    isLoading,
+    theme,
+    children,
+    ...otherProps
+  }) => (
+    <TileSpacer collapsable={false}>
+      <Tile style={styleProp} {...otherProps}>
+        <PlaceholderOverflowFix>
+          {typeof number === 'undefined' ? null : (
+            <TileNumber size={number.toString().length}>
+              <Placeholder.Media
+                size={theme.helpers.rem(
+                  1.25 *
+                    (number.toString().length < 2
+                      ? 2
+                      : number.toString().length)
+                )}
+                onReady={!isLoading}
+              >
+                <View>
+                  <H5>{number}</H5>
+                </View>
+              </Placeholder.Media>
+            </TileNumber>
+          )}
+
+          {typeof title === 'undefined' ? null : (
+            <CardContent>
+              <H3>{title}</H3>
+            </CardContent>
+          )}
+
+          {byLine ? (
+            <CardActions>
+              <ChannelLabel
+                label={byLine}
+                icon={'video'}
+                isLoading={isLoading}
+                withFlex
+              />
+              {typeof date === 'undefined' ? null : (
+                <H6>{relativeTime(date)}</H6>
+              )}
+            </CardActions>
+          ) : null}
+
+          {children}
+        </PlaceholderOverflowFix>
+      </Tile>
+    </TileSpacer>
+  )
+);
+
+CardTile.propTypes = {
+  title: PropTypes.string,
+  number: PropTypes.number,
+  byLine: PropTypes.string,
+  date: PropTypes.string,
+  style: PropTypes.any, // eslint-disable-line
+  isLoading: PropTypes.bool,
+};
+
+export default CardTile;
diff --git a/apolloschurchapp/src/ui/CenteredView/CenteredView.stories.js b/apolloschurchapp/src/ui/CenteredView/CenteredView.stories.js
new file mode 100644
index 0000000..a100ccb
--- /dev/null
+++ b/apolloschurchapp/src/ui/CenteredView/CenteredView.stories.js
@@ -0,0 +1,12 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import { H1 } from 'apolloschurchapp/src/ui/typography';
+
+import CenteredView from '.';
+
+storiesOf('CenteredView', module).add('Example', () => (
+  <CenteredView>
+    <H1>This text is in a CenteredView</H1>
+  </CenteredView>
+));
diff --git a/apolloschurchapp/src/ui/CenteredView/CenteredView.tests.js b/apolloschurchapp/src/ui/CenteredView/CenteredView.tests.js
new file mode 100644
index 0000000..083f568
--- /dev/null
+++ b/apolloschurchapp/src/ui/CenteredView/CenteredView.tests.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import CenteredView from '.';
+
+describe('the CenteredView component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <CenteredView />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/CenteredView/index.js b/apolloschurchapp/src/ui/CenteredView/index.js
new file mode 100644
index 0000000..385da74
--- /dev/null
+++ b/apolloschurchapp/src/ui/CenteredView/index.js
@@ -0,0 +1,21 @@
+import PropTypes from 'prop-types';
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const CenteredView = styled(({ theme }) => ({
+  flex: 1,
+  justifyContent: 'center',
+  alignItems: 'center',
+  backgroundColor: theme.colors.background.screen,
+}))(View);
+
+CenteredView.defaultProps = {
+  children: null,
+};
+
+CenteredView.propTypes = {
+  children: PropTypes.node,
+};
+
+export default CenteredView;
diff --git a/apolloschurchapp/src/ui/ChannelLabel/ChannelLabel.stories.js b/apolloschurchapp/src/ui/ChannelLabel/ChannelLabel.stories.js
new file mode 100644
index 0000000..6bc2106
--- /dev/null
+++ b/apolloschurchapp/src/ui/ChannelLabel/ChannelLabel.stories.js
@@ -0,0 +1,35 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import CenteredView from 'apolloschurchapp/src/ui/CenteredView';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import ChannelLabel from '.';
+
+storiesOf('ChannelLabel', module)
+  .addDecorator((getStory) => <CenteredView>{getStory()}</CenteredView>)
+  .add('Default', () => <ChannelLabel label={'Default'} />)
+  .add('isLoading', () => <ChannelLabel label={'Default'} isLoading />)
+  .add('With Icon', () => <ChannelLabel label={'Albums'} icon={'like-solid'} />)
+  .add('isLoading With Icon', () => (
+    <ChannelLabel label={'Albums'} icon={'like-solid'} isLoading />
+  ))
+  .add('withFlex', () => {
+    const Wrapper = styled({
+      flex: 1,
+      width: '100%',
+    })(View);
+
+    const Box = styled({
+      flex: 3,
+      backgroundColor: 'salmon',
+    })(View);
+
+    return (
+      <Wrapper>
+        <ChannelLabel label={'Albums'} icon={'arrow-back'} withFlex />
+        <Box />
+      </Wrapper>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/ChannelLabel/ChannelLabel.tests.js b/apolloschurchapp/src/ui/ChannelLabel/ChannelLabel.tests.js
new file mode 100644
index 0000000..1bb50f2
--- /dev/null
+++ b/apolloschurchapp/src/ui/ChannelLabel/ChannelLabel.tests.js
@@ -0,0 +1,49 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import ChannelLabel from '.';
+
+describe('the ChannelLabel component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ChannelLabel label={'Default'} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a skeleton view', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ChannelLabel label={'Default'} isLoading />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with an icon', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ChannelLabel label={'Default'} icon={'like'} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a skeleton view that supports an icon', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ChannelLabel label={'Default'} icon={'like'} isLoading />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render flexed', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ChannelLabel label={'Default'} withFlex />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/ChannelLabel/index.js b/apolloschurchapp/src/ui/ChannelLabel/index.js
new file mode 100644
index 0000000..aa70c08
--- /dev/null
+++ b/apolloschurchapp/src/ui/ChannelLabel/index.js
@@ -0,0 +1,64 @@
+import React from 'react';
+import { View } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, pure } from 'recompose';
+import { kebabCase } from 'lodash';
+
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { H6 } from 'apolloschurchapp/src/ui/typography';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import * as Icons from 'apolloschurchapp/src/ui/Icon/icons';
+
+const enhance = compose(
+  withIsLoading,
+  pure,
+  withTheme()
+);
+
+const Wrapper = styled(({ flexed }) => ({
+  flex: flexed ? 1 : null,
+  flexDirection: 'row',
+  alignItems: 'center',
+}))(View);
+
+const PlaceholderWrapper = styled(({ theme, withIcon }) => ({
+  flex: 1,
+  ...(withIcon
+    ? { paddingHorizontal: theme.sizing.baseUnit / 2 }
+    : { paddingRight: theme.sizing.baseUnit / 2 }),
+}))(View);
+
+const StyledH6 = styled(({ theme }) => ({
+  color: theme.colors.text.secondary,
+}))(H6);
+
+const ChannelLabel = enhance(({ label, icon, withFlex, isLoading, theme }) => (
+  <Wrapper flexed={withFlex}>
+    {icon ? (
+      <Icon
+        name={icon}
+        size={theme.helpers.rem(1.2)}
+        fill={theme.colors.text.secondary}
+        isLoading={isLoading}
+      />
+    ) : null}
+    <PlaceholderWrapper withIcon={icon}>
+      <StyledH6>{label}</StyledH6>
+    </PlaceholderWrapper>
+  </Wrapper>
+));
+
+ChannelLabel.propTypes = {
+  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,
+  icon: PropTypes.oneOf(Object.keys(Icons).map(kebabCase)),
+  isLoading: PropTypes.bool,
+  withFlex: PropTypes.bool,
+};
+
+ChannelLabel.defaultProps = {
+  withFlex: false,
+};
+
+export default ChannelLabel;
diff --git a/apolloschurchapp/src/ui/Chip/Chip.stories.js b/apolloschurchapp/src/ui/Chip/Chip.stories.js
new file mode 100644
index 0000000..d730e1d
--- /dev/null
+++ b/apolloschurchapp/src/ui/Chip/Chip.stories.js
@@ -0,0 +1,32 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import ChipList from './List';
+
+import Chip from '.';
+
+storiesOf('Chip', module)
+  .add('default', () => (
+    <Chip onPress={() => {}} title="I'm just a poor chip" />
+  ))
+  .add('With Icon', () => (
+    <Chip onPress={() => {}} icon="close" title="I need no sympathy" />
+  ))
+  .add('Selected', () => <Chip onPress={() => {}} selected title="Easy come" />)
+  .add('List', () => (
+    <ChipList>
+      <Chip onPress={() => {}} title="I'm just a poor chip" />
+      <Chip onPress={() => {}} icon="close" title="I need no sympathy" />
+      <Chip onPress={() => {}} selected title="Easy come" />
+      <Chip onPress={() => {}} icon="close" selected title="Easy go" />
+      <Chip onPress={() => {}} icon="arrow-up" title="Litte high" />
+      <Chip
+        onPress={() => {}}
+        type="secondary"
+        icon="arrow-down"
+        title="Litte low"
+      />
+      <Chip title="📍💨?" />
+      <Chip selected title="¯\_(ツ)_/¯" />
+    </ChipList>
+  ));
diff --git a/apolloschurchapp/src/ui/Chip/Chip.tests.js b/apolloschurchapp/src/ui/Chip/Chip.tests.js
new file mode 100644
index 0000000..50d2a08
--- /dev/null
+++ b/apolloschurchapp/src/ui/Chip/Chip.tests.js
@@ -0,0 +1,33 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import Chip from '.';
+
+describe('The Chip component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Chip title="My Button!" onPress={() => {}} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render an icon', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Chip icon="like" title="Heart!!!" />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should be selected', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Chip title="My Button!" selected />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Chip/List.js b/apolloschurchapp/src/ui/Chip/List.js
new file mode 100644
index 0000000..98f9118
--- /dev/null
+++ b/apolloschurchapp/src/ui/Chip/List.js
@@ -0,0 +1,14 @@
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const ChipList = styled(
+  {
+    flexDirection: 'row',
+    alignItems: 'center',
+    flexWrap: 'wrap',
+  },
+  'Chip.List'
+)(View);
+
+export default ChipList;
diff --git a/apolloschurchapp/src/ui/Chip/index.js b/apolloschurchapp/src/ui/Chip/index.js
new file mode 100644
index 0000000..cb8eb77
--- /dev/null
+++ b/apolloschurchapp/src/ui/Chip/index.js
@@ -0,0 +1,80 @@
+import React from 'react';
+import { compose, mapProps } from 'recompose';
+import PropTypes from 'prop-types';
+/* touchable native feedback currently is having flex layout issues on react-native android, so we
+ * fall back to TouchableOpacity
+ */
+import { TouchableOpacity } from 'react-native';
+
+import { H6 } from 'apolloschurchapp/src/ui/typography';
+import Button from 'apolloschurchapp/src/ui/Button';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+export { default as ChipList } from './List';
+
+const enhance = compose(
+  withTheme(),
+  mapProps(({ theme, selected, ...otherProps }) => ({
+    type: selected ? 'primary' : 'default',
+    iconSize: theme.sizing.baseUnit,
+    ...otherProps,
+  }))
+);
+
+const TitleText = styled(({ withIcon = false }) => ({
+  ...(withIcon ? { flexGrow: 1 } : {}),
+  textAlign: 'center',
+  alignItems: 'center',
+  justifyContent: 'center',
+  paddingHorizontal: 6,
+}))(H6);
+
+const StyledButton = styled(
+  ({ theme, withIcon = false }) => ({
+    justifyContent: withIcon ? 'flex-end' : 'center',
+    paddingHorizontal: theme.sizing.baseUnit / 4,
+    paddingVertical: theme.sizing.baseUnit / 4,
+    height: theme.sizing.baseUnit * 2,
+    /* these margins are only used when a chip is in a list.
+     * TODO: consider removing or making conditional for use outside of lists
+     */
+    marginRight: theme.sizing.baseUnit / 2,
+    marginBottom: theme.sizing.baseUnit / 2,
+  }),
+  'Chip'
+)(Button);
+
+const Chip = enhance(
+  ({
+    icon,
+    iconStyles = {},
+    iconSize,
+    selected,
+    title,
+    pill = false,
+    ...buttonProps
+  }) => (
+    <StyledButton
+      withIcon={icon}
+      TouchableComponent={TouchableOpacity}
+      pill={pill}
+      {...buttonProps}
+    >
+      {title ? <TitleText withIcon={icon}>{title}</TitleText> : null}
+      {icon ? <Icon name={icon} style={iconStyles} size={iconSize} /> : null}
+    </StyledButton>
+  )
+);
+
+Chip.propTypes = {
+  icon: PropTypes.string,
+  iconStyles: PropTypes.object, // eslint-disable-line react/forbid-prop-types
+  iconSize: PropTypes.number,
+  selected: PropTypes.bool,
+  title: PropTypes.string,
+  pill: PropTypes.bool,
+};
+
+export default Chip;
diff --git a/apolloschurchapp/src/ui/ConnectedImage/ConnectedImage.tests.js b/apolloschurchapp/src/ui/ConnectedImage/ConnectedImage.tests.js
new file mode 100644
index 0000000..d90cab3
--- /dev/null
+++ b/apolloschurchapp/src/ui/ConnectedImage/ConnectedImage.tests.js
@@ -0,0 +1,55 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import ConnectedImage, { getCachedSources, updateCache } from '.';
+
+describe('the ConnectedImage component', () => {
+  it('should render immediately with a network image with a known width and height', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ConnectedImage
+          source={{
+            uri: 'https://placeholdit.co/i/150x150?bg=eeeeee&fc=577084',
+            width: 150,
+            height: 150,
+          }}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should maintain aspect ratio', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ConnectedImage
+          source={{
+            uri: 'https://placeholdit.co/i/150x150?bg=eeeeee&fc=577084',
+            width: 150,
+            height: 150,
+          }}
+          maintainAspectRatio
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  describe('updateCache', () => {
+    it('updates cache with image uri and sizes', async () => {
+      const source = {
+        url: '//via.placeholder.com/320x240',
+      };
+      await updateCache(source);
+
+      expect(getCachedSources(source)).toContainEqual(
+        expect.objectContaining({
+          uri: 'https://via.placeholder.com/320x240',
+          url: '//via.placeholder.com/320x240',
+          width: 320,
+          height: 240,
+        })
+      );
+    });
+  });
+});
diff --git a/apolloschurchapp/src/ui/ConnectedImage/SkeletonImage.js b/apolloschurchapp/src/ui/ConnectedImage/SkeletonImage.js
new file mode 100644
index 0000000..ba9230e
--- /dev/null
+++ b/apolloschurchapp/src/ui/ConnectedImage/SkeletonImage.js
@@ -0,0 +1,12 @@
+import { View } from 'react-native';
+import Placeholder from 'rn-placeholder';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const SkeletonImage = styled(({ theme }) => ({
+  width: '100%',
+  aspectRatio: 1,
+  backgroundColor: theme.colors.background.inactive,
+}))(View);
+
+export default Placeholder.connect(SkeletonImage);
diff --git a/apolloschurchapp/src/ui/ConnectedImage/SkeletonImage.tests.js b/apolloschurchapp/src/ui/ConnectedImage/SkeletonImage.tests.js
new file mode 100644
index 0000000..c4a1e87
--- /dev/null
+++ b/apolloschurchapp/src/ui/ConnectedImage/SkeletonImage.tests.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import { ThemeProvider } from 'apolloschurchapp/src/ui/theme';
+
+import SkeletonImage from './SkeletonImage';
+
+describe('the SkeletonImage component', () => {
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <ThemeProvider>
+        <SkeletonImage onReady={false} />
+      </ThemeProvider>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/ConnectedImage/index.js b/apolloschurchapp/src/ui/ConnectedImage/index.js
new file mode 100644
index 0000000..680220e
--- /dev/null
+++ b/apolloschurchapp/src/ui/ConnectedImage/index.js
@@ -0,0 +1,224 @@
+import React, { PureComponent } from 'react';
+import { Animated, Image } from 'react-native';
+import PropTypes from 'prop-types';
+import { every } from 'lodash';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import SkeletonImage from './SkeletonImage';
+
+// This mirrors the File resource we get from Heighliner:
+const ImageSourceType = PropTypes.oneOfType([
+  PropTypes.shape({
+    uri: PropTypes.string,
+    label: PropTypes.string,
+    width: PropTypes.number,
+    height: PropTypes.number,
+  }),
+  PropTypes.string,
+]);
+
+const sizeCache = {};
+
+const getCacheKey = (source) => {
+  if (source.size && source.fileLabel)
+    return `${source.size}-${source.fileLabel}`;
+  if (source.url) return source.url;
+  if (source.uri) return source.uri;
+  return undefined;
+};
+
+const getCachedSources = (_sources = []) => {
+  let sources = _sources;
+  if (!Array.isArray(sources)) sources = [sources];
+  sources = sources.map((source) => {
+    if (typeof source === 'string') return { url: source };
+    return source;
+  });
+
+  return sources.map((source) => ({
+    uri: (source.url || '').replace(/^http:\/\/|^\/\//i, 'https://'),
+    cache: 'force-cache',
+    ...source,
+    ...(sizeCache[getCacheKey(source)] || {}),
+  }));
+};
+
+const updateCache = (sources) =>
+  Promise.all(
+    getCachedSources(sources).map((source) => {
+      const key = getCacheKey(source);
+      if (sizeCache[key] || !key) return Promise.resolve(source);
+      return new Promise((resolve, reject) => {
+        Image.getSize(
+          source.uri,
+          (width, height) =>
+            resolve({
+              width,
+              height,
+            }),
+          reject
+        );
+      }).then((sizeForCache) => {
+        if (key) sizeCache[key] = sizeForCache;
+      });
+    })
+  );
+
+const withBackgroundColor = styled(({ theme }) => ({
+  backgroundColor: theme.colors.background.inactive,
+}));
+
+class ConnectedImage extends PureComponent {
+  static propTypes = {
+    source: PropTypes.oneOfType([
+      PropTypes.arrayOf(ImageSourceType),
+      ImageSourceType,
+    ]),
+    ImageComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
+    maintainAspectRatio: PropTypes.bool,
+    isLoading: PropTypes.bool,
+    onLoad: PropTypes.func,
+    style: PropTypes.any, // eslint-disable-line
+  };
+
+  static defaultProps = {
+    ImageComponent: Animated.Image,
+    maintainAspectRatio: false,
+  };
+
+  constructor(props) {
+    super(props);
+
+    this.state = {
+      source: getCachedSources(this.props.source),
+    };
+
+    this.imageOpacity = new Animated.Value(this.isLoading ? 0 : 1);
+  }
+
+  componentWillMount() {
+    this.updateCache(this.props.source);
+  }
+
+  componentWillReceiveProps(newProps) {
+    this.updateCache(newProps.source);
+  }
+
+  componentWillUnmount() {
+    if (this.cacheUpdater) this.cacheUpdater.cancel();
+  }
+
+  get aspectRatio() {
+    const style = {};
+    if (this.props.maintainAspectRatio) {
+      const firstSource = this.state.source[0];
+      if (firstSource && firstSource.width && firstSource.height) {
+        style.aspectRatio = firstSource.width / firstSource.height;
+      }
+    }
+    if (this.props.isLoading && !style.aspectRatio) {
+      style.aspectRatio = 1;
+    }
+    return style;
+  }
+
+  get isLoading() {
+    return (
+      this.props.isLoading ||
+      !every(this.state.source, (image) => image.width && image.height)
+    );
+  }
+
+  handleOnLoad = (...args) => {
+    Animated.timing(this.imageOpacity, {
+      toValue: 1,
+      duration: 250,
+    }).start();
+    if (this.props.onLoad) this.props.onLoad(...args);
+  };
+
+  cancleCacheUpdater = (promise) => {
+    let hasCanceled = false;
+
+    const wrappedPromise = new Promise((resolve, reject) => {
+      promise.then(
+        (val) => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)), // eslint-disable-line
+        (error) => (hasCanceled ? reject({ isCanceled: true }) : reject(error)) // eslint-disable-line
+      );
+    });
+
+    return {
+      promise: wrappedPromise,
+      cancel() {
+        hasCanceled = true;
+      },
+    };
+  };
+
+  updateCache(sources) {
+    this.cacheUpdater = this.cancleCacheUpdater(updateCache(sources));
+    this.cacheUpdater.promise
+      .then(() => {
+        const newSource = getCachedSources(sources);
+        const oldSource = this.state.source || [];
+
+        if (
+          newSource.length !== oldSource.length ||
+          newSource.find(
+            (source, i) =>
+              !oldSource[i] ||
+              getCacheKey(source) !== getCacheKey(oldSource[i]) ||
+              source.width !== oldSource[i].width ||
+              source.height !== oldSource[i].height
+          )
+        ) {
+          this.setState({ source: getCachedSources(sources) });
+        }
+      })
+      .catch(() => {
+        // todo: Right now, if there's an error on connected image that means one of two things:
+        // 1) the image component was unmounted before load...we should do nothing
+        // 2) the image failed to load. Our "empty" state for images is a graybox.
+        //    We could make this better by showing an alert icon or something on error,
+        //    But a gray box is better then nothing. so, we do nothing currently :)
+        //    However, we still need this empty catch function as uncaught promise errors
+        //    will throw an error up the food chain.
+      });
+  }
+
+  render() {
+    let { source } = this.state;
+    if (!Array.isArray(source)) source = [source];
+
+    const {
+      ImageComponent = Animated.Image,
+      style,
+      isLoading,
+      maintainAspectRatio,
+      ...otherProps
+    } = this.props;
+    return (
+      <SkeletonImage onReady={!this.isLoading}>
+        <ImageComponent
+          {...otherProps}
+          source={source}
+          onLoad={this.handleOnLoad}
+          style={[this.aspectRatio, { opacity: this.imageOpacity }, style]}
+        />
+      </SkeletonImage>
+    );
+  }
+}
+
+const enhanced = withBackgroundColor(ConnectedImage);
+
+enhanced.propTypes = ConnectedImage.propTypes;
+
+export {
+  sizeCache,
+  getCacheKey,
+  getCachedSources,
+  updateCache,
+  enhanced as default,
+};
diff --git a/apolloschurchapp/src/ui/ContentCardConnected/index.js b/apolloschurchapp/src/ui/ContentCardConnected/index.js
deleted file mode 100644
index b64bdc6..0000000
--- a/apolloschurchapp/src/ui/ContentCardConnected/index.js
+++ /dev/null
@@ -1,55 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import { Query } from 'react-apollo';
-import { get } from 'lodash';
-
-import { ContentCard, ErrorCard } from '@apollosproject/ui-kit';
-import getContentCard from './query';
-
-export { tileCardFragment, largeCardFragment } from './query';
-
-const ContentCardConnected = ({
-  contentId,
-  isLoading,
-  tile,
-  ...otherProps
-}) => {
-  if (!contentId || isLoading)
-    return <ContentCard {...otherProps} isLoading tile={tile} />;
-
-  return (
-    <Query query={getContentCard} variables={{ contentId, tile: !!tile }}>
-      {({ data: { node = {} } = {}, loading, error }) => {
-        if (error) return <ErrorCard error={error} />;
-
-        const metrics = [
-          {
-            icon: node.isLiked ? 'like-solid' : 'like',
-            value: node.likedCount,
-          },
-        ];
-
-        const coverImage = get(node, 'coverImage.sources', undefined);
-
-        return (
-          <ContentCard
-            {...node}
-            {...otherProps}
-            coverImage={coverImage}
-            metrics={metrics}
-            tile={tile}
-            isLoading={loading}
-          />
-        );
-      }}
-    </Query>
-  );
-};
-
-ContentCardConnected.propTypes = {
-  isLoading: PropTypes.bool,
-  contentId: PropTypes.string,
-  tile: PropTypes.bool,
-};
-
-export default ContentCardConnected;
diff --git a/apolloschurchapp/src/ui/ContentCardConnected/query.js b/apolloschurchapp/src/ui/ContentCardConnected/query.js
deleted file mode 100644
index abefc12..0000000
--- a/apolloschurchapp/src/ui/ContentCardConnected/query.js
+++ /dev/null
@@ -1,93 +0,0 @@
-import gql from 'graphql-tag';
-
-export const coverImageFragment = gql`
-  fragment coverImageFragment on ContentItem {
-    coverImage {
-      sources {
-        uri
-      }
-    }
-  }
-`;
-
-export const themeFragment = gql`
-  fragment themeFragment on ContentItem {
-    theme {
-      type
-      colors {
-        primary
-        secondary
-        screen
-        paper
-      }
-    }
-  }
-`;
-
-export const contentCardMetricsFragment = gql`
-  fragment contentCardMetricsFragment on ContentItem {
-    isLiked
-    likedCount
-  }
-`;
-
-export const baseCardFragment = gql`
-  fragment baseCardFragment on ContentItem {
-    id
-    __typename
-    ...contentCardMetricsFragment
-    ...coverImageFragment
-    ...themeFragment
-    title
-    summary
-  }
-  ${contentCardMetricsFragment}
-  ${coverImageFragment}
-  ${themeFragment}
-`;
-
-export const tileCardFragment = gql`
-  fragment tileCardFragment on ContentItem {
-    ... on ContentSeriesContentItem {
-      id
-      ...themeFragment
-      ...coverImageFragment
-      ...contentCardMetricsFragment
-    }
-    ... on UniversalContentItem {
-      ...baseCardFragment
-    }
-    ... on DevotionalContentItem {
-      ...baseCardFragment
-    }
-    ... on MediaContentItem {
-      ...baseCardFragment
-    }
-  }
-  ${baseCardFragment}
-  ${themeFragment}
-  ${coverImageFragment}
-  ${contentCardMetricsFragment}
-`;
-
-export const largeCardFragment = gql`
-  fragment largeCardFragment on ContentItem {
-    ...baseCardFragment
-  }
-  ${baseCardFragment}
-`;
-
-const getContentCard = gql`
-  query getContentCard($contentId: ID!, $tile: Boolean!) {
-    node(id: $contentId) {
-      id
-      __typename
-      ...tileCardFragment @include(if: $tile)
-      ...largeCardFragment @skip(if: $tile)
-    }
-  }
-  ${tileCardFragment}
-  ${largeCardFragment}
-`;
-
-export default getContentCard;
diff --git a/apolloschurchapp/src/ui/FeedItemCard/FeedItemCard.stories.js b/apolloschurchapp/src/ui/FeedItemCard/FeedItemCard.stories.js
new file mode 100644
index 0000000..6336b1d
--- /dev/null
+++ b/apolloschurchapp/src/ui/FeedItemCard/FeedItemCard.stories.js
@@ -0,0 +1,151 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import FeedItemCard from '.';
+
+storiesOf('FeedItemCard', module)
+  .add('Default', () => {
+    const centered = {
+      justifyContent: 'center',
+      flex: 1,
+      backgroundColor: '#f7f7f7',
+    };
+
+    return (
+      <View style={centered}>
+        <FeedItemCard
+          title={'Promised Land'}
+          channelType={'Series'}
+          images={'https://picsum.photos/600/400/?random'}
+        />
+      </View>
+    );
+  })
+  .add('isLoading', () => {
+    const centered = {
+      justifyContent: 'center',
+      flex: 1,
+      backgroundColor: '#f7f7f7',
+    };
+
+    return (
+      <View style={centered}>
+        <FeedItemCard
+          title={'Promised Land'}
+          channelType={'Series'}
+          images={'https://picsum.photos/600/400/?random'}
+          isLoading
+        />
+      </View>
+    );
+  })
+  .add('With icon', () => {
+    const centered = {
+      justifyContent: 'center',
+      flex: 1,
+      backgroundColor: '#f7f7f7',
+    };
+    return (
+      <View style={centered}>
+        <FeedItemCard
+          title={'Promised Land'}
+          channelType={'Series'}
+          channelTypeIcon={'video'}
+          images={'https://picsum.photos/600/400/?random'}
+          backgroundColor={'salmon'}
+        />
+      </View>
+    );
+  })
+  .add('With dark backgroundColor', () => {
+    const centered = {
+      justifyContent: 'center',
+      flex: 1,
+      backgroundColor: '#f7f7f7',
+    };
+    return (
+      <View style={centered}>
+        <FeedItemCard
+          title={'Promised Land'}
+          channelType={'Series'}
+          images={'https://picsum.photos/600/400/?random'}
+          backgroundColor={'salmon'}
+          isLight={false}
+        />
+      </View>
+    );
+  })
+  .add('With isLight and light backgroundColor', () => {
+    const centered = {
+      justifyContent: 'center',
+      flex: 1,
+      backgroundColor: '#f7f7f7',
+    };
+    return (
+      <View style={centered}>
+        <FeedItemCard
+          title={'Promised Land'}
+          channelType={'Series'}
+          images={'https://picsum.photos/600/400/?random'}
+          backgroundColor={'papayawhip'}
+          isLight
+        />
+      </View>
+    );
+  });
+// .add('As liked', () => {
+//   const centered = {
+//     justifyContent: 'center',
+//     flex: 1,
+//     backgroundColor: '#f7f7f7',
+//   };
+//   return (
+//     <View style={centered}>
+//       <FeedItemCard
+//         title={'Promised Land'}
+//         category={'Series'}
+//         images={'https://picsum.photos/600/400/?random'}
+//         isLiked
+//       />
+//     </View>
+//   );
+// })
+// .add('As liked with backgroundColor', () => {
+//   const centered = {
+//     justifyContent: 'center',
+//     flex: 1,
+//     backgroundColor: '#f7f7f7',
+//   };
+//   return (
+//     <View style={centered}>
+//       <FeedItemCard
+//         title={'Promised Land'}
+//         category={'Series'}
+//         images={'https://picsum.photos/600/400/?random'}
+//         backgroundColor={'salmon'}
+//         isLight={false}
+//         isLiked
+//       />
+//     </View>
+//   );
+// })
+// .add('As liked with isLight and light backgroundColor', () => {
+//   const centered = {
+//     justifyContent: 'center',
+//     flex: 1,
+//     backgroundColor: '#f7f7f7',
+//   };
+//   return (
+//     <View style={centered}>
+//       <FeedItemCard
+//         title={'Promised Land'}
+//         category={'Series'}
+//         images={'https://picsum.photos/600/400/?random'}
+//         backgroundColor={'papayawhip'}
+//         isLight
+//         isLiked
+//       />
+//     </View>
+//   );
+// });
diff --git a/apolloschurchapp/src/ui/FeedItemCard/FeedItemCard.tests.js b/apolloschurchapp/src/ui/FeedItemCard/FeedItemCard.tests.js
new file mode 100644
index 0000000..9371bfe
--- /dev/null
+++ b/apolloschurchapp/src/ui/FeedItemCard/FeedItemCard.tests.js
@@ -0,0 +1,146 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import FeedItemCard from '.';
+
+describe('the FeedItemCard component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FeedItemCard
+          title={'Boom'}
+          channelType={'What'}
+          images={[
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ]}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with an icon', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FeedItemCard
+          title={'Boom'}
+          channelType={'What'}
+          channelTypeIcon={'play'}
+          images={[
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ]}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with inverted (light) font colors', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FeedItemCard
+          title={'Boom'}
+          channelType={'What'}
+          images={[
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ]}
+          isLight={false}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept a different backgroundColor', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FeedItemCard
+          title={'Boom'}
+          channelType={'What'}
+          images={[
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ]}
+          backgroundColor={'salmon'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render text correctly with isLight', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FeedItemCard
+          title={'Boom'}
+          channelType={'What'}
+          images={[
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ]}
+          isLight
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  // it('should render as liked', () => {
+  //   const tree = renderer.create(
+  //     <Providers>
+  //       <FeedItemCard
+  //         title={'Boom'}
+  //         category={'What'}
+  //         images={[
+  //           {
+  //             uri: 'https://picsum.photos/600/400/?random',
+  //             width: 600,
+  //             height: 400,
+  //           },
+  //         ]}
+  //         isLiked
+  //       />
+  //     </Providers>
+  //   );
+  //   expect(tree).toMatchSnapshot();
+  // });
+  it('should accept and render passed in styles', () => {
+    const cardDimensions = {
+      height: 400,
+      width: '92%',
+    };
+
+    const tree = renderer.create(
+      <Providers>
+        <FeedItemCard
+          title={'Boom'}
+          channelType={'What'}
+          images={[
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ]}
+          style={cardDimensions}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/FeedItemCard/index.js b/apolloschurchapp/src/ui/FeedItemCard/index.js
new file mode 100644
index 0000000..b40c3a1
--- /dev/null
+++ b/apolloschurchapp/src/ui/FeedItemCard/index.js
@@ -0,0 +1,93 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { compose, pure } from 'recompose';
+import { startCase, toLower } from 'lodash';
+
+import { withThemeMixin, withTheme } from 'apolloschurchapp/src/ui/theme';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import ChannelLabel from 'apolloschurchapp/src/ui/ChannelLabel';
+import GradientOverlayImage from 'apolloschurchapp/src/ui/GradientOverlayImage';
+import Card, { CardContent, CardActions } from 'apolloschurchapp/src/ui/Card';
+import { H3 } from 'apolloschurchapp/src/ui/typography';
+// import ConnectedImage from 'apolloschurchapp/src/ui/ConnectedImage';
+// import ProgressiveImage from 'apolloschurchapp/src/ui/ProgressiveImage';
+
+// import LikeButton from './LikeButton';
+
+const enhance = compose(
+  pure,
+  withThemeMixin(({ isLight }) => ({
+    type: isLight ? 'light' : 'dark',
+  })),
+  withTheme()
+);
+
+const FeedItemCard = enhance(
+  ({
+    images,
+    title,
+    channelType,
+    channelTypeIcon,
+    isLoading,
+    isLight,
+    isLiked,
+    backgroundColor,
+    theme,
+    transitionKey,
+    id,
+    ...otherProps
+  }) => (
+    <Card isLoading={isLoading} cardColor={backgroundColor} {...otherProps}>
+      <GradientOverlayImage
+        isLoading={isLoading}
+        source={images}
+        overlayColor={backgroundColor}
+      />
+      <CardContent>
+        <H3 isLoading={isLoading}>{title}</H3>
+      </CardContent>
+      <CardActions>
+        <ChannelLabel
+          label={startCase(toLower(channelType))}
+          icon={channelTypeIcon}
+          isLoading={isLoading}
+          withFlex
+        />
+        <Icon
+          name={isLiked ? 'like-solid' : 'like'}
+          size={theme.helpers.rem(1.2)}
+          fill={theme.colors.text.primary}
+          isLoading={isLoading}
+        />
+      </CardActions>
+    </Card>
+  )
+);
+
+const sourcePropType = PropTypes.oneOfType([
+  PropTypes.arrayOf(
+    PropTypes.shape({
+      uri: PropTypes.string,
+    })
+  ),
+  PropTypes.string,
+]);
+
+FeedItemCard.propTypes = {
+  title: PropTypes.string.isRequired,
+  images: sourcePropType,
+  channelType: PropTypes.string,
+  channelTypeIcon: PropTypes.string,
+  isLoading: PropTypes.bool,
+  isLiked: PropTypes.bool,
+  isLight: PropTypes.bool,
+  backgroundColor: PropTypes.string,
+  style: PropTypes.any, // eslint-disable-line
+};
+
+FeedItemCard.defaultProps = {
+  isLight: true,
+  channelTypeIcon: null,
+};
+
+export default FeedItemCard;
diff --git a/apolloschurchapp/src/ui/FeedView/FeedView.stories.js b/apolloschurchapp/src/ui/FeedView/FeedView.stories.js
new file mode 100644
index 0000000..e1f3cb6
--- /dev/null
+++ b/apolloschurchapp/src/ui/FeedView/FeedView.stories.js
@@ -0,0 +1,63 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import FeedView from '.';
+
+storiesOf('FeedView', module).add('Example', () => (
+  <FeedView
+    content={[
+      {
+        node: {
+          id: '1',
+          title: "Will I get to shake Jesus' hand?",
+          coverImage: [
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ],
+          theme: {
+            isLight: true,
+            colors: {
+              background: {
+                paper: '#fa8072',
+              },
+            },
+          },
+          parentChannel: {
+            id: '01',
+            name: 'eschatology',
+            iconName: 'like',
+          },
+        },
+      },
+      {
+        node: {
+          id: '2',
+          title: 'Where is the new Jerusalem anyways?',
+          coverImage: [
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ],
+          theme: {
+            isLight: true,
+            colors: {
+              background: {
+                paper: '#e9967a',
+              },
+            },
+          },
+          parentChannel: {
+            id: '02',
+            name: 'eschatology',
+            iconName: 'like',
+          },
+        },
+      },
+    ]}
+  />
+));
diff --git a/apolloschurchapp/src/ui/FeedView/FeedView.tests.js b/apolloschurchapp/src/ui/FeedView/FeedView.tests.js
new file mode 100644
index 0000000..ce1b3f5
--- /dev/null
+++ b/apolloschurchapp/src/ui/FeedView/FeedView.tests.js
@@ -0,0 +1,147 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { TouchableWithoutFeedback } from 'react-native';
+import { get } from 'lodash';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import FeedItemCard from 'apolloschurchapp/src/ui/FeedItemCard';
+
+import FeedView from '.';
+
+describe('The FeedView component', () => {
+  it('renders correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FeedView
+          content={[
+            {
+              node: {
+                id: '1',
+                title: "Will I get to shake Jesus' hand?",
+                coverImage: [
+                  {
+                    uri: 'https://picsum.photos/600/400/?random',
+                    width: 600,
+                    height: 400,
+                  },
+                ],
+                theme: {
+                  isLight: true,
+                  colors: {
+                    background: {
+                      paper: '#fa8072',
+                    },
+                  },
+                },
+                parentChannel: {
+                  id: '01',
+                  name: 'eschatology',
+                  iconName: 'like',
+                },
+              },
+            },
+            {
+              node: {
+                id: '2',
+                title: 'Where is the new Jerusalem anyways?',
+                coverImage: [
+                  {
+                    uri: 'https://picsum.photos/600/400/?random',
+                    width: 600,
+                    height: 400,
+                  },
+                ],
+                theme: {
+                  isLight: true,
+                  colors: {
+                    background: {
+                      paper: '#e9967a',
+                    },
+                  },
+                },
+                parentChannel: {
+                  id: '02',
+                  name: 'eschatology',
+                  iconName: 'like',
+                },
+              },
+            },
+          ]}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('renders empty state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FeedView isLoading content={[]} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('handles a renderItem prop', () => {
+    const renderItem = (item) => {
+      const theItem = get(item, 'item', {});
+      return (
+        <TouchableWithoutFeedback>
+          <FeedItemCard
+            id={theItem.node.id}
+            title={theItem.node.title || theItem.node.name || ' '}
+            channelType={theItem.node.parentChannel.name}
+            channelTypeIcon={theItem.node.parentChannel.iconName}
+            images={theItem.node.coverImage.sources}
+            isLoading={theItem.node.isLoading}
+          />
+        </TouchableWithoutFeedback>
+      );
+    };
+
+    const tree = renderer.create(
+      <Providers>
+        <FeedView
+          isLoading
+          content={[
+            {
+              node: {
+                id: '1',
+                title: "Will I get to shake Jesus' hand?",
+                coverImage: [
+                  {
+                    uri: 'https://picsum.photos/600/400/?random',
+                    width: 600,
+                    height: 400,
+                  },
+                ],
+                theme: {
+                  isLight: true,
+                  colors: {
+                    background: {
+                      paper: '#fa8072',
+                    },
+                  },
+                },
+                parentChannel: {
+                  id: '01',
+                  name: 'eschatology',
+                  iconName: 'like',
+                },
+              },
+            },
+          ]}
+          renderItem={renderItem}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('passes an onPressItem prop', () => {
+    const onPress = () => {};
+    const tree = renderer.create(
+      <Providers>
+        <FeedView isLoading content={[]} onPressItem={onPress} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/FeedView/index.js b/apolloschurchapp/src/ui/FeedView/index.js
new file mode 100644
index 0000000..c1a2c1b
--- /dev/null
+++ b/apolloschurchapp/src/ui/FeedView/index.js
@@ -0,0 +1,173 @@
+import React, { Component } from 'react';
+import { FlatList } from 'react-native';
+import PropTypes from 'prop-types';
+import { pure, compose, branch, withProps, defaultProps } from 'recompose';
+import { get } from 'lodash';
+
+import FeedItemCard from 'apolloschurchapp/src/ui/FeedItemCard';
+import { enhancer as mediaQuery } from 'apolloschurchapp/src/ui/MediaQuery';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import { ErrorCard } from 'apolloschurchapp/src/ui/Card';
+import TouchableScale from 'apolloschurchapp/src/ui/TouchableScale';
+
+const StyledFlatList = compose(
+  withTheme(({ theme: { helpers: { verticalRhythm } } } = {}) => ({
+    contentContainerStyle: {
+      paddingVertical: verticalRhythm(0.3125),
+    }, // Android padding fix 😩
+  }))
+)(FlatList);
+
+class FeedView extends Component {
+  static propTypes = {
+    content: PropTypes.array, // eslint-disable-line
+    error: PropTypes.oneOfType([
+      PropTypes.bool,
+      PropTypes.string,
+      PropTypes.object,
+    ]),
+    fetchMore: PropTypes.func,
+    isLoading: PropTypes.bool,
+    keyExtractor: PropTypes.func,
+    ListEmptyComponent: PropTypes.func,
+    numColumns: PropTypes.number,
+    onEndReachedThreshold: PropTypes.number,
+    onPressItem: PropTypes.func,
+    refetch: PropTypes.func,
+    renderEmptyState: PropTypes.func,
+    renderItem: PropTypes.func,
+  };
+
+  static defaultProps = {
+    isLoading: false,
+    // renderItem: this.defaultFeedItemRenderer,
+    onEndReachedThreshold: 0.7,
+    keyExtractor: (item) => item && item.id,
+    content: [],
+    refetch: undefined,
+    fetchMore: undefined,
+  };
+
+  refetchHandler = ({ isLoading, refetch }) =>
+    refetch && ((...args) => !isLoading && refetch(...args));
+
+  fetchMoreHandler = ({ fetchMore, error, isLoading }) =>
+    fetchMore && ((...args) => !isLoading && !error && fetchMore(...args));
+
+  renderItem = ({ item }) => {
+    if (this.props.renderItem) {
+      return this.props.renderItem({ item });
+    }
+    return (
+      // These are all props of FeedItemCard but they do not have data coming
+      // back yet. So I moved them here for safe keeping.
+      // TODO: Move them back when the data is ready.
+      <TouchableScale onPress={() => this.props.onPressItem({ ...item })}>
+        <FeedItemCard
+          id={get(item, 'id')}
+          title={get(item, 'title') || get(item, 'name') || ' '}
+          isLiked={get(item, 'isLiked')}
+          channelType={get(item, 'parentChannel.name')}
+          channelTypeIcon={get(item, 'parentChannel.iconName')}
+          images={get(item, 'coverImage.sources')}
+          isLoading={get(item, 'isLoading')}
+          isLight={get(item, 'theme.type', '').toLowerCase() !== 'dark'}
+          backgroundColor={get(item, 'theme.colors.paper')}
+        />
+      </TouchableScale>
+    );
+  };
+
+  render() {
+    const {
+      content,
+      error,
+      fetchMore,
+      isLoading,
+      keyExtractor,
+      ListEmptyComponent,
+      numColumns,
+      onEndReachedThreshold,
+      refetch,
+      renderEmptyState,
+      renderItem,
+      ...otherProps
+    } = this.props;
+    return (
+      <StyledFlatList
+        {...otherProps}
+        data={content}
+        keyExtractor={keyExtractor}
+        ListEmptyComponent={
+          error && !isLoading && (!content || !content.length) ? (
+            <ErrorCard error={error} />
+          ) : (
+            ListEmptyComponent
+          )
+        }
+        numColumns={numColumns}
+        onEndReached={this.fetchMoreHandler({ fetchMore, error, isLoading })}
+        onEndReachedThreshold={onEndReachedThreshold}
+        onRefresh={this.refetchHandler({ isLoading, refetch })}
+        refreshing={isLoading}
+        renderItem={this.renderItem}
+      />
+    );
+  }
+}
+
+const defaultLoadingState = {
+  id: 'fakeId0',
+  isLoading: true,
+  title: '',
+  channelType: '',
+  coverImage: [],
+  theme: {
+    isLight: '',
+    colors: {
+      background: {
+        paper: '',
+      },
+    },
+  },
+  parentChannel: {
+    id: '',
+    name: '',
+  },
+};
+
+const generateLoadingStateData = (
+  numberOfItems = 1,
+  loadingStateObject = defaultLoadingState
+) => {
+  const itemData = () => ({ ...loadingStateObject });
+
+  const loadingStateData = [];
+
+  while (loadingStateData.length < numberOfItems) {
+    const newData = itemData();
+    newData.id = `fakeId${loadingStateData.length}`;
+    loadingStateData.push(newData);
+  }
+
+  return loadingStateData;
+};
+
+const enhance = compose(
+  pure,
+  branch(
+    ({ isLoading, content }) => isLoading && !content.length,
+    withProps(({ loadingStateObject }) => ({
+      isLoading: true,
+      content: generateLoadingStateData(10, loadingStateObject),
+      fetchMore: () => {},
+    }))
+  ),
+  mediaQuery(
+    ({ md }) => ({ maxWidth: md }),
+    defaultProps({ numColumns: 1 }),
+    defaultProps({ numColumns: 2 })
+  )
+);
+
+export default enhance(FeedView);
diff --git a/apolloschurchapp/src/ui/FlexedView/FlexedView.stories.js b/apolloschurchapp/src/ui/FlexedView/FlexedView.stories.js
new file mode 100644
index 0000000..32290a0
--- /dev/null
+++ b/apolloschurchapp/src/ui/FlexedView/FlexedView.stories.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import { H1 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import FlexedView from '.';
+
+storiesOf('FlexedView', module).add('Example', () => {
+  const FlexedSalmonView = styled({
+    backgroundColor: 'salmon',
+  })(FlexedView);
+
+  return (
+    <FlexedView>
+      <FlexedSalmonView>
+        <H1>This box is in a FlexedView</H1>
+      </FlexedSalmonView>
+    </FlexedView>
+  );
+});
diff --git a/apolloschurchapp/src/ui/FlexedView/FlexedView.tests.js b/apolloschurchapp/src/ui/FlexedView/FlexedView.tests.js
new file mode 100644
index 0000000..b248969
--- /dev/null
+++ b/apolloschurchapp/src/ui/FlexedView/FlexedView.tests.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import FlexedView from '.';
+
+describe('the FlexedView component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FlexedView />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/FlexedView/index.js b/apolloschurchapp/src/ui/FlexedView/index.js
new file mode 100644
index 0000000..e1fe7aa
--- /dev/null
+++ b/apolloschurchapp/src/ui/FlexedView/index.js
@@ -0,0 +1,12 @@
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const FlexedView = styled(
+  {
+    flex: 1,
+  },
+  'FlexedView'
+)(View);
+
+export default FlexedView;
diff --git a/apolloschurchapp/src/ui/GradientOverlayImage/GradientOverlayImage.stories.js b/apolloschurchapp/src/ui/GradientOverlayImage/GradientOverlayImage.stories.js
new file mode 100644
index 0000000..b8dd80b
--- /dev/null
+++ b/apolloschurchapp/src/ui/GradientOverlayImage/GradientOverlayImage.stories.js
@@ -0,0 +1,15 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import GradientOverlayImage from '.';
+
+storiesOf('GradientOverlayImage', module)
+  .add('Default', () => (
+    <GradientOverlayImage source={'https://picsum.photos/600/400/?random'} />
+  ))
+  .add('With Overlay', () => (
+    <GradientOverlayImage
+      source={'https://picsum.photos/600/400/?random'}
+      overlayColor={'salmon'}
+    />
+  ));
diff --git a/apolloschurchapp/src/ui/GradientOverlayImage/GradientOverlayImage.tests.js b/apolloschurchapp/src/ui/GradientOverlayImage/GradientOverlayImage.tests.js
new file mode 100644
index 0000000..0a86354
--- /dev/null
+++ b/apolloschurchapp/src/ui/GradientOverlayImage/GradientOverlayImage.tests.js
@@ -0,0 +1,42 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import GradientOverlayImage from '.';
+
+describe('the GradientOverlayImage component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <GradientOverlayImage
+          source={[
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ]}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with an overlayColor', () => {
+    const tree = renderer.create(
+      <Providers>
+        <GradientOverlayImage
+          source={[
+            {
+              uri: 'https://picsum.photos/600/400/?random',
+              width: 600,
+              height: 400,
+            },
+          ]}
+          overlayColor={'salmon'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/GradientOverlayImage/index.js b/apolloschurchapp/src/ui/GradientOverlayImage/index.js
new file mode 100644
index 0000000..01be2b1
--- /dev/null
+++ b/apolloschurchapp/src/ui/GradientOverlayImage/index.js
@@ -0,0 +1,101 @@
+import React from 'react';
+import { StyleSheet, View } from 'react-native';
+import LinearGradient from 'react-native-linear-gradient';
+import PropTypes from 'prop-types';
+import { pure } from 'recompose';
+import Color from 'color';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import ConnectedImage from 'apolloschurchapp/src/ui/ConnectedImage';
+
+const Overlay = styled(StyleSheet.absoluteFillObject)(LinearGradient);
+
+const getGradientValues = (overlayColor) => {
+  const values = {
+    colors: [
+      `${Color(overlayColor)
+        .fade(1)
+        .string()}`,
+      overlayColor,
+    ],
+    start: { x: 0, y: 0 },
+    end: { x: 0, y: 1 },
+    locations: [0.3, 1],
+  };
+
+  return values;
+};
+
+const Container = styled(({ theme }) => ({
+  width: '100%',
+  backgroundColor: theme.colors.background.inactive,
+}))(View);
+
+const DefaultImageComponent = styled({
+  width: '100%',
+  resizeMode: 'cover',
+})(ConnectedImage);
+
+const NoImagePlaceholder = styled(({ theme }) => ({
+  width: '100%',
+  aspectRatio: 1,
+  backgroundColor: theme.colors.background.inactive,
+}))(View);
+
+const GradientOverlayImage = pure(
+  ({
+    source: imageSource,
+    overlayColor,
+    ImageComponent: ComponentProp,
+    isLoading,
+    ...otherProps
+  }) => {
+    const Component = ComponentProp || DefaultImageComponent;
+    return (
+      <Container>
+        {imageSource || isLoading ? (
+          <Component
+            source={imageSource}
+            isLoading={isLoading}
+            {...otherProps}
+          />
+        ) : (
+          <NoImagePlaceholder />
+        )}
+        {overlayColor ? (
+          <Overlay
+            colors={getGradientValues(overlayColor).colors}
+            start={getGradientValues(overlayColor).start}
+            end={getGradientValues(overlayColor).end}
+            locations={getGradientValues(overlayColor).locations}
+          />
+        ) : null}
+      </Container>
+    );
+  }
+);
+
+const source = PropTypes.oneOfType([
+  PropTypes.arrayOf(
+    PropTypes.shape({
+      uri: PropTypes.string,
+      label: PropTypes.string,
+      width: PropTypes.number,
+      height: PropTypes.number,
+    })
+  ),
+  PropTypes.string,
+]);
+
+GradientOverlayImage.propTypes = {
+  source,
+  overlayColor: PropTypes.string,
+  ImageComponent: PropTypes.func,
+  maintainAspectRatio: PropTypes.bool,
+};
+
+GradientOverlayImage.defaultProps = {
+  maintainAspectRatio: true,
+};
+
+export default GradientOverlayImage;
diff --git a/apolloschurchapp/src/ui/HTMLView/defaultRenderer.js b/apolloschurchapp/src/ui/HTMLView/defaultRenderer.js
index b8af60c..6e17c65 100644
--- a/apolloschurchapp/src/ui/HTMLView/defaultRenderer.js
+++ b/apolloschurchapp/src/ui/HTMLView/defaultRenderer.js
@@ -13,9 +13,9 @@ import {
   Paragraph,
   BlockQuote,
   BulletListItem,
-  ButtonLink,
-  ConnectedImage,
-} from '@apollosproject/ui-kit';
+} from 'apolloschurchapp/src/ui/typography';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+import ConnectedImage from 'apolloschurchapp/src/ui/ConnectedImage';
 
 const LINE_BREAK = '\n';
 const TEXT_TYPES_THAT_SHOULD_WRAP = [Text, BodyText, ButtonLink];
diff --git a/apolloschurchapp/src/ui/HTMLView/index.js b/apolloschurchapp/src/ui/HTMLView/index.js
index 5873b74..ba9cc7c 100644
--- a/apolloschurchapp/src/ui/HTMLView/index.js
+++ b/apolloschurchapp/src/ui/HTMLView/index.js
@@ -3,7 +3,7 @@ import PropTypes from 'prop-types';
 import { View } from 'react-native';
 import { Parser, DomHandler } from 'htmlparser2';
 
-import { Paragraph as ParagraphPlaceholder } from '@apollosproject/ui-kit';
+import { Paragraph as ParagraphPlaceholder } from 'apolloschurchapp/src/ui/Placeholder';
 
 import defaultRenderer from './defaultRenderer';
 
diff --git a/apolloschurchapp/src/ui/HorizontalTileFeed/HorizontalTileFeed.stories.js b/apolloschurchapp/src/ui/HorizontalTileFeed/HorizontalTileFeed.stories.js
new file mode 100644
index 0000000..8ebfe1e
--- /dev/null
+++ b/apolloschurchapp/src/ui/HorizontalTileFeed/HorizontalTileFeed.stories.js
@@ -0,0 +1,141 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import CardTile from 'apolloschurchapp/src/ui/CardTile';
+import TileImage from 'apolloschurchapp/src/ui/TileImage';
+
+import HorizontalTileFeed from '.';
+
+storiesOf('HorizontalTileFeed', module)
+  .add('With CardTile', () => {
+    const CardTileData = [
+      {
+        node: {
+          id: 'fakeId0',
+          title: 'Why Jesus is Timeless',
+        },
+      },
+      {
+        node: {
+          id: 'fakeId1',
+          title: 'Tall Hat Tales',
+        },
+      },
+    ];
+
+    const loadingStateObject = {
+      node: {
+        id: 'fakeId0',
+        title: '',
+        isLoading: true,
+      },
+    };
+
+    const renderCardTile = (
+      { item, index } //eslint-disable-line
+    ) => (
+      <CardTile
+        number={index + 1}
+        title={item.node.title}
+        isLoading={item.node.isLoading}
+      />
+    );
+
+    return (
+      <View>
+        <HorizontalTileFeed
+          content={CardTileData}
+          renderItem={renderCardTile}
+          loadingStateObject={loadingStateObject}
+        />
+      </View>
+    );
+  })
+  .add('CardTile Skeleton', () => {
+    const loadingStateObject = {
+      node: {
+        id: 'fakeId0',
+        title: '',
+        isLoading: true,
+      },
+    };
+
+    const renderCardTile = (
+      { item, index } //eslint-disable-line
+    ) => (
+      <CardTile
+        number={index + 1}
+        title={item.node.title}
+        isLoading={item.node.isLoading}
+      />
+    );
+
+    return (
+      <View>
+        <HorizontalTileFeed
+          content={[]}
+          renderItem={renderCardTile}
+          loadingStateObject={loadingStateObject}
+          isLoading
+        />
+      </View>
+    );
+  })
+  .add('With TileImage', () => {
+    const imageData = [
+      {
+        node: {
+          id: 'fakeId0',
+          source: 'https://picsum.photos/900/900/?random',
+          link: 'https://github.com',
+        },
+      },
+      {
+        node: {
+          id: 'fakeId1',
+          source: 'https://picsum.photos/900/900/?random',
+          link: 'https://github.com',
+        },
+      },
+      {
+        node: {
+          id: 'fakeId2',
+          source: 'https://picsum.photos/900/900/?random',
+          link: 'https://github.com',
+        },
+      },
+    ];
+
+    const loadingStateImageObject = {
+      node: {
+        id: 'fakeId1',
+        source: '',
+        link: '',
+      },
+    };
+
+    const Spacer = styled({
+      flex: 1,
+      paddingHorizontal: 10,
+    })(View);
+
+    const renderTileImage = (
+      { item, index } //eslint-disable-line
+    ) => (
+      <Spacer>
+        <TileImage image={item.node.source} link={item.node.link} />
+      </Spacer>
+    );
+
+    return (
+      <View>
+        <HorizontalTileFeed
+          content={imageData}
+          renderItem={renderTileImage}
+          loadingStateObject={loadingStateImageObject}
+        />
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/HorizontalTileFeed/HorizontalTileFeed.tests.js b/apolloschurchapp/src/ui/HorizontalTileFeed/HorizontalTileFeed.tests.js
new file mode 100644
index 0000000..b98a6bf
--- /dev/null
+++ b/apolloschurchapp/src/ui/HorizontalTileFeed/HorizontalTileFeed.tests.js
@@ -0,0 +1,68 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import CardTile from 'apolloschurchapp/src/ui/CardTile';
+
+import HorizontalTileFeed from '.';
+
+const loadingStateObject = {
+  node: {
+    id: 'fakeId0',
+    title: '',
+    isLoading: true,
+  },
+};
+
+describe('The HorizontalTileFeed component', () => {
+  it('renders correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <HorizontalTileFeed
+          content={[
+            {
+              node: {
+                id: 'fakeId0',
+                title: 'Why Jesus is Timeless',
+              },
+            },
+            {
+              node: {
+                id: 'fakeId1',
+                title: 'Why Jesus is Timeless',
+              },
+            },
+          ]}
+          renderItem={({ item, index }) => (
+            <CardTile
+              number={index + 1}
+              title={item.node.title}
+              isLoading={item.node.isLoading}
+            />
+          )}
+          loadingStateObject={loadingStateObject}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('renders empty state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <HorizontalTileFeed
+          isLoading
+          content={[]}
+          renderItem={({ item, index }) => (
+            <CardTile
+              number={index + 1}
+              title={item.node.title}
+              isLoading={item.node.isLoading}
+            />
+          )}
+          loadingStateObject={loadingStateObject}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/HorizontalTileFeed/TileFeed.js b/apolloschurchapp/src/ui/HorizontalTileFeed/TileFeed.js
new file mode 100644
index 0000000..e98dce2
--- /dev/null
+++ b/apolloschurchapp/src/ui/HorizontalTileFeed/TileFeed.js
@@ -0,0 +1,10 @@
+import { FlatList } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const TileFeed = styled(({ theme, tileHeight }) => ({
+  height: tileHeight,
+  paddingBottom: theme.sizing.baseUnit / 2,
+}))(FlatList);
+
+export default TileFeed;
diff --git a/apolloschurchapp/src/ui/HorizontalTileFeed/TileFeed.tests.js b/apolloschurchapp/src/ui/HorizontalTileFeed/TileFeed.tests.js
new file mode 100644
index 0000000..81aae8f
--- /dev/null
+++ b/apolloschurchapp/src/ui/HorizontalTileFeed/TileFeed.tests.js
@@ -0,0 +1,68 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import CardTile from 'apolloschurchapp/src/ui/CardTile';
+
+import TileFeed from '.';
+
+describe('The TileFeed component', () => {
+  it('renders correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <TileFeed
+          content={[
+            {
+              node: {
+                id: 'fakeId0',
+                title: 'Why Jesus is Timeless',
+              },
+            },
+            {
+              node: {
+                id: 'fakeId1',
+                title: 'Why Jesus is Timeless',
+              },
+            },
+          ]}
+          loadingStateObject={{
+            id: 'fakeId0',
+            title: '',
+            isLoading: false,
+          }}
+          renderItem={({ item, index }) => (
+            <CardTile
+              number={index + 1}
+              title={item.title}
+              isLoading={item.isLoading}
+            />
+          )}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('renders empty state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <TileFeed
+          refreshing
+          content={[]}
+          loadingStateObject={{
+            id: 'fakeId0',
+            title: '',
+            isLoading: true,
+          }}
+          renderItem={({ item, index }) => (
+            <CardTile
+              number={index + 1}
+              title={item.title}
+              isLoading={item.isLoading}
+            />
+          )}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/HorizontalTileFeed/index.js b/apolloschurchapp/src/ui/HorizontalTileFeed/index.js
new file mode 100644
index 0000000..631a1c9
--- /dev/null
+++ b/apolloschurchapp/src/ui/HorizontalTileFeed/index.js
@@ -0,0 +1,93 @@
+import React, { PureComponent } from 'react';
+import { Dimensions } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, withProps } from 'recompose';
+
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+import TileFeed from './TileFeed';
+
+export class HorizontalTileFeed extends PureComponent {
+  static propTypes = {
+    content: PropTypes.array, // eslint-disable-line
+    loadingStateObject: PropTypes.shape({}).isRequired,
+    renderItem: PropTypes.func.isRequired,
+    fetchMore: PropTypes.func,
+    isLoading: PropTypes.bool,
+    keyExtractor: PropTypes.func,
+    theme: PropTypes.shape({}),
+  };
+
+  static defaultProps = {
+    keyExtractor: (item) => item && item.id,
+    content: [],
+    isLoading: false,
+  };
+
+  constructor(props) {
+    super(props);
+
+    this.snapToInterval = this.getTileWidth() - this.props.theme.baseUnit / 2; //eslint-disable-line
+  }
+
+  getTileWidth = () => {
+    const { width } = Dimensions.get('window');
+    return width * 0.8; // 80% of width
+  };
+
+  render() {
+    const { content, isLoading, renderItem, theme, ...otherProps } = this.props;
+
+    return (
+      <TileFeed
+        data={content}
+        horizontal
+        initialScrollIndex={0}
+        refreshing={isLoading}
+        renderItem={renderItem}
+        showsHorizontalScrollIndicator={false}
+        tileHeight={this.getTileWidth()} // passed into TileFeed styles. Height is equal to 80% of width
+        /*
+         * `(80% of width - baseUnit / 2)` which is used for padding on the tile. This padding was added
+         * to fix a shadow clipping bug on Android. `snapToInterval` below is adjusted to account for
+         * that padding on each swipe. TODO: find better shadow clipping fix that simplifies this math.
+         */
+        snapToInterval={this.snapToInterval} // passed down to rendered ScrollView.
+        snapToAlignment={'start'} // passed down to rendered ScrollView
+        decelerationRate={'fast'} // passed down to rendered ScrollView
+        {...otherProps}
+      />
+    );
+  }
+}
+
+const generateLoadingStateData = (loadingStateObject, numberOfItems) => {
+  const itemData = () => JSON.parse(JSON.stringify(loadingStateObject));
+
+  const loadingStateData = [];
+
+  while (loadingStateData.length < numberOfItems) {
+    const newData = itemData();
+    newData.id = `fakeId${loadingStateData.length}`;
+    loadingStateData.push(newData);
+  }
+
+  return loadingStateData;
+};
+
+const enhance = compose(
+  withProps(
+    ({ isLoading, content, loadingStateObject } = {}) =>
+      isLoading && (!content || !content.length)
+        ? {
+            content: generateLoadingStateData(loadingStateObject, 5),
+            fetchMore: () => {},
+          }
+        : {}
+  ),
+  withTheme(({ theme: { sizing: { baseUnit } = {} } = {} } = {}) => ({
+    theme: { baseUnit },
+  }))
+);
+
+export default enhance(HorizontalTileFeed);
diff --git a/apolloschurchapp/src/ui/Icon/Icon.stories.js b/apolloschurchapp/src/ui/Icon/Icon.stories.js
new file mode 100644
index 0000000..ef0df2a
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/Icon.stories.js
@@ -0,0 +1,19 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+import { kebabCase } from 'lodash';
+
+import CenteredView from 'apolloschurchapp/src/ui/CenteredView';
+
+import * as icons from './icons';
+
+import Icon from '.';
+
+const stories = storiesOf('Icon', module).addDecorator((getStory) => (
+  <CenteredView>{getStory()}</CenteredView>
+));
+
+Object.keys(icons).forEach((iconName) => {
+  stories.add(iconName, () => <Icon name={kebabCase(iconName)} />);
+});
+
+stories.add('isLoading', () => <Icon name={'umbrella'} isLoading />);
diff --git a/apolloschurchapp/src/ui/Icon/Icon.tests.js b/apolloschurchapp/src/ui/Icon/Icon.tests.js
new file mode 100644
index 0000000..6f794dd
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/Icon.tests.js
@@ -0,0 +1,22 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { kebabCase } from 'lodash';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import * as icons from './icons';
+
+import Icon from '.';
+
+Object.keys(icons).forEach((iconName) => {
+  describe(`The ${iconName} icon`, () => {
+    it('renders correctly', () => {
+      const tree = renderer.create(
+        <Providers>
+          <Icon name={kebabCase(iconName)} />
+        </Providers>
+      );
+      expect(tree).toMatchSnapshot();
+    });
+  });
+});
diff --git a/apolloschurchapp/src/ui/Icon/icons/ArrowBack.js b/apolloschurchapp/src/ui/Icon/icons/ArrowBack.js
new file mode 100644
index 0000000..ea4d039
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/ArrowBack.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M14.35 21L6.2 12.46c-.26-.28-.26-.64 0-.92L14.34 3l1.65.9L8.27 12 16 20.1l-1.65.9z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/ArrowDown.js b/apolloschurchapp/src/ui/Icon/icons/ArrowDown.js
new file mode 100644
index 0000000..81e83f1
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/ArrowDown.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M12 18c-.16 0-.32-.06-.46-.2L3 9.66 3.9 8l8.1 7.72L20.1 8l.9 1.65-8.54 8.16c-.14.15-.3.2-.46.2z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/ArrowNext.js b/apolloschurchapp/src/ui/Icon/icons/ArrowNext.js
new file mode 100644
index 0000000..1371ca4
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/ArrowNext.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M9.65 21L8 20.1l7.72-8.1L8 3.9 9.65 3l8.16 8.54c.27.28.27.64 0 .92L9.67 21z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/ArrowUp.js b/apolloschurchapp/src/ui/Icon/icons/ArrowUp.js
new file mode 100644
index 0000000..f434de5
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/ArrowUp.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M20.1 16L12 8.28 3.9 16 3 14.35l8.54-8.15c.28-.27.64-.27.92 0L21 14.35 20.1 16z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Audio.js b/apolloschurchapp/src/ui/Icon/icons/Audio.js
new file mode 100644
index 0000000..da2b1fb
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Audio.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M3.82 13.5H2v-.32C2 6.54 5.22 2 12 2c6.5 0 9.64 4.16 9.98 10.42v1.07h-1.82v-1c-.3-5.8-3.02-8.8-8.16-8.8-5.37 0-8.18 3.32-8.18 9.45v.3zm0 1.7h1.6c.87 0 1.58.66 1.58 1.48v2.13c0 .86-.7 1.5-1.6 1.5-.87 0-1.58-.64-1.58-1.5v-3.6zm0-1.7h1.6c1.87 0 3.4 1.42 3.4 3.18v2.13c0 1.8-1.53 3.2-3.4 3.2C3.5 22 2 20.6 2 18.8v-5.3h1.82zm16.36 1.7v3.6c0 .83-.7 1.5-1.6 1.5-.87 0-1.58-.67-1.58-1.5v-2.1c0-.82.7-1.5 1.6-1.5h1.58zm0-1.7H22v5.3c0 1.77-1.53 3.2-3.4 3.2-1.9 0-3.42-1.43-3.42-3.2v-2.1c0-1.76 1.53-3.2 3.4-3.2h1.6z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Bank.js b/apolloschurchapp/src/ui/Icon/icons/Bank.js
new file mode 100644
index 0000000..98f8791
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Bank.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 17" {...otherProps}>
+    <Path
+      d="M1.3,0 L22.7,0 C23.42,0 24,0.57 24,1.28 L24,15.88 C24,16.58 23.42,17.16 22.7,17.16 L1.3,17.16 C0.57,17.15 0,16.57 0,15.87 L0,1.27 C0,0.57 0.58,0 1.3,0 Z M22.2,15.43 L22.2,1.71 L1.8,1.71 L1.8,15.43 L22.2,15.43 Z M11.4,12 L4.2,12 L4.2,9.7 L11.4,9.7 L11.4,12 Z M19.8,6.86 L4.2,6.86 L4.2,4.57 L19.8,4.57 L19.8,6.87 L19.8,6.86 Z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/BrandIcon.js b/apolloschurchapp/src/ui/Icon/icons/BrandIcon.js
new file mode 100644
index 0000000..e46ffed
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/BrandIcon.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M8.84799129,0 L13.7577354,0 L22.6057267,24 L0,24 L8.84799129,0 Z M6.52559608,19.4398694 L16.0921502,19.4398694 L11.4494502,5.83629831 L11.1682961,5.83629831 L6.52559608,19.4398694 Z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Building.js b/apolloschurchapp/src/ui/Icon/icons/Building.js
new file mode 100644
index 0000000..3f5bf3e
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Building.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M19.5 21v-8.25h.75c.45 0 .75.3.75.75v6.75c0 .45-.3.75-.75.75h-.75zm-15-.75V21h-.75c-.45 0-.75-.3-.75-.75V13.5c0-.45.3-.75.75-.75h.75v7.5zM17.25 3c.45 0 .75.3.75.75v16.5c0 .45-.3.75-.75.75h-4.5v-3h-1.5v3h-4.5c-.45 0-.75-.3-.75-.75V3.75c0-.45.3-.75.75-.75h10.5zM10.5 15.75v-1.5H8.25v1.5h2.25zm0-3v-1.5H8.25v1.5h2.25zm0-3v-1.5H8.25v1.5h2.25zm0-3v-1.5H8.25v1.5h2.25zm5.25 9v-1.5H13.5v1.5h2.25zm0-3v-1.5H13.5v1.5h2.25zm0-3v-1.5H13.5v1.5h2.25zm0-3v-1.5H13.5v1.5h2.25z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Calendar.js b/apolloschurchapp/src/ui/Icon/icons/Calendar.js
new file mode 100644
index 0000000..eb78cab
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Calendar.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M4.4 20.57h15.52V9.14H4.42v11.43zM8.65 7V3.8c0-.12-.03-.2-.1-.27-.06-.07-.15-.1-.25-.1h-.72c-.1 0-.18.03-.25.1s-.1.15-.1.26V7c0 .1.03.2.1.26s.15.1.25.1h.7c.1 0 .2-.04.26-.1.07-.07.1-.16.1-.26zm8.46 0V3.8c0-.12 0-.2-.1-.27 0-.07-.1-.1-.2-.1h-.7c-.1 0-.2.03-.22.1s-.1.15-.1.26V7c0 .1.04.2.1.26.07.06.15.1.25.1h.7c.1 0 .2-.04.26-.1.07-.07.1-.16.1-.26zm4.3-.7v14.27c0 .4-.12.72-.4 1-.26.3-.6.43-1 .43H4.4c-.4 0-.72-.14-1-.42-.28-.3-.42-.62-.42-1V6.28c0-.4.14-.73.42-1 .28-.3.6-.43 1-.43h1.4V3.8c0-.5.17-.93.52-1.28.34-.35.76-.52 1.24-.52h.7c.5 0 .9.17 1.25.52s.55.77.55 1.27v1h4.23v-1c0-.5.17-.97.52-1.3s.75-.5 1.23-.5h.7c.5 0 .9.14 1.25.5.3.34.5.76.5 1.26v1h1.4c.4 0 .7.13 1 .4.23.3.4.63.4 1z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Camera.js b/apolloschurchapp/src/ui/Icon/icons/Camera.js
new file mode 100644
index 0000000..0572a9e
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Camera.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M6.24 5.7l.52-1.23C7.18 3.67 8.2 3 9.1 3h5.8c1 0 2 .65 2.34 1.47l.52 1.23H20c1.16 0 2.06.86 2 1.88V19.1c.06 1.12-.84 1.97-2 1.9H4c-1.07.07-1.97-.78-2-1.9V7.6c.03-1.03.92-1.87 2-1.88h2.24zm2.17-.58l-.7 1.7-.22.5H4.02c-.16 0-.3.13-.3.28v11.58c0 .14.14.26.3.26h16.02c.16 0 .3-.1.3-.26V7.6c0-.14-.14-.27-.3-.27H16.6l-.2-.5-.72-1.7c-.1-.26-.5-.5-.78-.5H9.18c-.28 0-.67.25-.77.5zm3.65 12.16c-2.68 0-4.86-2.06-4.86-4.6 0-2.53 2.17-4.6 4.85-4.6 2.7 0 4.87 2.07 4.87 4.6 0 2.54-2.17 4.6-4.86 4.6zm0-1.62c1.74 0 3.15-1.33 3.15-2.97 0-1.67-1.42-3-3.16-3-1.74 0-3.15 1.33-3.15 3 0 1.62 1.4 2.95 3.13 2.95z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Check.js b/apolloschurchapp/src/ui/Icon/icons/Check.js
new file mode 100644
index 0000000..05fc873
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Check.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M19.18 6.32l-9.9 9.65-4.46-4.3c-.22-.23-.48-.33-.76-.33-.3 0-.54.1-.76.32-.2.2-.3.43-.3.7 0 .3.1.54.3.73l5.25 5.03c.2.22.44.32.74.32s.53-.1.72-.32l.14-.13L20.7 7.77c.2-.2.3-.43.3-.72 0-.3-.1-.53-.3-.72-.22-.2-.47-.32-.76-.32-.28 0-.54.1-.76.33z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/CheckboxChecked.js b/apolloschurchapp/src/ui/Icon/icons/CheckboxChecked.js
new file mode 100644
index 0000000..53bff59
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/CheckboxChecked.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M2.57,0 L19.43,0 C20.85,0 22,1.15 22,2.57 L22,19.43 C22,20.85 20.85,22 19.43,22 L2.57,22 C1.15,22 0,20.85 0,19.43 L0,2.57 C0,1.15 1.15,0 2.57,0 Z M17.75,4.56 L8.45,14.38 L4.25,9.98 C4.05,9.78 3.8,9.68 3.53,9.68 C3.26,9.68 3.03,9.78 2.83,9.98 C2.63,10.18 2.53,10.43 2.53,10.72 C2.53,11.02 2.63,11.26 2.83,11.46 L7.76,16.6 C7.94,16.8 8.16,16.92 8.46,16.92 C8.73,16.92 8.96,16.82 9.16,16.6 L9.28,16.47 L19.18,6.02 C19.38,5.82 19.46,5.58 19.46,5.29 C19.46,4.99 19.36,4.73 19.18,4.54 C18.98,4.32 18.74,4.21 18.48,4.21 C18.2,4.21 17.96,4.31 17.75,4.54 L17.75,4.56 Z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/CheckboxUnchecked.js b/apolloschurchapp/src/ui/Icon/icons/CheckboxUnchecked.js
new file mode 100644
index 0000000..ac7c319
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/CheckboxUnchecked.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M3.75 20.25h16.5V3.75H3.75v16.5zM1 3.75C1 2.22 2.23 1 3.74 1h16.52C21.76 1 23 2.23 23 3.74v16.52c0 1.5-1.23 2.74-2.74 2.74H3.74C2.24 23 1 21.77 1 20.26V3.74z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Chromecast.js b/apolloschurchapp/src/ui/Icon/icons/Chromecast.js
new file mode 100644
index 0000000..c312fdb
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Chromecast.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M3 17.27v2.46h2.45c0-1.36-1.1-2.46-2.45-2.46zM3 14v1.64c2.26 0 4.1 1.83 4.1 4.1h1.63C8.73 16.54 6.17 14 3 14zm0-3.27v1.63c4.07 0 7.36 3.3 7.36 7.37H12c0-4.98-4.03-9-9-9zM19.36 5H4.64C3.74 5 3 5.74 3 6.64V9.1h1.64V6.63h14.72V18.1h-5.72v1.63h5.72c.9 0 1.64-.74 1.64-1.64V6.62c0-.9-.74-1.64-1.64-1.64z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/CircleOutlineCheckMark.js b/apolloschurchapp/src/ui/Icon/icons/CircleOutlineCheckMark.js
new file mode 100644
index 0000000..b8bfa94
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/CircleOutlineCheckMark.js
@@ -0,0 +1,25 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path, Polygon } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 60 61" {...otherProps}>
+    <Polygon
+      fill={fill}
+      points="25.9570657 39.7210789 26.6666667 40.4357125 27.3762676 39.7210789 40.709601 26.293183 41.4092427 25.5885792 40.709601 24.8839754 38.0429343 22.1983962 37.3333333 21.4837626 36.6237324 22.1983962 25.9570657 32.940713 27.3762676 32.940713 23.3762676 28.9123442 22.6666667 28.1977106 21.9570657 28.9123442 19.290399 31.5979234 18.5907573 32.3025272 19.290399 33.007131"
+    />
+    <Path
+      fill={fill}
+      d="M30,54.903 L30,54.903 C43.254834,54.903 54,44.157834 54,30.903 C54,17.648166 43.254834,6.903 30,6.903 C16.745166,6.903 6,17.648166 6,30.903 C6,44.157834 16.745166,54.903 30,54.903 L30,54.903 Z M30,60.903 L30,60.903 C13.4314575,60.903 0,47.4715425 0,30.903 C0,14.3344575 13.4314575,0.903 30,0.903 C46.5685425,0.903 60,14.3344575 60,30.903 C60,47.4715425 46.5685425,60.903 30,60.903 L30,60.903 Z"
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/CircleOutlineXMark.js b/apolloschurchapp/src/ui/Icon/icons/CircleOutlineXMark.js
new file mode 100644
index 0000000..6ab39b4
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/CircleOutlineXMark.js
@@ -0,0 +1,25 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 60 61" {...otherProps}>
+    <Path
+      fill={fill}
+      d="M30,54.33 L30,54.33 C43.254834,54.33 54,43.584834 54,30.33 C54,17.075166 43.254834,6.33 30,6.33 C16.745166,6.33 6,17.075166 6,30.33 C6,43.584834 16.745166,54.33 30,54.33 L30,54.33 Z M30,60.33 L30,60.33 C13.4314575,60.33 0,46.8985425 0,30.33 C0,13.7614575 13.4314575,0.33 30,0.33 C46.5685425,0.33 60,13.7614575 60,30.33 C60,46.8985425 46.5685425,60.33 30,60.33 L30,60.33 Z"
+    />
+    <Path
+      fill={fill}
+      d="M28.784,33.438 L28.784,33.438 L27.9222343,33.438 L27.7949654,32.5856839 L26.7389654,25.5136839 L26.728,25.366 L26.728,16.502 L26.728,15.502 L27.728,15.502 L32.272,15.502 L33.272,15.502 L33.272,16.502 L33.272,25.366 L33.2610346,25.5136839 L32.2050346,32.5856839 L32.0777657,33.438 L31.216,33.438 L28.784,33.438 Z M26.504,41.662 L26.504,41.662 C26.504,39.6282997 27.9530061,38.166 30,38.166 C32.0469939,38.166 33.496,39.6282997 33.496,41.662 C33.496,43.6957003 32.0469939,45.158 30,45.158 C27.9530061,45.158 26.504,43.6957003 26.504,41.662 L26.504,41.662 Z"
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Close.js b/apolloschurchapp/src/ui/Icon/icons/Close.js
new file mode 100644
index 0000000..75d4164
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Close.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M13.07 12l7.2-7.2.5-.5c.3-.3.3-.78 0-1.08-.3-.3-.76-.3-1.06 0l-.5.5-7.2 7.2-7.2-7.2-.5-.5c-.3-.3-.77-.3-1.07 0-.3.3-.3.77 0 1.07l.5.5 7.2 7.2-7.7 7.7c-.3.3-.3.77 0 1.07.3.3.77.3 1.07 0l7.7-7.7 7.7 7.7c.3.3.78.3 1.08 0 .3-.3.3-.77 0-1.07l-7.7-7.7z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Credit.js b/apolloschurchapp/src/ui/Icon/icons/Credit.js
new file mode 100644
index 0000000..228ea79
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Credit.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M1.7 3.43c-.84 0-1.7.86-1.7 1.7v13.73c0 .85.86 1.7 1.7 1.7h20.6c.84 0 1.7-.85 1.7-1.7V5.14c0-.85-.86-1.7-1.7-1.7H1.7zm0 15.43v-6h20.6v6H1.7zm0-10.65V5.16h20.6V8.2H1.7z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Download.js b/apolloschurchapp/src/ui/Icon/icons/Download.js
new file mode 100644
index 0000000..efe61ba
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Download.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M13 13.34l3.2-3.2c.4-.4 1.04-.4 1.43 0 .4.38.4 1 0 1.4l-4.92 4.92c-.2.2-.46.3-.73.3s-.54-.1-.75-.3l-4.9-4.92c-.4-.4-.4-1.02 0-1.4.38-.4 1.02-.4 1.4 0L11 13.4V3.02c0-.57.44-1.02 1-1.02.55 0 1 .45 1 1v10.34zm-9 .7v5.93c0 .33.4.7 1 .7h14c.6 0 1-.37 1-.7v-5.94c0-.33 2-1.5 2 0v5.94c0 1.5-1.34 2.7-3 2.7H5c-1.66 0-3-1.2-3-2.7v-5.94c0-1.5 2-.33 2 0z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Dropdown.js b/apolloschurchapp/src/ui/Icon/icons/Dropdown.js
new file mode 100644
index 0000000..de47137
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Dropdown.js
@@ -0,0 +1,18 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path d="M7 10l5 5 5-5z" fill={fill} />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Empty.js b/apolloschurchapp/src/ui/Icon/icons/Empty.js
new file mode 100644
index 0000000..503bc97
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Empty.js
@@ -0,0 +1,16 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps} />
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Failed.js b/apolloschurchapp/src/ui/Icon/icons/Failed.js
new file mode 100644
index 0000000..e917a5a
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Failed.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 512 512" {...otherProps}>
+    <Path
+      d="M256 51c113 0 205 92 205 205 0 113-92 205-205 205-113 0-205-92-205-205 0-113 92-205 205-205z m0-51c-141 0-256 115-256 256 0 141 115 256 256 256 141 0 256-115 256-256 0-141-115-256-256-256z m109 188l-41-41-68 68-68-68-41 41 68 68-68 68 41 41 68-68 68 68 41-41-68-68z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Filter.js b/apolloschurchapp/src/ui/Icon/icons/Filter.js
new file mode 100644
index 0000000..ebe4d5e
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Filter.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M14.07 18.6c0-.42-.33-.75-.74-.75h-2.66c-.4 0-.74.33-.74.74 0 .4.33.7.74.7h2.66c.4 0 .74-.35.74-.76zM2.74 7.47h18.52c.4 0 .74-.33.74-.74 0-.4-.33-.74-.74-.74H2.74c-.4 0-.74.3-.74.7 0 .4.33.73.74.73zm15.8 5.2c0-.42-.32-.75-.73-.75H6.2c-.42 0-.75.33-.75.74 0 .4.33.74.74.74h11.6c.4 0 .7-.32.7-.73z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Fullscreen.js b/apolloschurchapp/src/ui/Icon/icons/Fullscreen.js
new file mode 100644
index 0000000..7258643
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Fullscreen.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M22 2.83V9.5h-1.67V3.67H14.5V2H22v.83zM21.17 22H22v-7.5h-1.67v5.83H14.5V22h6.67zm-17.5-1.67V14.5H2V22h7.5v-1.67H3.67zM2.83 2H2v7.5h1.67V3.67H9.5V2H2.83z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Groups.js b/apolloschurchapp/src/ui/Icon/icons/Groups.js
new file mode 100644
index 0000000..f65dcb6
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Groups.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M15.6 4c1.77 0 3.2 1.43 3.2 3.2V8c0 1.77-1.43 3.2-3.2 3.2-.44 0-.85-.1-1.23-.25.28-.66.43-1.4.43-2.15V8c0-1.26-.42-2.4-1.12-3.35.54-.4 1.2-.65 1.92-.65zm-6.4 8.8c-2.2 0-4-1.8-4-4V8c0-2.2 1.8-4 4-4s4 1.8 4 4v.8c0 2.2-1.8 4-4 4zm11.07 1.12c.57.26.93.83.93 1.46v2.22c0 .44-.36.8-.8.8h-2.44c-.17-2.38-1.82-4.4-4.15-5-.3-.08-.6-.14-.9-.2.85-.23 1.77-.4 2.7-.4 1.9 0 3.67.65 4.7 1.12zM15.6 20H2.8c-.44 0-.8-.36-.8-.8v-.38C2 17 3.22 15.4 4.98 14.95c1.18-.3 2.64-.55 4.22-.55 1.58 0 3.04.25 4.22.55 1.76.45 2.98 2.05 2.98 3.87v.38c0 .44-.36.8-.8.8z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Home.js b/apolloschurchapp/src/ui/Icon/icons/Home.js
new file mode 100644
index 0000000..b015a25
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Home.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M19,2.5 L16.5,2.5 C15.9477153,2.5 15.5,2.05228475 15.5,1.5 C15.5,0.94771525 15.9477153,0.5 16.5,0.5 L20,0.5 C20.5522847,0.5 21,0.94771525 21,1.5 L21,5 C21,5.55228475 20.5522847,6 20,6 C19.4477153,6 19,5.55228475 19,5 L19,2.5 Z M21,22 C21,22.5522847 20.5522847,23 20,23 L14,23 C13.4477153,23 13,22.5522847 13,22 L13,17 L10,17 L10,22 C10,22.5522847 9.55228475,23 9,23 L4,23 C3.44771525,23 3,22.5522847 3,22 L3,13 C3,12.4477153 3.44771525,12 4,12 C4.55228475,12 5,12.4477153 5,13 L5,21 L8,21 L8,16 C8,15.4477153 8.44771525,15 9,15 L14,15 C14.5522847,15 15,15.4477153 15,16 L15,21 L19,21 L19,13 C19,12.4477153 19.4477153,12 20,12 C20.5522847,12 21,12.4477153 21,13 L21,22 Z M12.7071068,0.292893219 L23.7071068,11.2928932 C24.0976311,11.6834175 24.0976311,12.3165825 23.7071068,12.7071068 C23.3165825,13.0976311 22.6834175,13.0976311 22.2928932,12.7071068 L12,2.41421356 L1.70710678,12.7071068 C1.31658249,13.0976311 0.683417511,13.0976311 0.292893219,12.7071068 C-0.0976310729,12.3165825 -0.0976310729,11.6834175 0.292893219,11.2928932 L11.2928932,0.292893219 C11.6834175,-0.0976310729 12.3165825,-0.0976310729 12.7071068,0.292893219 Z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Information.js b/apolloschurchapp/src/ui/Icon/icons/Information.js
new file mode 100644
index 0000000..5508914
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Information.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm2.2 15.24c-.54.2-2.44 1.13-3.54.16-.33-.3-.5-.66-.5-1.1 0-.83.28-1.56.77-3.3.1-.33.2-.76.2-1.1 0-.58-.23-.73-.83-.73-.3 0-.62.1-.9.2l.15-.65c.65-.27 1.48-.6 2.18-.6 1.06 0 1.84.53 1.84 1.53 0 .3-.05.8-.16 1.15l-.6 2.15c-.1.44-.3 1.4 0 1.68s1.2.13 1.6-.06l-.14.67zm-1-8.57c-.68 0-1.24-.56-1.24-1.25 0-.7.56-1.25 1.25-1.25.7 0 1.3.56 1.3 1.25 0 .7-.55 1.25-1.24 1.25z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Like.js b/apolloschurchapp/src/ui/Icon/icons/Like.js
new file mode 100644
index 0000000..d56487f
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Like.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M13.13 20.2h-2.26l1.4-1.4.03-.02.03-.03c6.37-5.6 8.06-7.67 8.06-10.27 0-2.2-1.7-3.9-3.9-3.9-1.23 0-2.48.6-3.28 1.54L12 7.57l-1.23-1.45C9.97 5.18 8.72 4.6 7.5 4.6c-2.2 0-3.9 1.67-3.9 3.88 0 2.6 1.7 4.66 8.07 10.27l.03.03.04.03 1.4 1.4zM10.8 4.03l-.03.03h.1c.4.3.8.64 1.13 1.03.33-.4.72-.75 1.14-1.05h.1c-.02 0-.03-.02-.04-.03.97-.66 2.13-1.03 3.3-1.03C19.6 3 22 5.4 22 8.47c0 3.8-3.4 6.88-8.6 11.46l-1.4 1.4-1.4-1.4C5.4 15.36 2 12.27 2 8.48 2 5.38 4.4 3 7.5 3c1.17 0 2.33.37 3.3 1.03z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/LikeSolid.js b/apolloschurchapp/src/ui/Icon/icons/LikeSolid.js
new file mode 100644
index 0000000..3ecc3a4
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/LikeSolid.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M10.8 4.03l-.03.03h.1c.4.3.8.64 1.13 1.03.33-.4.72-.75 1.14-1.05h.1c-.02 0-.03-.02-.04-.03.97-.66 2.13-1.03 3.3-1.03C19.6 3 22 5.4 22 8.47c0 3.8-3.4 6.88-8.6 11.46l-1.4 1.4-1.4-1.4C5.4 15.36 2 12.27 2 8.48 2 5.38 4.4 3 7.5 3c1.17 0 2.33.37 3.3 1.03z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Locate.js b/apolloschurchapp/src/ui/Icon/icons/Locate.js
new file mode 100644
index 0000000..9506ea1
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Locate.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M12 8.36C10 8.36 8.36 10 8.36 12S10 15.64 12 15.64 15.64 14 15.64 12 14 8.36 12 8.36zm8.13 2.73c-.43-3.8-3.43-6.8-7.23-7.3V2h-1.8v1.87C7.3 4.3 4.3 7.3 3.9 11.1H2v1.8h1.87c.42 3.8 3.43 6.8 7.22 7.23V22h1.8v-1.87c3.8-.42 6.8-3.43 7.2-7.22H22v-1.8h-1.87zM12 18.3c-3.52 0-6.36-2.84-6.36-6.36 0-3.5 2.84-6.36 6.36-6.36 3.52 0 6.36 2.85 6.36 6.37 0 3.5-2.84 6.35-6.36 6.35z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Lock.js b/apolloschurchapp/src/ui/Icon/icons/Lock.js
new file mode 100644
index 0000000..b6d1591
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Lock.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M9 11.18h6.4V8.73c0-.9-.3-1.68-.94-2.32-.62-.6-1.38-.9-2.26-.9-.88 0-1.64.3-2.26.97C9.3 7.1 9 7.87 9 8.77v2.45zm10.4 1.23v7.4c0 .37-.12.66-.35.9-.23.24-.52.36-.85.36h-12c-.33 0-.62-.1-.85-.35-.23-.24-.35-.53-.35-.87v-7.4c0-.32.12-.6.35-.85.23-.24.52-.36.85-.36h.4V8.74c0-1.57.55-2.92 1.65-4.04C9.35 3.5 10.67 3 12.2 3c1.53 0 2.85.56 3.95 1.7 1.1 1.1 1.65 2.46 1.65 4.03v2.45h.4c.33 0 .62.12.85.36.23.24.35.53.35.87z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Mute.js b/apolloschurchapp/src/ui/Icon/icons/Mute.js
new file mode 100644
index 0000000..01d9c4c
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Mute.js
@@ -0,0 +1,25 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="1.5 -0.5 24 24" {...otherProps}>
+    <Path
+      d="M10.82 16.73l3.28 2.1a1.5 1.5 0 0 0 2.4-1.2v-5.25M16.5 5.63a1.5 1.5 0 0 0-2.4-1.2l-6.6 4.2h-3a1.5 1.5 0 0 0-1.5 1.5v3a1.5 1.5 0 0 0 1.5 1.5h.63M3 19.88l18-15"
+      fill={'none'}
+      stroke={fill}
+      strokeWidth={1.5}
+      strokeLinecap={'round'}
+      strokeLinejoin={'round'}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Pause.js b/apolloschurchapp/src/ui/Icon/icons/Pause.js
new file mode 100644
index 0000000..72c6a11
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Pause.js
@@ -0,0 +1,18 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path d="M7 3h1.67v18H7V3zm8.33 0H17v18h-1.67V3z" fill={fill} />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Pin.js b/apolloschurchapp/src/ui/Icon/icons/Pin.js
new file mode 100644
index 0000000..b2fedda
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Pin.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M11.83 2C8 2 4 4.96 4 9.83c0 4.6 6.96 11.65 7.22 11.9.17.18.35.27.6.27.27 0 .44-.1.6-.26.28-.26 7.23-7.3 7.23-11.9 0-4.88-4-7.84-7.82-7.84zm0 10.43c-1.48 0-2.6-1.13-2.6-2.6 0-1.48 1.12-2.6 2.6-2.6 1.47 0 2.6 1.12 2.6 2.6 0 1.47-1.13 2.6-2.6 2.6z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Play.js b/apolloschurchapp/src/ui/Icon/icons/Play.js
new file mode 100644
index 0000000..f9e4b24
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Play.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M7.63 3.34v17.5c-.04-.12-.17-.25-.35-.33-.18-.06-.37-.1-.5-.04l.14-.1 11.13-8.4c.22-.17.22-.2 0-.36L7 3.65l-.14-.1c.1.03.28.02.45-.07.2-.1.3-.2.36-.3v.13zM6 3.34c0-1.3.88-1.73 1.97-.95l11.05 7.9c1.1.8 1.1 2.06.04 2.86l-11.13 8.4C6.86 22.4 6 22 6 20.7V3.34z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Print.js b/apolloschurchapp/src/ui/Icon/icons/Print.js
new file mode 100644
index 0000000..6f774d0
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Print.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M6.42 8.25H4.58c-.7 0-1.3.57-1.3 1.27v5.1c0 .44.2.73.66.73h3.22v3.78h9.68v-6.45H7.16v2.67h-1.3V11.4h12.27v9.02H5.86v-3.78H3.94C2.77 16.64 2 15.5 2 14.6V9.53c0-1.4 1.16-2.56 2.58-2.56h14.76c1.5 0 2.66 1.15 2.66 2.56v5.1c0 1.14-.87 2-2.03 2.02h-1.84v-1.3h1.84c.44 0 .74-.28.74-.73v-5.1c0-.7-.55-1.27-1.26-1.26h-13zm9.13 6.92v-.74h-7.1v.74h7.1zm0 2.4h-7.1v-.75h7.1v.74zm-8.4-10.6H5.88V3h12.26v3.96h-1.3V4.3H7.17v2.66z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Profile.js b/apolloschurchapp/src/ui/Icon/icons/Profile.js
new file mode 100644
index 0000000..24e12d6
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Profile.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M22,22.8 C22,23.4627417 21.4527925,24 20.7777778,24 C20.1027631,24 19.5555556,23.4627417 19.5555556,22.8 L19.5555556,20.4 C19.5555556,18.4117749 17.913933,16.8 15.8888889,16.8 L6.11111111,16.8 C4.08606703,16.8 2.44444444,18.4117749 2.44444444,20.4 L2.44444444,22.8 C2.44444444,23.4627417 1.89723692,24 1.22222222,24 C0.547207528,24 0,23.4627417 0,22.8 L0,20.4 C0,17.0862915 2.73603764,14.4 6.11111111,14.4 L15.8888889,14.4 C19.2639624,14.4 22,17.0862915 22,20.4 L22,22.8 Z M11,12 C7.62492653,12 4.88888889,9.3137085 4.88888889,6 C4.88888889,2.6862915 7.62492653,0 11,0 C14.3750735,0 17.1111111,2.6862915 17.1111111,6 C17.1111111,9.3137085 14.3750735,12 11,12 Z M11,9.6 C13.0250441,9.6 14.6666667,7.9882251 14.6666667,6 C14.6666667,4.0117749 13.0250441,2.4 11,2.4 C8.97495592,2.4 7.33333333,4.0117749 7.33333333,6 C7.33333333,7.9882251 8.97495592,9.6 11,9.6 Z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/RadioChecked.js b/apolloschurchapp/src/ui/Icon/icons/RadioChecked.js
new file mode 100644
index 0000000..a01a630
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/RadioChecked.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M12 24C5.37 24 0 18.63 0 12S5.37 0 12 0s12 5.37 12 12-5.37 12-12 12zm0-2.4c5.3 0 9.6-4.3 9.6-9.6S17.3 2.4 12 2.4 2.4 6.7 2.4 12s4.3 9.6 9.6 9.6zm0-2.4c-3.98 0-7.2-3.22-7.2-7.2S8.02 4.8 12 4.8s7.2 3.22 7.2 7.2-3.22 7.2-7.2 7.2z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/RadioUnchecked.js b/apolloschurchapp/src/ui/Icon/icons/RadioUnchecked.js
new file mode 100644
index 0000000..873beab
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/RadioUnchecked.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M12 24C5.37 24 0 18.63 0 12S5.37 0 12 0s12 5.37 12 12-5.37 12-12 12zm0-2.4c5.3 0 9.6-4.3 9.6-9.6S17.3 2.4 12 2.4 2.4 6.7 2.4 12s4.3 9.6 9.6 9.6z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Repeat.js b/apolloschurchapp/src/ui/Icon/icons/Repeat.js
new file mode 100644
index 0000000..718ee4d
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Repeat.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M6.22 16.55h11.45l-.3.04c1.32-.5 2.1-1.1 2.52-2 .3-.8.4-1.6.3-2.3l-.1-.2 1.7-.4v.3c.14 1 .05 2.06-.43 3.1-.6 1.33-1.8 2.34-3.56 2.9l-.13.06H6.04l2.9 2.9-1.3 1.3-4.9-4.9.1-.1v-.1l.7-.66v-.1h.1l4.26-3.9 1.22 1.4-2.8 2.62zm11.56-9.1H6.33l.3-.04c-1.32.5-2.1 1.1-2.52 2-.3.8-.4 1.6-.3 2.3l.1.2-1.7.4V12c-.14-1-.05-2.06.43-3.1.6-1.33 1.8-2.34 3.56-2.9l.13-.06H18L15.1 3l1.3-1.3 4.9 4.9-.08.1.08.1-.72.65v.1h-.1l-4.26 3.95-1.25-1.35 2.8-2.62z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/RepeatAll.js b/apolloschurchapp/src/ui/Icon/icons/RepeatAll.js
new file mode 100644
index 0000000..ab0c962
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/RepeatAll.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M2 12l3.87-5H22v10H5.87L2 12zm7.5-1.53l.55 1.73h-1.1l.56-1.73zm1.08 3.4h1.1L10.1 9.5H8.94l-1.6 4.38h1.1l.25-.82h1.6l.26.8zm5.47-4.37v4.38h3.1v-.9h-2V9.5h-1.1zm-3.78 0v4.38h3.1v-.9h-2V9.5h-1.1z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/RepeatOne.js b/apolloschurchapp/src/ui/Icon/icons/RepeatOne.js
new file mode 100644
index 0000000..65be25d
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/RepeatOne.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M2 12l3.87-5H22v10H5.87L2 12zm7.55-.56v.67c0 .7-.32 1.1-.96 1.1-.7 0-1-.4-1-1.03v-.66c0-.63.3-1.05.93-1.05.63 0 .95.4.95 1.05zm1.1.62v-.57c0-1.2-.7-2-2.06-2-1.4 0-2.1.8-2.1 2v.5c0 1.13.7 2 2.03 2 1.35 0 2.06-.87 2.06-2zm5.5 1.9h3.28v-.9h-2.17v-.87h1.97v-.9h-1.97v-.88h2.17v-.9h-3.28v4.38zm-.9 0V9.6h-1.08v2.54l-1.7-2.55h-1.05v4.3h1.08v-2.5l1.7 2.55h1.05z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Search.js b/apolloschurchapp/src/ui/Icon/icons/Search.js
new file mode 100644
index 0000000..ce17480
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Search.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M20.77 18.56l-3.42-3.42c.82-1.24 1.3-2.72 1.3-4.3 0-4.33-3.5-7.84-7.82-7.84S3 6.5 3 10.83c0 4.3 3.5 7.82 7.83 7.82 1.6 0 3.07-.48 4.3-1.3l3.43 3.42c.3.3.8.3 1.1 0l1.1-1.1c.32-.3.32-.8 0-1.1zm-16.2-7.73c0-3.46 2.8-6.26 6.26-6.26 3.45 0 6.26 2.8 6.26 6.26 0 3.45-2.83 6.26-6.28 6.26-3.46 0-6.26-2.83-6.26-6.28z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Sections.js b/apolloschurchapp/src/ui/Icon/icons/Sections.js
new file mode 100644
index 0000000..ecbe137
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Sections.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M2.4,2.4 L2.4,8.4 L8.4,8.4 L8.4,2.4 L2.4,2.4 Z M1.2,0 L9.6,0 C10.2627417,0 10.8,0.5372583 10.8,1.2 L10.8,9.6 C10.8,10.2627417 10.2627417,10.8 9.6,10.8 L1.2,10.8 C0.5372583,10.8 0,10.2627417 0,9.6 L0,1.2 C0,0.5372583 0.5372583,0 1.2,0 Z M14.4,0 L22.8,0 C23.4627417,0 24,0.5372583 24,1.2 L24,9.6 C24,10.2627417 23.4627417,10.8 22.8,10.8 L14.4,10.8 C13.7372583,10.8 13.2,10.2627417 13.2,9.6 L13.2,1.2 C13.2,0.5372583 13.7372583,0 14.4,0 Z M15.6,2.4 L15.6,8.4 L21.6,8.4 L21.6,2.4 L15.6,2.4 Z M14.4,13.2 L22.8,13.2 C23.4627417,13.2 24,13.7372583 24,14.4 L24,22.8 C24,23.4627417 23.4627417,24 22.8,24 L14.4,24 C13.7372583,24 13.2,23.4627417 13.2,22.8 L13.2,14.4 C13.2,13.7372583 13.7372583,13.2 14.4,13.2 Z M15.6,15.6 L15.6,21.6 L21.6,21.6 L21.6,15.6 L15.6,15.6 Z M1.2,13.2 L9.6,13.2 C10.2627417,13.2 10.8,13.7372583 10.8,14.4 L10.8,22.8 C10.8,23.4627417 10.2627417,24 9.6,24 L1.2,24 C0.5372583,24 0,23.4627417 0,22.8 L0,14.4 C0,13.7372583 0.5372583,13.2 1.2,13.2 Z M2.4,15.6 L2.4,21.6 L8.4,21.6 L8.4,15.6 L2.4,15.6 Z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Settings.js b/apolloschurchapp/src/ui/Icon/icons/Settings.js
new file mode 100644
index 0000000..8a5674e
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Settings.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M18.9108 12.8764c0-.0527.0054-.0964.034-.2803.035-.224.0505-.369.0505-.554 0-.535-.0164-.745-.1206-1.054l-.0246-.062-.643.283.443.541 1.775-1.419.055-.048c.379-.374.441-.861.217-1.303l-.018-.034-1.69-2.921-.046-.0803-.066-.066c-.299-.295-.754-.4074-1.228-.2514l-.039.014-2.113.8345.262.646.44-.543c-.4042-.3196-.756-.516-1.562-.914l-.315.622.6965-.1053-.338-2.17-.697.106.668.22C14.895 3.602 14.2855 3 13.642 3h-3.3812c-.5353 0-1.127.4382-1.127 1.0294h.7044l-.6968-.102-.338 2.2535.6967.101-.222-.66c-.293.096-.565.233-.874.427-.16.101-.687.459-.731.488l.391.578.271-.642-2.029-.834-.048-.018c-.512-.169-.948-.025-1.312.335l-.066.065-.047.081-1.691 2.922.612.345-.498-.492c-.454.448-.24 1.08.169 1.484l.033.033.038.0283 1.775 1.3353.427-.5534h-.705c0 .053-.005.0967-.034.2806-.035.224-.05.3693-.05.554 0 .5354.0167.7457.121 1.0546l.669-.22-.443-.541-1.775 1.419-.055.049c-.379.3742-.44.861-.216 1.3035l.019.034 1.69 2.921.047.081.067.066c.299.295.754.408 1.228.252l.039-.014 2.113-.835-.2616-.646-.44.543c.404.32.756.516 1.562.914l.315-.622-.6966.106.338 2.17.696-.1055H9.22c0 .589.5207 1.0298 1.127 1.0298h3.3813c.5355 0 1.127-.438 1.127-1.03h-.704l.6966.106.338-2.17-.696-.106.315.622c.806-.3974 1.157-.594 1.562-.913l-.44-.543-.262.646 2.113.8343.261-.645-.315.622c.517.2557 1.1934.033 1.452-.478l-.63-.311.6115.3455 1.6907-2.9214.018-.034c.249-.491.174-1.1504-.4-1.434l-.315.622.402-.5707-1.944-1.3355-.402.571h.7045zm-1.4088 0v.3634l.3022.2075 1.944 1.3354.0418.0287.0455.0224c-.1554-.0767-.2346-.21-.2477-.3262-.005-.0438.0008-.0737.0172-.106l.63.311-.6115-.3452-1.6906 2.9212-.019.034c.089-.1766.259-.2324.438-.144l-.054-.0238-2.114-.8346-.381-.1505-.321.2532c-.3.236-.596.402-1.312.755l-.326.161-.056.355-.338 2.17-.009.052v.053c0-.279.112-.362.282-.362h-3.381c.127 0 .281.13.281.361v-.054l-.008-.053-.338-2.17-.0558-.3557-.326-.161c-.7157-.353-1.012-.518-1.312-.755l-.3206-.253-.381.1502-2.113.834.262.646-.2225-.66c.0393-.013.14.012.2137.0846l-.498.492.6116-.345-1.69-2.921-.6116.345.63-.311c.038.0754.0178.2377-.0473.302l-.498-.492.443.5406 1.775-1.419.379-.303-.1548-.4574c-.04-.117-.049-.232-.049-.615 0-.097.009-.183.034-.3424.041-.2638.0505-.3394.0505-.492v-.344l-.278-.209-1.773-1.335-.427.553.498-.492c-.005-.0047-.011-.015-.0097-.01.0083.0262.015.0622.013.115-.0045.1236-.053.2596-.173.3777l.067-.066.0464-.081 1.691-2.921-.611-.345.498.4917c.022-.021.019-.019-.011-.009-.052.017-.101.016-.118.01l.223-.66-.271.642 2.029.8345.348.143.314-.2064c.062-.041.571-.3874.706-.472.22-.138.394-.226.563-.2816l.411-.135.0635-.4226.338-2.2535.0075-.0505v-.05c0 .278-.113.3615-.282.3615h3.381c-.221 0-.429-.2053-.33-.498l-.054.1595.026.1662.338 2.17.0553.3554.326.161c.716.353 1.0125.5186 1.312.7555l.321.253.381-.151 2.113-.8345-.2613-.646.223.66c-.039.013-.14-.012-.2137-.0848l.498-.492-.611.345 1.69 2.9213.6117-.345-.63.311c-.0385-.0756-.018-.238.0472-.302l.498.492-.443-.541-1.775 1.419-.379.304.1542.458.0245.063c.015.054.024.1694.024.552 0 .097-.009.183-.034.343-.041.2637-.0508.339-.0508.492zm-5.5506 1.391c-1.217 0-2.254-1.024-2.254-2.2257 0-1.2016 1.037-2.2256 2.254-2.2256s2.254 1.024 2.254 2.226-1.037 2.226-2.254 2.226zm0 1.391c1.995 0 3.6628-1.6468 3.6628-3.6167 0-1.97-1.6678-3.6167-3.6628-3.6167-1.995 0-3.663 1.6468-3.663 3.6167 0 1.97 1.668 3.6167 3.663 3.6167z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Share.js b/apolloschurchapp/src/ui/Icon/icons/Share.js
new file mode 100644
index 0000000..2691126
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Share.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M12.8 3.621v8.6568h-1.6V3.5545L8.6046 6.224c-.3037.3124-.7962.3124-1.1 0-.3037-.3124-.3037-.819 0-1.1314l3.826-3.9352c.174-.179.41-.2554.637-.2293.227-.026.463.0505.637.2295l3.826 3.9352c.3037.3125.3037.819 0 1.1314-.3038.3125-.7963.3125-1.1 0L12.8 3.621zM8.0338 8v1.5556H6.4012c-.4785 0-.8012.2822-.8012.544v9.8007c0 .2617.3228.544.7997.544h11.2006c.477 0 .7997-.2823.7997-.544v-9.8006c0-.2623-.3216-.544-.796-.544h-1.623V8h1.623C18.927 8 20 8.9403 20 10.0997v9.8006C20 21.06 18.9254 22 17.6003 22H6.3997C5.0744 22 4 21.0597 4 19.9003v-9.8006C4 8.94 5.0743 8 6.4012 8h1.6326z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Shuffle.js b/apolloschurchapp/src/ui/Icon/icons/Shuffle.js
new file mode 100644
index 0000000..0b521f6
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Shuffle.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M18.81 16.6543l-3.0324-3.0325 1.2128-1.2127 3.8464 3.8467.0167-.0156.4454.4778.7214.7215-.0252.0252.028.03-.8566.7986-.359.359-.0125-.0125-3.9745 3.7064-1.1697-1.2544 2.851-2.6588h-3.639c-1.3287 0-2.3808-.7553-3.2627-2.112-.6044-.9298.659-2.4274 1.0328-1.6996.7637 1.487 1.3937 2.0333 2.23 2.0333h3.947zm.1715-10.9927l-2.796-2.7958 1.213-1.2127 3.8463 3.8466.0167-.0155.4455.4777.7215.7216-.0252.0252.028.03-.8566.7986-.359.359-.0125-.0125-3.9746 3.7064-1.1697-1.2544L19.164 7.44h-4.301c-1.2457 0-2.0337 1.2122-3.4872 4.9388-.828 2.123-1.221 3.012-1.8256 3.942-.882 1.3566-1.934 2.112-3.2626 2.112H2v-1.7785h4.2876c1.2456 0 2.0336-1.2122 3.487-4.9388.8282-2.123 1.2212-3.012 1.8257-3.942.882-1.3566 1.934-2.112 3.2626-2.112h4.1184zM6.2875 7.44H2V5.6617h4.2876c1.3286 0 2.3807.7553 3.2626 2.112.6045.9298-.3475 2.6184-.7595 1.8623-.703-1.2902-1.7178-2.196-2.503-2.196z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/SkipBackThirty.js b/apolloschurchapp/src/ui/Icon/icons/SkipBackThirty.js
new file mode 100644
index 0000000..c2e760f
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/SkipBackThirty.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M8.742 3.226a10.636 10.636 0 0 1 2.152-.423l-1.385 1.6-.074-1.03L12.56 6.08c.736.638-.22 1.742-.957 1.104L8.478 4.476a.74.74 0 0 1-.236-.396.74.74 0 0 1 .19-.666l2.68-3.095a.73.73 0 0 1 1.105.956l-1.323 1.528a10.638 10.638 0 0 1 11.19 7.658 10.48 10.48 0 1 1-20.15 5.77.73.73 0 0 1 1.407-.388 9.02 9.02 0 1 0 17.34-4.972 9.182 9.182 0 0 0-11.51-6.248l.264-1.25L12.56 6.08l-.957 1.104-3.126-2.708a.708.708 0 0 1-.234-.388c-.05-.22.002-.459.188-.674a.725.725 0 0 1 .31-.188zm2.611 10.833c.395.641.397 1.432.005 2.075-.392.643-1.118 1.04-1.906 1.042h-.953c-1.043 0-1.89-.797-1.89-1.78 0-.328.283-.594.63-.594.348 0 .63.266.63.594 0 .327.282.593.63.593h.951c.337 0 .648-.17.816-.446a.844.844 0 0 0-.002-.889.955.955 0 0 0-.818-.442c-.831.002-.846-1.17-.014-1.187.512-.01.922-.404.923-.886.001-.483-.407-.878-.903-.89h-.953c-.348 0-.63.265-.63.593 0 .328-.282.593-.63.593-.347 0-.63-.265-.63-.593 0-.983.847-1.78 1.89-1.78h.969c1.196.028 2.149.951 2.146 2.08a2.012 2.012 0 0 1-.642 1.46c.147.133.276.286.381.457zm5.227 2.806c-.78.424-1.74.424-2.519 0-.78-.424-1.26-1.208-1.26-2.056v-2.374c0-1.31 1.128-2.373 2.52-2.373 1.39 0 2.518 1.062 2.518 2.373v2.374c0 .848-.48 1.632-1.26 2.056zm0-4.43c0-.655-.564-1.186-1.26-1.186-.695 0-1.259.531-1.259 1.186v2.374c0 .424.24.816.63 1.028.39.212.87.212 1.26 0 .389-.212.629-.604.629-1.028v-2.374z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/SkipForwardThirty.js b/apolloschurchapp/src/ui/Icon/icons/SkipForwardThirty.js
new file mode 100644
index 0000000..9cec2a9
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/SkipForwardThirty.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M15.39 3.24c.12.04.23.1.31.2.2.2.25.45.2.67a.7.7 0 0 1-.24.39l-3.18 2.69-.99-1.12 3.19-2.69.28 1.26a9.56 9.56 0 0 0-7.24.66 9.07 9.07 0 0 0-2.27 14.37 9.47 9.47 0 0 0 8.96 2.57 8.98 8.98 0 0 0 6.6-6.31c.1-.4.52-.62.92-.5.4.1.63.5.52.9-1 3.63-3.93 6.43-7.66 7.33a11 11 0 0 1-10.4-2.98A10.5 10.5 0 0 1 7 4c1.89-1 4.04-1.41 6.17-1.2L11.8 1.25a.72.72 0 0 1 .07-1.03.76.76 0 0 1 1.06.08l2.76 3.12c.18.18.25.43.2.67a.73.73 0 0 1-.24.4l-3.18 2.69c-.75.63-1.74-.48-.99-1.12l3.19-2.69-.07 1.03-1.43-1.6c.74.06 1.48.2 2.2.43zm-3.93 10.82c.39.64.4 1.43 0 2.07a2.23 2.23 0 0 1-1.9 1.05H8.6c-1.04 0-1.89-.8-1.89-1.78 0-.33.28-.6.63-.6s.63.27.63.6c0 .32.28.59.63.59h.95c.34 0 .65-.17.82-.45a.84.84 0 0 0 0-.89.96.96 0 0 0-.82-.44c-.83 0-.85-1.17-.02-1.18.52-.01.93-.4.93-.9 0-.47-.41-.87-.9-.88H8.6c-.35 0-.63.26-.63.6 0 .32-.28.59-.63.59s-.63-.27-.63-.6c0-.98.85-1.78 1.9-1.78h.96c1.2.03 2.15.95 2.15 2.08 0 .57-.25 1.09-.65 1.46.15.13.28.29.39.46zm5.22 2.8c-.78.43-1.74.43-2.52 0a2.35 2.35 0 0 1-1.26-2.05v-2.37c0-1.32 1.13-2.38 2.52-2.38 1.4 0 2.52 1.06 2.52 2.38v2.37c0 .85-.48 1.63-1.26 2.05zm0-4.42c0-.66-.56-1.2-1.26-1.2s-1.26.54-1.26 1.2v2.37c0 .42.24.82.63 1.03.4.2.87.2 1.26 0 .4-.21.63-.6.63-1.03v-2.37z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/SkipNext.js b/apolloschurchapp/src/ui/Icon/icons/SkipNext.js
new file mode 100644
index 0000000..7cdfe6e
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/SkipNext.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M13.78 4.168v15.67c0 .116.01.173.004.16-.07-.15-.238-.318-.502-.42-.265-.1-.512-.09-.678-.03-.013.006.038-.028.127-.11l7.404-6.805c.322-.296.325-.784.006-1.083l-7.437-6.977c-.09-.084-.142-.12-.13-.114.17.062.424.074.697-.028.272-.103.442-.276.514-.43.005-.012-.005.046-.005.164zm-1.626 0c0-1.24.763-1.528 1.707-.642l7.44 6.977c.943.885.935 2.31-.02 3.188l-7.4 6.808c-.952.876-1.724.58-1.724-.657V4.168zM2 4.168c0-1.24.78-1.54 1.737-.674l7.377 6.667c.96.87.978 2.297.048 3.185L3.69 20.47c-.934.89-1.69.606-1.69-.63V4.167zm1.625 0v15.67c0 .12.01.178.005.166-.072-.157-.245-.332-.522-.436-.28-.105-.54-.09-.712-.022-.015.005.036-.03.124-.113l7.472-7.13c.313-.297.306-.784-.017-1.075L2.6 4.56c-.09-.078-.14-.11-.126-.106.164.06.407.066.665-.033.255-.1.42-.262.49-.41.003-.01-.007.045-.007.16z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/SkipPrevious.js b/apolloschurchapp/src/ui/Icon/icons/SkipPrevious.js
new file mode 100644
index 0000000..818867d
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/SkipPrevious.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M11.846 4.168v15.67c0 1.238-.772 1.534-1.725.658l-7.4-6.805c-.95-.87-.96-2.3-.01-3.18l7.44-6.97c.95-.88 1.71-.59 1.71.64zm-1.625 0c0-.118-.01-.176 0-.165.07.155.24.328.52.43.28.103.53.09.7.026.02-.01-.04.03-.13.11l-7.44 6.98c-.32.3-.31.78.01 1.08l7.4 6.8c.09.08.14.11.13.11-.162-.06-.41-.07-.68.03-.26.1-.43.27-.5.42-.002.01.008-.05.008-.16V4.17zm11.78 0v15.67c0 1.238-.75 1.523-1.69.633l-7.47-7.12c-.93-.89-.91-2.31.05-3.18l7.38-6.67c.95-.87 1.73-.57 1.73.67zm-1.62 0c0-.115-.01-.17 0-.16.07.148.24.313.49.413.26.1.51.1.67.04.02 0-.03.03-.12.11l-7.38 6.66c-.32.29-.33.78-.012 1.08l7.47 7.13c.09.09.14.12.125.11-.173-.07-.433-.09-.712.02-.274.1-.45.28-.52.44-.004.01.006-.04.006-.16V4.17z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Text.js b/apolloschurchapp/src/ui/Icon/icons/Text.js
new file mode 100644
index 0000000..c9f763d
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Text.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M4.6 3.64v16.356c0 .004 0 .004-.003.004h14.806c-.004 0-.003 0-.003-.004V3.64c0-.004 0-.004.003-.004H4.597c.004 0 .003 0 .003.004zm-1.6 0C3 2.734 3.717 2 4.597 2h14.806C20.285 2 21 2.734 21 3.64v16.356c0 .906-.717 1.64-1.597 1.64H4.597c-.882 0-1.597-.734-1.597-1.64V3.64zm4 3.27c0 .45.366.817.818.817h8.364c.452 0 .818-.366.818-.818 0-.454-.366-.82-.818-.82H7.818c-.452 0-.818.366-.818.82zm0 4.908c0 .452.366.818.818.818h8.364c.452 0 .818-.366.818-.818 0-.452-.366-.818-.818-.818H7.818c-.452 0-.818.366-.818.818zm0 4.91c0 .45.366.817.818.817h4.764c.452 0 .818-.366.818-.818 0-.452-.366-.818-.818-.818H7.818c-.452 0-.818.364-.818.816z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Time.js b/apolloschurchapp/src/ui/Icon/icons/Time.js
new file mode 100644
index 0000000..03096b9
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Time.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67V7z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Umbrella.js b/apolloschurchapp/src/ui/Icon/icons/Umbrella.js
new file mode 100644
index 0000000..c146811
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Umbrella.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 32 32" {...otherProps}>
+    <Path
+      d="M27 14h5c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2v0zM27 14c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2v0 14c0 1.112-0.895 2-2 2-1.112 0-2-0.896-2-2.001v-1.494c0-0.291 0.224-0.505 0.5-0.505 0.268 0 0.5 0.226 0.5 0.505v1.505c0 0.547 0.444 0.991 1 0.991 0.552 0 1-0.451 1-0.991v-14.009c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2c0-1.105-1.119-2-2.5-2s-2.5 0.895-2.5 2c0-5.415 6.671-9.825 15-9.995v-1.506c0-0.283 0.224-0.499 0.5-0.499 0.268 0 0.5 0.224 0.5 0.499v1.506c8.329 0.17 15 4.58 15 9.995h-5z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Video.js b/apolloschurchapp/src/ui/Icon/icons/Video.js
new file mode 100644
index 0000000..702bed5
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Video.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M3.8182 5.7778v12.4444H14.2V5.7778H3.8182zM16 6v12c0 1.1046-.8954 2-2 2H4c-1.1046 0-2-.8954-2-2V6c0-1.1046.8954-2 2-2h10c1.1046 0 2 .8954 2 2zm4.1818 2.6952L16 11.8084v.3832l4.1818 3.251V8.695zM16 14.4957V9.4253l6-4.2178v13.585l-6-4.2968z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/VideoOff.js b/apolloschurchapp/src/ui/Icon/icons/VideoOff.js
new file mode 100644
index 0000000..be6a3f0
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/VideoOff.js
@@ -0,0 +1,26 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M3.8182 5.7778v12.4444H14.2V5.7778H3.8182zM16 6v12c0 1.1046-.8954 2-2 2H4c-1.1046 0-2-.8954-2-2V6c0-1.1046.8954-2 2-2h10c1.1046 0 2 .8954 2 2zm4.1818 2.6952L16 11.8084v.3832l4.1818 3.251V8.695zM16 14.4957V9.4253l6-4.2178v13.585l-6-4.2968z"
+      fill={fill}
+    />
+    <Path
+      d="M0.219669914,1.28033009 C-0.0732233047,0.987436867 -0.0732233047,0.512563133 0.219669914,0.219669914 C0.512563133,-0.0732233047 0.987436867,-0.0732233047 1.28033009,0.219669914 L23.7803301,22.7196699 C24.0732233,23.0125631 24.0732233,23.4874369 23.7803301,23.7803301 C23.4874369,24.0732233 23.0125631,24.0732233 22.7196699,23.7803301 L0.219669914,1.28033009 Z"
+      transform="translate(12.000000, 12.000000) scale(-1, 1) translate(-12.000000, -12.000000) "
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Volume.js b/apolloschurchapp/src/ui/Icon/icons/Volume.js
new file mode 100644
index 0000000..1161122
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Volume.js
@@ -0,0 +1,29 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path, G } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <G
+      fill={'none'}
+      stroke={fill}
+      strokeWidth={1.5}
+      strokeLinecap={'round'}
+      strokeLinejoin={'round'}
+    >
+      <Path d="M14.17 4.66a1.5 1.5 0 0 0-1.57.14L6 9H3a1.5 1.5 0 0 0-1.5 1.5v3A1.5 1.5 0 0 0 3 15h3l6.6 4.2A1.5 1.5 0 0 0 15 18V6a1.5 1.5 0 0 0-.83-1.34z" />
+      <Path d="M21.46 15.75a6.6 6.6 0 0 0 0-7.1" />
+      <Path d="M18.56 14.44a3.5 3.5 0 0 0 0-4.4" />
+      <Path d="M6 9v6" />
+    </G>
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/Warning.js b/apolloschurchapp/src/ui/Icon/icons/Warning.js
new file mode 100644
index 0000000..abd015a
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/Warning.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Svg, { Path } from 'react-native-svg';
+
+import makeIcon from './makeIcon';
+
+const Icon = makeIcon(({ size = 32, fill, ...otherProps } = {}) => (
+  <Svg width={size} height={size} viewBox="0 0 24 24" {...otherProps}>
+    <Path
+      d="M21.8955 19.741l-9.091-16.3178c-.3145-.5643-1.2945-.5643-1.609 0L2.1045 19.741c-.148.2662-.138.5865.0255.8433.1655.2585.46.4157.779.4157h18.182c.319 0 .6136-.1572.778-.4148.1647-.2577.1747-.578.0265-.8442zM12 18.4235c-.5018 0-.909-.3847-.909-.8588 0-.474.4072-.8588.909-.8588.502 0 .909.3845.909.8586 0 .474-.407.8588-.909.8588zm.909-3.4353h-1.818V8.9764h1.818v6.0118z"
+      fill={fill}
+    />
+  </Svg>
+));
+
+Icon.propTypes = {
+  size: PropTypes.number,
+  fill: PropTypes.string,
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/Icon/icons/index.js b/apolloschurchapp/src/ui/Icon/icons/index.js
new file mode 100644
index 0000000..4596f20
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/index.js
@@ -0,0 +1,58 @@
+export { default as ArrowBack } from './ArrowBack';
+export { default as ArrowDown } from './ArrowDown';
+export { default as ArrowNext } from './ArrowNext';
+export { default as ArrowUp } from './ArrowUp';
+export { default as Audio } from './Audio';
+export { default as Bank } from './Bank';
+export { default as BrandIcon } from './BrandIcon';
+export { default as Building } from './Building';
+export { default as Calendar } from './Calendar';
+export { default as Camera } from './Camera';
+export { default as Check } from './Check';
+export { default as CheckboxChecked } from './CheckboxChecked';
+export { default as CheckboxUnchecked } from './CheckboxUnchecked';
+export { default as CircleOutlineCheckMark } from './CircleOutlineCheckMark';
+export { default as CircleOutlineXMark } from './CircleOutlineXMark';
+export { default as Close } from './Close';
+export { default as Credit } from './Credit';
+export { default as Chromecast } from './Chromecast';
+export { default as Download } from './Download';
+export { default as Dropdown } from './Dropdown';
+export { default as Empty } from './Empty';
+export { default as Failed } from './Failed';
+export { default as Filter } from './Filter';
+export { default as Fullscreen } from './Fullscreen';
+export { default as Groups } from './Groups';
+export { default as Home } from './Home';
+export { default as Information } from './Information';
+export { default as Like } from './Like';
+export { default as LikeSolid } from './LikeSolid';
+export { default as Locate } from './Locate';
+export { default as Lock } from './Lock';
+export { default as Mute } from './Mute';
+export { default as Pause } from './Pause';
+export { default as Pin } from './Pin';
+export { default as Play } from './Play';
+export { default as Print } from './Print';
+export { default as Profile } from './Profile';
+export { default as RadioChecked } from './RadioChecked';
+export { default as RadioUnchecked } from './RadioUnchecked';
+export { default as Repeat } from './Repeat';
+export { default as RepeatAll } from './RepeatAll';
+export { default as RepeatOne } from './RepeatOne';
+export { default as Search } from './Search';
+export { default as Sections } from './Sections';
+export { default as Settings } from './Settings';
+export { default as Share } from './Share';
+export { default as Shuffle } from './Shuffle';
+export { default as SkipForwardThirty } from './SkipForwardThirty';
+export { default as SkipBackThirty } from './SkipBackThirty';
+export { default as SkipNext } from './SkipNext';
+export { default as SkipPrevious } from './SkipPrevious';
+export { default as Text } from './Text';
+export { default as Time } from './Time';
+export { default as Umbrella } from './Umbrella';
+export { default as Video } from './Video';
+export { default as VideoOff } from './VideoOff';
+export { default as Volume } from './Volume';
+export { default as Warning } from './Warning';
diff --git a/apolloschurchapp/src/ui/Icon/icons/makeIcon.js b/apolloschurchapp/src/ui/Icon/icons/makeIcon.js
new file mode 100644
index 0000000..ead36b1
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/icons/makeIcon.js
@@ -0,0 +1,10 @@
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+// Currently used to inject default fill color to icons.
+// Eventually can be used for other shared functionality between icons
+const makeIcon = withTheme(({ theme, fill, ...otherProps } = {}) => ({
+  fill: fill || theme.colors.text.primary,
+  ...otherProps,
+}));
+
+export default makeIcon;
diff --git a/apolloschurchapp/src/ui/Icon/index.js b/apolloschurchapp/src/ui/Icon/index.js
new file mode 100644
index 0000000..f213544
--- /dev/null
+++ b/apolloschurchapp/src/ui/Icon/index.js
@@ -0,0 +1,45 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import { compose, pure } from 'recompose';
+import { flow, camelCase, upperFirst, kebabCase } from 'lodash';
+
+import Placeholder from 'apolloschurchapp/src/ui/Placeholder';
+
+import * as Icons from './icons';
+
+const pascalCase = (string) =>
+  flow(
+    camelCase,
+    upperFirst
+  )(string);
+
+// Convenience component to render icons based on the icon's string name, like:
+// <Icon name="skip-next" {...allOtherPropsPassedToComponent} />
+//
+// Can also import the icon directly:
+// import { SkipNext } from 'Icon/icons';
+// <SkipNext />
+
+const enhance = compose(pure);
+
+const Icon = enhance(({ name, size, isLoading = false, ...otherProps }) => {
+  const IconComponent = Icons[pascalCase(name)];
+  return (
+    <Placeholder.Media size={size} hasRadius onReady={!isLoading}>
+      <IconComponent size={size} {...otherProps} />
+    </Placeholder.Media>
+  );
+});
+
+Icon.propTypes = {
+  name: PropTypes.oneOf(Object.keys(Icons).map(kebabCase)).isRequired,
+  size: PropTypes.number,
+  fill: PropTypes.string,
+  isLoading: PropTypes.bool,
+};
+
+Icon.defaultProps = {
+  size: 32, // 32 is the default size used within the svg component
+};
+
+export default Icon;
diff --git a/apolloschurchapp/src/ui/LayoutContext/LayoutContext.tests.js b/apolloschurchapp/src/ui/LayoutContext/LayoutContext.tests.js
new file mode 100644
index 0000000..f66a362
--- /dev/null
+++ b/apolloschurchapp/src/ui/LayoutContext/LayoutContext.tests.js
@@ -0,0 +1,20 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import { LayoutConsumer } from '.';
+
+describe(`LayoutContext Provider and Consumer`, () => {
+  it('provides safeAreaInsets', async () => {
+    renderer.create(
+      <Providers>
+        <LayoutConsumer>
+          {({ safeAreaInsets }) => {
+            expect(safeAreaInsets).toMatchSnapshot();
+          }}
+        </LayoutConsumer>
+      </Providers>
+    );
+  });
+});
diff --git a/apolloschurchapp/src/ui/LayoutContext/Provider.js b/apolloschurchapp/src/ui/LayoutContext/Provider.js
new file mode 100644
index 0000000..d8fc582
--- /dev/null
+++ b/apolloschurchapp/src/ui/LayoutContext/Provider.js
@@ -0,0 +1,68 @@
+import React, { Component } from 'react';
+import { Dimensions, StyleSheet, SafeAreaView, View } from 'react-native';
+import PropTypes from 'prop-types';
+import { isEqual } from 'lodash';
+
+import Context, { initialState } from './context';
+
+const initialDimensions = Dimensions.get('screen');
+
+const styles = StyleSheet.create({
+  flex: { flex: 1 },
+});
+
+class LayoutProvider extends Component {
+  static propTypes = {
+    children: PropTypes.node,
+  };
+
+  state = initialState;
+
+  rootHeight = initialDimensions.height;
+
+  rootWidth = initialDimensions.width;
+
+  handleRootLayout = ({
+    nativeEvent: {
+      layout: { height, width },
+    },
+  }) => {
+    this.rootHeight = height;
+    this.rootWidth = width;
+  };
+
+  handleChildLayout = ({
+    nativeEvent: {
+      layout: { x, y, width, height },
+    },
+  }) => {
+    const safeAreaInsets = {
+      top: y,
+      bottom: this.rootHeight - height - y,
+      left: x,
+      right: this.rootWidth - width - x,
+    };
+
+    if (!isEqual(this.state.safeAreaInsets, safeAreaInsets)) {
+      this.setState({ safeAreaInsets });
+    }
+  };
+
+  render() {
+    return (
+      <SafeAreaView
+        style={StyleSheet.absoluteFill}
+        onLayout={this.handleRootLayout}
+      >
+        <View style={styles.flex} onLayout={this.handleChildLayout} />
+        <View style={StyleSheet.absoluteFill}>
+          <Context.Provider value={this.state}>
+            {this.props.children}
+          </Context.Provider>
+        </View>
+      </SafeAreaView>
+    );
+  }
+}
+
+export default LayoutProvider;
diff --git a/apolloschurchapp/src/ui/LayoutContext/context.js b/apolloschurchapp/src/ui/LayoutContext/context.js
new file mode 100644
index 0000000..91191ad
--- /dev/null
+++ b/apolloschurchapp/src/ui/LayoutContext/context.js
@@ -0,0 +1,12 @@
+import { createContext } from 'react';
+
+export const initialState = {
+  safeAreaInsets: {
+    top: 0,
+    left: 0,
+    right: 0,
+    bottom: 0,
+  },
+};
+
+export default createContext(initialState);
diff --git a/apolloschurchapp/src/ui/LayoutContext/index.js b/apolloschurchapp/src/ui/LayoutContext/index.js
new file mode 100644
index 0000000..2fda4c4
--- /dev/null
+++ b/apolloschurchapp/src/ui/LayoutContext/index.js
@@ -0,0 +1,6 @@
+import LayoutProvider from './Provider';
+import Context from './context';
+
+const LayoutConsumer = Context.Consumer;
+
+export { LayoutProvider, LayoutConsumer };
diff --git a/apolloschurchapp/src/ui/Like/index.js b/apolloschurchapp/src/ui/Like/index.js
index 48e19ee..d415028 100644
--- a/apolloschurchapp/src/ui/Like/index.js
+++ b/apolloschurchapp/src/ui/Like/index.js
@@ -1,15 +1,19 @@
 import React from 'react';
 import PropTypes from 'prop-types';
+import { compose, pure } from 'recompose';
 
-import { Icon, withTheme } from '@apollosproject/ui-kit';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
 import ProtectedTouchable from '../../auth/ProtectedTouchable';
 
-const LikeIcon = withTheme(
-  ({ theme: { colors: { secondary } = {} } = {}, isLiked } = {}) => ({
-    name: isLiked ? 'like-solid' : 'like',
-    fill: secondary,
-  })
-)(Icon);
+const enhance = compose(
+  pure,
+  withTheme()
+);
+
+export const LikeIcon = enhance(({ isLiked, theme }) => (
+  <Icon name={isLiked ? 'like-solid' : 'like'} fill={theme.colors.secondary} />
+));
 
 LikeIcon.propTypes = {
   isLiked: PropTypes.bool,
@@ -31,4 +35,4 @@ Like.propTypes = {
   toggleLike: PropTypes.func,
 };
 
-export { Like as default, LikeIcon };
+export default Like;
diff --git a/apolloschurchapp/src/ui/LikeButton/index.js b/apolloschurchapp/src/ui/LikeButton/index.js
index caf9945..d3a43b6 100644
--- a/apolloschurchapp/src/ui/LikeButton/index.js
+++ b/apolloschurchapp/src/ui/LikeButton/index.js
@@ -9,7 +9,6 @@ import { track, events } from 'apolloschurchapp/src/analytics';
 
 import updateLikeEntity from './updateLikeEntity';
 import getLikedContentItem from './getLikedContentItem';
-import updateLikedContent from './updateLikedContent';
 
 const GetLikeData = ({ itemId, children }) => (
   <Query query={getLikedContentItem} variables={{ itemId }}>
@@ -30,26 +29,27 @@ const UpdateLikeStatus = ({ itemId, item, isLiked, children }) => (
     mutation={updateLikeEntity}
     optimisticResponse={{
       updateLikeEntity: {
-        id: itemId, // unknown at this time
-        isLiked: !isLiked,
-        __typename: item.__typename,
+        operation: isLiked ? 'Unlike' : 'Like',
+        id: null, // unknown at this time
+        interactionDateTime: new Date().toJSON(),
+        __typename: 'Interaction',
       },
     }}
+    refetchQueries={['getAllLikedContent']}
     update={(
       cache,
       {
         data: {
-          updateLikeEntity: { isLiked: liked },
+          updateLikeEntity: { operation },
         },
       }
     ) => {
-      updateLikedContent({ liked, cache, item });
       cache.writeQuery({
         query: getLikedContentItem,
         data: {
           node: {
             ...item,
-            isLiked: liked,
+            isLiked: operation === 'Like',
           },
         },
       });
diff --git a/apolloschurchapp/src/ui/LikeButton/updateLikeEntity.js b/apolloschurchapp/src/ui/LikeButton/updateLikeEntity.js
index eabd9e9..892fd76 100644
--- a/apolloschurchapp/src/ui/LikeButton/updateLikeEntity.js
+++ b/apolloschurchapp/src/ui/LikeButton/updateLikeEntity.js
@@ -4,7 +4,8 @@ export default gql`
   mutation updateLikeEntity($itemId: ID!, $operation: LIKE_OPERATION!) {
     updateLikeEntity(input: { nodeId: $itemId, operation: $operation }) {
       id
-      isLiked
+      operation
+      interactionDateTime
     }
   }
 `;
diff --git a/apolloschurchapp/src/ui/LikeButton/updateLikedContent.js b/apolloschurchapp/src/ui/LikeButton/updateLikedContent.js
deleted file mode 100644
index 50b612a..0000000
--- a/apolloschurchapp/src/ui/LikeButton/updateLikedContent.js
+++ /dev/null
@@ -1,52 +0,0 @@
-import getAllLikedContent from 'apolloschurchapp/src/tabs/connect/getLikedContent';
-import { contentItemFragment } from 'apolloschurchapp/src/content-single/getContentItem';
-
-const addItemToLikedContentList = ({ cache, item }) => {
-  try {
-    const data = cache.readQuery({ query: getAllLikedContent });
-    const fullItem = cache.readFragment({
-      id: `${item.__typename}:${item.id}`,
-      fragment: contentItemFragment,
-    });
-    cache.writeQuery({
-      query: getAllLikedContent,
-      data: {
-        ...data,
-        getAllLikedContent: [fullItem, ...data.getAllLikedContent],
-      },
-    });
-  } catch (e) {
-    console.log(e);
-    // Most likely we haven't ran the `getAllLikedContent` query yet.
-    // We can safely exit.
-  }
-};
-
-const removeItemFromLikedContentList = ({ cache, item }) => {
-  try {
-    const data = cache.readQuery({ query: getAllLikedContent });
-    cache.writeQuery({
-      query: getAllLikedContent,
-      data: {
-        ...data,
-        getAllLikedContent: data.getAllLikedContent.filter(
-          (content) => content.id !== item.id
-        ),
-      },
-    });
-  } catch (e) {
-    console.log(e);
-    // Most likely we haven't ran the `getAllLikedContent` query yet.
-    // We can safely exit.
-  }
-};
-
-const updateLikedContent = ({ liked, cache, item }) => {
-  if (liked) {
-    addItemToLikedContentList({ cache, item });
-  } else {
-    removeItemFromLikedContentList({ cache, item });
-  }
-};
-
-export default updateLikedContent;
diff --git a/apolloschurchapp/src/ui/MediaPlayer/FullscreenControls.js b/apolloschurchapp/src/ui/MediaPlayer/FullscreenControls.js
index 7256ae4..326fea4 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/FullscreenControls.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/FullscreenControls.js
@@ -12,15 +12,12 @@ import SafeAreaView from 'react-native-safe-area-view';
 import { get } from 'lodash';
 import { compose } from 'recompose';
 
-import {
-  PaddedView,
-  withTheme,
-  withThemeMixin,
-  styled,
-  H4,
-  H6,
-  ButtonIcon,
-} from '@apollosproject/ui-kit';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { withTheme, withThemeMixin } from 'apolloschurchapp/src/ui/theme';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { H4, H6 } from 'apolloschurchapp/src/ui/typography';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
 
 import Seeker from './Seeker';
 import { getControlState } from './queries';
@@ -76,20 +73,20 @@ const Titles = styled({
 const Title = styled({ textAlign: 'center' })(H4);
 const Artist = styled({ textAlign: 'center' })(H6);
 
-const IconSm = withTheme(({ theme }) => ({
-  size: theme.sizing.baseUnit * 1.25,
-  iconPadding: theme.sizing.baseUnit * 1.25,
-}))(ButtonIcon);
+const IconSm = withTheme(({ theme, disabled }) => ({
+  size: theme.sizing.baseUnit,
+  opacity: disabled ? 0.5 : 1.25,
+}))(Icon);
 
-const IconMd = withTheme(({ theme }) => ({
+const IconMd = withTheme(({ theme, disabled }) => ({
   size: theme.sizing.baseUnit * 1.875,
-  iconPadding: theme.sizing.baseUnit * 0.9375,
-}))(ButtonIcon);
+  opacity: disabled ? 0.5 : 1,
+}))(Icon);
 
-const IconLg = withTheme(({ theme }) => ({
+const IconLg = withTheme(({ theme, disabled }) => ({
   size: theme.sizing.baseUnit * 3.125,
-  iconPadding: theme.sizing.baseUnit * 0.3125,
-}))(ButtonIcon);
+  opacity: disabled ? 0.5 : 1,
+}))(Icon);
 
 /**
  * FullscreenControls displays fading player controls
@@ -200,40 +197,21 @@ class FullscreenControls extends PureComponent {
     this.closeTimeout = setTimeout(this.handleControlVisibility, 5000);
   };
 
-  renderPlayerControls = ({ isLoading, skip }) => (
-    <PlayControls>
-      <IconSm
-        onPress={this.isMuted ? this.handleUnMute : this.handleMute}
-        name={this.isMuted ? 'mute' : 'volume'}
-        disabled={isLoading}
-      />
-      <IconMd
-        onPress={() => skip(-30)}
-        name={'skip-back-thirty'}
-        disabled={isLoading}
-      />
-      <IconLg
-        onPress={this.isPlaying ? this.handlePause : this.handlePlay}
-        name={this.isPlaying ? 'pause' : 'play'}
-        disabled={isLoading}
-      />
-      <IconMd
-        onPress={() => skip(30)}
-        name={'skip-forward-thirty'}
-        disabled={isLoading}
-      />
-      <IconSm
-        onPress={this.isVideo ? this.handleHideVideo : this.handleShowVideo}
-        name={this.isVideo ? 'video' : 'video-off'}
-        disabled={isLoading}
-      />
-    </PlayControls>
+  renderSkipForward = ({ skip }) => (
+    <Touchable onPress={() => skip(30)}>
+      <IconMd name="skip-forward-thirty" />
+    </Touchable>
+  );
+
+  renderSkipBack = ({ skip }) => (
+    <Touchable onPress={() => skip(-30)}>
+      <IconMd name="skip-back-thirty" />
+    </Touchable>
   );
 
   renderFullscreenControls = ({ data: { mediaPlayer = {} } = {} }) => {
     this.isVideo = get(mediaPlayer, 'showVideo');
     this.isPlaying = mediaPlayer.isPlaying;
-    this.isMuted = mediaPlayer.muted;
 
     if (
       (mediaPlayer.isFullscreen && !this.wasFullscreen) ||
@@ -255,21 +233,51 @@ class FullscreenControls extends PureComponent {
               style={StyleSheet.absoluteFill}
               forceInset={{ top: 'always', bottom: 'always' }}
             >
-              <TouchableWithoutFeedback onPress={this.handleClose}>
+              <Touchable onPress={this.handleClose}>
                 <UpperControl>
-                  <IconSm name="arrow-down" onPress={this.handleClose} />
+                  <IconSm name="arrow-down" />
                   <Titles>
                     <Title>{get(mediaPlayer, 'currentTrack.title')}</Title>
                     <Artist>{get(mediaPlayer, 'currentTrack.artist')}</Artist>
                   </Titles>
-                  <IconSm name="empty" disabled />
+                  <IconSm name="empty" />
                 </UpperControl>
-              </TouchableWithoutFeedback>
+              </Touchable>
               <LowerControl>
                 <PlayHead>
                   <Seeker onScrubbing={this.handleOnScrubbing} />
                 </PlayHead>
-                <ControlsConsumer>{this.renderPlayerControls}</ControlsConsumer>
+                <PlayControls>
+                  {get(mediaPlayer, 'muted') ? (
+                    <Touchable onPress={this.handleUnMute}>
+                      <IconSm name="mute" />
+                    </Touchable>
+                  ) : (
+                    <Touchable onPress={this.handleMute}>
+                      <IconSm name="volume" />
+                    </Touchable>
+                  )}
+                  <ControlsConsumer>{this.renderSkipBack}</ControlsConsumer>
+                  {mediaPlayer.isPlaying ? (
+                    <Touchable onPress={this.handlePause}>
+                      <IconLg name="pause" />
+                    </Touchable>
+                  ) : (
+                    <Touchable onPress={this.handlePlay}>
+                      <IconLg name="play" />
+                    </Touchable>
+                  )}
+                  <ControlsConsumer>{this.renderSkipForward}</ControlsConsumer>
+                  {mediaPlayer.showVideo ? (
+                    <Touchable onPress={this.handleHideVideo}>
+                      <IconSm name="video" />
+                    </Touchable>
+                  ) : (
+                    <Touchable onPress={this.handleShowVideo}>
+                      <IconSm name="video-off" />
+                    </Touchable>
+                  )}
+                </PlayControls>
               </LowerControl>
             </SafeAreaView>
           </Background>
diff --git a/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.js b/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.js
index ecc64e7..3757398 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.js
@@ -6,13 +6,12 @@ import {
   Dimensions,
   PanResponder,
   Platform,
-  StatusBar,
 } from 'react-native';
 import PropTypes from 'prop-types';
 import { Query, withApollo } from 'react-apollo';
 import { get } from 'lodash';
 
-import { styled } from '@apollosproject/ui-kit';
+import styled from 'apolloschurchapp/src/ui/styled';
 
 import MiniControls, { MINI_PLAYER_HEIGHT } from './MiniControls';
 import FullscreenControls from './FullscreenControls';
@@ -23,16 +22,17 @@ import { exitFullscreen, goFullscreen } from './mutations';
 import { Provider, ControlsConsumer } from './PlayheadState';
 import MediaPlayerSafeLayout from './MediaPlayerSafeLayout';
 
-const VideoSizer = styled(({ isFullscreen, isVideo, theme }) =>
-  isFullscreen
-    ? StyleSheet.absoluteFill
-    : {
-        height: MINI_PLAYER_HEIGHT,
-        borderTopLeftRadius: theme.sizing.baseUnit / 2,
-        borderBottomLeftRadius: theme.sizing.baseUnit / 2,
-        overflow: 'hidden',
-        aspectRatio: isVideo ? 16 / 9 : 1,
-      }
+const VideoSizer = styled(
+  ({ isFullscreen, isVideo, theme }) =>
+    isFullscreen
+      ? StyleSheet.absoluteFill
+      : {
+          height: MINI_PLAYER_HEIGHT,
+          borderTopLeftRadius: theme.sizing.baseUnit / 2,
+          borderBottomLeftRadius: theme.sizing.baseUnit / 2,
+          overflow: 'hidden',
+          aspectRatio: isVideo ? 16 / 9 : 1,
+        }
 )(View);
 
 const FullscreenMediaPlayerSafeLayout = styled(({ isFullscreen, theme }) => ({
@@ -215,7 +215,6 @@ class FullscreenPlayer extends PureComponent {
     return (
       <Animated.View style={this.coverStyle}>
         <FullscreenMediaPlayerSafeLayout isFullscreen={isFullscreen}>
-          {isFullscreen ? <StatusBar hidden /> : null}
           {coverFlow}
         </FullscreenMediaPlayerSafeLayout>
       </Animated.View>
diff --git a/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.stories.js b/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.stories.js
index 6c889cc..869d9c2 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.stories.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/FullscreenPlayer.stories.js
@@ -2,12 +2,10 @@ import React from 'react';
 import { storiesOf } from '@storybook/react-native';
 import { Mutation } from 'react-apollo';
 
-import {
-  ButtonLink,
-  CenteredView,
-  BackgroundView,
-  FlexedView,
-} from '@apollosproject/ui-kit';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+import CenteredView from 'apolloschurchapp/src/ui/CenteredView';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
 
 import { playVideoMutation } from './mutations';
 import MediaPlayer from '.';
diff --git a/apolloschurchapp/src/ui/MediaPlayer/MediaPlayerSafeLayout.js b/apolloschurchapp/src/ui/MediaPlayer/MediaPlayerSafeLayout.js
index 57368b8..a167251 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/MediaPlayerSafeLayout.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/MediaPlayerSafeLayout.js
@@ -1,7 +1,8 @@
 import React from 'react';
 import { View } from 'react-native';
 
-import { styled, LayoutConsumer } from '@apollosproject/ui-kit';
+import styled from '../styled';
+import { LayoutConsumer } from '../LayoutContext';
 
 const InnerView = styled(({ safeAreaInsets, isFullscreen = false, theme }) => ({
   marginBottom: isFullscreen
diff --git a/apolloschurchapp/src/ui/MediaPlayer/MediaPlayerSpacer.js b/apolloschurchapp/src/ui/MediaPlayer/MediaPlayerSpacer.js
index e88b769..17d7fd3 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/MediaPlayerSpacer.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/MediaPlayerSpacer.js
@@ -4,7 +4,7 @@ import { Query } from 'react-apollo';
 import gql from 'graphql-tag';
 import { get } from 'lodash';
 
-import { styled } from '@apollosproject/ui-kit';
+import styled from 'apolloschurchapp/src/ui/styled';
 import { MINI_PLAYER_HEIGHT } from 'apolloschurchapp/src/ui/MediaPlayer';
 
 import MediaPlayerSafeLayout from './MediaPlayerSafeLayout';
diff --git a/apolloschurchapp/src/ui/MediaPlayer/MiniControls.js b/apolloschurchapp/src/ui/MediaPlayer/MiniControls.js
index 80bc783..5aad2c0 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/MiniControls.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/MiniControls.js
@@ -2,15 +2,11 @@ import React, { Component } from 'react';
 import { Platform, View, Animated, StyleSheet } from 'react-native';
 import { Mutation, Query } from 'react-apollo';
 
-import {
-  withTheme,
-  Icon,
-  styled,
-  Touchable,
-  H5,
-  H6,
-  ButtonIcon,
-} from '@apollosproject/ui-kit';
+import styled from 'apolloschurchapp/src/ui/styled';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
+import { H5, H6 } from 'apolloschurchapp/src/ui/typography';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
 
 import Seeker from './Seeker';
 
@@ -98,13 +94,10 @@ const MiniSeeker = styled({
   bottom: 0,
 })(Seeker);
 
-const IconStyles = withTheme(({ theme }) => ({
+const StyledIcon = withTheme(({ theme }) => ({
   fill: theme.colors.darkTertiary,
   size: theme.sizing.baseUnit * 1.25,
-}));
-
-const StyledIcon = IconStyles(Icon);
-const StyledButtonIcon = IconStyles(ButtonIcon);
+}))(Icon);
 
 /**
  * The MiniControls renders basic track info and a play/pause button.
@@ -167,16 +160,17 @@ class MiniControls extends Component {
                 {isPlaying ? (
                   <Mutation mutation={pauseMutation}>
                     {(pause) => (
-                      <StyledButtonIcon
-                        name={'pause'}
-                        onPress={() => pause()}
-                      />
+                      <Touchable onPress={() => pause()}>
+                        <StyledIcon name="pause" />
+                      </Touchable>
                     )}
                   </Mutation>
                 ) : (
                   <Mutation mutation={playMutation}>
                     {(play) => (
-                      <StyledButtonIcon name={'play'} onPress={() => play()} />
+                      <Touchable onPress={() => play()}>
+                        <StyledIcon name="play" />
+                      </Touchable>
                     )}
                   </Mutation>
                 )}
diff --git a/apolloschurchapp/src/ui/MediaPlayer/MusicControls.js b/apolloschurchapp/src/ui/MediaPlayer/MusicControls.js
index 0bf66c6..677c364 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/MusicControls.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/MusicControls.js
@@ -100,8 +100,9 @@ class MusicControls extends Component {
 
     // Remote (headphones) play/pause
     MusicControl.enableControl('togglePlayPause', true);
-    MusicControl.on('togglePlayPause', () =>
-      this.props.isPlaying ? this.handleOnPause() : this.handleOnPlay()
+    MusicControl.on(
+      'togglePlayPause',
+      () => (this.props.isPlaying ? this.handleOnPause() : this.handleOnPlay())
     );
 
     // Remote (headphones) fast forward/rewind (iOS only) (disabled)
diff --git a/apolloschurchapp/src/ui/MediaPlayer/PlayheadState.js b/apolloschurchapp/src/ui/MediaPlayer/PlayheadState.js
index ed10ed7..0d5b33d 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/PlayheadState.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/PlayheadState.js
@@ -11,7 +11,6 @@ const defaultState = {
   currentTime: new Animated.Value(0),
   playableDuration: new Animated.Value(1),
   seekableDuration: new Animated.Value(1),
-  isLoading: true,
 };
 
 const controlState = () => {};
@@ -32,30 +31,18 @@ class ProviderWithoutApollo extends Component {
   get controlState() {
     return {
       onLoad: this.handleOnLoad,
-      onLoadStart: this.handleOnLoadStart,
-      // onBuffer: this.handleOnBuffer,
       onProgress: this.handleOnProgress,
       skip: this.skip,
-      isLoading: this.state.isLoading,
-      // isBuffering: this.state.isBuffering,
     };
   }
 
   handleOnLoad = ({ duration }) => {
-    this.setState({ duration, isLoading: false });
+    this.setState({ duration });
     this.state.currentTime.setValue(0);
     this.state.playableDuration.setValue(0);
     this.state.seekableDuration.setValue(0);
   };
 
-  handleOnLoadStart = () => {
-    this.setState({ isLoading: true });
-  };
-
-  // handleOnBuffer = ({ isBuffering }) => {
-  //   this.setState({ isBuffering }); // bool value https://github.com/react-native-community/react-native-video/blob/2c391f580702f9579a0ebd01c6e97415feda928b/ios/Video/RCTVideo.m#L636-L643
-  // };
-
   handleOnProgress = ({ currentTime, playableDuration, seekableDuration }) => {
     if (!this.seekingTo || Math.abs(this.seekingTo - currentTime) < 1) {
       // when seeking, only update `currentTime` after the seek has finished
@@ -77,7 +64,6 @@ class ProviderWithoutApollo extends Component {
   };
 
   skip = async (secondsToSkip) => {
-    if (this.lastCurrentTime === undefined) return;
     const currentTime = Math.min(
       Math.max(this.lastCurrentTime + secondsToSkip, 0),
       this.state.duration
diff --git a/apolloschurchapp/src/ui/MediaPlayer/Seeker/Timestamp.js b/apolloschurchapp/src/ui/MediaPlayer/Seeker/Timestamp.js
index ab33167..7603319 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/Seeker/Timestamp.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/Seeker/Timestamp.js
@@ -2,7 +2,8 @@ import React, { PureComponent } from 'react';
 import { Animated } from 'react-native';
 import PropTypes from 'prop-types';
 
-import { H6, styled } from '@apollosproject/ui-kit';
+import { H6 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
 
 const TimeText = styled({
   width: 50,
diff --git a/apolloschurchapp/src/ui/MediaPlayer/Seeker/index.js b/apolloschurchapp/src/ui/MediaPlayer/Seeker/index.js
index d071a72..b84b2e5 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/Seeker/index.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/Seeker/index.js
@@ -2,7 +2,8 @@ import React, { PureComponent } from 'react';
 import { PanResponder, Animated, View, StyleSheet } from 'react-native';
 import PropTypes from 'prop-types';
 
-import { styled, withTheme } from '@apollosproject/ui-kit';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
 
 import { PlayheadConsumer, ControlsConsumer } from '../PlayheadState';
 import Timestamp from './Timestamp';
diff --git a/apolloschurchapp/src/ui/MediaPlayer/VideoWindow.js b/apolloschurchapp/src/ui/MediaPlayer/VideoWindow.js
index 4b07c38..3a74c25 100644
--- a/apolloschurchapp/src/ui/MediaPlayer/VideoWindow.js
+++ b/apolloschurchapp/src/ui/MediaPlayer/VideoWindow.js
@@ -5,7 +5,8 @@ import { get } from 'lodash';
 import Video from 'react-native-video';
 import { Animated, View, StyleSheet } from 'react-native';
 
-import { styled, ActivityIndicator } from '@apollosproject/ui-kit';
+import styled from 'apolloschurchapp/src/ui/styled';
+import ActivityIndicator from 'apolloschurchapp/src/ui/ActivityIndicator';
 
 import { getVideoState } from './queries';
 import { pause as pauseMutation, pauseAndRestart } from './mutations';
@@ -33,8 +34,6 @@ class VideoWindow extends PureComponent {
     }),
     onProgress: PropTypes.func,
     onLoad: PropTypes.func,
-    onLoadStart: PropTypes.func,
-    // onBuffer: PropTypes.func,
   };
 
   loadingOverlay = new Animated.Value(1);
@@ -58,39 +57,25 @@ class VideoWindow extends PureComponent {
   };
 
   handleOnLoad = ({ duration }) => {
-    this.showLoadingIndicator(false);
+    Animated.spring(this.loadingOverlay, {
+      toValue: 0,
+      useNativeDriver: true,
+    }).start();
 
     if (this.props.onLoad) this.props.onLoad({ duration });
   };
 
   handleOnLoadStart = () => {
-    if (this.props.onLoadStart) this.props.onLoadStart();
-    this.showLoadingIndicator(true);
-  };
-
-  handleOnBuffer = ({ isBuffering }) => {
-    // if (this.props.onBuffer) this.props.onBuffer({ isBuffering });
-    this.showLoadingIndicator(!isBuffering);
+    Animated.spring(this.loadingOverlay, {
+      toValue: 1,
+      useNativeDriver: true,
+    });
   };
 
   setVideoRef = (element) => {
     this.video = element;
   };
 
-  showLoadingIndicator(isLoading) {
-    if (isLoading) {
-      Animated.spring(this.loadingOverlay, {
-        toValue: 1,
-        useNativeDriver: true,
-      });
-    } else {
-      Animated.spring(this.loadingOverlay, {
-        toValue: 0,
-        useNativeDriver: true,
-      }).start();
-    }
-  }
-
   renderVideo = ({ data: { mediaPlayer = {} } = {} }) => {
     if (!get(mediaPlayer, 'currentTrack.mediaSource')) return null;
 
@@ -117,7 +102,6 @@ class VideoWindow extends PureComponent {
         resizeMode={'contain'}
         onLoadStart={this.handleOnLoadStart}
         onLoad={this.handleOnLoad}
-        // onBuffer={this.handleOnBuffer}
         onProgress={this.handleOnProgress}
         style={StyleSheet.absoluteFill}
         volume={mediaPlayer.muted ? 0 : 1}
@@ -142,7 +126,7 @@ class VideoWindow extends PureComponent {
       <Background>
         <Query query={getVideoState}>{this.renderVideo}</Query>
         <Animated.View style={this.loadingStyle}>
-          <ActivityIndicator size={'large'} />
+          <ActivityIndicator />
         </Animated.View>
       </Background>
     );
diff --git a/apolloschurchapp/src/ui/MediaQuery/MediaQuery.js b/apolloschurchapp/src/ui/MediaQuery/MediaQuery.js
new file mode 100644
index 0000000..10557b3
--- /dev/null
+++ b/apolloschurchapp/src/ui/MediaQuery/MediaQuery.js
@@ -0,0 +1,67 @@
+import { Component } from 'react';
+import PropTypes from 'prop-types';
+import { get, every } from 'lodash';
+import { pick, mapValues, flow } from 'lodash/fp';
+import { compose } from 'recompose';
+
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+import withWindow from './withWindow';
+import queryMatcher from './queryMatcher';
+
+const supportedMediaQueryTypes = {
+  minWidth: PropTypes.string,
+  maxWidth: PropTypes.string,
+  minHeight: PropTypes.string,
+  maxHeight: PropTypes.string,
+  minDeviceAspectRatio: PropTypes.string,
+  maxDeviceAspectRatio: PropTypes.string,
+};
+
+// <MediaQuery maxWidth="md" minWidth="sm">I render on screens sm to md</MediaQuery>
+// <MediaQuery maxWidth="xs">I render only on xs screens</MediaQuery>
+// <MediaQuery minWidth="md">I render on screens md or above</MediaQuery>
+class MediaQuery extends Component {
+  static propTypes = {
+    ...supportedMediaQueryTypes,
+    children: PropTypes.node,
+
+    // These props are passed in through HOCs (withTheme and withWindow)
+    breakpoints: PropTypes.shape({
+      xs: PropTypes.number,
+      sm: PropTypes.number,
+      md: PropTypes.number,
+      lg: PropTypes.number,
+    }),
+    window: PropTypes.shape({
+      width: PropTypes.number,
+      height: PropTypes.number,
+    }).isRequired,
+  };
+
+  static defaultProps = {
+    ...mapValues(supportedMediaQueryTypes, () => null),
+    breakpoints: {},
+  };
+
+  get shouldBeVisible() {
+    const mediaQuery = flow(
+      pick(Object.keys(supportedMediaQueryTypes)),
+      mapValues((breakpoint) => get(this.props.breakpoints, breakpoint))
+    )(this.props);
+
+    const {
+      window: { width, height },
+    } = this.props; // destructuring just to make below line clean
+    return every(mediaQuery, queryMatcher({ width, height }));
+  }
+
+  render() {
+    return this.shouldBeVisible ? this.props.children : null;
+  }
+}
+
+export default compose(
+  withTheme(({ theme: { breakpoints } = {} } = {}) => ({ breakpoints })),
+  withWindow
+)(MediaQuery);
diff --git a/apolloschurchapp/src/ui/MediaQuery/enhancer.js b/apolloschurchapp/src/ui/MediaQuery/enhancer.js
new file mode 100644
index 0000000..617a1f4
--- /dev/null
+++ b/apolloschurchapp/src/ui/MediaQuery/enhancer.js
@@ -0,0 +1,42 @@
+import { branch, compose, mapProps } from 'recompose';
+import { every } from 'lodash';
+
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+import withWindow from './withWindow';
+import queryMatcher from './queryMatcher';
+
+// Make it easy to do breakpoint-based component branching, a-la recompose's branch method.
+// The "test" function should return an object that mirrors what you'd do in a css mediaQuery:
+// import { enhancer as mediaQuery } from 'MediaQuery';
+// mediaQuery(
+//   ({ xs, lg }) => ({ minWidth: xs, maxWidth: lg }),
+//   HigherOrderComponent,
+//   ?HigherOrderComponent
+// ): HigherOrderComponent
+const enhancer = (getMediaQuery, ...args) =>
+  compose(
+    withTheme(({ theme: { breakpoints = {} } = {} }) => ({ breakpoints })),
+    withWindow,
+    branch(({ breakpoints, window: { width, height }, ...ownProps }) => {
+      const mediaQuery = getMediaQuery(
+        { ...breakpoints, width, height },
+        ownProps
+      );
+
+      // We should only interpret `mediaQuery` if we have an object.
+      // This allows the function you pass in to utilize more complex query logic, like:
+      // mediaQuery(({ sm, lg, width }) => width < sm || width > lg, styles)
+      // mediaQuery(({ sm }, ownProps) => ownProps.size < sm, styles)
+      if (typeof mediaQuery !== 'object') {
+        return mediaQuery;
+      }
+
+      return every(mediaQuery, queryMatcher({ width, height }));
+    }, ...args),
+
+    // clean up props
+    mapProps(({ breakpoints, window, ...ownProps }) => ownProps)
+  );
+
+export default enhancer;
diff --git a/apolloschurchapp/src/ui/MediaQuery/enhancer.tests.js b/apolloschurchapp/src/ui/MediaQuery/enhancer.tests.js
new file mode 100644
index 0000000..9438e27
--- /dev/null
+++ b/apolloschurchapp/src/ui/MediaQuery/enhancer.tests.js
@@ -0,0 +1,163 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { View, Dimensions } from 'react-native';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import { breakpoints as defaultBreakPoints } from 'apolloschurchapp/src/ui/theme/defaultTheme';
+
+import enhancer from './enhancer';
+
+const TestHOC = (mock) => (Component) => {
+  mock();
+  return Component;
+};
+
+const mediaQueryThatPasses = () => true;
+const mediaQueryThatFails = () => false;
+
+describe('The mediaQuery enhancer', () => {
+  it('uses the first HOC (and renders the root View) with a passing media query', () => {
+    const firstMock = jest.fn();
+    const secondMock = jest.fn();
+
+    const Component = enhancer(
+      mediaQueryThatPasses,
+      TestHOC(firstMock),
+      TestHOC(secondMock)
+    )(View);
+    const tree = renderer.create(
+      <Providers>
+        <Component />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+    expect(firstMock.mock.calls.length).toBe(1);
+    expect(secondMock.mock.calls.length).toBe(0);
+  });
+  it('uses the second HOC (and renders the root View) with a failing media query', () => {
+    const firstMock = jest.fn();
+    const secondMock = jest.fn();
+
+    const Component = enhancer(
+      mediaQueryThatFails,
+      TestHOC(firstMock),
+      TestHOC(secondMock)
+    )(View);
+    const tree = renderer.create(
+      <Providers>
+        <Component />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+    expect(firstMock.mock.calls.length).toBe(0);
+    expect(secondMock.mock.calls.length).toBe(1);
+  });
+
+  const testWindow = Dimensions.get('window');
+  it('works with a simple media query', () => {
+    const firstMock = jest.fn();
+
+    const Component = enhancer(
+      () => ({ maxWidth: testWindow.width + 1 }),
+      TestHOC(firstMock)
+    )(View);
+
+    const tree = renderer.create(
+      <Providers>
+        <Component />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+    expect(firstMock.mock.calls.length).toBe(1);
+  });
+
+  it('works with a complex media query', () => {
+    const firstMock = jest.fn();
+
+    const Component = enhancer(
+      () => ({
+        maxWidth: testWindow.width + 1,
+        minWidth: testWindow.width - 1,
+        maxHeight: testWindow.height + 1,
+        minHeight: testWindow.height - 1,
+        minDeviceAspectRatio: testWindow.width / testWindow.height - 1,
+        maxDeviceAspectRatio: testWindow.width / testWindow.height + 1,
+      }),
+      TestHOC(firstMock)
+    )(View);
+
+    const tree = renderer.create(
+      <Providers>
+        <Component />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+    expect(firstMock.mock.calls.length).toBe(1);
+  });
+
+  it('uses second HOC when provided with a complex media query that doesnt match', () => {
+    const firstMock = jest.fn();
+    const secondMock = jest.fn();
+
+    const Component = enhancer(
+      () => ({
+        maxWidth: testWindow.width - 1,
+        minWidth: testWindow.width + 1,
+        maxHeight: testWindow.height - 1,
+        minHeight: testWindow.height + 1,
+        minDeviceAspectRatio: testWindow.width / testWindow.height + 1,
+        maxDeviceAspectRatio: testWindow.width / testWindow.height - 1,
+      }),
+      TestHOC(firstMock),
+      TestHOC(secondMock)
+    )(View);
+
+    const tree = renderer.create(
+      <Providers>
+        <Component />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+    expect(firstMock.mock.calls.length).toBe(0);
+    expect(secondMock.mock.calls.length).toBe(1);
+  });
+
+  it('passes in breakpoints to the test function', () => {
+    const firstMock = jest.fn();
+
+    const testFunction = ({ height, width, ...breakpoints }) => {
+      expect(breakpoints).toEqual(defaultBreakPoints);
+      return true;
+    };
+
+    const Component = enhancer(testFunction, TestHOC(firstMock))(View);
+
+    const tree = renderer.create(
+      <Providers>
+        <Component />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+    expect(firstMock.mock.calls.length).toBe(1);
+  });
+
+  it('passes in window width and height to the test function', () => {
+    const firstMock = jest.fn();
+
+    const testFunction = ({ height, width }) => {
+      expect(width).toBeGreaterThan(0);
+      expect(height).toBeGreaterThan(0);
+      return true;
+    };
+
+    const Component = enhancer(testFunction, TestHOC(firstMock))(View);
+
+    const tree = renderer.create(
+      <Providers>
+        <Component />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+    expect(firstMock.mock.calls.length).toBe(1);
+  });
+});
diff --git a/apolloschurchapp/src/ui/MediaQuery/index.js b/apolloschurchapp/src/ui/MediaQuery/index.js
new file mode 100644
index 0000000..c38c7f0
--- /dev/null
+++ b/apolloschurchapp/src/ui/MediaQuery/index.js
@@ -0,0 +1,3 @@
+export { default as enhancer } from './enhancer';
+export { default as withWindow } from './withWindow';
+export { default } from './MediaQuery';
diff --git a/apolloschurchapp/src/ui/MediaQuery/queryMatcher.js b/apolloschurchapp/src/ui/MediaQuery/queryMatcher.js
new file mode 100644
index 0000000..25e95c3
--- /dev/null
+++ b/apolloschurchapp/src/ui/MediaQuery/queryMatcher.js
@@ -0,0 +1,20 @@
+const queryMatcher = ({ width, height }) => (selector, query) => {
+  switch (query) {
+    case 'maxWidth':
+      return width < selector;
+    case 'minWidth':
+      return width > selector;
+    case 'maxHeight':
+      return height < selector;
+    case 'minHeight':
+      return height > selector;
+    case 'minDeviceAspectRatio':
+      return width / height > selector;
+    case 'maxDeviceAspectRatio':
+      return width / height < selector;
+    default:
+      return true;
+  }
+};
+
+export default queryMatcher;
diff --git a/apolloschurchapp/src/ui/MediaQuery/withWindow.js b/apolloschurchapp/src/ui/MediaQuery/withWindow.js
new file mode 100644
index 0000000..0ee9583
--- /dev/null
+++ b/apolloschurchapp/src/ui/MediaQuery/withWindow.js
@@ -0,0 +1,36 @@
+import React, { PureComponent } from 'react';
+import { Dimensions } from 'react-native';
+
+export default function withWindow(ComponentToWrap) {
+  return class WithWindow extends PureComponent {
+    state = {
+      window: {
+        height: Dimensions.get('window').height,
+        width: Dimensions.get('window').width,
+      },
+    };
+
+    componentWillMount() {
+      Dimensions.addEventListener('change', this.handler);
+    }
+
+    componentWillUnmount() {
+      Dimensions.removeEventListener('change', this.handler);
+    }
+
+    handler = ({ window }) => {
+      if (
+        // detect orientation change
+        window.width === this.state.window.height &&
+        window.height === this.state.window.width
+      ) {
+        return;
+      }
+      this.setState({ window });
+    };
+
+    render() {
+      return <ComponentToWrap {...this.state} {...this.props} />;
+    }
+  };
+}
diff --git a/apolloschurchapp/src/ui/ModalView/index.js b/apolloschurchapp/src/ui/ModalView/index.js
new file mode 100644
index 0000000..4f75c15
--- /dev/null
+++ b/apolloschurchapp/src/ui/ModalView/index.js
@@ -0,0 +1,56 @@
+import React from 'react';
+import { StatusBar, TouchableOpacity, View } from 'react-native';
+import { withNavigation } from 'react-navigation';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import styled from 'apolloschurchapp/src/ui/styled';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+const CloseIcon = withTheme(({ theme }) => ({
+  name: 'close',
+  fill: theme.colors.text.tertiary,
+  size: theme.sizing.baseUnit,
+}))(Icon);
+
+const IconTouchable = styled(({ theme }) => ({
+  position: 'absolute',
+  top: theme.sizing.baseUnit * 1.5,
+  right: theme.sizing.baseUnit * 1.5,
+  width: theme.sizing.baseUnit * 1.75,
+  height: theme.sizing.baseUnit * 1.75,
+  borderRadius: theme.sizing.baseUnit * 1.75,
+  alignItems: 'center',
+  justifyContent: 'center',
+  overflow: 'hidden',
+  backgroundColor: theme.colors.text.primary,
+  opacity: 0.9,
+}))(TouchableOpacity);
+
+const Container = styled({
+  flex: null,
+  width: '100%',
+  height: '100%',
+  borderRadius: 0,
+})(BackgroundView);
+
+const Handle = styled({
+  // helps in swipe-to-close gesture
+  position: 'absolute',
+  top: 0,
+  left: 0,
+  right: 0,
+  height: 75,
+})(View);
+
+const ModalView = ({ navigation, onBack, children, ...props }) => (
+  <Container {...props}>
+    <StatusBar hidden />
+    {children}
+    <Handle />
+    <IconTouchable onPress={() => (onBack ? onBack() : navigation.pop())}>
+      <CloseIcon />
+    </IconTouchable>
+  </Container>
+);
+
+export default withNavigation(ModalView);
diff --git a/apolloschurchapp/src/ui/PaddedView/PaddedView.stories.js b/apolloschurchapp/src/ui/PaddedView/PaddedView.stories.js
new file mode 100644
index 0000000..c22d2c1
--- /dev/null
+++ b/apolloschurchapp/src/ui/PaddedView/PaddedView.stories.js
@@ -0,0 +1,12 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import { H1 } from 'apolloschurchapp/src/ui/typography';
+
+import PaddedView from '.';
+
+storiesOf('PaddedView', module).add('Example', () => (
+  <PaddedView>
+    <H1>This text is in a PaddedView</H1>
+  </PaddedView>
+));
diff --git a/apolloschurchapp/src/ui/PaddedView/PaddedView.tests.js b/apolloschurchapp/src/ui/PaddedView/PaddedView.tests.js
new file mode 100644
index 0000000..3e1f918
--- /dev/null
+++ b/apolloschurchapp/src/ui/PaddedView/PaddedView.tests.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import PaddedView from '.';
+
+describe('the PaddedView component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <PaddedView />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/PaddedView/index.js b/apolloschurchapp/src/ui/PaddedView/index.js
new file mode 100644
index 0000000..ea72d31
--- /dev/null
+++ b/apolloschurchapp/src/ui/PaddedView/index.js
@@ -0,0 +1,13 @@
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const PaddedView = styled(
+  ({ theme, horizontal = true, vertical = true }) => ({
+    paddingHorizontal: horizontal ? theme.sizing.baseUnit : 0,
+    paddingVertical: vertical ? theme.sizing.baseUnit : 0,
+  }),
+  'PaddedView'
+)(View);
+
+export default PaddedView;
diff --git a/apolloschurchapp/src/ui/Placeholder/Line.js b/apolloschurchapp/src/ui/Placeholder/Line.js
new file mode 100644
index 0000000..2e14d92
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/Line.js
@@ -0,0 +1,18 @@
+import React from 'react';
+import { View } from 'react-native';
+import Placeholder from 'rn-placeholder';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+export const Line = styled(
+  ({ theme, width = '100%' }) => ({
+    borderRadius: theme.sizing.baseUnit,
+    backgroundColor: theme.colors.background.inactive,
+    height: theme.helpers.rem(1),
+    width,
+    alignSelf: 'stretch',
+  }),
+  'Placeholder.Line'
+)(({ style }) => <View style={style} />);
+
+export default Placeholder.connect(Line);
diff --git a/apolloschurchapp/src/ui/Placeholder/Line.tests.js b/apolloschurchapp/src/ui/Placeholder/Line.tests.js
new file mode 100644
index 0000000..598a1b0
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/Line.tests.js
@@ -0,0 +1,35 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import { Line } from './Line';
+
+describe('The Line placeholder', () => {
+  it('renders correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Line />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('accepts width', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Line width="50%" />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('accepts custom styles', () => {
+    const customStyle = { backgroundColor: 'salmon' };
+
+    const tree = renderer.create(
+      <Providers>
+        <Line width="50%" style={customStyle} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Placeholder/Media.js b/apolloschurchapp/src/ui/Placeholder/Media.js
new file mode 100644
index 0000000..62c8abb
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/Media.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import { View } from 'react-native';
+import Placeholder from 'rn-placeholder';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+export const Media = styled(
+  ({ borderRadius, theme, size = '100%' }) => ({
+    height: size,
+    width: size,
+    borderRadius: borderRadius || theme.sizing.baseUnit,
+    backgroundColor: theme.colors.background.inactive,
+  }),
+  'Placeholder.Media'
+)(({ style }) => <View style={style} />);
+
+export default Placeholder.connect(Media);
diff --git a/apolloschurchapp/src/ui/Placeholder/Media.tests.js b/apolloschurchapp/src/ui/Placeholder/Media.tests.js
new file mode 100644
index 0000000..adb247d
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/Media.tests.js
@@ -0,0 +1,35 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import { Media } from './Media';
+
+describe('The Media placeholder', () => {
+  it('renders correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Media />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('accepts size', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Media size="50%" />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('accepts custom styles', () => {
+    const customStyle = { backgroundColor: 'salmon' };
+
+    const tree = renderer.create(
+      <Providers>
+        <Media style={customStyle} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Placeholder/Paragraph.js b/apolloschurchapp/src/ui/Placeholder/Paragraph.js
new file mode 100644
index 0000000..0fa7695
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/Paragraph.js
@@ -0,0 +1,47 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { View } from 'react-native';
+import Placeholder from 'rn-placeholder';
+import { times } from 'lodash';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import { Line } from './Line';
+
+const ParagraphLine = styled(
+  ({ theme }) => ({
+    height: theme.helpers.rem(1),
+    marginVertical:
+      (theme.helpers.verticalRhythm(1, 1.625) - theme.helpers.rem(1)) / 2,
+  }),
+  'Placeholder.Paragraph.line'
+)(Line);
+
+export const Paragraph = ({
+  lineNumber = 3,
+  width = '100%',
+  lastLineWidth = '75%',
+  firstLineWidth = '85%',
+  lineStyle,
+  style,
+}) => (
+  <View style={style}>
+    {times(lineNumber, (i) => {
+      let lineWidth = width;
+      if (i === 0 && firstLineWidth) lineWidth = firstLineWidth;
+      if (i === lineNumber - 1 && lastLineWidth) lineWidth = lastLineWidth;
+      return <ParagraphLine key={i} width={lineWidth} style={lineStyle} />;
+    })}
+  </View>
+);
+
+Paragraph.propTypes = {
+  lineNumber: PropTypes.number,
+  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+  lastLineWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+  firstLineWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+  lineStyle: PropTypes.any, // eslint-disable-line
+  style: PropTypes.any, // eslint-disable-line
+};
+
+export default Placeholder.connect(Paragraph);
diff --git a/apolloschurchapp/src/ui/Placeholder/Paragraph.tests.js b/apolloschurchapp/src/ui/Placeholder/Paragraph.tests.js
new file mode 100644
index 0000000..ab72f64
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/Paragraph.tests.js
@@ -0,0 +1,53 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import { Paragraph } from './Paragraph';
+
+describe('The Paragraph placeholder', () => {
+  it('renders correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Paragraph />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('renders multiple lines', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Paragraph lineNumber={50} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('has varying width lines', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Paragraph lastLineWidth={33} firstLineWidth={'23%'} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('accepts custom line styles', () => {
+    const customStyle = { height: 33 };
+
+    const tree = renderer.create(
+      <Providers>
+        <Paragraph lineStyle={customStyle} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('accepts custom styles', () => {
+    const customStyle = { backgroundColor: 'salmon' };
+
+    const tree = renderer.create(
+      <Providers>
+        <Paragraph style={customStyle} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Placeholder/Typography.js b/apolloschurchapp/src/ui/Placeholder/Typography.js
new file mode 100644
index 0000000..0a2934e
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/Typography.js
@@ -0,0 +1,44 @@
+import { compose, mapProps } from 'recompose';
+import { StyleSheet } from 'react-native';
+import Placeholder from 'rn-placeholder';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import { Line } from './Line';
+
+export const Typography = compose(
+  mapProps(({ style, ...otherProps }) => ({
+    flattenedStyles: StyleSheet.flatten(style),
+    ...otherProps,
+  })),
+  styled(
+    ({
+      flattenedStyles: {
+        fontSize,
+        lineHeight,
+        paddingTop,
+        paddingBottom,
+        paddingVertical,
+      } = {},
+    }) => {
+      const styles = {};
+      if (fontSize && lineHeight) {
+        styles.height = fontSize;
+        styles.marginVertical = (lineHeight - fontSize) / 2;
+      }
+      if (paddingTop) {
+        styles.marginTop = paddingTop;
+      }
+      if (paddingBottom) {
+        styles.marginBottom = paddingBottom;
+      }
+      if (paddingVertical) {
+        styles.marginVertical = paddingVertical;
+      }
+      return styles;
+    },
+    'Placeholder.Typography'
+  )
+)(Line);
+
+export default Placeholder.connect(Typography);
diff --git a/apolloschurchapp/src/ui/Placeholder/Typography.tests.js b/apolloschurchapp/src/ui/Placeholder/Typography.tests.js
new file mode 100644
index 0000000..42aa841
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/Typography.tests.js
@@ -0,0 +1,27 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import { Typography } from './Typography';
+
+describe('The Typography placeholder', () => {
+  it('renders correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Typography />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('translates type styles', () => {
+    const customTypeStyles = { fontSize: 24, lineHeight: 32 };
+
+    const tree = renderer.create(
+      <Providers>
+        <Typography style={customTypeStyles} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/Placeholder/index.js b/apolloschurchapp/src/ui/Placeholder/index.js
new file mode 100644
index 0000000..82f6577
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/index.js
@@ -0,0 +1,14 @@
+import Line from './Line';
+import Typography from './Typography';
+import Media from './Media';
+import Paragraph from './Paragraph';
+
+export withPlaceholder from './withPlaceholder';
+export { Line, Typography, Media, Paragraph };
+
+export default {
+  Line,
+  Typography,
+  Media,
+  Paragraph,
+};
diff --git a/apolloschurchapp/src/ui/Placeholder/withPlaceholder.js b/apolloschurchapp/src/ui/Placeholder/withPlaceholder.js
new file mode 100644
index 0000000..6920bd5
--- /dev/null
+++ b/apolloschurchapp/src/ui/Placeholder/withPlaceholder.js
@@ -0,0 +1,20 @@
+import React from 'react';
+
+import { getIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+
+import { Line } from '.';
+
+const withPlaceholder = (PlaceholderComponent = Line, getProps = {}) => (
+  Component
+) =>
+  getIsLoading(({ isLoading = false, style, ...props }) => {
+    const propInput =
+      typeof getProps === 'function' ? getProps(props) : getProps;
+    return (
+      <PlaceholderComponent onReady={!isLoading} style={style} {...propInput}>
+        <Component style={style} {...props} />
+      </PlaceholderComponent>
+    );
+  });
+
+export default withPlaceholder;
diff --git a/apolloschurchapp/src/ui/ProgressiveImage/ProgressiveImage.tests.js b/apolloschurchapp/src/ui/ProgressiveImage/ProgressiveImage.tests.js
new file mode 100644
index 0000000..9f13fc2
--- /dev/null
+++ b/apolloschurchapp/src/ui/ProgressiveImage/ProgressiveImage.tests.js
@@ -0,0 +1,28 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import { ThemeProvider } from 'apolloschurchapp/src/ui/theme';
+
+import ProgressiveImage from '.';
+
+describe('the ProgressiveImage component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <ThemeProvider>
+        <ProgressiveImage
+          source={{
+            uri: 'https://placeholdit.co/i/1500x1500',
+            width: 1500,
+            height: 1500,
+          }}
+          thumbnail={{
+            uri: 'https://placeholdit.co/i/50x50',
+            width: 50,
+            height: 50,
+          }}
+        />
+      </ThemeProvider>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/ProgressiveImage/index.js b/apolloschurchapp/src/ui/ProgressiveImage/index.js
new file mode 100644
index 0000000..3ce2c5f
--- /dev/null
+++ b/apolloschurchapp/src/ui/ProgressiveImage/index.js
@@ -0,0 +1,68 @@
+import React, { PureComponent } from 'react';
+import PropTypes from 'prop-types';
+import { View, StyleSheet } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import ConnectedImage from 'apolloschurchapp/src/ui/ConnectedImage';
+
+const Wrapper = styled(({ theme }) => ({
+  width: '100%',
+  aspectRatio: 1,
+  backgroundColor: theme.colors.background.inactive,
+}))(View);
+
+const styles = StyleSheet.create({
+  imageStyles: {
+    width: '100%',
+    height: '100%',
+    resizeMode: 'cover',
+  },
+});
+
+class ProgressiveImage extends PureComponent {
+  static propTypes = {
+    source: ConnectedImage.propTypes.source,
+    thumbnail: ConnectedImage.propTypes.source,
+    thumbnailBlurRadius: PropTypes.number,
+    imageStyle: PropTypes.any, // eslint-disable-line
+    ...ConnectedImage.propTypes,
+  };
+
+  static defaultProps = {
+    thumbnailBlurRadius: 2,
+  };
+
+  render() {
+    const {
+      source,
+      thumbnail,
+      thumbnailFadeDuration,
+      imageFadeDuration,
+      thumbnailBlurRadius,
+      onLoadThumbnail,
+      onLoadImage,
+      imageStyle,
+      style,
+      ...imageProps
+    } = this.props;
+    return (
+      <Wrapper style={style}>
+        {thumbnail ? (
+          <ConnectedImage
+            {...imageProps}
+            blurRadius={thumbnailBlurRadius}
+            style={[styles.imageStyles, imageStyle]}
+            source={thumbnail}
+          />
+        ) : null}
+        <ConnectedImage
+          {...imageProps}
+          style={[styles.imageStyles, imageStyle]}
+          source={source}
+        />
+      </Wrapper>
+    );
+  }
+}
+
+export default ProgressiveImage;
diff --git a/apolloschurchapp/src/ui/Scripture/ScriptureHTMLView.js b/apolloschurchapp/src/ui/Scripture/ScriptureHTMLView.js
index fb6a93d..9d78c86 100644
--- a/apolloschurchapp/src/ui/Scripture/ScriptureHTMLView.js
+++ b/apolloschurchapp/src/ui/Scripture/ScriptureHTMLView.js
@@ -2,7 +2,8 @@ import React from 'react';
 import { withProps } from 'recompose';
 import { Platform } from 'react-native';
 
-import { Paragraph, H4 } from '@apollosproject/ui-kit';
+import Paragraph from 'apolloschurchapp/src/ui/typography/Paragraph';
+import { H4 } from 'apolloschurchapp/src/ui/typography';
 import HTMLView from 'apolloschurchapp/src/ui/HTMLView';
 import defaultRenderer, {
   wrapTextChildren,
diff --git a/apolloschurchapp/src/ui/Scripture/ScriptureItem.js b/apolloschurchapp/src/ui/Scripture/ScriptureItem.js
index b78993f..8bb0643 100644
--- a/apolloschurchapp/src/ui/Scripture/ScriptureItem.js
+++ b/apolloschurchapp/src/ui/Scripture/ScriptureItem.js
@@ -2,7 +2,8 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import { View } from 'react-native';
 
-import { Placeholder, H4, H6 } from '@apollosproject/ui-kit';
+import Placeholder from 'apolloschurchapp/src/ui/Placeholder';
+import { H4, H6 } from 'apolloschurchapp/src/ui/typography';
 
 import { LegalText } from './typography';
 import ScriptureHTMLView from './ScriptureHTMLView';
diff --git a/apolloschurchapp/src/ui/Scripture/ScriptureItem.stories.js b/apolloschurchapp/src/ui/Scripture/ScriptureItem.stories.js
index c51b7ed..338514f 100644
--- a/apolloschurchapp/src/ui/Scripture/ScriptureItem.stories.js
+++ b/apolloschurchapp/src/ui/Scripture/ScriptureItem.stories.js
@@ -1,7 +1,7 @@
 import React from 'react';
 import { ScrollView } from 'react-native';
 import { storiesOf } from '@storybook/react-native';
-import { PaddedView } from '@apollosproject/ui-kit';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
 
 import ScriptureItem from './ScriptureItem';
 
diff --git a/apolloschurchapp/src/ui/Scripture/ScriptureList.js b/apolloschurchapp/src/ui/Scripture/ScriptureList.js
index f6d3015..555a113 100644
--- a/apolloschurchapp/src/ui/Scripture/ScriptureList.js
+++ b/apolloschurchapp/src/ui/Scripture/ScriptureList.js
@@ -1,6 +1,8 @@
 import React from 'react';
 import PropTypes from 'prop-types';
-import { H4, styled, ButtonLink } from '@apollosproject/ui-kit';
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
 
 const StyledH4 = styled(({ theme }) => ({
   color: theme.colors.primary,
diff --git a/apolloschurchapp/src/ui/Scripture/typography/ScriptureText/index.js b/apolloschurchapp/src/ui/Scripture/typography/ScriptureText/index.js
index 6f216c7..c3fddbc 100644
--- a/apolloschurchapp/src/ui/Scripture/typography/ScriptureText/index.js
+++ b/apolloschurchapp/src/ui/Scripture/typography/ScriptureText/index.js
@@ -2,9 +2,11 @@ import { Text } from 'react-native';
 import PropTypes from 'prop-types';
 import { compose, pure, setDisplayName } from 'recompose';
 
-import { styled, withPlaceholder, Placeholder } from '@apollosproject/ui-kit';
-
-const { Typography } = Placeholder;
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
 
 const styles = styled(({ theme, bold, italic }) => {
   let fontStack = theme.typography.serif.regular.default;
diff --git a/apolloschurchapp/src/ui/Scripture/typography/index.js b/apolloschurchapp/src/ui/Scripture/typography/index.js
index b9ec8c2..6c79752 100644
--- a/apolloschurchapp/src/ui/Scripture/typography/index.js
+++ b/apolloschurchapp/src/ui/Scripture/typography/index.js
@@ -1,6 +1,6 @@
 import { Text } from 'react-native';
 
-import { styled } from '@apollosproject/ui-kit';
+import styled from 'apolloschurchapp/src/ui/styled';
 
 import ScriptureText from './ScriptureText';
 
diff --git a/apolloschurchapp/src/ui/Share/Share.tests.js b/apolloschurchapp/src/ui/Share/Share.tests.js
index 1a059da..2411ac0 100644
--- a/apolloschurchapp/src/ui/Share/Share.tests.js
+++ b/apolloschurchapp/src/ui/Share/Share.tests.js
@@ -1,7 +1,7 @@
 import React from 'react';
 import renderer from 'react-test-renderer';
 
-import { Providers } from '@apollosproject/ui-kit';
+import { ThemeProvider } from 'apolloschurchapp/src/ui/theme';
 
 import Share from '.';
 
@@ -13,9 +13,9 @@ describe('the Share component', () => {
       message: 'Share this with all your friends and family',
     };
     const tree = renderer.create(
-      <Providers>
+      <ThemeProvider>
         <Share content={shareObject} />
-      </Providers>
+      </ThemeProvider>
     );
     expect(tree).toMatchSnapshot();
   });
diff --git a/apolloschurchapp/src/ui/Share/index.js b/apolloschurchapp/src/ui/Share/index.js
index 667f1e6..2a5fddb 100644
--- a/apolloschurchapp/src/ui/Share/index.js
+++ b/apolloschurchapp/src/ui/Share/index.js
@@ -1,8 +1,10 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 import { compose, pure } from 'recompose';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
 import share from 'apolloschurchapp/src/utils/content/share';
-import { Touchable, Icon, withTheme } from '@apollosproject/ui-kit';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
 
 const enhance = compose(
   pure,
diff --git a/apolloschurchapp/src/ui/SideBySideView/Left.js b/apolloschurchapp/src/ui/SideBySideView/Left.js
new file mode 100644
index 0000000..81b5fb6
--- /dev/null
+++ b/apolloschurchapp/src/ui/SideBySideView/Left.js
@@ -0,0 +1,16 @@
+import { View } from 'react-native';
+import { compose } from 'recompose';
+
+import { enhancer as mediaQuery } from 'apolloschurchapp/src/ui/MediaQuery';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+export default compose(
+  mediaQuery(
+    ({ md }) => ({ minWidth: md }),
+    styled({
+      width: `${100 - 41.6666666}%`,
+      height: '100%',
+      overflow: 'hidden',
+    })
+  )
+)(View);
diff --git a/apolloschurchapp/src/ui/SideBySideView/Right.js b/apolloschurchapp/src/ui/SideBySideView/Right.js
new file mode 100644
index 0000000..9d80e02
--- /dev/null
+++ b/apolloschurchapp/src/ui/SideBySideView/Right.js
@@ -0,0 +1,19 @@
+import { View } from 'react-native';
+import { compose } from 'recompose';
+
+import { enhancer as mediaQuery } from 'apolloschurchapp/src/ui/MediaQuery';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+export default compose(
+  mediaQuery(
+    ({ md }) => ({ minWidth: md }),
+    styled(
+      {
+        width: '41.6666666%',
+        height: '100%',
+        overflow: 'hidden',
+      },
+      'SideBySideView.Right'
+    )
+  )
+)(View);
diff --git a/apolloschurchapp/src/ui/SideBySideView/SideBySideView.tests.js b/apolloschurchapp/src/ui/SideBySideView/SideBySideView.tests.js
new file mode 100644
index 0000000..d701831
--- /dev/null
+++ b/apolloschurchapp/src/ui/SideBySideView/SideBySideView.tests.js
@@ -0,0 +1,53 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { View } from 'react-native';
+
+import SideBySide, { ResponsiveSideBySideView, Left, Right } from '.';
+
+describe('The SideBySide component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <SideBySide>
+        <View />
+        <View />
+      </SideBySide>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
+
+describe('The ResponsiveSideBySideView component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <ResponsiveSideBySideView>
+        <View />
+        <View />
+      </ResponsiveSideBySideView>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
+
+describe('The Right component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Right>
+        <View />
+        <View />
+      </Right>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
+
+describe('The Left component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Left>
+        <View />
+        <View />
+      </Left>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/SideBySideView/index.js b/apolloschurchapp/src/ui/SideBySideView/index.js
new file mode 100644
index 0000000..25c289d
--- /dev/null
+++ b/apolloschurchapp/src/ui/SideBySideView/index.js
@@ -0,0 +1,21 @@
+import { View } from 'react-native';
+import { compose, renderComponent } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { enhancer as mediaQuery } from 'apolloschurchapp/src/ui/MediaQuery';
+
+export { default as Right } from './Right';
+export { default as Left } from './Left';
+
+const SideBySideView = styled(({ reversed = false, stretched = true }) => ({
+  flexDirection: reversed ? 'row-reverse' : 'row',
+  flexWrap: 'nowrap',
+  justifyContent: 'space-between',
+  alignItems: stretched ? 'stretch' : 'center',
+}))(View);
+
+const ResponsiveSideBySideView = compose(
+  mediaQuery(({ md }) => ({ minWidth: md }), renderComponent(SideBySideView))
+)(View);
+
+export { SideBySideView as default, ResponsiveSideBySideView };
diff --git a/apolloschurchapp/src/ui/Spacer.js b/apolloschurchapp/src/ui/Spacer.js
new file mode 100644
index 0000000..f3f6fef
--- /dev/null
+++ b/apolloschurchapp/src/ui/Spacer.js
@@ -0,0 +1,7 @@
+import { View } from 'react-native';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+export default styled(({ theme, byWidth }) => ({
+  width: byWidth ? theme.sizing.baseUnit / 2 : null,
+  height: byWidth ? null : theme.sizing.baseUnit / 2,
+}))(View);
diff --git a/apolloschurchapp/src/ui/TabView/TabBar/Indicator.js b/apolloschurchapp/src/ui/TabView/TabBar/Indicator.js
new file mode 100644
index 0000000..64300fe
--- /dev/null
+++ b/apolloschurchapp/src/ui/TabView/TabBar/Indicator.js
@@ -0,0 +1,45 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { Animated } from 'react-native';
+
+const wrapperStyles = {
+  position: 'absolute',
+  left: 0,
+  bottom: 0,
+  height: 3,
+};
+
+const Indicator = ({
+  width,
+  position,
+  navigationState,
+  indicatorColor: backgroundColor,
+}) => {
+  const translateX = Animated.multiply(
+    position.interpolate({
+      inputRange: [0, navigationState.routes.length - 1],
+      outputRange: [0, navigationState.routes.length - 1],
+      extrapolate: 'clamp',
+    }),
+    width
+  );
+  return (
+    <Animated.View
+      style={{
+        width,
+        backgroundColor,
+        transform: [{ translateX }],
+        ...wrapperStyles,
+      }}
+    />
+  );
+};
+
+Indicator.propTypes = {
+  width: PropTypes.number,
+  position: PropTypes.shape({ interpolate: PropTypes.func }),
+  navigationState: PropTypes.shape({ routes: PropTypes.array }),
+  indicatorColor: PropTypes.string,
+};
+
+export default Indicator;
diff --git a/apolloschurchapp/src/ui/TabView/TabBar/Label.js b/apolloschurchapp/src/ui/TabView/TabBar/Label.js
new file mode 100644
index 0000000..f08eb4a
--- /dev/null
+++ b/apolloschurchapp/src/ui/TabView/TabBar/Label.js
@@ -0,0 +1,13 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+
+const Label = ({ route }) => {
+  const labelText = route.title;
+  return <H4 padded>{labelText}</H4>;
+};
+
+Label.propTypes = { route: PropTypes.shape({ title: PropTypes.string }) };
+
+export default Label;
diff --git a/apolloschurchapp/src/ui/TabView/TabBar/index.js b/apolloschurchapp/src/ui/TabView/TabBar/index.js
new file mode 100644
index 0000000..63387b6
--- /dev/null
+++ b/apolloschurchapp/src/ui/TabView/TabBar/index.js
@@ -0,0 +1,28 @@
+import { TabBar } from 'react-native-tab-view';
+import { compose, withProps } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+import Label from './Label';
+import Indicator from './Indicator';
+
+const withStyles = compose(
+  styled(
+    ({ theme }) => ({
+      backgroundColor: theme.colors.background.paper,
+    }),
+    'TabBar'
+  ),
+  withTheme(({ theme, indicatorColor }) => ({
+    indicatorColor: indicatorColor || theme.colors.tertiary,
+  }))
+);
+
+export default compose(
+  withStyles,
+  withProps({
+    renderLabel: Label,
+    renderIndicator: Indicator,
+  })
+)(TabBar);
diff --git a/apolloschurchapp/src/ui/TabView/TabView.stories.js b/apolloschurchapp/src/ui/TabView/TabView.stories.js
new file mode 100644
index 0000000..a2e8f4b
--- /dev/null
+++ b/apolloschurchapp/src/ui/TabView/TabView.stories.js
@@ -0,0 +1,28 @@
+import React from 'react';
+import { View, StyleSheet } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import TabView, { SceneMap } from '.';
+
+const styles = StyleSheet.create({
+  firstRoute: { flex: 1, backgroundColor: '#ff4081' }, // eslint-disable-line
+  secondRoute: { flex: 1, backgroundColor: '#673ab7' }, // eslint-disable-line
+});
+
+const FirstRoute = () => <View style={styles.firstRoute} />;
+const SecondRoute = () => <View style={styles.SecondRoute} />;
+
+storiesOf('TabView', module).add('default', () => (
+  <View style={StyleSheet.absoluteFill}>
+    <TabView
+      routes={[
+        { key: 'first', title: 'First' },
+        { key: 'second', title: 'Second' },
+      ]}
+      renderScene={SceneMap({
+        first: FirstRoute,
+        second: SecondRoute,
+      })}
+    />
+  </View>
+));
diff --git a/apolloschurchapp/src/ui/TabView/TabView.tests.js b/apolloschurchapp/src/ui/TabView/TabView.tests.js
new file mode 100644
index 0000000..8a2158b
--- /dev/null
+++ b/apolloschurchapp/src/ui/TabView/TabView.tests.js
@@ -0,0 +1,36 @@
+import React from 'react';
+import { View } from 'react-native';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import TabView, { SceneMap } from '.';
+
+const FirstRoute = () => (
+  // eslint-disable-next-line
+  <View style={[{ flex: 1, backgroundColor: '#ff4081' }]} />
+);
+const SecondRoute = () => (
+  // eslint-disable-next-line
+  <View style={[{ flex: 1, backgroundColor: '#673ab7' }]} />
+);
+
+describe('TabView Component', () => {
+  it('renders', () => {
+    const tree = renderer.create(
+      <Providers>
+        <TabView
+          routes={[
+            { key: 'first', title: 'First' },
+            { key: 'second', title: 'Second' },
+          ]}
+          renderScene={SceneMap({
+            first: FirstRoute,
+            second: SecondRoute,
+          })}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/TabView/index.js b/apolloschurchapp/src/ui/TabView/index.js
new file mode 100644
index 0000000..21777cd
--- /dev/null
+++ b/apolloschurchapp/src/ui/TabView/index.js
@@ -0,0 +1,69 @@
+import PropTypes from 'prop-types';
+import { Dimensions, Platform } from 'react-native';
+import { TabView as RNTabView, SceneMap } from 'react-native-tab-view';
+import { branch, compose, withProps, withState } from 'recompose';
+import isFunction from 'lodash/isFunction';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import TabBar from './TabBar';
+
+const initialLayout = {
+  height: 0,
+  width: Dimensions.get('window').width,
+};
+
+const withStyles = styled({ flex: 1 }, 'TabView');
+
+const TabView = compose(
+  withStyles,
+  branch(
+    ({ index }) => typeof index !== 'number',
+    withState('index', 'onIndexChange', ({ initialIndex }) => initialIndex)
+  ),
+  withProps((props) => {
+    function onIndexChange(index) {
+      if (isFunction(props.onIndexChange)) props.onIndexChange(index);
+      if (isFunction(props.onChange)) props.onChange(index);
+    }
+
+    return {
+      navigationState: {
+        index: props.index,
+        routes: props.routes.map((routeProps) => ({
+          ...routeProps,
+          jumpTo(key) {
+            const index = props.routes.findIndex((r) => r.key === key);
+            return onIndexChange(index);
+          },
+        })),
+      },
+      initialLayout,
+      renderTabBar: props.renderTabBar ? props.renderTabBar : TabBar,
+      onIndexChange,
+    };
+  })
+)(RNTabView);
+
+TabView.propTypes = {
+  initialIndex: PropTypes.number,
+  routes: PropTypes.arrayOf(
+    PropTypes.shape({
+      key: PropTypes.string.isRequired,
+      title: PropTypes.string.isRequired,
+    })
+  ).isRequired,
+  renderScene: PropTypes.func.isRequired,
+  renderTabBar: PropTypes.func,
+  swipeEnabled: PropTypes.bool,
+  autoHeightEnabled: PropTypes.bool,
+};
+
+TabView.defaultProps = {
+  initialIndex: 0,
+  swipeEnabled: Platform.OS !== 'web',
+  autoHeightEnabled: false,
+};
+
+export { SceneMap, TabBar };
+export default TabView;
diff --git a/apolloschurchapp/src/ui/TableView/Cell.js b/apolloschurchapp/src/ui/TableView/Cell.js
new file mode 100644
index 0000000..2d66bb2
--- /dev/null
+++ b/apolloschurchapp/src/ui/TableView/Cell.js
@@ -0,0 +1,38 @@
+import React, { Children, cloneElement } from 'react';
+import PropTypes from 'prop-types';
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const asFirstChild = (child) =>
+  cloneElement(child, {
+    style: { paddingLeft: 0 },
+  });
+
+const Container = styled(
+  ({ theme }) => ({
+    padding: theme.sizing.baseUnit / 2,
+    paddingLeft: theme.sizing.baseUnit / 1.5,
+    backgroundColor: theme.colors.background.paper,
+    flexDirection: 'row',
+    justifyContent: 'flex-start',
+    alignItems: 'center',
+    height: theme.sizing.baseUnit * 2.5,
+  }),
+  'TableView.Cell.Container'
+)(View);
+
+const Cell = ({ children, ...otherProps }) => (
+  <Container {...otherProps}>
+    {Children.map(children, (child, i) => {
+      if (i === 0) return asFirstChild(child);
+      return child;
+    })}
+  </Container>
+);
+
+Cell.propTypes = {
+  children: PropTypes.node,
+};
+
+export default Cell;
diff --git a/apolloschurchapp/src/ui/TableView/CellIcon.js b/apolloschurchapp/src/ui/TableView/CellIcon.js
new file mode 100644
index 0000000..3b68306
--- /dev/null
+++ b/apolloschurchapp/src/ui/TableView/CellIcon.js
@@ -0,0 +1,9 @@
+import { defaultProps } from 'recompose';
+
+import Icon from 'apolloschurchapp/src/ui/Icon';
+
+const CellIcon = defaultProps({
+  size: 20,
+})(Icon);
+
+export default CellIcon;
diff --git a/apolloschurchapp/src/ui/TableView/CellText.js b/apolloschurchapp/src/ui/TableView/CellText.js
new file mode 100644
index 0000000..6ab6214
--- /dev/null
+++ b/apolloschurchapp/src/ui/TableView/CellText.js
@@ -0,0 +1,11 @@
+import { H5 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const CellText = styled(({ theme }) => ({
+  flexGrow: 1,
+  flexShrink: 1,
+  paddingLeft: theme.sizing.baseUnit / 2,
+  paddingRight: theme.sizing.baseUnit / 2,
+}))(H5);
+
+export default CellText;
diff --git a/apolloschurchapp/src/ui/TableView/Divider.js b/apolloschurchapp/src/ui/TableView/Divider.js
new file mode 100644
index 0000000..034fd93
--- /dev/null
+++ b/apolloschurchapp/src/ui/TableView/Divider.js
@@ -0,0 +1,12 @@
+import { View, StyleSheet } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const Divider = styled(({ theme }) => ({
+  height: StyleSheet.hairlineWidth,
+  marginLeft: theme.sizing.baseUnit / 1.5,
+  backgroundColor: theme.colors.shadows.default,
+  width: '100%',
+}))(View);
+
+export default Divider;
diff --git a/apolloschurchapp/src/ui/TableView/FormFields.js b/apolloschurchapp/src/ui/TableView/FormFields.js
new file mode 100644
index 0000000..8550d26
--- /dev/null
+++ b/apolloschurchapp/src/ui/TableView/FormFields.js
@@ -0,0 +1,9 @@
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const FormFields = styled(({ theme }) => ({
+  paddingTop: theme.sizing.baseUnit * 0.6,
+  paddingBottom: theme.sizing.baseUnit / 2,
+}))(PaddedView);
+
+export default FormFields;
diff --git a/apolloschurchapp/src/ui/TableView/TableView.stories.js b/apolloschurchapp/src/ui/TableView/TableView.stories.js
new file mode 100644
index 0000000..d55dc89
--- /dev/null
+++ b/apolloschurchapp/src/ui/TableView/TableView.stories.js
@@ -0,0 +1,55 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import { Switch } from 'apolloschurchapp/src/ui/inputs';
+
+import TableView, { Cell, CellText, Divider } from '.';
+
+storiesOf('TableView', module).add('Examples', () => (
+  <FlexedView>
+    <TableView>
+      <Cell>
+        <Icon name="arrow-back" />
+        <CellText>Line Item</CellText>
+      </Cell>
+      <Divider />
+      <Cell>
+        <Icon name="camera" />
+        <CellText>A toggle!</CellText>
+        <Switch />
+      </Cell>
+      <Divider />
+      <Cell>
+        <CellText>Just a row</CellText>
+      </Cell>
+      <Divider />
+      <Cell>
+        <CellText>This be some button!</CellText>
+        <Icon name="arrow-next" />
+      </Cell>
+    </TableView>
+    <TableView>
+      <Cell>
+        <Icon name="arrow-back" />
+        <CellText>Line Item</CellText>
+      </Cell>
+      <Divider />
+      <Cell>
+        <Icon name="camera" />
+        <CellText>A toggle!</CellText>
+        <Switch />
+      </Cell>
+      <Divider />
+      <Cell>
+        <CellText>Just a row</CellText>
+      </Cell>
+      <Divider />
+      <Cell>
+        <CellText>This be some button!</CellText>
+        <Icon name="arrow-next" />
+      </Cell>
+    </TableView>
+  </FlexedView>
+));
diff --git a/apolloschurchapp/src/ui/TableView/TableView.tests.js b/apolloschurchapp/src/ui/TableView/TableView.tests.js
new file mode 100644
index 0000000..c6f2db9
--- /dev/null
+++ b/apolloschurchapp/src/ui/TableView/TableView.tests.js
@@ -0,0 +1,42 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import Providers from 'apolloschurchapp/src/Providers';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import { Switch } from 'apolloschurchapp/src/ui/inputs';
+
+import TableView, { Cell, CellText, Divider } from '.';
+
+describe('the TableView Component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <FlexedView>
+          <TableView>
+            <Cell>
+              <Icon name="arrow-back" />
+              <CellText>Line Item</CellText>
+            </Cell>
+            <Divider />
+            <Cell>
+              <Icon name="camera" />
+              <CellText>A toggle!</CellText>
+              <Switch />
+            </Cell>
+            <Divider />
+            <Cell>
+              <CellText>Just a row</CellText>
+            </Cell>
+            <Divider />
+            <Cell>
+              <CellText>This be some button!</CellText>
+              <Icon name="arrow-next" />
+            </Cell>
+          </TableView>
+        </FlexedView>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/TableView/index.js b/apolloschurchapp/src/ui/TableView/index.js
new file mode 100644
index 0000000..c9c1f01
--- /dev/null
+++ b/apolloschurchapp/src/ui/TableView/index.js
@@ -0,0 +1,38 @@
+import { StyleSheet, View } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, renderComponent } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { enhancer as mediaQuery } from 'apolloschurchapp/src/ui/MediaQuery';
+import Card from 'apolloschurchapp/src/ui/Card';
+
+export { default as Cell } from './Cell';
+export { default as CellText } from './CellText';
+export { default as CellIcon } from './CellIcon';
+export { default as Divider } from './Divider';
+export { default as FormFields } from './FormFields';
+
+const TableView = compose(
+  styled(
+    ({ theme }) => ({
+      marginBottom: theme.sizing.baseUnit,
+      backgroundColor: theme.colors.background.paper,
+      borderColor: theme.colors.shadows.default,
+      borderTopWidth: StyleSheet.hairlineWidth,
+      borderBottomWidth: StyleSheet.hairlineWidth,
+      borderLeftWidth: 0,
+      borderRightWidth: 0,
+    }),
+    'TableView'
+  ),
+  mediaQuery(
+    ({ md, width }, { responsive = true }) => responsive && width > md,
+    renderComponent(Card)
+  )
+)(View);
+
+TableView.proptypes = {
+  responsive: PropTypes.bool,
+};
+
+export default TableView;
diff --git a/apolloschurchapp/src/ui/ThumbnailCard/Thumbnail.js b/apolloschurchapp/src/ui/ThumbnailCard/Thumbnail.js
new file mode 100644
index 0000000..b0a78c0
--- /dev/null
+++ b/apolloschurchapp/src/ui/ThumbnailCard/Thumbnail.js
@@ -0,0 +1,24 @@
+import { StyleSheet } from 'react-native';
+import { compose } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import ProgressiveImage from 'apolloschurchapp/src/ui/ProgressiveImage';
+import { getIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+
+const Image = compose(
+  getIsLoading,
+  styled(
+    {
+      ...StyleSheet.absoluteFillObject,
+      height: '100%',
+      paddingTop: 0,
+      alignItems: 'center',
+      justifyContent: 'center',
+    },
+    'Card.Image'
+  )
+)(ProgressiveImage);
+
+Image.propTypes = ProgressiveImage.propTypes;
+
+export default Image;
diff --git a/apolloschurchapp/src/ui/ThumbnailCard/ThumbnailCard.stories.js b/apolloschurchapp/src/ui/ThumbnailCard/ThumbnailCard.stories.js
new file mode 100644
index 0000000..a951cca
--- /dev/null
+++ b/apolloschurchapp/src/ui/ThumbnailCard/ThumbnailCard.stories.js
@@ -0,0 +1,60 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import ThumbnailCard from '.';
+
+const containerStyles = {
+  flex: 1,
+  justifyContent: 'center',
+  backgroundColor: '#f7f7f7',
+};
+
+storiesOf('ThumbnailCard', module)
+  .add('Default', () => (
+    <View style={containerStyles}>
+      <ThumbnailCard title={'Why Jesus is Timeless'} />
+    </View>
+  ))
+  .add('With Description', () => (
+    <View style={containerStyles}>
+      <ThumbnailCard
+        title={'Why Jesus is Timeless'}
+        description={
+          'This is the story of a God, who made a flood and drowned the whole world. He gave up His son for everybody, and we absolutely love Him, all the time.'
+        }
+      />
+    </View>
+  ))
+  .add('With images', () => (
+    <View style={containerStyles}>
+      <ThumbnailCard
+        title={'Why Jesus is Timeless'}
+        images={'https://picsum.photos/400/400/?random'}
+      />
+    </View>
+  ))
+  .add('With Category', () => (
+    <View style={containerStyles}>
+      <ThumbnailCard title={'Why Jesus is Timeless'} category={'Time Travel'} />
+    </View>
+  ))
+  .add('With Category and images', () => (
+    <View style={containerStyles}>
+      <ThumbnailCard
+        title={'Why Jesus is Timeless'}
+        category={'Time Travel'}
+        images={'https://picsum.photos/400/400/?random'}
+      />
+    </View>
+  ))
+  .add('Skeleton', () => (
+    <View style={containerStyles}>
+      <ThumbnailCard
+        title={'Why Jesus is Timeless'}
+        images={'https://picsum.photos/400/400/?random'}
+        category={'Time Travel'}
+        isLoading
+      />
+    </View>
+  ));
diff --git a/apolloschurchapp/src/ui/ThumbnailCard/ThumbnailCard.tests.js b/apolloschurchapp/src/ui/ThumbnailCard/ThumbnailCard.tests.js
new file mode 100644
index 0000000..bbe5e56
--- /dev/null
+++ b/apolloschurchapp/src/ui/ThumbnailCard/ThumbnailCard.tests.js
@@ -0,0 +1,77 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import ThumbnailCard from '.';
+
+describe('the ThumbnailCard component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ThumbnailCard title={'Why Jesus is Timeless'} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with a description', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ThumbnailCard
+          title={'Why Jesus is Timeless'}
+          description={
+            'This is the story of a God, who made a flood and drowned the whole world. He gave up His son for everybody, and we absolutely love Him, all the time.'
+          }
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with an images', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ThumbnailCard
+          title={'Why Jesus is Timeless'}
+          images={'https://picsum.photos/100/100/?random'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with a category', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ThumbnailCard
+          title={'Why Jesus is Timeless'}
+          category={'Time Travel'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with a category and images', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ThumbnailCard
+          title={'Why Jesus is Timeless'}
+          images={'https://picsum.photos/100/100/?random'}
+          category={'Time Travel'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <ThumbnailCard
+          title={'Why Jesus is Timeless'}
+          images={'https://picsum.photos/100/100/?random'}
+          category={'Time Travel'}
+          isLoading
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/ThumbnailCard/index.js b/apolloschurchapp/src/ui/ThumbnailCard/index.js
new file mode 100644
index 0000000..3888a87
--- /dev/null
+++ b/apolloschurchapp/src/ui/ThumbnailCard/index.js
@@ -0,0 +1,93 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { TouchableWithoutFeedback } from 'react-native';
+import { compose, pure } from 'recompose';
+import { startCase, toLower } from 'lodash';
+
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+import styled from 'apolloschurchapp/src/ui/styled';
+import Card, { CardContent } from 'apolloschurchapp/src/ui/Card';
+import SideBySideView from 'apolloschurchapp/src/ui/SideBySideView';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import { H5, BodyText, Paragraph } from 'apolloschurchapp/src/ui/typography';
+import { enhancer as mediaQuery } from 'apolloschurchapp/src/ui/MediaQuery';
+import ChannelLabel from 'apolloschurchapp/src/ui/ChannelLabel';
+
+import Thumbnail from './Thumbnail';
+
+const enhance = compose(
+  withIsLoading,
+  pure
+);
+
+const HorizontalLayout = styled({
+  alignItems: 'center',
+  minHeight: 110, // kind of the best middle ground for various title lengths.
+})(SideBySideView);
+
+const LeftColumn = compose(
+  styled({ flex: 1.66 }),
+  mediaQuery(
+    ({ md }) => ({ maxWidth: md }),
+    styled(({ theme }) => ({
+      paddingVertical: theme.sizing.baseUnit * 0.75,
+    })),
+    styled(({ theme }) => ({
+      paddingVertical: theme.sizing.baseUnit * 2,
+      paddingHorizontal: theme.sizing.baseUnit * 1.5,
+    }))
+  )
+)(CardContent);
+
+const RightColumn = styled({
+  alignSelf: 'stretch',
+})(FlexedView);
+
+const ThumbnailCard = enhance(
+  ({
+    title,
+    description,
+    images,
+    thumbnailImage,
+    category,
+    isLoading,
+    onPressItem,
+    ...otherProps
+  }) => (
+    <TouchableWithoutFeedback onPress={() => onPressItem()}>
+      <Card isLoading={isLoading} inHorizontalList {...otherProps}>
+        <HorizontalLayout>
+          <LeftColumn>
+            <H5>{title}</H5>
+            {description ? (
+              <Paragraph>
+                <BodyText>{description}</BodyText>
+              </Paragraph>
+            ) : null}
+            {typeof category !== 'undefined' ? (
+              <ChannelLabel
+                label={startCase(toLower(category))}
+                isLoading={isLoading}
+              />
+            ) : null}
+          </LeftColumn>
+          {images ? (
+            <RightColumn>
+              <Thumbnail source={images} thumbnail={thumbnailImage} />
+            </RightColumn>
+          ) : null}
+        </HorizontalLayout>
+      </Card>
+    </TouchableWithoutFeedback>
+  )
+);
+
+ThumbnailCard.propTypes = {
+  title: PropTypes.string.isRequired,
+  description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
+  images: Thumbnail.propTypes.source,
+  category: PropTypes.string,
+  isLoading: PropTypes.bool,
+};
+
+export default ThumbnailCard;
diff --git a/apolloschurchapp/src/ui/TileImage/TileImage.stories.js b/apolloschurchapp/src/ui/TileImage/TileImage.stories.js
new file mode 100644
index 0000000..b535875
--- /dev/null
+++ b/apolloschurchapp/src/ui/TileImage/TileImage.stories.js
@@ -0,0 +1,37 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import TileImage from '.';
+
+const Square = styled({ aspectRatio: 1 })(View);
+
+storiesOf('TileImage', module)
+  .add('Default', () => (
+    <Square>
+      <TileImage
+        image={'https://picsum.photos/600/400/?random'}
+        link={'https://github.com'}
+        text={'So cool!'}
+      />
+    </Square>
+  ))
+  .add('Without text', () => (
+    <Square>
+      <TileImage
+        image={'https://picsum.photos/600/400/?random'}
+        link={'https://github.com'}
+      />
+    </Square>
+  ))
+  .add('isLoading', () => (
+    <Square>
+      <TileImage
+        image={'https://picsum.photos/600/400/?random'}
+        link={'https://github.com'}
+        isLoading
+      />
+    </Square>
+  ));
diff --git a/apolloschurchapp/src/ui/TileImage/TileImage.tests.js b/apolloschurchapp/src/ui/TileImage/TileImage.tests.js
new file mode 100644
index 0000000..b4d1332
--- /dev/null
+++ b/apolloschurchapp/src/ui/TileImage/TileImage.tests.js
@@ -0,0 +1,57 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import TileImage from '.';
+
+describe('the TileImage component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <TileImage
+          image={'https://picsum.photos/600/400/?random'}
+          link={'https://github.com'}
+          text={'So cool!'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render without text', () => {
+    const tree = renderer.create(
+      <Providers>
+        <TileImage
+          image={'https://picsum.photos/600/400/?random'}
+          link={'https://github.com'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <TileImage
+          image={'https://picsum.photos/600/400/?random'}
+          link={'https://github.com'}
+          isLoading
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('passes an onPressItem prop', () => {
+    const handleOnPressItem = jest.fn;
+    const tree = renderer.create(
+      <Providers>
+        <TileImage
+          image={'https://picsum.photos/600/400/?random'}
+          link={'https://github.com'}
+          onPressItem={handleOnPressItem}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/TileImage/index.js b/apolloschurchapp/src/ui/TileImage/index.js
new file mode 100644
index 0000000..a37deb9
--- /dev/null
+++ b/apolloschurchapp/src/ui/TileImage/index.js
@@ -0,0 +1,72 @@
+import React from 'react';
+import { View } from 'react-native';
+import PropTypes from 'prop-types';
+import { pure, compose } from 'recompose';
+
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import GradientOverlayImage from 'apolloschurchapp/src/ui/GradientOverlayImage';
+import TouchableScale from 'apolloschurchapp/src/ui/TouchableScale';
+
+const CardView = styled(
+  ({ theme }) => ({
+    borderRadius: theme.sizing.baseUnit,
+    overflow: 'hidden',
+    width: '100%',
+    height: '100%',
+    aspectRatio: 1,
+  }),
+  'TileImage'
+)(View);
+
+const Title = styled(
+  ({ theme }) => ({
+    position: 'absolute',
+    bottom: theme.sizing.baseUnit,
+    left: theme.sizing.baseUnit,
+    right: theme.sizing.baseUnit,
+    backgroundColor: theme.colors.transparent,
+    color: theme.colors.lightPrimary,
+  }),
+  'TileImage.Text'
+)(H4);
+
+const SquareGradientOverlayImage = styled({
+  aspectRatio: 1,
+})(GradientOverlayImage);
+
+const enhance = compose(
+  withTheme(({ theme: { colors } = {} } = {}) => ({ theme: { colors } })),
+  pure
+);
+
+const TileImage = enhance(
+  ({ image, link, onPressItem, text, theme, isLoading }) => (
+    <TouchableScale onPress={() => !isLoading && onPressItem({ ...link })}>
+      <CardView>
+        <SquareGradientOverlayImage
+          source={image}
+          isLoading={isLoading}
+          maintainAspectRatio={false}
+          overlayColor={text ? theme.colors.black : null}
+        />
+        <Title isLoading={isLoading}>{text}</Title>
+      </CardView>
+    </TouchableScale>
+  )
+);
+
+TileImage.propTypes = {
+  image: GradientOverlayImage.propTypes.source,
+  link: PropTypes.string,
+  onPressItem: PropTypes.func,
+  text: PropTypes.string,
+  isLoading: PropTypes.bool,
+};
+
+TileImage.defaultProps = {
+  text: '',
+};
+
+export default TileImage;
diff --git a/apolloschurchapp/src/ui/Touchable/index.js b/apolloschurchapp/src/ui/Touchable/index.js
new file mode 100644
index 0000000..cef6121
--- /dev/null
+++ b/apolloschurchapp/src/ui/Touchable/index.js
@@ -0,0 +1,16 @@
+import {
+  Platform,
+  TouchableNativeFeedback,
+  TouchableOpacity,
+} from 'react-native';
+
+const IOSTouchable = TouchableOpacity;
+
+IOSTouchable.defaultProps = {
+  activeOpacity: 0.5,
+};
+
+const Touchable =
+  Platform.OS === 'android' ? TouchableNativeFeedback : IOSTouchable;
+
+export default Touchable;
diff --git a/apolloschurchapp/src/ui/TouchableScale/index.js b/apolloschurchapp/src/ui/TouchableScale/index.js
new file mode 100644
index 0000000..a4bdca9
--- /dev/null
+++ b/apolloschurchapp/src/ui/TouchableScale/index.js
@@ -0,0 +1,58 @@
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+import { Animated, TouchableWithoutFeedback } from 'react-native';
+
+class TouchableScale extends Component {
+  static propTypes = {
+    minScale: PropTypes.number,
+    springConfig: PropTypes.shape({}),
+  };
+
+  static defaultProps = {
+    minScale: 0.95,
+    springConfig: {
+      speed: 20,
+    },
+  };
+
+  scale = new Animated.Value(this.props.active ? this.props.minScale : 1);
+
+  animatedStyle = {
+    transform: [{ scale: this.scale }],
+  };
+
+  handlePressIn = () => {
+    Animated.spring(this.scale, {
+      toValue: this.props.minScale,
+      useNativeDriver: true,
+      isInteraction: false,
+      ...this.props.springConfig,
+    }).start();
+  };
+
+  handlePressOut = () => {
+    Animated.spring(this.scale, {
+      toValue: 1,
+      useNativeDriver: true,
+      isInteraction: false,
+      ...this.props.springConfig,
+    }).start();
+  };
+
+  render() {
+    const { minScale, style, children, ...touchableProps } = this.props;
+    return (
+      <TouchableWithoutFeedback
+        {...touchableProps}
+        onPressIn={this.handlePressIn}
+        onPressOut={this.handlePressOut}
+      >
+        <Animated.View style={[this.animatedStyle, style]}>
+          {children}
+        </Animated.View>
+      </TouchableWithoutFeedback>
+    );
+  }
+}
+
+export default TouchableScale;
diff --git a/apolloschurchapp/src/ui/UserAvatarView/AvatarForm.js b/apolloschurchapp/src/ui/UserAvatarView/AvatarForm.js
index 70dabc9..9bdf841 100644
--- a/apolloschurchapp/src/ui/UserAvatarView/AvatarForm.js
+++ b/apolloschurchapp/src/ui/UserAvatarView/AvatarForm.js
@@ -1,33 +1,16 @@
 import React, { PureComponent } from 'react';
 import { View } from 'react-native';
 import PropTypes from 'prop-types';
-import { get } from 'lodash';
-import { Query } from 'react-apollo';
 
-import {
-  Touchable,
-  ButtonLink,
-  Avatar,
-  withTheme,
-  H5,
-  styled,
-} from '@apollosproject/ui-kit';
-import getUserProfile from '../../tabs/connect/getUserProfile';
+import ConnectedImage from 'apolloschurchapp/src/ui/ConnectedImage';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+import Avatar from 'apolloschurchapp/src/ui/Avatar';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import { H5 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
 import uploadPhoto from './uploadPhoto';
 
-const GetPhotoData = ({ children }) => (
-  <Query query={getUserProfile}>
-    {({ data: { currentUser = {} } = {} }) => {
-      const photo = get(currentUser, 'profile.photo');
-      return children({ photo });
-    }}
-  </Query>
-);
-
-GetPhotoData.propTypes = {
-  children: PropTypes.func.isRequired,
-};
-
 const StyledAvatar = withTheme(({ theme }) => ({
   containerStyle: {
     marginRight: 0,
@@ -35,10 +18,6 @@ const StyledAvatar = withTheme(({ theme }) => ({
   },
 }))(Avatar);
 
-const RoundTouchable = withTheme(({ theme, size }) => ({
-  borderRadius: get(theme.sizing.avatar, size, theme.sizing.avatar.small),
-}))(Touchable);
-
 const Wrapper = styled({
   justifyContent: 'center',
   alignItems: 'center',
@@ -49,44 +28,30 @@ export default class AvatarForm extends PureComponent {
     isUploadingFile: false,
   };
 
-  componentWillUnmount() {
-    this.setState({ isUploadingFile: false });
-  }
-
   handleUploadPhoto = async () => {
-    try {
-      await uploadPhoto({
-        onUpload: () => this.setState({ isUploadingFile: true }),
-      });
-      await this.props.refetch();
-      await this.setState({ isUploadingFile: false });
-    } catch (e) {
-      this.setState({ isUploadingFile: false });
-    }
+    await uploadPhoto({
+      onUpload: () => this.setState({ isUploadingFile: true }),
+    });
+    await this.props.refetch();
+    this.setState({ isUploadingFile: false });
   };
 
   render() {
+    const { photo } = this.props;
     const { isUploadingFile } = this.state;
 
     return (
       <Wrapper>
-        <RoundTouchable
+        <Touchable
           disabled={this.props.disabled}
           onPress={this.handleUploadPhoto}
-          size="medium"
         >
-          <GetPhotoData>
-            {({ photo }) => (
-              <View>
-                <StyledAvatar
-                  source={photo}
-                  size="medium"
-                  isLoading={isUploadingFile}
-                />
-              </View>
-            )}
-          </GetPhotoData>
-        </RoundTouchable>
+          <StyledAvatar
+            source={photo}
+            size="medium"
+            isLoading={isUploadingFile}
+          />
+        </Touchable>
         {this.props.text ? (
           <H5>
             <ButtonLink onPress={this.handleUploadPhoto}>
@@ -101,6 +66,7 @@ export default class AvatarForm extends PureComponent {
 
 AvatarForm.propTypes = {
   refetch: PropTypes.func.isRequired,
+  photo: ConnectedImage.propTypes.source,
   disabled: PropTypes.bool,
   text: PropTypes.bool,
 };
diff --git a/apolloschurchapp/src/ui/UserAvatarView/index.js b/apolloschurchapp/src/ui/UserAvatarView/index.js
index 4228878..c13c1c0 100644
--- a/apolloschurchapp/src/ui/UserAvatarView/index.js
+++ b/apolloschurchapp/src/ui/UserAvatarView/index.js
@@ -2,14 +2,12 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import { View } from 'react-native';
 
-import {
-  H3,
-  PaddedView,
-  ConnectedImage,
-  styled,
-  ChannelLabel,
-  withIsLoading,
-} from '@apollosproject/ui-kit';
+import { H3 } from 'apolloschurchapp/src/ui/typography';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import ConnectedImage from 'apolloschurchapp/src/ui/ConnectedImage';
+import styled from 'apolloschurchapp/src/ui/styled';
+import ChannelLabel from 'apolloschurchapp/src/ui/ChannelLabel';
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
 
 import AvatarForm from './AvatarForm';
 
diff --git a/apolloschurchapp/src/ui/UserAvatarView/uploadPhoto.js b/apolloschurchapp/src/ui/UserAvatarView/uploadPhoto.js
index f56408b..700b9e5 100644
--- a/apolloschurchapp/src/ui/UserAvatarView/uploadPhoto.js
+++ b/apolloschurchapp/src/ui/UserAvatarView/uploadPhoto.js
@@ -2,11 +2,9 @@ import gql from 'graphql-tag';
 import ImagePicker from 'react-native-image-picker';
 import { client } from 'apolloschurchapp/src/client';
 import { ReactNativeFile } from 'apollo-upload-client';
-import getUserProfile from '../../tabs/connect/getUserProfile';
 
 const options = {
   title: 'Select Profile Image',
-  quality: 0,
   storageOptions: {
     skipBackup: true,
     path: 'images',
@@ -17,7 +15,7 @@ function showImagePicker() {
   return new Promise((resolve, reject) => {
     ImagePicker.showImagePicker(options, (response) => {
       if (response.didCancel) {
-        reject(response.didCancel);
+        resolve({ cancelled: true });
       } else if (response.error) {
         reject(response.error);
       } else {
@@ -28,53 +26,22 @@ function showImagePicker() {
 }
 
 export default async ({ onUpload = () => ({}) }) => {
-  try {
-    const image = await showImagePicker();
-    const file = new ReactNativeFile({
-      uri: image.uri,
-      name: image.fileName,
-      type: 'image/jpeg',
-    });
-    onUpload();
-    return client.mutate({
-      mutation: gql`
-        mutation uploadProfileImage($file: Upload!, $size: Int!) {
-          uploadProfileImage(file: $file, size: $size) {
-            id
-            firstName
-            lastName
-            photo {
-              uri
-            }
-          }
-        }
-      `,
-      variables: { file, size: image.fileSize },
-      update: (
-        cache,
-        {
-          data: {
-            uploadProfileImage: { photo },
-          },
+  const image = await showImagePicker();
+  const file = new ReactNativeFile({
+    uri: image.uri,
+    name: image.fileName,
+    type: 'image/jpeg',
+  });
+  onUpload();
+  return client.mutate({
+    mutation: gql`
+      mutation uploadProfileImage($file: Upload!, $size: Int!) {
+        uploadProfileImage(file: $file, size: $size) {
+          firstName
+          lastName
         }
-      ) => {
-        const data = cache.readQuery({ query: getUserProfile });
-
-        cache.writeQuery({
-          query: getUserProfile,
-          data: {
-            currentUser: {
-              ...data.currentUser,
-              profile: {
-                ...data.currentUser.profile,
-                photo,
-              },
-            },
-          },
-        });
-      },
-    });
-  } catch (e) {
-    return null;
-  }
+      }
+    `,
+    variables: { file, size: image.fileSize },
+  });
 };
diff --git a/apolloschurchapp/src/ui/WebBrowser/index.js b/apolloschurchapp/src/ui/WebBrowser/index.js
index bc93c02..70260fc 100644
--- a/apolloschurchapp/src/ui/WebBrowser/index.js
+++ b/apolloschurchapp/src/ui/WebBrowser/index.js
@@ -2,7 +2,7 @@
 import { Platform } from 'react-native';
 import { createContext } from 'react';
 
-import { withTheme } from '@apollosproject/ui-kit';
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
 
 import Browser from './Browser';
 
diff --git a/apolloschurchapp/src/ui/inputs/DateInput/DateInput.tests.js b/apolloschurchapp/src/ui/inputs/DateInput/DateInput.tests.js
new file mode 100644
index 0000000..52ba67a
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/DateInput/DateInput.tests.js
@@ -0,0 +1,52 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import moment from 'moment';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import DateInput from '.';
+
+describe('The DateInput component', () => {
+  it('should render', () => {
+    const tree = renderer.create(
+      <Providers>
+        <DateInput value={moment.utc('1/1/2015').toDate()} />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with a displayValue', () => {
+    const tree = renderer.create(
+      <Providers>
+        <DateInput
+          value={moment.utc('1/1/2015').toDate()}
+          displayValue={moment.utc('1/1/2015').format('YYYY/MM/DD')}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with a placeholder', () => {
+    const tree = renderer.create(
+      <Providers>
+        <DateInput
+          placeholder={'mm/dd/yyyy'}
+          value={moment.utc('1/1/2015').toDate()}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with a label', () => {
+    const tree = renderer.create(
+      <Providers>
+        <DateInput
+          value={moment.utc('1/1/2015').toDate()}
+          displayValue={moment.utc('1/1/2015').format('YYYY/MM/DD')}
+          label={'Date Label'}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/inputs/DateInput/index.js b/apolloschurchapp/src/ui/inputs/DateInput/index.js
new file mode 100644
index 0000000..a92ab5d
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/DateInput/index.js
@@ -0,0 +1,75 @@
+import React, { PureComponent } from 'react';
+import PropTypes from 'prop-types';
+import moment from 'moment';
+import { Animated } from 'react-native';
+import DateTimePicker from 'react-native-modal-datetime-picker';
+
+import Chip from 'apolloschurchapp/src/ui/Chip';
+
+import InputWrapper from '../InputWrapper';
+import FloatingLabel from '../FloatingLabel';
+
+const chipStyle = { marginTop: 5 };
+
+class DateInput extends PureComponent {
+  static propTypes = {
+    label: PropTypes.string,
+    placeholder: PropTypes.string,
+    value: PropTypes.any, // eslint-disable-line
+    displayValue: PropTypes.string,
+    onChange: PropTypes.func,
+    onChangeText: PropTypes.func,
+    onBlur: PropTypes.func,
+    error: PropTypes.any, // eslint-disable-line
+  };
+
+  state = {
+    isVisible: false,
+  };
+
+  handleOpen = () => this.setState({ isVisible: true });
+
+  handleClose = () => {
+    this.setState({ isVisible: false });
+    if (this.props.onBlur) this.props.onBlur();
+  };
+
+  handleConfirm = (value) => {
+    if (this.props.onChange) this.props.onChange(value);
+    if (this.props.onChangeText) {
+      this.props.onChangeText(moment(value).format('MM/DD/YYYY'));
+    }
+    this.handleClose();
+  };
+
+  render() {
+    let date = this.props.value;
+    if (typeof date === 'string') date = moment(date).toDate();
+    return (
+      <InputWrapper>
+        <Chip
+          style={chipStyle}
+          title={
+            this.props.displayValue ||
+            this.props.placeholder ||
+            this.props.label
+          }
+          onPress={this.handleOpen}
+        />
+        <DateTimePicker
+          date={date || new Date()}
+          isVisible={this.state.isVisible}
+          onConfirm={this.handleConfirm}
+          onCancel={this.handleClose}
+        />
+        {this.props.displayValue || this.props.placeholder ? (
+          <FloatingLabel animation={new Animated.Value(1)}>
+            {this.props.label}
+          </FloatingLabel>
+        ) : null}
+      </InputWrapper>
+    );
+  }
+}
+
+export default DateInput;
diff --git a/apolloschurchapp/src/ui/inputs/ErrorText.js b/apolloschurchapp/src/ui/inputs/ErrorText.js
new file mode 100644
index 0000000..3368ee0
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/ErrorText.js
@@ -0,0 +1,9 @@
+import { H6 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const ErrorText = styled(({ theme }) => ({
+  color: theme.colors.alert,
+  paddingTop: theme.sizing.baseUnit / 2,
+}))(H6);
+
+export default ErrorText;
diff --git a/apolloschurchapp/src/ui/inputs/FloatingLabel.js b/apolloschurchapp/src/ui/inputs/FloatingLabel.js
new file mode 100644
index 0000000..3e45f9b
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/FloatingLabel.js
@@ -0,0 +1,90 @@
+import React, { PureComponent } from 'react';
+import PropTypes from 'prop-types';
+import { Animated, StyleSheet } from 'react-native';
+
+import { H6 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+export const LabelText = styled(
+  ({ theme }) => ({
+    color: theme.colors.text.secondary,
+    backgroundColor: 'transparent',
+    paddingVertical: theme.sizing.baseUnit / 4,
+  }),
+  'FloatingLabel.LabelText'
+)(H6);
+
+const styles = StyleSheet.create({
+  floatLabelView: {
+    position: 'absolute',
+    bottom: 0,
+    top: 0,
+    justifyContent: 'center',
+  },
+});
+
+class FloatingLabel extends PureComponent {
+  static propTypes = {
+    children: PropTypes.node,
+    animation: PropTypes.shape({
+      interpolate: PropTypes.func,
+    }),
+    scaleSize: PropTypes.number, // how much smaller to make label when focused
+    floatingOpacity: PropTypes.number,
+  };
+
+  static defaultProps = {
+    animation: new Animated.Value(0),
+    scaleSize: 0.8,
+    floatingOpacity: 0.8,
+  };
+
+  state = {
+    labelWidth: 0,
+    labelHeight: 0,
+  };
+
+  handleLayout = ({ nativeEvent: { layout } }) => {
+    this.setState({
+      labelWidth: layout.width,
+      labelHeight: layout.height,
+    });
+  };
+
+  render() {
+    const scaledWidth = this.state.labelWidth * (1.05 - this.props.scaleSize);
+    const sideScaledWidth = scaledWidth / 2;
+    const scale = this.props.animation.interpolate({
+      inputRange: [0, 1],
+      outputRange: [1, this.props.scaleSize],
+    });
+    const opacity = this.props.animation.interpolate({
+      inputRange: [0, 1],
+      outputRange: [1, this.props.floatingOpacity],
+    });
+    const translateY = this.props.animation.interpolate({
+      inputRange: [0, 1],
+      outputRange: [0, -(this.state.labelHeight * 0.7)],
+    });
+    const translateX = this.props.animation.interpolate({
+      inputRange: [0, 1],
+      outputRange: [0, -sideScaledWidth],
+    });
+    const wrapperStyles = {
+      transform: [{ scale }, { translateX }, { translateY }],
+      opacity,
+    };
+
+    return (
+      <Animated.View
+        pointerEvents="none"
+        onLayout={this.handleLayout}
+        style={[styles.floatLabelView, wrapperStyles]}
+      >
+        <LabelText>{this.props.children}</LabelText>
+      </Animated.View>
+    );
+  }
+}
+
+export default FloatingLabel;
diff --git a/apolloschurchapp/src/ui/inputs/InputAddon.js b/apolloschurchapp/src/ui/inputs/InputAddon.js
new file mode 100644
index 0000000..01e4ee7
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/InputAddon.js
@@ -0,0 +1,21 @@
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const InputAddon = styled(
+  {
+    justifyContent: 'center',
+    alignItems: 'center',
+  },
+  'InputAddon'
+)(View);
+
+const AddonRow = styled(
+  {
+    flexDirection: 'row',
+    justifyContent: 'center',
+  },
+  'InputWrapper.Row'
+)(View);
+
+export { InputAddon as default, AddonRow };
diff --git a/apolloschurchapp/src/ui/inputs/InputUnderline.js b/apolloschurchapp/src/ui/inputs/InputUnderline.js
new file mode 100644
index 0000000..378a2b3
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/InputUnderline.js
@@ -0,0 +1,62 @@
+import React from 'react';
+import { Animated, StyleSheet, View } from 'react-native';
+import PropTypes from 'prop-types';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const FocusedUnderline = styled(
+  ({ theme, hasError }) => ({
+    height: StyleSheet.hairlineWidth,
+    backgroundColor: hasError ? theme.colors.alert : theme.colors.primary,
+    bottom: 0,
+  }),
+  'InputUnderline.focused'
+)(View);
+
+const BluredUnderline = styled(
+  ({ theme }) => ({
+    height: StyleSheet.hairlineWidth,
+    backgroundColor: theme.colors.background.inactive,
+    bottom: -StyleSheet.hairlineWidth,
+  }),
+  'InputUnderline.blurred'
+)(View);
+
+const styles = StyleSheet.create({
+  wrapper: {
+    bottom: 0,
+    left: 0,
+    right: 0,
+  },
+});
+
+const InputUnderline = ({
+  animation = new Animated.Value(0),
+  hasError = false,
+}) => {
+  let scaleX = animation.interpolate({
+    inputRange: [0, 1],
+    outputRange: [0.0001, 1],
+  });
+  if (hasError) scaleX = 1;
+
+  const transform = [{ scaleX }];
+
+  return (
+    <View style={styles.wrapper}>
+      <BluredUnderline />
+      <Animated.View style={[styles.wrapper, { transform }]}>
+        <FocusedUnderline hasError={hasError} />
+      </Animated.View>
+    </View>
+  );
+};
+
+InputUnderline.propTypes = {
+  animation: PropTypes.shape({
+    interpolate: PropTypes.func,
+  }),
+  hasError: PropTypes.bool,
+};
+
+export default InputUnderline;
diff --git a/apolloschurchapp/src/ui/inputs/InputWrapper.js b/apolloschurchapp/src/ui/inputs/InputWrapper.js
new file mode 100644
index 0000000..fe23b94
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/InputWrapper.js
@@ -0,0 +1,13 @@
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const InputWrapper = styled(
+  ({ theme, disabled }) => ({
+    marginVertical: theme.sizing.baseUnit,
+    ...(disabled ? { opacity: 0.5 } : {}),
+  }),
+  'InputWrapper'
+)(View);
+
+export default InputWrapper;
diff --git a/apolloschurchapp/src/ui/inputs/Picker/Picker.stories.js b/apolloschurchapp/src/ui/inputs/Picker/Picker.stories.js
new file mode 100644
index 0000000..79ce6b8
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Picker/Picker.stories.js
@@ -0,0 +1,15 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+
+import Picker, { Item } from '.';
+
+storiesOf('Inputs', module).add('Picker', () => (
+  <FlexedView>
+    <Picker placeholder="Select a language..." label="Languages">
+      <Item label="Java" value="java" />
+      <Item label="JavaScript" value="js" />
+    </Picker>
+  </FlexedView>
+));
diff --git a/apolloschurchapp/src/ui/inputs/Picker/Picker.tests.js b/apolloschurchapp/src/ui/inputs/Picker/Picker.tests.js
new file mode 100644
index 0000000..f2f66a1
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Picker/Picker.tests.js
@@ -0,0 +1,48 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { Text, Animated } from 'react-native';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import Picker, { Item, Picker as UnwrappedPicker } from '.';
+
+describe('The Picker Input component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Picker
+          placeholder="Select a language..."
+          label="Languages"
+          displayValue="Display Value"
+          prefix={<Text>Hello there!</Text>}
+          suffix={<Text>Goodbye now.</Text>}
+        >
+          <Item label="Java" value="java" />
+          <Item label="JavaScript" value="js" />
+        </Picker>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+
+  it('focuses and blurs', () => {
+    const focus = jest.fn();
+    const blur = jest.fn();
+    const tree = renderer.create(
+      <Providers>
+        <UnwrappedPicker
+          focusAnimation={new Animated.Value(0)}
+          onFocus={focus}
+          onBlur={blur}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+    tree.root.findByType(UnwrappedPicker).instance.handleOnPress();
+    expect(tree).toMatchSnapshot();
+    expect(focus).toHaveBeenCalled();
+    tree.root.findByType(UnwrappedPicker).instance.handleOnPress();
+    expect(tree).toMatchSnapshot();
+    expect(blur).toHaveBeenCalled();
+  });
+});
diff --git a/apolloschurchapp/src/ui/inputs/Picker/PickerList.js b/apolloschurchapp/src/ui/inputs/Picker/PickerList.js
new file mode 100644
index 0000000..d3c846f
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Picker/PickerList.js
@@ -0,0 +1,62 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { Modal, StyleSheet, View, Picker as NativePicker } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+
+const StyledPicker = styled(
+  ({ theme }) => ({
+    borderTopWidth: StyleSheet.hairlineWidth,
+    borderTopColor: theme.colors.background.inactive,
+  }),
+  'Inputs.Picker.List'
+)(NativePicker);
+
+const PickerKeyboardView = styled(
+  ({ theme }) => ({
+    backgroundColor: theme.colors.background.paper,
+    position: 'absolute',
+    bottom: 0,
+    left: 0,
+    right: 0,
+    borderTopColor: theme.colors.shadows.default,
+    borderTopWidth: StyleSheet.hairlineWidth,
+  }),
+  'Inputs.Picker.List.Keyboard'
+)(View);
+
+const Toolbar = styled(
+  ({ theme }) => ({
+    alignItems: 'flex-end',
+    padding: theme.sizing.baseUnit / 2,
+    backgroundColor: theme.colors.background.accent,
+  }),
+  'Inputs.Picker.List.Toolbar'
+)(View);
+
+const PickerList = ({ focused, onRequestClose, value, ...pickerProps }) => (
+  <Modal
+    visible={focused}
+    onRequestClose={onRequestClose}
+    animationType="slide"
+    transparent
+  >
+    <PickerKeyboardView>
+      <Toolbar>
+        <ButtonLink onPress={onRequestClose}>Done</ButtonLink>
+      </Toolbar>
+      <StyledPicker selectedValue={value} {...pickerProps} />
+    </PickerKeyboardView>
+  </Modal>
+);
+
+PickerList.propTypes = {
+  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+  children: PropTypes.node,
+  focused: PropTypes.bool,
+  onRequestClose: PropTypes.func,
+  mode: PropTypes.string,
+};
+
+export default PickerList;
diff --git a/apolloschurchapp/src/ui/inputs/Picker/index.android.js b/apolloschurchapp/src/ui/inputs/Picker/index.android.js
new file mode 100644
index 0000000..8703f8c
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Picker/index.android.js
@@ -0,0 +1,34 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { Animated, Picker as NativePicker } from 'react-native';
+import { mapProps } from 'recompose';
+
+import InputUnderline from '../InputUnderline';
+import InputWrapper from '../InputWrapper';
+import FloatingLabel from '../FloatingLabel';
+
+const MappedNativePicker = mapProps(
+  ({ placeholder: prompt, value: selectedValue, ...otherProps }) => ({
+    prompt,
+    selectedValue,
+    ...otherProps,
+  })
+)(NativePicker);
+
+const Picker = ({ wrapperStyle, ...props }) => (
+  <InputWrapper style={wrapperStyle}>
+    <MappedNativePicker {...props} />
+    <FloatingLabel animation={new Animated.Value(1)}>
+      {props.label}
+    </FloatingLabel>
+    <InputUnderline />
+  </InputWrapper>
+);
+
+Picker.propTypes = {
+  label: PropTypes.string,
+  wrapperStyle: PropTypes.any, // eslint-disable-line
+};
+
+export default Picker;
+export const { Item } = NativePicker;
diff --git a/apolloschurchapp/src/ui/inputs/Picker/index.js b/apolloschurchapp/src/ui/inputs/Picker/index.js
new file mode 100644
index 0000000..a559d8c
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Picker/index.js
@@ -0,0 +1,116 @@
+import React, { PureComponent } from 'react';
+import PropTypes from 'prop-types';
+import {
+  Animated,
+  Picker as NativePicker,
+  TouchableOpacity,
+} from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { H6 } from 'apolloschurchapp/src/ui/typography';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+
+import FloatingLabel from '../FloatingLabel';
+import InputUnderline from '../InputUnderline';
+import InputWrapper from '../InputWrapper';
+import withFocusAnimation from '../withFocusAnimation';
+import InputAddon, { AddonRow } from '../InputAddon';
+import withInputControlStyles from '../withInputControlStyles';
+
+import PickerList from './PickerList';
+
+const StyledH6 = withInputControlStyles(H6);
+const Placeholder = styled(
+  ({ theme }) => ({
+    color: theme.colors.text.tertiary,
+  }),
+  'Inputs.Picker.Placeholder'
+)(H6);
+
+export class Picker extends PureComponent {
+  static propTypes = {
+    placeholder: PropTypes.string,
+    displayValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+    focusAnimation: PropTypes.any, // eslint-disable-line
+    prefix: PropTypes.node,
+    suffix: PropTypes.node,
+    onFocus: PropTypes.func,
+    onBlur: PropTypes.func,
+    label: PropTypes.string,
+    value: PropTypes.any, // eslint-disable-line
+    wrapperStyle: PropTypes.any, // eslint-disable-line
+    style: PropTypes.any, // eslint-disable-line
+  };
+
+  state = {
+    focused: false,
+  };
+
+  handleOnPress = () => {
+    this.setState(
+      (previousState) => ({ focused: !previousState.focused }),
+      () => {
+        if (this.state.focused) {
+          this.props.onFocus();
+        } else {
+          this.props.onBlur();
+        }
+      }
+    );
+  };
+
+  render() {
+    const {
+      displayValue,
+      focusAnimation, // from createInput
+      placeholder,
+      label,
+      value,
+      style,
+      wrapperStyle,
+      ...pickerProps
+    } = this.props;
+    const rotate = focusAnimation.interpolate({
+      inputRange: [0, 1],
+      outputRange: ['0deg', '180deg'],
+    });
+    const labelAnimation = value ? new Animated.Value(1) : focusAnimation;
+
+    const animatedStyle = { opacity: labelAnimation, flex: 1 };
+
+    return (
+      <InputWrapper style={wrapperStyle}>
+        <TouchableOpacity onPress={this.handleOnPress}>
+          <AddonRow>
+            <Animated.View style={animatedStyle}>
+              <StyledH6 style={style}>
+                {displayValue || <Placeholder>{placeholder}</Placeholder>}
+              </StyledH6>
+            </Animated.View>
+            <InputAddon>
+              <Animated.View style={{ transform: [{ rotate }] }}>
+                <Icon name="arrow-down" size={18} />
+              </Animated.View>
+            </InputAddon>
+          </AddonRow>
+        </TouchableOpacity>
+
+        <PickerList
+          {...pickerProps}
+          value={value}
+          focused={this.state.focused}
+          onRequestClose={this.handleOnPress}
+        />
+
+        <FloatingLabel animation={labelAnimation}>{label}</FloatingLabel>
+        <InputUnderline animation={focusAnimation} />
+      </InputWrapper>
+    );
+  }
+}
+
+const EnhancedComponent = withFocusAnimation(Picker);
+EnhancedComponent.propTypes = Picker.propTypes;
+
+export default EnhancedComponent;
+export const { Item } = NativePicker;
diff --git a/apolloschurchapp/src/ui/inputs/Radio/RadioButton.js b/apolloschurchapp/src/ui/inputs/Radio/RadioButton.js
new file mode 100644
index 0000000..d45d6ee
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Radio/RadioButton.js
@@ -0,0 +1,73 @@
+import React, { PureComponent } from 'react';
+import { View, TouchableWithoutFeedback } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, getContext } from 'recompose';
+import isString from 'lodash/isString';
+
+import { H6 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+import RadioButtonIndicator from './RadioButtonIndicator';
+
+const Row = styled(({ theme }) => ({
+  padding: theme.sizing.baseUnit / 2,
+  borderBottomWidth: 1,
+  borderBottomColor: theme.colors.background.accent,
+  flexDirection: 'row',
+  justifyContent: 'space-between',
+  alignItems: 'center',
+}))(View);
+
+class RadioButton extends PureComponent {
+  static propTypes = {
+    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
+    currentValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+    Label: PropTypes.oneOfType([
+      PropTypes.string,
+      PropTypes.element,
+      PropTypes.func,
+    ]),
+    onSelectValue: PropTypes.func,
+    RadioButtonIndicator: PropTypes.oneOfType([
+      PropTypes.element,
+      PropTypes.func,
+    ]),
+  };
+
+  static defaultProps = {
+    Label: '',
+    onSelectValue() {},
+    RadioButtonIndicator,
+  };
+
+  handleOnPress = () => {
+    this.props.onSelectValue(this.props.value);
+  };
+
+  render() {
+    const Indicator = this.props.RadioButtonIndicator;
+    return (
+      <TouchableWithoutFeedback onPress={this.handleOnPress}>
+        <Row>
+          <Indicator
+            isSelected={this.props.currentValue === this.props.value}
+          />
+          {isString(this.props.Label) ? (
+            <H6>{this.props.Label}</H6>
+          ) : (
+            <this.props.Label />
+          )}
+        </Row>
+      </TouchableWithoutFeedback>
+    );
+  }
+}
+
+const enhance = compose(
+  getContext({
+    onSelectValue: PropTypes.func,
+    currentValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+  })
+);
+
+export default enhance(RadioButton);
diff --git a/apolloschurchapp/src/ui/inputs/Radio/RadioButtonIndicator.js b/apolloschurchapp/src/ui/inputs/Radio/RadioButtonIndicator.js
new file mode 100644
index 0000000..a3d0576
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Radio/RadioButtonIndicator.js
@@ -0,0 +1,43 @@
+import React, { PureComponent } from 'react';
+import { View } from 'react-native';
+import PropTypes from 'prop-types';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const OutlinedCircle = styled(({ theme, isSelected }) => ({
+  height: 20,
+  width: 20,
+  borderRadius: 99,
+  borderWidth: 2,
+  borderColor: isSelected ? theme.colors.primary : theme.colors.darkTertiary,
+  alignItems: 'center',
+  justifyContent: 'center',
+}))(View);
+
+const FilledCircle = styled(({ theme }) => ({
+  height: 12,
+  width: 12,
+  borderRadius: 99,
+  backgroundColor: theme.colors.primary,
+}))(View);
+
+export default class RadioButtonIndicator extends PureComponent {
+  static propTypes = {
+    isSelected: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    isSelected: false,
+  };
+
+  render() {
+    if (this.props.isSelected) {
+      return (
+        <OutlinedCircle isSelected>
+          <FilledCircle />
+        </OutlinedCircle>
+      );
+    }
+    return <OutlinedCircle />;
+  }
+}
diff --git a/apolloschurchapp/src/ui/inputs/Radio/index.js b/apolloschurchapp/src/ui/inputs/Radio/index.js
new file mode 100644
index 0000000..fc8a94e
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Radio/index.js
@@ -0,0 +1,66 @@
+import React, { Component } from 'react';
+import { View } from 'react-native';
+import PropTypes from 'prop-types';
+
+import RadioButton from './RadioButton';
+
+export default class Radio extends Component {
+  static Button = RadioButton;
+
+  static propTypes = {
+    children: PropTypes.node,
+    onChange: PropTypes.func,
+    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+    style: PropTypes.any, // eslint-disable-line
+  };
+
+  static childContextTypes = {
+    onSelectValue: PropTypes.func,
+    currentValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+  };
+
+  static defaultProps = {
+    children: null,
+    onChange() {},
+    value: null,
+  };
+
+  state = {
+    value: this.props.value,
+  };
+
+  getChildContext() {
+    return {
+      onSelectValue: this.selectValue,
+      currentValue: this.state.value,
+    };
+  }
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.value !== this.props.value) {
+      this.setState(
+        {
+          value: nextProps.value,
+        },
+        this.notifyValueChanged
+      );
+    }
+  }
+
+  selectValue = (value) => {
+    this.setState(
+      {
+        value,
+      },
+      this.notifyValueChanged
+    );
+  };
+
+  notifyValueChanged = () => {
+    this.props.onChange(this.state.value);
+  };
+
+  render() {
+    return <View style={this.props.style}>{this.props.children}</View>;
+  }
+}
diff --git a/apolloschurchapp/src/ui/inputs/Switch/Switch.stories.js b/apolloschurchapp/src/ui/inputs/Switch/Switch.stories.js
new file mode 100644
index 0000000..724225a
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Switch/Switch.stories.js
@@ -0,0 +1,12 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+
+import Switch from '.';
+
+storiesOf('Inputs', module).add('Switch', () => (
+  <FlexedView>
+    <Switch label="Some label text" />
+  </FlexedView>
+));
diff --git a/apolloschurchapp/src/ui/inputs/Switch/Switch.tests.js b/apolloschurchapp/src/ui/inputs/Switch/Switch.tests.js
new file mode 100644
index 0000000..b8a7e7a
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Switch/Switch.tests.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import Switch from '.';
+
+describe('The Picker Input component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Switch label="Some label text" />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/inputs/Switch/index.js b/apolloschurchapp/src/ui/inputs/Switch/index.js
new file mode 100644
index 0000000..b6ec5ac
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Switch/index.js
@@ -0,0 +1,78 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { compose, pure } from 'recompose';
+import { Platform, Switch, View } from 'react-native';
+
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import styled from 'apolloschurchapp/src/ui/styled';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
+
+import InputAddon, { AddonRow } from '../InputAddon';
+import { LabelText } from '../FloatingLabel';
+import InputWrapper from '../InputWrapper';
+import { withInputControlViewStyles } from '../withInputControlStyles';
+import ErrorText from '../ErrorText';
+
+const ControlWrapper = withInputControlViewStyles(View);
+
+const enhance = compose(
+  pure,
+  withTheme(({ theme }) => ({
+    onTintColor: theme.colors.primary,
+    activeTrackColor: theme.colors.primary,
+    trackColor: theme.colors.background.inactive,
+    tintColor: theme.colors.background.inactive,
+    activeThumbColor: theme.colors.background.paper,
+    ...Platform.select({
+      android: { thumbTintColor: theme.colors.background.paper },
+    }),
+  }))
+);
+
+const LabelContainer = styled({
+  justifyContent: 'center',
+})(FlexedView);
+
+const Text = enhance(
+  ({
+    label,
+    prefix,
+    error,
+    wrapperStyle,
+    onValueChange,
+    value,
+    ...switchProps
+  }) => (
+    <InputWrapper style={wrapperStyle}>
+      <ControlWrapper>
+        <AddonRow>
+          <InputAddon>{prefix}</InputAddon>
+          <LabelContainer>
+            <Touchable onPress={() => onValueChange(!value)}>
+              <LabelText>{label}</LabelText>
+            </Touchable>
+          </LabelContainer>
+          <InputAddon>
+            <Switch
+              value={value}
+              onValueChange={onValueChange}
+              {...switchProps}
+            />
+          </InputAddon>
+        </AddonRow>
+      </ControlWrapper>
+
+      {error && typeof error === 'string' ? (
+        <ErrorText>{error}</ErrorText>
+      ) : null}
+    </InputWrapper>
+  )
+);
+
+Text.propTypes = {
+  label: PropTypes.node,
+  error: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
+};
+
+export default Text;
diff --git a/apolloschurchapp/src/ui/inputs/Text/Text.stories.js b/apolloschurchapp/src/ui/inputs/Text/Text.stories.js
new file mode 100644
index 0000000..ece7b9e
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Text/Text.stories.js
@@ -0,0 +1,33 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import Icon from 'apolloschurchapp/src/ui/Icon';
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+
+import Text from '.';
+
+storiesOf('Inputs', module).add('Text', () => (
+  <FlexedView>
+    <Text editable label="Some label text" placeholder="Some placeholder" />
+    <Text
+      editable
+      type="password"
+      label="Password"
+      placeholder="Some placeholder"
+      suffix={<Icon name="lock" size={18} />}
+    />
+    <Text editable type="email" label="Email" placeholder="Some placeholder" />
+    <Text
+      editable
+      type="numeric"
+      label="Numeric"
+      placeholder="Some placeholder"
+    />
+    <Text
+      editable
+      type="phone"
+      label="Phone Number"
+      placeholder="Some placeholder"
+    />
+  </FlexedView>
+));
diff --git a/apolloschurchapp/src/ui/inputs/Text/Text.tests.js b/apolloschurchapp/src/ui/inputs/Text/Text.tests.js
new file mode 100644
index 0000000..10c0300
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Text/Text.tests.js
@@ -0,0 +1,70 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import Icon from 'apolloschurchapp/src/ui/Icon';
+
+import Text from '.';
+
+describe('The Text Input component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Text editable label="Some label text" placeholder="Some placeholder" />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as a password field with an icon', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Text
+          editable
+          type="password"
+          label="Password"
+          placeholder="Some placeholder"
+          suffix={<Icon name="lock" size={18} />}
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as an email field', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Text
+          editable
+          type="email"
+          label="Email"
+          placeholder="Some placeholder"
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as a numeric field', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Text
+          editable
+          type="numeric"
+          label="Numeric"
+          placeholder="Some placeholder"
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as a phone number field', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Text
+          type="phone"
+          label="Phone Number"
+          placeholder="Some placeholder"
+        />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/inputs/Text/index.js b/apolloschurchapp/src/ui/inputs/Text/index.js
new file mode 100644
index 0000000..4264b20
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/Text/index.js
@@ -0,0 +1,133 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import { get } from 'lodash';
+import { compose, withProps, pure } from 'recompose';
+import { View, Platform, TextInput, Animated } from 'react-native';
+import Color from 'color';
+
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+import FloatingLabel from '../FloatingLabel';
+import InputUnderline from '../InputUnderline';
+import InputWrapper from '../InputWrapper';
+import ErrorText from '../ErrorText';
+import withFocusAnimation from '../withFocusAnimation';
+import InputAddon, { AddonRow } from '../InputAddon';
+import { textStyle } from '../withInputControlStyles';
+
+const propsForInputType = {
+  password: {
+    secureTextEntry: true,
+    autoCapitalize: 'none',
+    autoCorrect: false,
+  },
+  email: {
+    keyboardType: 'email-address',
+    autoCapitalize: 'none',
+    autoCorrect: false,
+  },
+  numeric: {
+    keyboardType: 'numeric',
+  },
+  numericKeyboard: {
+    ...Platform.select({
+      ios: { keyboardType: 'numeric' },
+      android: { keyboardType: 'numeric' },
+      web: { type: 'text' },
+    }),
+  },
+  phone: {
+    keyboardType: 'phone-pad',
+  },
+  date: {
+    ...Platform.select({
+      ios: { keyboardType: 'numeric' },
+      android: { keyboardType: 'numeric' },
+      web: { type: 'date' },
+    }),
+  },
+};
+
+const enhance = compose(
+  withTheme(),
+  pure,
+  withFocusAnimation,
+  withProps(({ type, ...props }) => ({
+    ...get(propsForInputType, type, {}),
+    ...props,
+  }))
+);
+
+const Text = enhance(
+  ({
+    label,
+    prefix,
+    suffix,
+    value,
+    wrapperStyle,
+    error,
+    disabled = false,
+    theme,
+    inputRef,
+    focusAnimation: focusAnimationInput, // from withFocusAnimation
+    ...textInputProps
+  }) => {
+    const focusAnimation =
+      value || !label ? new Animated.Value(1) : focusAnimationInput;
+
+    const animatedStyle = { opacity: focusAnimation, flex: 1 };
+
+    return (
+      <InputWrapper style={wrapperStyle} disabled={disabled}>
+        <View>
+          <AddonRow>
+            <InputAddon>{prefix}</InputAddon>
+            <Animated.View style={animatedStyle}>
+              <TextInput
+                style={textStyle({ theme })}
+                ref={inputRef}
+                placeholderTextColor={Color(theme.colors.text.primary)
+                  .fade(theme.alpha.low)
+                  .string()}
+                {...textInputProps}
+                editable={!disabled}
+                value={`${value || ''}`}
+              />
+            </Animated.View>
+            <InputAddon>{suffix}</InputAddon>
+          </AddonRow>
+
+          <FloatingLabel animation={focusAnimation}>{label}</FloatingLabel>
+          <InputUnderline
+            animation={focusAnimation}
+            hasError={Boolean(error)}
+          />
+        </View>
+
+        {error && typeof error === 'string' ? (
+          <ErrorText>{error}</ErrorText>
+        ) : null}
+      </InputWrapper>
+    );
+  }
+);
+
+Text.defaultProps = {
+  returnKeyType: 'done',
+  underlineColorAndroid: 'transparent',
+};
+
+Text.propTypes = {
+  disabled: PropTypes.bool,
+  prefix: PropTypes.node,
+  suffix: PropTypes.node,
+  label: PropTypes.string,
+  value: PropTypes.any, // eslint-disable-line
+  wrapperStyle: PropTypes.any, // eslint-disable-line
+  returnKeyType: PropTypes.string,
+  error: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
+  underlineColorAndroid: PropTypes.string,
+  inputRef: PropTypes.func,
+};
+
+export default Text;
diff --git a/apolloschurchapp/src/ui/inputs/index.js b/apolloschurchapp/src/ui/inputs/index.js
new file mode 100644
index 0000000..d8ada5e
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/index.js
@@ -0,0 +1,4 @@
+export Picker, { Item as PickerItem } from './Picker';
+export Switch from './Switch';
+export Text from './Text';
+export DateInput from './DateInput';
diff --git a/apolloschurchapp/src/ui/inputs/withFocusAnimation.js b/apolloschurchapp/src/ui/inputs/withFocusAnimation.js
new file mode 100644
index 0000000..5afa6d0
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/withFocusAnimation.js
@@ -0,0 +1,61 @@
+import React, { PureComponent } from 'react';
+import { Animated, Easing } from 'react-native';
+import PropTypes from 'prop-types';
+
+// helper HOC to wrap an Input in a floating label and animated underline
+const withFocusAnimation = (Component) =>
+  class WrappedInput extends PureComponent {
+    focusAnimation = new Animated.Value(0);
+
+    static propTypes = {
+      focusAnimationDuration: PropTypes.number,
+      focusAnimationEasing: PropTypes.func,
+      onFocus: PropTypes.func,
+      onBlur: PropTypes.func,
+      value: PropTypes.any, // eslint-disable-line
+    };
+
+    static defaultProps = {
+      focusAnimationDuration: 450,
+      focusAnimationEasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),
+    };
+
+    playAnimation = (toValue) => {
+      Animated.timing(this.focusAnimation, {
+        toValue,
+        duration: this.props.focusAnimationDuration,
+        easing: this.props.focusAnimationEasing,
+        // useNativeDriver: true,
+      }).start();
+    };
+
+    handleFocus = (...args) => {
+      if (this.props.onFocus) this.props.onFocus(...args);
+      this.focused = true;
+      this.playAnimation(1);
+    };
+
+    handleBlur = (event, ...other) => {
+      if (this.props.onBlur) this.props.onBlur(event, ...other);
+      this.focused = false;
+      this.playAnimation(0);
+    };
+
+    render() {
+      const {
+        focusAnimationDuration,
+        focusAnimationEasing,
+        ...otherProps
+      } = this.props;
+      return (
+        <Component
+          {...otherProps}
+          onFocus={this.handleFocus}
+          onBlur={this.handleBlur}
+          focusAnimation={this.focusAnimation}
+        />
+      );
+    }
+  };
+
+export default withFocusAnimation;
diff --git a/apolloschurchapp/src/ui/inputs/withInputControlStyles.js b/apolloschurchapp/src/ui/inputs/withInputControlStyles.js
new file mode 100644
index 0000000..8dc7e0d
--- /dev/null
+++ b/apolloschurchapp/src/ui/inputs/withInputControlStyles.js
@@ -0,0 +1,19 @@
+import styled from 'apolloschurchapp/src/ui/styled';
+
+export const baseStyle = ({ theme }) => ({
+  paddingVertical: theme.sizing.baseUnit / 4,
+  height: 30 + theme.sizing.baseUnit / 2,
+});
+
+export const textStyle = ({ theme }) => ({
+  ...baseStyle({ theme }),
+  paddingVertical: 0,
+  fontSize: theme.helpers.rem(0.875),
+  fontFamily: theme.typography.sans.bold.default,
+  color: theme.colors.text.primary,
+});
+
+const withInputControlTextStyles = styled(textStyle, 'Input.Control');
+const withInputControlViewStyles = styled(baseStyle);
+
+export { withInputControlTextStyles as default, withInputControlViewStyles };
diff --git a/apolloschurchapp/src/ui/isLoading.js b/apolloschurchapp/src/ui/isLoading.js
new file mode 100644
index 0000000..7fc3c37
--- /dev/null
+++ b/apolloschurchapp/src/ui/isLoading.js
@@ -0,0 +1,21 @@
+import { branch, getContext, withContext } from 'recompose';
+import PropTypes from 'prop-types';
+
+// Both of these HOCs deal with context, therefore they should be used
+// above "pure" in a recompose `compose` chain.
+
+// Checks if the component has an "isLoading" prop.
+// If it doesn't it, it passes in context.
+// This makes easy to build components that respond to either props
+// or context for rendering placeholder / loading state.
+export const getIsLoading = branch(
+  (props) => !Object.hasOwnProperty.call(props, 'isLoading'),
+  getContext({ isLoading: PropTypes.bool })
+);
+
+// Allows a component to accept an "isLoading" prop to pass down
+// into context.
+export const withIsLoading = withContext(
+  { isLoading: PropTypes.bool },
+  ({ isLoading }) => ({ isLoading })
+);
diff --git a/apolloschurchapp/src/ui/styled/createStyleSheet.js b/apolloschurchapp/src/ui/styled/createStyleSheet.js
new file mode 100644
index 0000000..933bbb7
--- /dev/null
+++ b/apolloschurchapp/src/ui/styled/createStyleSheet.js
@@ -0,0 +1,45 @@
+import { StyleSheet } from 'react-native';
+import { flatten } from 'lodash';
+
+export const cachedStyles = {};
+export const styleHasher = JSON.stringify; // todo: how bad is this?
+
+// Uses cached or generates a new StyleSheet for a given style prop
+const createStyleSheet = (stylesToGenerate) => {
+  let styles = flatten([stylesToGenerate]); // Need to make sure we're working with a flat array
+  const styleSheet = {}; // passed to StyleSheet.create later
+
+  // Load style from cache or add style to stylesheet
+  styles.forEach((style, index) => {
+    if (typeof style !== 'object' || !style) return;
+    const hash = styleHasher(style);
+    if (cachedStyles[hash]) {
+      styles[index] = cachedStyles[hash];
+    } else {
+      styleSheet[`${index}`] = style;
+    }
+  });
+
+  if (Object.keys(styleSheet).length) {
+    // Generate the new stylesheet
+    const generatedStyleSheet = StyleSheet.create(styleSheet);
+
+    // Process the generated stylesheet
+    Object.keys(generatedStyleSheet).forEach((key) => {
+      const index = parseInt(key, 0);
+      const generatedStyle = generatedStyleSheet[key];
+      const hash = styleHasher(styles[index]);
+
+      // add generated style to cache
+      cachedStyles[hash] = generatedStyle;
+
+      // swap generated style into result list
+      styles[index] = generatedStyle;
+    });
+  }
+
+  if (styles.length === 1) styles = styles[0]; // eslint-disable-line
+  return styles;
+};
+
+export default createStyleSheet;
diff --git a/apolloschurchapp/src/ui/styled/createStyleSheet.tests.js b/apolloschurchapp/src/ui/styled/createStyleSheet.tests.js
new file mode 100644
index 0000000..34950f3
--- /dev/null
+++ b/apolloschurchapp/src/ui/styled/createStyleSheet.tests.js
@@ -0,0 +1,28 @@
+import React from 'react';
+import { View } from 'react-native';
+import renderer from 'react-test-renderer';
+
+import createStyleSheet, { cachedStyles } from './createStyleSheet';
+
+describe('the createStyleSheet function', () => {
+  it('returns styles that work on components', () => {
+    const style = createStyleSheet({ backgroundColor: 'red' });
+    const tree = renderer.create(<View style={style} />);
+    expect(tree).toMatchSnapshot();
+  });
+  it('uses a style cache when using same style twice', () => {
+    const style = { backgroundColor: 'red' };
+    const a = createStyleSheet(style);
+    const b = createStyleSheet(style);
+    expect(a).toEqual(b);
+    expect(Object.keys(cachedStyles)).toHaveLength(1);
+  });
+  it('doesnt fail when passed an already generated style', () => {
+    const style = createStyleSheet(0); // simulating StyleSheet.create() used elsewhere
+    expect(style).toEqual(0);
+  });
+  it('returns a single style if possible', () => {
+    const style = createStyleSheet([{ backgroundColor: 'red' }]);
+    expect(Array.isArray(style)).toBeFalsy();
+  });
+});
diff --git a/apolloschurchapp/src/ui/styled/index.js b/apolloschurchapp/src/ui/styled/index.js
new file mode 100644
index 0000000..376f9b9
--- /dev/null
+++ b/apolloschurchapp/src/ui/styled/index.js
@@ -0,0 +1,74 @@
+import { withPropsOnChange, compose, mapProps } from 'recompose';
+import { isEqual, get } from 'lodash';
+
+import { withTheme } from 'apolloschurchapp/src/ui/theme';
+
+import mergeStyles from './mergeStyles';
+import createStyleSheet from './createStyleSheet';
+
+// HOC to make composing component style easy.
+// Use similar to how you'd use `styled` in styled-components:
+// StyledView = styled({ backgroundColor: 'red' })(View)
+//
+// Can base style off of props:
+// StyledView = styled((props) => ({ backgroundColor: props.color }))(View)
+//
+// Or theme:
+// StyledView = styled(({ theme, ...ownProps }) => ({ backgroundColor: theme.primaryColor }))(View)
+//
+// Also allows for style overriding:
+// <StyledView style={{ borderColor: 'red' }} />
+//
+// Or using with ReactNative.StyleSheet:
+// const styles = StyleSheet.create({ myStyle: { backgroundColor: 'red' }});
+// StyledView = styled(styles.myStyle)(View)
+//
+// However - `styled` uses ReactNative.StyleSheet under the hood, so no need to create
+// separate stylesheets:
+// StyledView = styled((props) => ({ backgroundColor: props.color }))(View)
+// Will create a stylesheet for { backgroundColor: props.color } internally and cache it!
+
+// Generates a style object from a given styleInput.
+// styleInput is the argument passed to `styled`
+const getStyleLiteralFromStyledInput = (
+  styleInput,
+  { ownProps = {}, theme = {} }
+) => {
+  let generatedStyle = styleInput;
+  if (typeof generatedStyle === 'function')
+    generatedStyle = generatedStyle({ theme, ...ownProps });
+  return generatedStyle;
+};
+
+const styled = (styleInput, fqn) =>
+  compose(
+    mapProps((props) => ({ ownProps: props })),
+    withTheme(({ theme }) => ({ theme })),
+    withPropsOnChange(
+      // Only re-eval styles if style prop changes, or the generated style from
+      // styleInput is different. Both of these checks should be exteremely cheap.
+      (props, nextProps) =>
+        props.ownProps.style !== nextProps.ownProps.style ||
+        !isEqual(
+          getStyleLiteralFromStyledInput(styleInput, props),
+          getStyleLiteralFromStyledInput(styleInput, nextProps)
+        ),
+      ({ ownProps, theme }) => {
+        let style = getStyleLiteralFromStyledInput(styleInput, {
+          ownProps,
+          theme,
+        });
+
+        const themeOverrides = fqn ? get(theme, `overrides['${fqn}']`, {}) : {};
+        const { style: ownPropsStyle = {} } = ownProps;
+
+        style = mergeStyles(style, themeOverrides, ownPropsStyle);
+        style = createStyleSheet(style);
+
+        return { style };
+      }
+    ),
+    mapProps(({ ownProps, style }) => ({ ...ownProps, style }))
+  );
+
+export default styled;
diff --git a/apolloschurchapp/src/ui/styled/mergeStyles.js b/apolloschurchapp/src/ui/styled/mergeStyles.js
new file mode 100644
index 0000000..d068b56
--- /dev/null
+++ b/apolloschurchapp/src/ui/styled/mergeStyles.js
@@ -0,0 +1,35 @@
+import { flattenDeep } from 'lodash';
+
+// Merges two or more styles into one style object or array
+const mergeStyles = (...stylesToMerge) =>
+  flattenDeep(stylesToMerge).reduce((accumulatedStyle, currentStyle) => {
+    let style = accumulatedStyle;
+    const styleRight = currentStyle;
+
+    if (!styleRight && typeof styleRight !== 'number') return accumulatedStyle;
+
+    // both styles are objects, we should turn them into a single object:
+    if (
+      typeof style === 'object' &&
+      !Array.isArray(style) &&
+      !Array.isArray(styleRight) &&
+      typeof styleRight === 'object'
+    ) {
+      style = Object.assign({}, style, styleRight);
+
+      // styles can't be merged automatically, result to joining them in an array
+    } else {
+      if (!Array.isArray(style)) {
+        style = [style];
+      }
+
+      if (Array.isArray(styleRight)) {
+        style = style.concat(styleRight);
+      } else {
+        style.push(styleRight);
+      }
+    }
+    return style;
+  });
+
+export default mergeStyles;
diff --git a/apolloschurchapp/src/ui/styled/mergeStyles.tests.js b/apolloschurchapp/src/ui/styled/mergeStyles.tests.js
new file mode 100644
index 0000000..4719577
--- /dev/null
+++ b/apolloschurchapp/src/ui/styled/mergeStyles.tests.js
@@ -0,0 +1,42 @@
+import mergeStyles from './mergeStyles';
+
+describe('the mergeStyles function', () => {
+  it('merges two style objects into one array', () => {
+    const styleOne = { a: '1' };
+    const styleTwo = { b: '2' };
+    const merged = mergeStyles(styleOne, styleTwo);
+    expect(merged).toEqual({ a: '1', b: '2' });
+  });
+  it('maintains expected order', () => {
+    const merged = mergeStyles(1, 2, 3);
+    expect(merged).toEqual([1, 2, 3]);
+  });
+  it('handles null styles', () => {
+    const merged = mergeStyles(43, null);
+    expect(merged).toEqual(43);
+  });
+  it('merges mixed array of objects and objects to one style object', () => {
+    const styleOne = [{ c: '2' }, { a: '1' }];
+    const styleTwo = { b: '1' };
+    const merged = mergeStyles(styleOne, styleTwo);
+    expect(merged).toEqual({ c: '2', a: '1', b: '1' });
+  });
+  it('merges mixed types and maintains correct style order', () => {
+    const styleOne = [{ a: '1' }, { a: '2' }];
+    const styleTwo = { a: '3' };
+    const merged = mergeStyles(styleOne, styleTwo);
+    expect(merged).toEqual({ a: '3' });
+  });
+  it('results in a flat array of styles', () => {
+    const styleOne = [[[1, 2]], { a: '1' }, [3, 4]];
+    const styleTwo = [{ b: '2' }, [[5, 6]]];
+    const merged = mergeStyles(styleOne, styleTwo);
+    expect(merged).toEqual([1, 2, { a: '1' }, 3, 4, { b: '2' }, 5, 6]);
+  });
+  it('handles triple nested arrays', () => {
+    const styleOne = [[[{ a: '1' }, { a: '2' }]]];
+    const styleTwo = [[[{ b: '1' }, { b: '2' }]]];
+    const merged = mergeStyles(styleOne, styleTwo);
+    expect(merged).toEqual({ a: '2', b: '2' });
+  });
+});
diff --git a/apolloschurchapp/src/ui/styled/styled.tests.js b/apolloschurchapp/src/ui/styled/styled.tests.js
new file mode 100644
index 0000000..e165fb3
--- /dev/null
+++ b/apolloschurchapp/src/ui/styled/styled.tests.js
@@ -0,0 +1,57 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { compose } from 'recompose';
+import { View } from 'react-native';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import styled from '.';
+
+describe('the styled HOC', () => {
+  it('passes style literal to the base component', () => {
+    const StyledView = styled({ backgroundColor: 'red' })(View);
+    const tree = renderer.create(<StyledView />);
+    expect(tree).toMatchSnapshot();
+  });
+  it('supports multiple styles, and keeps the correct order', () => {
+    const StyledView = compose(
+      styled({ backgroundColor: 'red' }),
+      styled({ borderColor: 'green' })
+    )(View);
+
+    const customStyle = { height: 100 };
+
+    const tree = renderer.create(<StyledView style={customStyle} />);
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept a function, works with props', () => {
+    const StyledView = styled(({ color }) => ({ backgroundColor: color }))(
+      View
+    );
+    const tree = renderer.create(<StyledView color="green" />);
+    expect(tree).toMatchSnapshot();
+  });
+  it('provides a theme', () => {
+    const StyledView = styled(({ theme }) => ({
+      backgroundColor: theme.colors.primary,
+    }))(View);
+    const tree = renderer.create(
+      <Providers>
+        <StyledView />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('allows a theme to supply overrides', () => {
+    const StyledView = styled(() => ({ backgroundColor: 'red' }), 'StyledView')(
+      View
+    );
+    const overrides = { StyledView: { backgroundColor: 'green' } };
+    const tree = renderer.create(
+      <Providers themeInput={{ overrides }}>
+        <StyledView />
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/theme/ThemeProvider.js b/apolloschurchapp/src/ui/theme/ThemeProvider.js
new file mode 100644
index 0000000..4dd21e7
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/ThemeProvider.js
@@ -0,0 +1,30 @@
+import { PureComponent, Children } from 'react';
+import PropTypes from 'prop-types';
+
+import createTheme, { THEME_PROPS } from './createTheme';
+
+export default class ThemeProvider extends PureComponent {
+  static propTypes = {
+    children: PropTypes.node,
+    themeInput: PropTypes.shape(THEME_PROPS),
+  };
+
+  static childContextTypes = {
+    theme: PropTypes.shape(THEME_PROPS),
+    themeInput: PropTypes.shape(THEME_PROPS),
+  };
+
+  static defaultProps = {
+    children: null,
+    themeInput: {},
+  };
+
+  getChildContext = () => ({
+    theme: createTheme(this.props.themeInput),
+    themeInput: this.props.themeInput,
+  });
+
+  render() {
+    return Children.only(this.props.children);
+  }
+}
diff --git a/apolloschurchapp/src/ui/theme/createTheme.js b/apolloschurchapp/src/ui/theme/createTheme.js
new file mode 100644
index 0000000..2192c7e
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/createTheme.js
@@ -0,0 +1,80 @@
+import { merge, mapValues } from 'lodash';
+import PropTypes from 'prop-types';
+
+import * as defaultTheme from './defaultTheme';
+
+const {
+  colors,
+  typography,
+  breakpoints,
+  sizing,
+  type,
+  types,
+  alpha,
+  ...otherThemeDefaults
+} = defaultTheme;
+
+// Some parts of the theme are stored as functions (such as `shadows` and `helpers`),
+// that depend on the given theme to compute. This processes these parts into objects
+// so we can merge a clean object. It's recursive and fairly abstract for flexibility.
+export const getDynamicThemePart = (part, theme) => {
+  if (typeof part === 'function') return part(theme);
+  if (Array.isArray(part))
+    return part.map((item) => getDynamicThemePart(item, theme));
+  if (typeof part === 'object')
+    return mapValues(part, (value) => getDynamicThemePart(value, theme));
+  return part;
+};
+
+const createTheme = ({
+  colors: colorsInput = {},
+  typography: typographyInput = {},
+  breakpoints: breakpointsInput = {},
+  sizing: sizingInput = {},
+  type: typeInput = type,
+  types: typesInput = {},
+  alpha: alphaInput = {},
+  ...other
+} = {}) => {
+  // compose base theme
+  const theme = {
+    colors: merge({}, colors, colorsInput),
+    typography: merge({}, typography, typographyInput),
+    breakpoints: merge({}, breakpoints, breakpointsInput),
+    sizing: merge({}, sizing, sizingInput),
+    alpha: merge({}, alpha, alphaInput),
+    type: typeInput.toLowerCase(),
+  };
+
+  // inject theme type
+  merge(theme, getDynamicThemePart({ types }, theme));
+  merge(theme, getDynamicThemePart({ types: typesInput }, theme));
+  const availableTypes = theme.types;
+  if (!availableTypes[theme.type])
+    throw new Error(`The theme type ${theme.type} is not supported`);
+
+  merge(theme, availableTypes[typeInput], { colors: colorsInput });
+
+  // mixin other theme defaults (that might depend on base theme)
+  merge(theme, getDynamicThemePart(otherThemeDefaults, theme));
+
+  // mixin other theme inputs (that might depend on base theme)
+  merge(theme, getDynamicThemePart(other, theme));
+  return theme;
+};
+
+export const THEME_PROPS = {
+  colors: PropTypes.object,
+  typography: PropTypes.object,
+  breakpoints: PropTypes.shape({
+    xs: PropTypes.number,
+    sm: PropTypes.number,
+    md: PropTypes.number,
+    lg: PropTypes.number,
+  }),
+  sizing: PropTypes.object,
+  helpers: PropTypes.object,
+  overrides: PropTypes.object,
+};
+
+export default createTheme;
diff --git a/apolloschurchapp/src/ui/theme/createTheme.tests.js b/apolloschurchapp/src/ui/theme/createTheme.tests.js
new file mode 100644
index 0000000..a01712e
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/createTheme.tests.js
@@ -0,0 +1,73 @@
+import createTheme, { getDynamicThemePart } from './createTheme';
+import * as defaultTheme from './defaultTheme';
+
+describe('createTheme', () => {
+  it('has a colors', () => {
+    const theme = createTheme();
+    expect(theme).toHaveProperty('colors');
+  });
+
+  it('has a custom colors', () => {
+    const customColors = { primary: 'red', otherColor: 'green' };
+    const theme = createTheme({ colors: customColors });
+    expect(theme.colors).toMatchSnapshot();
+  });
+
+  it('has typography', () => {
+    const theme = createTheme();
+    expect(theme).toHaveProperty('typography');
+  });
+
+  it('has custom typography', () => {
+    const custom = { baseFontSize: '24', otherProp: true };
+    const theme = createTheme({ typography: custom });
+    expect(theme.typography).toMatchSnapshot();
+  });
+
+  it('has helper functions and allows for custom helper functions', () => {
+    const custom = { myFunc: () => () => 'yay!' };
+    const theme = createTheme({ helpers: custom });
+    expect(theme.helpers.rem(1)).toEqual(defaultTheme.typography.baseFontSize);
+    expect(theme.helpers.verticalRhythm(1)).toEqual(
+      defaultTheme.typography.baseLineHeight
+    );
+    expect(theme.helpers.myFunc()).toEqual('yay!');
+  });
+
+  it('allows adding in custom theme properties', () => {
+    const custom = {
+      overrides: { MyComponent: { some: 'style' } },
+    };
+    const theme = createTheme(custom);
+    expect(theme).toMatchSnapshot();
+  });
+
+  it('switches to a dark theme', () => {
+    const theme = createTheme({ type: 'dark' });
+    expect(theme).toMatchSnapshot();
+  });
+  it('throws an error for an unsupported theme type', () => {
+    const theme = () => createTheme({ type: 'Boom' });
+    expect(theme).toThrowErrorMatchingSnapshot();
+  });
+
+  describe('getDynamicThemePart', () => {
+    it('parses types in theme object', () => {
+      const result = getDynamicThemePart(
+        { types: defaultTheme.types },
+        defaultTheme
+      );
+      expect(result.types).toEqual(
+        expect.objectContaining({
+          light: expect.objectContaining({
+            colors: expect.objectContaining({
+              text: expect.objectContaining({
+                primary: expect.any(String),
+              }),
+            }),
+          }),
+        })
+      );
+    });
+  });
+});
diff --git a/apolloschurchapp/src/ui/theme/defaultTheme.js b/apolloschurchapp/src/ui/theme/defaultTheme.js
new file mode 100644
index 0000000..a2e170a
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/defaultTheme.js
@@ -0,0 +1,188 @@
+import fontStack from './fontStack';
+import * as types from './types';
+
+/**
+ * There are two parts to a theme:
+ * 1. The `input` that is used to generate a theme,
+ * 2. The generated `theme` that is consumed by components
+ *
+ * The structure of both parts are essentially the same, except
+ * with the generated `theme` having more detail.
+ *
+ * This file exposes the default values that are used in
+ * theme generation that you might want to customize.
+ *
+ * To customize these values, provide theme as options in the `themeInput`
+ * prop in <ThemeProvider>, like:
+ * <ThemeProvider themeInput={{ colors: { primary: 'blue' }, type: 'dark' }} />
+ *
+ * For more detail on how to customize a theme, see (TODO: should be on storybook)
+ */
+
+// Base colors.
+// These get used by theme types (see /types directory) to color
+// specific parts of the interface. For more control on how certain
+// elements are colored, go there. The next level of control comes
+// on a per-component basis with "overrides"
+export const colors = {
+  primary: '#00676D',
+  secondary: '#17B582',
+  tertiary: '#6EC5B8',
+  screen: '#F8F7F4',
+  paper: '#FFFFFF',
+  alert: '#c64f55',
+
+  // Dark shades
+  darkPrimary: '#303030',
+  darkSecondary: '#505050',
+  darkTertiary: '#A5A5A5',
+
+  // Light shades
+  lightPrimary: '#F8F7F4',
+  lightSecondary: '#DBDBD9',
+  lightTertiary: '#A5A5A5',
+
+  // Statics
+  black: '#000000',
+  white: '#FFFFFF',
+  transparent: 'transparent',
+  wordOfChrist: '#8b0000', // only used in Scripture.
+};
+
+/* Base Typography sizing and fonts.
+ *
+ * To control speicfic styles used on different type components (like H1, H2, etc), see "overrides"
+ */
+export const typography = {
+  baseFontSize: 16,
+  baseLineHeight: 23.04, // 1.44 ratio
+  ...fontStack,
+};
+
+// Responsive breakpoints
+export const breakpoints = {
+  xs: 320,
+  sm: 496,
+  md: 800,
+  lg: 1200,
+};
+
+// Base sizing units. These are used to scale
+// space, and size components relatively to one another.
+export const sizing = {
+  baseUnit: 16,
+  avatar: {
+    small: 40,
+    medium: 80,
+    large: 160,
+  },
+};
+
+export const alpha = {
+  high: 0.9,
+  medium: 0.7,
+  low: 0.4,
+};
+
+/**
+ * Dynamic theme parts
+ * The sections below define some of the dynamic
+ * components to a theme. You can still override them,
+ * but if you modify only the values above, the values below
+ * will be updated to reflect your customizations.
+ *
+ * The available theme types get included into the theme, and the active theme type gets merged into
+ * the theme. This allows for switching of theme values between different color palettes. The theme
+ * types included by default are "light" and "dark". But, you could add your own theme types
+ * (ex: "kids", with a more vibrant set of colors). Most of the colors that a component uses should
+ * come from the active type, not from the base colors above. For example, notice below how
+ * `shadows` gets the shadowColor from `colors.shadows`, which is provided by the active theme type.
+ */
+export const type = 'light';
+export { types };
+
+export const shadows = ({ colors: themeColors }) => ({
+  default: {
+    ios: {
+      shadowColor: themeColors.shadows.default,
+      shadowOffset: {
+        width: 0,
+        height: 1,
+      },
+      shadowOpacity: 1,
+      shadowRadius: 6,
+    },
+    android: {
+      elevation: 5,
+    },
+  },
+});
+
+export const buttons = ({ colors: themeColors }) => ({
+  default: {
+    fill: themeColors.action.default,
+    accent: themeColors.text.primary,
+  },
+  primary: {
+    fill: themeColors.action.primary,
+    accent: themeColors.white,
+  },
+  secondary: {
+    fill: themeColors.action.secondary,
+    accent: themeColors.white,
+  },
+  tertiary: {
+    fill: themeColors.action.tertiary,
+    accent: themeColors.white,
+  },
+  ghost: {
+    fill: themeColors.text.primary,
+    accent: themeColors.text.primary,
+  },
+  alert: {
+    fill: themeColors.alert,
+    accent: themeColors.white,
+  },
+});
+
+/*
+ * Helpers make it easy to expose simple utils in your theme that rely on the current theme to
+ * compute its value. They should be a function that takes a single argument - the current theme,
+ * and returns a function that gets injected into the theme.
+ */
+export const helpers = {};
+
+helpers.rem = (theme) => (units) => {
+  const value = units * theme.typography.baseFontSize;
+  return +value.toFixed(2);
+};
+
+/*
+* Vertical rhythm method of spacing objects (typically typographic elements) based on a predefined
+* ratio. A popular ratio that is often used would be something like the Golden Ratio. With the
+* Golden Ratio as an example, all elment spacing on the page is a multiplied derivitive of that
+* ratio resulting in a rhthmic spacing. This is often used in typography to set line heights and
+* vertical paddings. The helper function below takes a `rem` unit (often a font size but not always)
+* and multiplies it by either a custom ratio or a derrived ratio from the themes `baseLineHeight`
+* devided by the `baseFontSize`.
+*/
+helpers.verticalRhythm = (theme) => (units, customRatio) => {
+  const verticalRatio =
+    customRatio ||
+    theme.typography.baseLineHeight / theme.typography.baseFontSize;
+  return helpers.rem(theme)(verticalRatio * units);
+};
+
+// Overrides allow you to override the styles of any component styled using the `styled` HOC.
+// For example, this component:
+// const SomeComponent = styled({ margin: 10, padding: 20 }, 'SomeComponent');
+// can have its styles overriden by including in overrides:
+// {
+//   overides: {
+//     SomeComponent: {
+//       margin: 5,
+//       padding: 15,
+//     },
+//   },
+// }
+export const overrides = {};
diff --git a/apolloschurchapp/src/ui/theme/fontStack/index.android.js b/apolloschurchapp/src/ui/theme/fontStack/index.android.js
new file mode 100644
index 0000000..097c09d
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/fontStack/index.android.js
@@ -0,0 +1,35 @@
+const fontStack = {
+  sans: {
+    regular: {
+      default: 'Inter-UI-Regular',
+      italic: 'Inter-UI-Italic',
+    },
+    medium: {
+      default: 'Inter-UI-Medium',
+      italic: 'Inter-UI-MediumItalic',
+    },
+    bold: {
+      default: 'Inter-UI-Bold',
+      italic: 'Inter-UI-BoldItalic',
+    },
+    black: {
+      default: 'Inter-UI-Black',
+      italic: 'Inter-UI-BlackItalic',
+    },
+  },
+  serif: {
+    regular: {
+      default: 'DroidSerif-Regular',
+      italic: 'DroidSerif-Italic',
+    },
+    bold: {
+      default: 'DroidSerif-Bold',
+      italic: 'DroidSerif-BoldItalic',
+    },
+  },
+  ui: {
+    regular: 'sans-serif',
+  },
+};
+
+export default fontStack;
diff --git a/apolloschurchapp/src/ui/theme/fontStack/index.ios.js b/apolloschurchapp/src/ui/theme/fontStack/index.ios.js
new file mode 100644
index 0000000..7242fe0
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/fontStack/index.ios.js
@@ -0,0 +1,35 @@
+const fontStack = {
+  sans: {
+    regular: {
+      default: 'InterUI-Regular',
+      italic: 'InterUI-Italic',
+    },
+    medium: {
+      default: 'InterUI-Medium',
+      italic: 'InterUI-MediumItalic',
+    },
+    bold: {
+      default: 'InterUI-Bold',
+      italic: 'InterUI-BoldItalic',
+    },
+    black: {
+      default: 'InterUI-Black',
+      italic: 'InterUI-BlackItalic',
+    },
+  },
+  serif: {
+    regular: {
+      default: 'DroidSerif',
+      italic: 'DroidSerif-Italic',
+    },
+    bold: {
+      default: 'DroidSerif-Bold',
+      italic: 'DroidSerif-BoldItalic',
+    },
+  },
+  ui: {
+    regular: 'System',
+  },
+};
+
+export default fontStack;
diff --git a/apolloschurchapp/src/ui/theme/index.js b/apolloschurchapp/src/ui/theme/index.js
new file mode 100644
index 0000000..5c0bbd7
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/index.js
@@ -0,0 +1,3 @@
+export { default as ThemeProvider } from './ThemeProvider';
+export { default as withTheme } from './withTheme';
+export { ThemeMixin, withThemeMixin } from './mixins';
diff --git a/apolloschurchapp/src/ui/theme/mixins.js b/apolloschurchapp/src/ui/theme/mixins.js
new file mode 100644
index 0000000..a9739aa
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/mixins.js
@@ -0,0 +1,38 @@
+import { compose, mapProps, withContext } from 'recompose';
+import PropTypes from 'prop-types';
+import { merge } from 'lodash';
+
+import withTheme from './withTheme';
+import createTheme, { THEME_PROPS } from './createTheme';
+
+const withThemeMixin = (themeInput) =>
+  compose(
+    mapProps((props) => ({ ownProps: props })),
+    withTheme(),
+    withContext(
+      {
+        theme: PropTypes.shape(THEME_PROPS),
+        themeInput: PropTypes.shape(THEME_PROPS),
+      },
+      ({ theme, themeInput: originalThemeInput, ownProps }) => {
+        let themeInputAsObject = themeInput;
+        if (typeof themeInput === 'function') {
+          themeInputAsObject = themeInput({ ...ownProps, theme });
+        }
+        themeInputAsObject = merge(originalThemeInput, themeInputAsObject);
+
+        const themeWithMixin = createTheme(themeInputAsObject);
+        return {
+          theme: themeWithMixin,
+          themeInput: themeInputAsObject,
+        };
+      }
+    ),
+    mapProps(({ ownProps }) => ownProps)
+  );
+
+const ThemeMixin = withThemeMixin(({ mixin = {} } = {}) => mixin)(
+  ({ children }) => children
+);
+
+export { withThemeMixin, ThemeMixin };
diff --git a/apolloschurchapp/src/ui/theme/mixins.tests.js b/apolloschurchapp/src/ui/theme/mixins.tests.js
new file mode 100644
index 0000000..7b76e92
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/mixins.tests.js
@@ -0,0 +1,58 @@
+/* eslint-disable */
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import { H3, H6, BodyText } from 'apolloschurchapp/src/ui/typography';
+
+import { ThemeProvider } from './';
+import { withThemeMixin } from './mixins';
+
+const TypeExample = () => (
+  <FlexedView>
+    <H3>Hi there!</H3>
+    <H6>Lorem ipsum dolor sit amet.</H6>
+    <BodyText>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque sodales
+      sit amet ante eu lobortis. In vitae faucibus lectus, at interdum nibh.
+      Fusce suscipit tincidunt justo, vitae cursus mi fermentum eget.
+    </BodyText>
+  </FlexedView>
+);
+
+const DarkTypeExample = withThemeMixin({
+  type: 'dark',
+})(TypeExample);
+
+const TypeExampleWithProps = withThemeMixin(({ color, isLight = true }) => ({
+  type: isLight ? 'light' : 'dark',
+  colors: {
+    primary: color,
+  },
+}))(TypeExample);
+
+describe('withThemeMixin', () => {
+  it('overrides styles without affecting siblings', () => {
+    const tree = renderer.create(
+      <ThemeProvider>
+        <FlexedView>
+          <TypeExample />
+          <DarkTypeExample />
+          <TypeExample />
+        </FlexedView>
+      </ThemeProvider>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('works with dynamic props', () => {
+    const tree = renderer.create(
+      <ThemeProvider>
+        <FlexedView>
+          <TypeExampleWithProps isLight color="red" />
+          <TypeExampleWithProps isLight={false} color="blue" />
+        </FlexedView>
+      </ThemeProvider>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/theme/theme.stories.js b/apolloschurchapp/src/ui/theme/theme.stories.js
new file mode 100644
index 0000000..0127758
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/theme.stories.js
@@ -0,0 +1,73 @@
+/* eslint-disable */
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import FlexedView from 'apolloschurchapp/src/ui/FlexedView';
+import { H3, H6, BodyText } from 'apolloschurchapp/src/ui/typography';
+
+import { ThemeProvider, ThemeMixin, withThemeMixin } from './';
+
+const TypeExample = () => (
+  <FlexedView>
+    <H3>Hi there!</H3>
+    <H6>Lorem ipsum dolor sit amet.</H6>
+    <BodyText>
+      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque sodales
+      sit amet ante eu lobortis. In vitae faucibus lectus, at interdum nibh.
+      Fusce suscipit tincidunt justo, vitae cursus mi fermentum eget.
+    </BodyText>
+  </FlexedView>
+);
+
+const DarkTypeExample = withThemeMixin({
+  type: 'dark',
+})(TypeExample);
+
+const TypeExampleWithProps = withThemeMixin(({ color, isLight = true }) => ({
+  type: isLight ? 'light' : 'dark',
+  colors: {
+    primary: color,
+  },
+}))(TypeExample);
+
+storiesOf('Theming', module)
+  .add('ThemeProvider - default', () => (
+    <ThemeProvider>
+      <TypeExample />
+    </ThemeProvider>
+  ))
+  .add('ThemeProvider - dark theme', () => (
+    <ThemeProvider
+      themeInput={{
+        type: 'dark',
+      }}
+    >
+      <TypeExample />
+    </ThemeProvider>
+  ))
+  .add('ThemeMixin', () => (
+    <ThemeProvider>
+      <FlexedView>
+        <TypeExample />
+        <ThemeMixin mixin={{ type: 'dark' }}>
+          <TypeExample />
+        </ThemeMixin>
+      </FlexedView>
+    </ThemeProvider>
+  ))
+  .add('withThemeMixin', () => (
+    <ThemeProvider>
+      <FlexedView>
+        <TypeExample />
+        <DarkTypeExample />
+      </FlexedView>
+    </ThemeProvider>
+  ))
+  .add('withThemeMixin using props', () => (
+    <ThemeProvider>
+      <FlexedView>
+        <TypeExampleWithProps isLight color="red" />
+        <TypeExampleWithProps isLight={false} color="blue" />
+      </FlexedView>
+    </ThemeProvider>
+  ));
diff --git a/apolloschurchapp/src/ui/theme/types/dark.js b/apolloschurchapp/src/ui/theme/types/dark.js
new file mode 100644
index 0000000..d1bf211
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/types/dark.js
@@ -0,0 +1,33 @@
+import Color from 'color';
+
+const dark = ({ colors, alpha }) => ({
+  colors: {
+    text: {
+      primary: colors.lightPrimary,
+      secondary: colors.lightSecondary,
+      tertiary: colors.lightTertiary,
+      link: colors.secondary,
+    },
+    background: {
+      screen: colors.screen,
+      paper: colors.paper,
+      accent: Color(colors.darkTertiary)
+        .fade(alpha.high)
+        .string(),
+      inactive: colors.darkTertiary,
+    },
+    shadows: {
+      default: Color(colors.darkTertiary)
+        .fade(alpha.medium)
+        .string(),
+    },
+    action: {
+      default: colors.darkTertiary,
+      primary: colors.primary,
+      secondary: colors.secondary,
+      tertiary: colors.tertiary,
+    },
+  },
+});
+
+export default dark;
diff --git a/apolloschurchapp/src/ui/theme/types/index.js b/apolloschurchapp/src/ui/theme/types/index.js
new file mode 100644
index 0000000..0593895
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/types/index.js
@@ -0,0 +1,2 @@
+export { default as dark } from './dark';
+export { default as light } from './light';
diff --git a/apolloschurchapp/src/ui/theme/types/light.js b/apolloschurchapp/src/ui/theme/types/light.js
new file mode 100644
index 0000000..d343f2a
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/types/light.js
@@ -0,0 +1,33 @@
+import Color from 'color';
+
+const light = ({ colors, alpha }) => ({
+  colors: {
+    text: {
+      primary: colors.darkPrimary,
+      secondary: colors.darkSecondary,
+      tertiary: colors.darkTertiary,
+      link: colors.secondary,
+    },
+    background: {
+      screen: colors.screen,
+      paper: colors.paper,
+      accent: Color(colors.lightTertiary)
+        .fade(alpha.high)
+        .string(),
+      inactive: colors.lightTertiary,
+    },
+    shadows: {
+      default: Color(colors.darkTertiary)
+        .fade(alpha.medium)
+        .string(),
+    },
+    action: {
+      default: colors.lightTertiary,
+      primary: colors.primary,
+      secondary: colors.secondary,
+      tertiary: colors.tertiary,
+    },
+  },
+});
+
+export default light;
diff --git a/apolloschurchapp/src/ui/theme/withTheme.js b/apolloschurchapp/src/ui/theme/withTheme.js
new file mode 100644
index 0000000..4208ffd
--- /dev/null
+++ b/apolloschurchapp/src/ui/theme/withTheme.js
@@ -0,0 +1,20 @@
+import PropTypes from 'prop-types';
+import { compose, mapProps, getContext, hoistStatics } from 'recompose';
+
+import { THEME_PROPS } from './createTheme';
+
+const DEFAULT_MAPPER_FN = ({ theme } = {}) => ({ theme });
+
+export default function(mapperFn = DEFAULT_MAPPER_FN) {
+  return hoistStatics(
+    compose(
+      getContext({
+        theme: PropTypes.shape(THEME_PROPS),
+      }),
+      mapProps(({ theme, ...otherProps }) => ({
+        ...otherProps,
+        ...mapperFn({ theme, ...otherProps }),
+      }))
+    )
+  );
+}
diff --git a/apolloschurchapp/src/ui/typography/BlockQuote/BlockQuote.stories.js b/apolloschurchapp/src/ui/typography/BlockQuote/BlockQuote.stories.js
new file mode 100644
index 0000000..901a99c
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BlockQuote/BlockQuote.stories.js
@@ -0,0 +1,31 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+
+import BlockQuote from '.';
+
+storiesOf('typography/BlockQuote', module)
+  .add('Default', () => (
+    <PaddedView>
+      <BlockQuote>
+        {
+          '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+        }
+      </BlockQuote>
+    </PaddedView>
+  ))
+  .add('isLoading', () => {
+    const SetIsLoading = withIsLoading(PaddedView);
+
+    return (
+      <SetIsLoading isLoading>
+        <BlockQuote>
+          {
+            '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+          }
+        </BlockQuote>
+      </SetIsLoading>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/BlockQuote/BlockQuote.tests.js b/apolloschurchapp/src/ui/typography/BlockQuote/BlockQuote.tests.js
new file mode 100644
index 0000000..071031c
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BlockQuote/BlockQuote.tests.js
@@ -0,0 +1,50 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import { H5 } from 'apolloschurchapp/src/ui/typography';
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+
+import BlockQuote from '.';
+
+describe('the BlockQuote component', () => {
+  it('should render a string', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BlockQuote>
+          {
+            '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+          }
+        </BlockQuote>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render child components', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BlockQuote>
+          <H5>
+            {
+              '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+            }
+          </H5>
+        </BlockQuote>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const BlockQuoteLoadingState = withIsLoading(BlockQuote);
+    const tree = renderer.create(
+      <Providers>
+        <BlockQuoteLoadingState isLoading>
+          {
+            '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+          }
+        </BlockQuoteLoadingState>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/BlockQuote/index.js b/apolloschurchapp/src/ui/typography/BlockQuote/index.js
new file mode 100644
index 0000000..6b02d31
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BlockQuote/index.js
@@ -0,0 +1,45 @@
+import React from 'react';
+import { compose, setDisplayName, pure } from 'recompose';
+import PropTypes from 'prop-types';
+import { StyleSheet, View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { withThemeMixin } from 'apolloschurchapp/src/ui/theme';
+import { BodyText } from 'apolloschurchapp/src/ui/typography';
+
+const Block = compose(
+  setDisplayName('BlockQuote'),
+  styled(({ theme }) => ({
+    alignSelf: 'stretch',
+    marginVertical: theme.helpers.verticalRhythm(2),
+    paddingVertical: theme.helpers.verticalRhythm(1.5),
+    paddingHorizontal: theme.sizing.baseUnit,
+    borderTopWidth: StyleSheet.hairlineWidth,
+    borderBottomWidth: StyleSheet.hairlineWidth,
+    borderColor: theme.colors.text.tertiary,
+  })),
+  // Forced <BodyText> to inherit QuoteText styles.
+  // This is necessary for HTMLView to properly style <blockquote>'s 😥
+  withThemeMixin(({ theme }) => ({
+    overrides: {
+      BodyText: {
+        fontFamily: theme.typography.sans.regular.italic,
+        textAlign: 'center',
+        color: theme.colors.text.primary,
+      },
+    },
+  }))
+)(View);
+
+const BlockQuote = pure(({ children }) => (
+  <Block>
+    {typeof children === 'string' ? <BodyText>{children}</BodyText> : children}
+  </Block>
+));
+
+BlockQuote.propTypes = {
+  children: PropTypes.node,
+  isLoading: PropTypes.bool,
+};
+
+export default BlockQuote;
diff --git a/apolloschurchapp/src/ui/typography/BodyText/BodyText.stories.js b/apolloschurchapp/src/ui/typography/BodyText/BodyText.stories.js
new file mode 100644
index 0000000..8782907
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BodyText/BodyText.stories.js
@@ -0,0 +1,56 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import BodyText from '.';
+
+storiesOf('typography/BodyText', module)
+  .add('Regular', () => (
+    <BodyText>
+      {
+        '"True faith means holding nothing back. It means putting every hope in God\'s fidelity to His Promises." ― Francis Chan'
+      }
+    </BodyText>
+  ))
+  .add('Bold', () => (
+    <BodyText bold>
+      {
+        '"True faith means holding nothing back. It means putting every hope in God\'s fidelity to His Promises." ― Francis Chan'
+      }
+    </BodyText>
+  ))
+  .add('Italic', () => (
+    <BodyText italic>
+      {
+        '"True faith means holding nothing back. It means putting every hope in God\'s fidelity to His Promises." ― Francis Chan'
+      }
+    </BodyText>
+  ))
+  .add('Bold Italic', () => (
+    <BodyText bold italic>
+      {
+        '"True faith means holding nothing back. It means putting every hope in God\'s fidelity to His Promises." ― Francis Chan'
+      }
+    </BodyText>
+  ))
+  .add('isLoading', () => (
+    <BodyText isLoading>
+      {
+        '"True faith means holding nothing back. It means putting every hope in God\'s fidelity to His Promises." ― Francis Chan'
+      }
+    </BodyText>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <View>
+        <BodyText style={border}>Body Text</BodyText>
+        <BodyText style={border}>
+          {
+            '"True faith means holding nothing\nback. It means putting every\nhope in God\'s fidelity to His Promises." ― Francis Chan'
+          }
+        </BodyText>
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/BodyText/BodyText.tests.js b/apolloschurchapp/src/ui/typography/BodyText/BodyText.tests.js
new file mode 100644
index 0000000..f1e30ef
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BodyText/BodyText.tests.js
@@ -0,0 +1,72 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import BodyText from '.';
+
+describe('the BodyText component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BodyText>Default BodyText text</BodyText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as bold', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BodyText bold>Bold BodyText text</BodyText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as italic', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BodyText italic>Italic BodyText text</BodyText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as bold italic', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BodyText bold italic>
+          Bold italic BodyText text
+        </BodyText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const salmon = { color: 'salmon' };
+    const tree = renderer.create(
+      <Providers>
+        <BodyText style={salmon}>Salmon text</BodyText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BodyText isLoading>Default BodyText text</BodyText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BodyText accessible={false}>
+          {
+            '"True faith means holding nothing back. It means putting every hope in God\'s fidelity to His Promises." ― Francis Chan'
+          }
+        </BodyText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/BodyText/index.js b/apolloschurchapp/src/ui/typography/BodyText/index.js
new file mode 100644
index 0000000..f6da80a
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BodyText/index.js
@@ -0,0 +1,49 @@
+import { Text } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, pure, setDisplayName } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
+
+const styles = styled(({ theme, bold, italic }) => {
+  let fontStack = theme.typography.sans.regular.default;
+
+  if (bold && italic) {
+    fontStack = theme.typography.sans.bold.italic;
+  } else if (bold) {
+    fontStack = theme.typography.sans.bold.default;
+  } else if (italic) {
+    fontStack = theme.typography.sans.regular.italic;
+  }
+
+  return {
+    fontSize: theme.helpers.rem(1),
+    lineHeight: theme.helpers.verticalRhythm(1, 1.625),
+    fontFamily: fontStack,
+    color: theme.colors.text.primary,
+  };
+}, 'BodyText');
+
+const BodyText = compose(
+  setDisplayName('BodyText'),
+  styles,
+  withPlaceholder(Typography),
+  pure
+)(Text);
+
+BodyText.propTypes = {
+  bold: PropTypes.bool,
+  italic: PropTypes.bool,
+  isLoading: PropTypes.bool, // display loading placeholder
+  ...Text.propTypes,
+};
+
+BodyText.defaultProps = {
+  bold: false,
+  italic: false,
+};
+
+export default BodyText;
diff --git a/apolloschurchapp/src/ui/typography/BulletListItem/BulletListItem.stories.js b/apolloschurchapp/src/ui/typography/BulletListItem/BulletListItem.stories.js
new file mode 100644
index 0000000..c69c3cb
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BulletListItem/BulletListItem.stories.js
@@ -0,0 +1,27 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+
+import BulletListItem from '.';
+
+storiesOf('typography/BulletListItem', module)
+  .add('Default', () => (
+    <PaddedView>
+      <BulletListItem>
+        {`"God's work done in God's way will never lack God's supplies." – Hudson Taylor`}
+      </BulletListItem>
+    </PaddedView>
+  ))
+  .add('isLoading', () => {
+    const SetIsLoading = withIsLoading(PaddedView);
+
+    return (
+      <SetIsLoading isLoading>
+        <BulletListItem>
+          {`"God's work done in God's way will never lack God's supplies." – Hudson Taylor`}
+        </BulletListItem>
+      </SetIsLoading>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/BulletListItem/BulletListItem.tests.js b/apolloschurchapp/src/ui/typography/BulletListItem/BulletListItem.tests.js
new file mode 100644
index 0000000..d9cd08b
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BulletListItem/BulletListItem.tests.js
@@ -0,0 +1,44 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+import { H5 } from 'apolloschurchapp/src/ui/typography';
+
+import BulletListItem from '.';
+
+describe('the BulletListItem component', () => {
+  it('should render a string', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BulletListItem>
+          {`"God's work done in God's way will never lack God's supplies." – Hudson Taylor`}
+        </BulletListItem>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render render child components', () => {
+    const tree = renderer.create(
+      <Providers>
+        <BulletListItem>
+          <H5>
+            {`"God's work done in God's way will never lack God's supplies." – Hudson Taylor`}
+          </H5>
+        </BulletListItem>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const BulletListLoadingState = withIsLoading(BulletListItem);
+    const tree = renderer.create(
+      <Providers>
+        <BulletListLoadingState isLoading>
+          {`"God's work done in God's way will never lack God's supplies." – Hudson Taylor`}
+        </BulletListLoadingState>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/BulletListItem/index.js b/apolloschurchapp/src/ui/typography/BulletListItem/index.js
new file mode 100644
index 0000000..6be20c1
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/BulletListItem/index.js
@@ -0,0 +1,55 @@
+import React from 'react';
+import { compose, setDisplayName, pure } from 'recompose';
+import PropTypes from 'prop-types';
+import { View } from 'react-native';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import { BodyText } from 'apolloschurchapp/src/ui/typography';
+
+const enhance = compose(
+  setDisplayName('BulletListItem'),
+  pure
+);
+
+const Wrapper = styled(({ theme }) => ({
+  flexDirection: 'row',
+  paddingBottom: theme.helpers.verticalRhythm(0.375),
+}))(View);
+
+const Bullet = styled(({ theme }) => ({
+  // Set in a typographic unit to reflect changes in the default type size.
+  paddingRight: theme.helpers.rem(1) / 2,
+}))(View);
+
+const IosTextWrapFix = styled({
+  // 😢
+  flexShrink: 1,
+})(View);
+
+const BulletListItem = enhance(({ children }) => (
+  <Wrapper>
+    <Bullet>
+      <BodyText>•</BodyText>
+    </Bullet>
+    <IosTextWrapFix>
+      {typeof children === 'string' ? (
+        <BodyText>{children}</BodyText>
+      ) : (
+        children
+      )}
+    </IosTextWrapFix>
+  </Wrapper>
+));
+
+BulletListItem.propTypes = {
+  children: PropTypes.oneOfType([
+    /*
+     * There is no way to type check against known text nodes but expect problems if you try to
+     * pass something other than a string or text elements (this includes children of children).
+     */
+    PropTypes.string,
+    PropTypes.node,
+  ]),
+};
+
+export default BulletListItem;
diff --git a/apolloschurchapp/src/ui/typography/H1/H1.stories.js b/apolloschurchapp/src/ui/typography/H1/H1.stories.js
new file mode 100644
index 0000000..14a038b
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H1/H1.stories.js
@@ -0,0 +1,66 @@
+import React from 'react';
+import { ScrollView } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import { Paragraph, H2, BodyText } from 'apolloschurchapp/src/ui/typography';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+
+import H1 from '.';
+
+storiesOf('typography/H1', module)
+  .add('Default', () => (
+    <ScrollView>
+      <H1>
+        {
+          '"Do all the good you can. By all the means you can. In all the ways you can. In all the places you can. At all the times you can. To all the people you can. As long as ever you can." ― John Wesley'
+        }
+      </H1>
+    </ScrollView>
+  ))
+  .add('padded', () => (
+    <ScrollView>
+      <PaddedView>
+        <H1 padded>Padded Heading Big and Long</H1>
+        <Paragraph>
+          <BodyText>
+            <BodyText italic>Paragraph</BodyText>
+            {
+              " why do the nations rage, and the peoples plot a vain thing? The kings of the earth take a stand, and the rulers take counsel together, against Yahweh, and against his Anointed, saying, «Let's break their bonds apart, and cast their cords from us. He who sits in the heavens will laugh. The LORD will have them in derision. Then he will speak to them in his anger, and terrify them in his wrath: Yet I have set my King on my holy hill of Zion.» I will tell of the decree. Yahweh said to me, You are my son. Today I have become your father. Ask of me, and I will give the nations for your inheritance, the uttermost parts of the earth for your possession. You shall break them with a rod of iron. You shall dash them in pieces like a potter's vessel. Now therefore be wise, you kings. Be instructed, you judges of the earth. Serve Yahweh with fear, and rejoice with trembling. Give sincere homage to the Son, lest he be angry, and you perish in the way, for his wrath will soon be kindled. Blessed are all those who take refuge in him."
+            }
+          </BodyText>
+        </Paragraph>
+        <H2 padded>Padded Heading Big and Long</H2>
+        <Paragraph>
+          <BodyText>
+            <BodyText italic>Paragraph</BodyText>
+            {
+              " blessed is the man who doesn't walk in the counsel of the wicked, nor stand in the way of sinners, nor sit in the seat of scoffers; but his delight is in Yahweh's law. On his law he meditates day and night. He will be like a tree planted by the streams of water, that brings forth its fruit in its season, whose leaf also does not wither. Whatever he does shall prosper. The wicked are not so, but are like the chaff which the wind drives away. Therefore the wicked shall not stand in the judgment, nor sinners in the congregation of the righteous. For Yahweh knows the way of the righteous, but the way of the wicked shall perish."
+            }
+          </BodyText>
+        </Paragraph>
+      </PaddedView>
+    </ScrollView>
+  ))
+  .add('isLoading', () => (
+    <ScrollView>
+      <H1 isLoading>
+        {
+          '"Do all the good you can. By all the means you can. In all the ways you can. In all the places you can. At all the times you can. To all the people you can. As long as ever you can." ― John Wesley'
+        }
+      </H1>
+    </ScrollView>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <ScrollView>
+        <H1 style={border}>Heading 1</H1>
+        <H1 style={border}>
+          {
+            '"Do all the\ngood you can.\nBy all the means you can. In all the ways you can. In all the places you can. At all the times you can. To all the people you can. As long as ever you can." ― John Wesley'
+          }
+        </H1>
+      </ScrollView>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/H1/H1.tests.js b/apolloschurchapp/src/ui/typography/H1/H1.tests.js
new file mode 100644
index 0000000..79088b9
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H1/H1.tests.js
@@ -0,0 +1,64 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import H1 from '.';
+
+describe('the H1 component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H1>Default H1 text</H1>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const salmon = { color: 'salmon' };
+    const tree = renderer.create(
+      <Providers>
+        <H1 style={salmon}>Salmon text</H1>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with correct padding', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H1 padded>Padded H1 text</H1>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H1 isLoading>Default H1 text</H1>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state with correct positioning (margins)', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H1 padded isLoading>
+          Padded H1 text
+        </H1>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H1 accessible={false}>
+          {
+            '"Do all the good you can. By all the means you can. In all the ways you can. In all theplaces you can. At all the times you can. To all the people you can. As long as ever you can." ― John Wesley'
+          }
+        </H1>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/H1/index.js b/apolloschurchapp/src/ui/typography/H1/index.js
new file mode 100644
index 0000000..15d7ac7
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H1/index.js
@@ -0,0 +1,39 @@
+import { Text } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, setDisplayName, pure } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
+
+const styles = styled(
+  ({ theme, padded }) => ({
+    fontSize: theme.helpers.rem(2.6875),
+    lineHeight: theme.helpers.verticalRhythm(2.6875, 1.15),
+    fontFamily: theme.typography.sans.black.default,
+    color: theme.colors.text.primary,
+    ...(padded
+      ? {
+          paddingVertical: theme.helpers.verticalRhythm(2.015625),
+        }
+      : {}),
+  }),
+  'H1'
+);
+
+const H1 = compose(
+  setDisplayName('H1'),
+  styles,
+  withPlaceholder(Typography, { width: '100%' }),
+  pure
+)(Text);
+
+H1.propTypes = {
+  padded: PropTypes.bool,
+  isLoading: PropTypes.bool, // display loading placeholder
+  ...Text.propTypes,
+};
+
+export default H1;
diff --git a/apolloschurchapp/src/ui/typography/H2/H2.stories.js b/apolloschurchapp/src/ui/typography/H2/H2.stories.js
new file mode 100644
index 0000000..4dea901
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H2/H2.stories.js
@@ -0,0 +1,51 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import { Paragraph, BodyText } from 'apolloschurchapp/src/ui/typography';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+
+import H2 from '.';
+
+storiesOf('typography/H2', module)
+  .add('Default', () => (
+    <H2>
+      {
+        '"God is most glorified in us when we are most satisfied in Him" ― John Piper'
+      }
+    </H2>
+  ))
+  .add('padded', () => (
+    <PaddedView>
+      <H2 padded>Padded Heading Big and Long</H2>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " why do the nations rage, and the peoples plot a vain thing? The kings of the earth take a stand, and the rulers take counsel together, against Yahweh, and against his Anointed, saying, «Let's break their bonds apart, and cast their cords from us. He who sits in the heavens will laugh. The LORD will have them in derision. Then he will speak to them in his anger, and terrify them in his wrath: Yet I have set my King on my holy hill of Zion.» I will tell of the decree. Yahweh said to me, You are my son. Today I have become your father. Ask of me, and I will give the nations for your inheritance, the uttermost parts of the earth for your possession. You shall break them with a rod of iron. You shall dash them in pieces like a potter's vessel. Now therefore be wise, you kings. Be instructed, you judges of the earth. Serve Yahweh with fear, and rejoice with trembling. Give sincere homage to the Son, lest he be angry, and you perish in the way, for his wrath will soon be kindled. Blessed are all those who take refuge in him."
+          }
+        </BodyText>
+      </Paragraph>
+    </PaddedView>
+  ))
+  .add('isLoading', () => (
+    <H2 isLoading>
+      {
+        '"God is most glorified in us when we are most satisfied in Him" ― John Piper'
+      }
+    </H2>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <View>
+        <H2 style={border}>Heading 2</H2>
+        <H2 style={border}>
+          {
+            '"God is most glorified in us when we are most satisfied in Him" ― John Piper'
+          }
+        </H2>
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/H2/H2.tests.js b/apolloschurchapp/src/ui/typography/H2/H2.tests.js
new file mode 100644
index 0000000..4d27da7
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H2/H2.tests.js
@@ -0,0 +1,64 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import H2 from '.';
+
+describe('the H2 component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H2>Default H2 text</H2>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const salmon = { color: 'salmon' };
+    const tree = renderer.create(
+      <Providers>
+        <H2 style={salmon}>Salmon text</H2>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with correct padding', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H2 padded>Padded H2 text</H2>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H2 isLoading>Default H2 text</H2>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state with correct positioning (margins)', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H2 padded isLoading>
+          Padded H2 text
+        </H2>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H2 accessible={false}>
+          {
+            '"God is most glorified in us when we are most satisfied in Him" ― John Piper'
+          }
+        </H2>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/H2/index.js b/apolloschurchapp/src/ui/typography/H2/index.js
new file mode 100644
index 0000000..19fba61
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H2/index.js
@@ -0,0 +1,40 @@
+import { Text } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, setDisplayName, pure } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
+
+const styles = styled(
+  ({ theme, padded }) => ({
+    fontSize: theme.helpers.rem(2.25),
+    lineHeight: theme.helpers.verticalRhythm(2.25, 1.15),
+    fontFamily: theme.typography.sans.black.default,
+    color: theme.colors.text.primary,
+    ...(padded
+      ? {
+          paddingTop: theme.helpers.verticalRhythm(1.6875),
+          paddingBottom: theme.helpers.verticalRhythm(1.125),
+        }
+      : {}),
+  }),
+  'H2'
+);
+
+const H2 = compose(
+  setDisplayName('H2'),
+  styles,
+  withPlaceholder(Typography, { width: '100%' }),
+  pure
+)(Text);
+
+H2.propTypes = {
+  padded: PropTypes.bool,
+  isLoading: PropTypes.bool, // display loading placeholder
+  ...Text.propTypes,
+};
+
+export default H2;
diff --git a/apolloschurchapp/src/ui/typography/H3/H3.stories.js b/apolloschurchapp/src/ui/typography/H3/H3.stories.js
new file mode 100644
index 0000000..42c966f
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H3/H3.stories.js
@@ -0,0 +1,59 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { Paragraph, BodyText } from 'apolloschurchapp/src/ui/typography';
+
+import H3 from '.';
+
+storiesOf('typography/H3', module)
+  .add('Default', () => (
+    <H3>
+      {
+        '"The Christian shoemaker does his duty not by putting little crosses on the shoes, but by making good shoes, because God is interested in good craftsmanship." ― Martin Luther'
+      }
+    </H3>
+  ))
+  .add('padded', () => (
+    <PaddedView>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " blessed is the man who doesn't walk in the counsel of the wicked, nor stand in the way of sinners, nor sit in the seat of scoffers; but his delight is in Yahweh's law. On his law he meditates day and night. He will be like a tree planted by the streams of water, that brings forth its fruit in its season, whose leaf also does not wither. Whatever he does shall prosper. The wicked are not so, but are like the chaff which the wind drives away. Therefore the wicked shall not stand in the judgment, nor sinners in the congregation of the righteous. For Yahweh knows the way of the righteous, but the way of the wicked shall perish."
+          }
+        </BodyText>
+      </Paragraph>
+      <H3 padded>Padded Heading The Story of The Longest Heading Ever</H3>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " why do the nations rage, and the peoples plot a vain thing? The kings of the earth take a stand, and the rulers take counsel together, against Yahweh, and against his Anointed, saying, «Let's break their bonds apart, and cast their cords from us. He who sits in the heavens will laugh. The LORD will have them in derision. Then he will speak to them in his anger, and terrify them in his wrath: Yet I have set my King on my holy hill of Zion.» I will tell of the decree. Yahweh said to me, You are my son. Today I have become your father. Ask of me, and I will give the nations for your inheritance, the uttermost parts of the earth for your possession. You shall break them with a rod of iron. You shall dash them in pieces like a potter's vessel. Now therefore be wise, you kings. Be instructed, you judges of the earth. Serve Yahweh with fear, and rejoice with trembling. Give sincere homage to the Son, lest he be angry, and you perish in the way, for his wrath will soon be kindled. Blessed are all those who take refuge in him."
+          }
+        </BodyText>
+      </Paragraph>
+    </PaddedView>
+  ))
+  .add('isLoading', () => (
+    <H3 isLoading>
+      {
+        '"The Christian shoemaker does his duty not by putting little crosses on the shoes, but by making good shoes, because God is interested in good craftsmanship." ― Martin Luther'
+      }
+    </H3>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <View>
+        <H3 style={border}>Heading 3</H3>
+        <H3 style={border}>
+          {
+            '"The Christian shoemaker does his duty not by putting little crosses on the shoes, but by making good shoes, because God is interested in good craftsmanship." ― Martin Luther'
+          }
+        </H3>
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/H3/H3.tests.js b/apolloschurchapp/src/ui/typography/H3/H3.tests.js
new file mode 100644
index 0000000..cdbd69a
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H3/H3.tests.js
@@ -0,0 +1,64 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import H3 from '.';
+
+describe('the H3 component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H3>Default H3 text</H3>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const salmon = { color: 'salmon' };
+    const tree = renderer.create(
+      <Providers>
+        <H3 style={salmon}>Salmon text</H3>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with correct padding', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H3 padded>Padded H3 text</H3>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H3 isLoading>Default H3 text</H3>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state with correct positioning (margins)', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H3 padded isLoading>
+          Padded H3 text
+        </H3>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H3 accessible={false}>
+          {
+            '"The Christian shoemaker does his duty not by putting little crosses on the shoes, but by making good shoes, because God is interested in good craftsmanship." ― Martin Luther'
+          }
+        </H3>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/H3/index.js b/apolloschurchapp/src/ui/typography/H3/index.js
new file mode 100644
index 0000000..b4d22bd
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H3/index.js
@@ -0,0 +1,40 @@
+import { Text } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, setDisplayName, pure } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
+
+const styles = styled(
+  ({ theme, padded }) => ({
+    fontSize: theme.helpers.rem(1.5),
+    lineHeight: theme.helpers.verticalRhythm(1.5, 1.15),
+    fontFamily: theme.typography.sans.black.default,
+    color: theme.colors.text.primary,
+    ...(padded
+      ? {
+          paddingTop: theme.helpers.verticalRhythm(1.125),
+          paddingBottom: theme.helpers.verticalRhythm(0.75),
+        }
+      : {}),
+  }),
+  'H3'
+);
+
+const H3 = compose(
+  setDisplayName('H3'),
+  styles,
+  withPlaceholder(Typography, { width: '100%' }),
+  pure
+)(Text);
+
+H3.propTypes = {
+  padded: PropTypes.bool,
+  isLoading: PropTypes.bool, // display loading placeholder
+  ...Text.propTypes,
+};
+
+export default H3;
diff --git a/apolloschurchapp/src/ui/typography/H4/H4.stories.js b/apolloschurchapp/src/ui/typography/H4/H4.stories.js
new file mode 100644
index 0000000..82dcd6f
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H4/H4.stories.js
@@ -0,0 +1,59 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import { Paragraph, BodyText } from 'apolloschurchapp/src/ui/typography';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+
+import H4 from '.';
+
+storiesOf('typography/H4', module)
+  .add('Default', () => (
+    <H4>
+      {
+        '"What you are is God\'s gift to you, what you become is your gift to God." ― Hans Urs von Balthasar'
+      }
+    </H4>
+  ))
+  .add('padded', () => (
+    <PaddedView>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " blessed is the man who doesn't walk in the counsel of the wicked, nor stand in the way of sinners, nor sit in the seat of scoffers; but his delight is in Yahweh's law. On his law he meditates day and night. He will be like a tree planted by the streams of water, that brings forth its fruit in its season, whose leaf also does not wither. Whatever he does shall prosper. The wicked are not so, but are like the chaff which the wind drives away. Therefore the wicked shall not stand in the judgment, nor sinners in the congregation of the righteous. For Yahweh knows the way of the righteous, but the way of the wicked shall perish."
+          }
+        </BodyText>
+      </Paragraph>
+      <H4 padded>Padded Heading The Story of The Longest Heading Ever</H4>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " why do the nations rage, and the peoples plot a vain thing? The kings of the earth take a stand, and the rulers take counsel together, against Yahweh, and against his Anointed, saying, «Let's break their bonds apart, and cast their cords from us. He who sits in the heavens will laugh. The LORD will have them in derision. Then he will speak to them in his anger, and terrify them in his wrath: Yet I have set my King on my holy hill of Zion.» I will tell of the decree. Yahweh said to me, You are my son. Today I have become your father. Ask of me, and I will give the nations for your inheritance, the uttermost parts of the earth for your possession. You shall break them with a rod of iron. You shall dash them in pieces like a potter's vessel. Now therefore be wise, you kings. Be instructed, you judges of the earth. Serve Yahweh with fear, and rejoice with trembling. Give sincere homage to the Son, lest he be angry, and you perish in the way, for his wrath will soon be kindled. Blessed are all those who take refuge in him."
+          }
+        </BodyText>
+      </Paragraph>
+    </PaddedView>
+  ))
+  .add('isLoading', () => (
+    <H4 isLoading>
+      {
+        '"What you are is God\'s gift to you, what you become is your gift to God." ― Hans Urs von Balthasar'
+      }
+    </H4>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <View>
+        <H4 style={border}>Heading 4</H4>
+        <H4 style={border}>
+          {
+            '"What you are is God\'s gift to you, what you become is your gift to God." ― Hans Urs von Balthasar'
+          }
+        </H4>
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/H4/H4.tests.js b/apolloschurchapp/src/ui/typography/H4/H4.tests.js
new file mode 100644
index 0000000..f03f6a9
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H4/H4.tests.js
@@ -0,0 +1,64 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import H4 from '.';
+
+describe('the H4 component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H4>Default H4 text</H4>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const salmon = { color: 'salmon' };
+    const tree = renderer.create(
+      <Providers>
+        <H4 style={salmon}>Salmon text</H4>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with correct padding', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H4 padded>Padded H4 text</H4>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H4 isLoading>Default H4 text</H4>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state with correct positioning (margins)', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H4 padded isLoading>
+          Padded H4 text
+        </H4>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H4 accessible={false}>
+          {
+            '"What you are is God\'s gift to you, what you become is your gift to God." ― Hans Urs von Balthasar'
+          }
+        </H4>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/H4/index.js b/apolloschurchapp/src/ui/typography/H4/index.js
new file mode 100644
index 0000000..04589a1
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H4/index.js
@@ -0,0 +1,37 @@
+import { Text } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, setDisplayName, pure } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
+
+const H4 = compose(
+  setDisplayName('H4'),
+  styled(
+    ({ theme, padded }) => ({
+      fontSize: theme.helpers.rem(1),
+      lineHeight: theme.helpers.verticalRhythm(1),
+      fontFamily: theme.typography.sans.bold.default,
+      color: theme.colors.text.primary,
+      ...(padded
+        ? {
+            paddingTop: theme.helpers.verticalRhythm(0.66),
+            paddingBottom: theme.helpers.verticalRhythm(0.5),
+          }
+        : {}),
+    }),
+    'H4'
+  ),
+  withPlaceholder(Typography, { width: '80%' }),
+  pure
+)(Text);
+
+H4.propTypes = {
+  isLoading: PropTypes.bool, // display loading placeholder
+  ...Text.propTypes,
+};
+
+export default H4;
diff --git a/apolloschurchapp/src/ui/typography/H5/H5.stories.js b/apolloschurchapp/src/ui/typography/H5/H5.stories.js
new file mode 100644
index 0000000..d7655d4
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H5/H5.stories.js
@@ -0,0 +1,59 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import { Paragraph, BodyText } from 'apolloschurchapp/src/ui/typography';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+
+import H5 from '.';
+
+storiesOf('typography/H5', module)
+  .add('Default', () => (
+    <H5>
+      {
+        '"Faith does not eliminate questions. But faith knows where to take them." ― Elisabeth Elliot'
+      }
+    </H5>
+  ))
+  .add('padded', () => (
+    <PaddedView>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " blessed is the man who doesn't walk in the counsel of the wicked, nor stand in the way of sinners, nor sit in the seat of scoffers; but his delight is in Yahweh's law. On his law he meditates day and night. He will be like a tree planted by the streams of water, that brings forth its fruit in its season, whose leaf also does not wither. Whatever he does shall prosper. The wicked are not so, but are like the chaff which the wind drives away. Therefore the wicked shall not stand in the judgment, nor sinners in the congregation of the righteous. For Yahweh knows the way of the righteous, but the way of the wicked shall perish."
+          }
+        </BodyText>
+      </Paragraph>
+      <H5 padded>Padded Heading The Story of The Longest Heading Ever</H5>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " why do the nations rage, and the peoples plot a vain thing? The kings of the earth take a stand, and the rulers take counsel together, against Yahweh, and against his Anointed, saying, «Let's break their bonds apart, and cast their cords from us. He who sits in the heavens will laugh. The LORD will have them in derision. Then he will speak to them in his anger, and terrify them in his wrath: Yet I have set my King on my holy hill of Zion.» I will tell of the decree. Yahweh said to me, You are my son. Today I have become your father. Ask of me, and I will give the nations for your inheritance, the uttermost parts of the earth for your possession. You shall break them with a rod of iron. You shall dash them in pieces like a potter's vessel. Now therefore be wise, you kings. Be instructed, you judges of the earth. Serve Yahweh with fear, and rejoice with trembling. Give sincere homage to the Son, lest he be angry, and you perish in the way, for his wrath will soon be kindled. Blessed are all those who take refuge in him."
+          }
+        </BodyText>
+      </Paragraph>
+    </PaddedView>
+  ))
+  .add('isLoading', () => (
+    <H5 isLoading>
+      {
+        '"Faith does not eliminate questions. But faith knows where to take them." ― Elisabeth Elliot'
+      }
+    </H5>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <View>
+        <H5 style={border}>Heading 5</H5>
+        <H5 style={border}>
+          {
+            '"Faith does not eliminate questions. But faith knows where to take them." ― Elisabeth Elliot'
+          }
+        </H5>
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/H5/H5.tests.js b/apolloschurchapp/src/ui/typography/H5/H5.tests.js
new file mode 100644
index 0000000..1c36f36
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H5/H5.tests.js
@@ -0,0 +1,64 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import H5 from '.';
+
+describe('the H5 component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H5>Default H5 text</H5>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const salmon = { color: 'salmon' };
+    const tree = renderer.create(
+      <Providers>
+        <H5 style={salmon}>Salmon text</H5>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with correct padding', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H5 padded>Padded H5 text</H5>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H5 isLoading>Default H5 text</H5>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state with correct positioning (margins)', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H5 padded isLoading>
+          Padded H5 text
+        </H5>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H5 accessible={false}>
+          {
+            '"Faith does not eliminate questions. But faith knows where to take them." ― Elisabeth Elliot'
+          }
+        </H5>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/H5/index.js b/apolloschurchapp/src/ui/typography/H5/index.js
new file mode 100644
index 0000000..04caa52
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H5/index.js
@@ -0,0 +1,40 @@
+import { Text } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, setDisplayName, pure } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
+
+const styles = styled(
+  ({ theme, padded }) => ({
+    fontSize: theme.helpers.rem(0.875),
+    lineHeight: theme.helpers.verticalRhythm(0.875),
+    fontFamily: theme.typography.sans.medium.default,
+    color: theme.colors.text.primary,
+    ...(padded
+      ? {
+          paddingTop: theme.helpers.verticalRhythm(0.5775),
+          paddingBottom: theme.helpers.verticalRhythm(0.4375),
+        }
+      : {}),
+  }),
+  'H5'
+);
+
+const H5 = compose(
+  setDisplayName('H5'),
+  styles,
+  withPlaceholder(Typography, { width: '60%' }),
+  pure
+)(Text);
+
+H5.propTypes = {
+  padded: PropTypes.bool,
+  isLoading: PropTypes.bool, // display loading placeholder
+  ...Text.propTypes,
+};
+
+export default H5;
diff --git a/apolloschurchapp/src/ui/typography/H6/H6.stories.js b/apolloschurchapp/src/ui/typography/H6/H6.stories.js
new file mode 100644
index 0000000..ef14964
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H6/H6.stories.js
@@ -0,0 +1,59 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import { Paragraph, BodyText } from 'apolloschurchapp/src/ui/typography';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+
+import H6 from '.';
+
+storiesOf('typography/H6', module)
+  .add('Default', () => (
+    <H6>
+      {
+        '"Radical obedience to Christ is not easy... It\'s not comfort, not health, not wealth, and not prosperity in this world. Radical obedience to Christ risks losing all these things. But in the end, such risk finds its reward in Christ. And He is more than enough for us." ― David Platt'
+      }
+    </H6>
+  ))
+  .add('padded', () => (
+    <PaddedView>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " blessed is the man who doesn't walk in the counsel of the wicked, nor stand in the way of sinners, nor sit in the seat of scoffers; but his delight is in Yahweh's law. On his law he meditates day and night. He will be like a tree planted by the streams of water, that brings forth its fruit in its season, whose leaf also does not wither. Whatever he does shall prosper. The wicked are not so, but are like the chaff which the wind drives away. Therefore the wicked shall not stand in the judgment, nor sinners in the congregation of the righteous. For Yahweh knows the way of the righteous, but the way of the wicked shall perish."
+          }
+        </BodyText>
+      </Paragraph>
+      <H6 padded>Padded Heading The Story of The Longest Heading Ever</H6>
+      <Paragraph>
+        <BodyText>
+          <BodyText italic>Paragraph</BodyText>
+          {
+            " why do the nations rage, and the peoples plot a vain thing? The kings of the earth take a stand, and the rulers take counsel together, against Yahweh, and against his Anointed, saying, «Let's break their bonds apart, and cast their cords from us. He who sits in the heavens will laugh. The LORD will have them in derision. Then he will speak to them in his anger, and terrify them in his wrath: Yet I have set my King on my holy hill of Zion.» I will tell of the decree. Yahweh said to me, You are my son. Today I have become your father. Ask of me, and I will give the nations for your inheritance, the uttermost parts of the earth for your possession. You shall break them with a rod of iron. You shall dash them in pieces like a potter's vessel. Now therefore be wise, you kings. Be instructed, you judges of the earth. Serve Yahweh with fear, and rejoice with trembling. Give sincere homage to the Son, lest he be angry, and you perish in the way, for his wrath will soon be kindled. Blessed are all those who take refuge in him."
+          }
+        </BodyText>
+      </Paragraph>
+    </PaddedView>
+  ))
+  .add('isLoading', () => (
+    <H6 isLoading>
+      {
+        '"Radical obedience to Christ is not easy... It\'s not comfort, not health, not wealth, and not prosperity in this world. Radical obedience to Christ risks losing all these things. But in the end, such risk finds its reward in Christ. And He is more than enough for us." ― David Platt'
+      }
+    </H6>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <View>
+        <H6 style={border}>Heading 6</H6>
+        <H6 style={border}>
+          {
+            '"Radical obedience to Christ is not easy... It\'s not comfort, not health, not wealth, and not prosperity in this world. Radical obedience to Christ risks losing all these things. But in the end, such risk finds its reward in Christ. And He is more than enough for us." ― David Platt'
+          }
+        </H6>
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/H6/H6.tests.js b/apolloschurchapp/src/ui/typography/H6/H6.tests.js
new file mode 100644
index 0000000..849c9c1
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H6/H6.tests.js
@@ -0,0 +1,64 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import H6 from '.';
+
+describe('the H6 component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H6>Default H6 text</H6>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const salmon = { color: 'salmon' };
+    const tree = renderer.create(
+      <Providers>
+        <H6 style={salmon}>Salmon text</H6>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render with correct padding', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H6 padded>Padded H6 text</H6>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H6 isLoading>Default H6 text</H6>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state with correct positioning (margins)', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H6 padded isLoading>
+          Padded H6 text
+        </H6>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <H6 accessible={false}>
+          {
+            '"Radical obedience to Christ is not easy... It\'s not comfort, not health, not wealth, and not prosperity in this world. Radical obedience to Christ risks losing all these things. But in the end, such risk finds its reward in Christ. And he is more than enough for us." ― David Platt'
+          }
+        </H6>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/H6/index.js b/apolloschurchapp/src/ui/typography/H6/index.js
new file mode 100644
index 0000000..9084ba1
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/H6/index.js
@@ -0,0 +1,40 @@
+import { Text } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, setDisplayName, pure } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
+
+const styles = styled(
+  ({ theme, padded }) => ({
+    fontSize: theme.helpers.rem(0.75),
+    lineHeight: theme.helpers.verticalRhythm(0.75),
+    fontFamily: theme.typography.sans.bold.default,
+    color: theme.colors.text.secondary,
+    ...(padded
+      ? {
+          // paddingTop: theme.helpers.verticalRhythm(0.495),
+          paddingBottom: theme.helpers.verticalRhythm(0.375),
+        }
+      : {}),
+  }),
+  'H6'
+);
+
+const H6 = compose(
+  setDisplayName('H6'),
+  styles,
+  withPlaceholder(Typography, { width: '50%' }),
+  pure
+)(Text);
+
+H6.propTypes = {
+  padded: PropTypes.bool,
+  isLoading: PropTypes.bool, // display loading placeholder
+  ...Text.propTypes,
+};
+
+export default H6;
diff --git a/apolloschurchapp/src/ui/typography/Paragraph/Paragraph.stories.js b/apolloschurchapp/src/ui/typography/Paragraph/Paragraph.stories.js
new file mode 100644
index 0000000..fc68b44
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/Paragraph/Paragraph.stories.js
@@ -0,0 +1,81 @@
+import React from 'react';
+import { storiesOf } from '@storybook/react-native';
+import { ScrollView } from 'react-native';
+
+import { BodyText } from 'apolloschurchapp/src/ui/typography';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+
+import Paragraph from '.';
+
+storiesOf('typography/Paragraph', module)
+  .add('Default', () => (
+    <ScrollView>
+      <PaddedView>
+        <Paragraph>
+          <BodyText>
+            {`But I, brothers, could not address you as spiritual people, but as people of the flesh, as infants in Christ. I fed you with milk, not solid food, for you were not ready for it. And even now you are not yet ready, for you are still of the flesh. For while there is jealousy and strife among you, are you not of the flesh and behaving only in a human way? For when one says, "I follow Paul," and another, "I follow Apollos," are you not being merely human?`}
+          </BodyText>
+        </Paragraph>
+
+        <Paragraph>
+          <BodyText>
+            {`What then is Apollos? What is Paul? Servants through whom you believed, as the Lord assigned to each. I planted, Apollos watered, but God gave the growth. So neither he who plants nor he who waters is anything, but only God who gives the growth. He who plants and he who waters are one, and each will receive his wages according to his labor. For we are God's fellow workers. You are God's field, God's building.`}
+          </BodyText>
+        </Paragraph>
+
+        <Paragraph>
+          <BodyText>
+            {`According to the grace of God given to me, like a skilled[b] master builder I laid a foundation, and someone else is building upon it. Let each one take care how he builds upon it. For no one can lay a foundation other than that which is laid, which is Jesus Christ. Now if anyone builds on the foundation with gold, silver, precious stones, wood, hay, straw— each one's work will become manifest, for the Day will disclose it, because it will be revealed by fire, and the fire will test what sort of work each one has done. If the work that anyone has built on the foundation survives, he will receive a reward. If anyone's work is burned up, he will suffer loss, though he himself will be saved, but only as through fire.`}
+          </BodyText>
+        </Paragraph>
+      </PaddedView>
+    </ScrollView>
+  ))
+  .add('isLoading', () => (
+    <ScrollView>
+      <PaddedView>
+        <Paragraph isLoading>
+          <BodyText>
+            {`But I, brothers, could not address you as spiritual people, but as people of the flesh, as infants in Christ. I fed you with milk, not solid food, for you were not ready for it. And even now you are not yet ready, for you are still of the flesh. For while there is jealousy and strife among you, are you not of the flesh and behaving only in a human way? For when one says, "I follow Paul," and another, "I follow Apollos," are you not being merely human?`}
+          </BodyText>
+        </Paragraph>
+
+        <Paragraph isLoading>
+          <BodyText>
+            {`What then is Apollos? What is Paul? Servants through whom you believed, as the Lord assigned to each. I planted, Apollos watered, but God gave the growth. So neither he who plants nor he who waters is anything, but only God who gives the growth. He who plants and he who waters are one, and each will receive his wages according to his labor. For we are God's fellow workers. You are God's field, God's building.`}
+          </BodyText>
+        </Paragraph>
+
+        <Paragraph isLoading>
+          <BodyText>
+            {`According to the grace of God given to me, like a skilled[b] master builder I laid a foundation, and someone else is building upon it. Let each one take care how he builds upon it. For no one can lay a foundation other than that which is laid, which is Jesus Christ. Now if anyone builds on the foundation with gold, silver, precious stones, wood, hay, straw— each one's work will become manifest, for the Day will disclose it, because it will be revealed by fire, and the fire will test what sort of work each one has done. If the work that anyone has built on the foundation survives, he will receive a reward. If anyone's work is burned up, he will suffer loss, though he himself will be saved, but only as through fire.`}
+          </BodyText>
+        </Paragraph>
+      </PaddedView>
+    </ScrollView>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <ScrollView>
+        <Paragraph style={border}>
+          <BodyText>
+            {`But I, brothers, could not address you as spiritual people, but as people of the flesh, as infants in Christ. I fed you with milk, not solid food, for you were not ready for it. And even now you are not yet ready, for you are still of the flesh. For while there is jealousy and strife among you, are you not of the flesh and behaving only in a human way? For when one says, "I follow Paul," and another, "I follow Apollos," are you not being merely human?`}
+          </BodyText>
+        </Paragraph>
+
+        <Paragraph style={border}>
+          <BodyText>
+            {`What then is Apollos? What is Paul? Servants through whom you believed, as the Lord assigned to each. I planted, Apollos watered, but God gave the growth. So neither he who plants nor he who waters is anything, but only God who gives the growth. He who plants and he who waters are one, and each will receive his wages according to his labor. For we are God's fellow workers. You are God's field, God's building.`}
+          </BodyText>
+        </Paragraph>
+
+        <Paragraph style={border}>
+          <BodyText>
+            {`According to the grace of God given to me, like a skilled[b] master builder I laid a foundation, and someone else is building upon it. Let each one take care how he builds upon it. For no one can lay a foundation other than that which is laid, which is Jesus Christ. Now if anyone builds on the foundation with gold, silver, precious stones, wood, hay, straw— each one's work will become manifest, for the Day will disclose it, because it will be revealed by fire, and the fire will test what sort of work each one has done. If the work that anyone has built on the foundation survives, he will receive a reward. If anyone's work is burned up, he will suffer loss, though he himself will be saved, but only as through fire.`}
+          </BodyText>
+        </Paragraph>
+      </ScrollView>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/Paragraph/Paragraph.tests.js b/apolloschurchapp/src/ui/typography/Paragraph/Paragraph.tests.js
new file mode 100644
index 0000000..14f295c
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/Paragraph/Paragraph.tests.js
@@ -0,0 +1,46 @@
+import React from 'react';
+import { Text } from 'react-native';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import Paragraph from '.';
+
+describe('the UIText component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Paragraph>
+          <Text>
+            {`But I, brothers, could not address you as spiritual people, but as
+              people of the flesh, as infants in Christ. I fed you with milk, not
+              solid food, for you were not ready for it. And even now you are not
+              yet ready, for you are still of the flesh. For while there is jealousy
+              and strife among you, are you not of the flesh and behaving only in a
+              human way? For when one says, "I follow Paul," and another, "I follow
+              Apollos," are you not being merely human?`}
+          </Text>
+        </Paragraph>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <Paragraph isLoading>
+          <Text>
+            {`But I, brothers, could not address you as spiritual people, but as
+              people of the flesh, as infants in Christ. I fed you with milk, not
+              solid food, for you were not ready for it. And even now you are not
+              yet ready, for you are still of the flesh. For while there is jealousy
+              and strife among you, are you not of the flesh and behaving only in a
+              human way? For when one says, "I follow Paul," and another, "I follow
+              Apollos," are you not being merely human?`}
+          </Text>
+        </Paragraph>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/Paragraph/index.js b/apolloschurchapp/src/ui/typography/Paragraph/index.js
new file mode 100644
index 0000000..ed68326
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/Paragraph/index.js
@@ -0,0 +1,23 @@
+import { compose, setDisplayName } from 'recompose';
+import PropTypes from 'prop-types';
+import { View } from 'react-native';
+
+import {
+  withPlaceholder,
+  Paragraph as ParagraphPlaceholder,
+} from 'apolloschurchapp/src/ui/Placeholder';
+import styled from 'apolloschurchapp/src/ui/styled';
+
+const Paragraph = compose(
+  setDisplayName('Paragraph'),
+  styled(({ theme }) => ({
+    paddingBottom: theme.helpers.verticalRhythm(0.75),
+  })),
+  withPlaceholder(ParagraphPlaceholder)
+)(View);
+
+Paragraph.propTypes = {
+  isLoading: PropTypes.bool, // display loading placeholder
+};
+
+export default Paragraph;
diff --git a/apolloschurchapp/src/ui/typography/UIText/UIText.stories.js b/apolloschurchapp/src/ui/typography/UIText/UIText.stories.js
new file mode 100644
index 0000000..62ac32e
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/UIText/UIText.stories.js
@@ -0,0 +1,56 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import UIText from '.';
+
+storiesOf('typography/UIText', module)
+  .add('Normal', () => (
+    <UIText>
+      {
+        '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+      }
+    </UIText>
+  ))
+  .add('Bold', () => (
+    <UIText bold>
+      {
+        '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+      }
+    </UIText>
+  ))
+  .add('Italic', () => (
+    <UIText italic>
+      {
+        '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+      }
+    </UIText>
+  ))
+  .add('Bold Italic', () => (
+    <UIText bold italic>
+      {
+        '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+      }
+    </UIText>
+  ))
+  .add('isLoading', () => (
+    <UIText isLoading>
+      {
+        '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+      }
+    </UIText>
+  ))
+  .add('Border Box – platform testing', () => {
+    const border = { borderWidth: 1, borderStyle: 'solid' };
+
+    return (
+      <View>
+        <UIText style={border}>UI Text</UIText>
+        <UIText style={border}>
+          {
+            '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+          }
+        </UIText>
+      </View>
+    );
+  });
diff --git a/apolloschurchapp/src/ui/typography/UIText/UIText.tests.js b/apolloschurchapp/src/ui/typography/UIText/UIText.tests.js
new file mode 100644
index 0000000..646447e
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/UIText/UIText.tests.js
@@ -0,0 +1,72 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+
+import Providers from 'apolloschurchapp/src/Providers';
+
+import UIText from '.';
+
+describe('the UIText component', () => {
+  it('should render correctly', () => {
+    const tree = renderer.create(
+      <Providers>
+        <UIText>Default UIText text</UIText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as bold', () => {
+    const tree = renderer.create(
+      <Providers>
+        <UIText bold>Bold UIText text</UIText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as italic', () => {
+    const tree = renderer.create(
+      <Providers>
+        <UIText italic>Italic UIText text</UIText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render as bold italic', () => {
+    const tree = renderer.create(
+      <Providers>
+        <UIText bold italic>
+          Bold italic UIText text
+        </UIText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept and render passed in styles', () => {
+    const salmon = { color: 'salmon' };
+    const tree = renderer.create(
+      <Providers>
+        <UIText style={salmon}>Salmon text</UIText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should render a loading state', () => {
+    const tree = renderer.create(
+      <Providers>
+        <UIText isLoading>Default UIText text</UIText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+  it('should accept additional props', () => {
+    const tree = renderer.create(
+      <Providers>
+        <UIText accessible={false}>
+          {
+            '"You are the only Bible some unbelievers will ever read." – John MacArthur'
+          }
+        </UIText>
+      </Providers>
+    );
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/apolloschurchapp/src/ui/typography/UIText/index.js b/apolloschurchapp/src/ui/typography/UIText/index.js
new file mode 100644
index 0000000..3e7e5ce
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/UIText/index.js
@@ -0,0 +1,35 @@
+import { Text } from 'react-native';
+import PropTypes from 'prop-types';
+import { compose, setDisplayName, pure } from 'recompose';
+
+import styled from 'apolloschurchapp/src/ui/styled';
+import {
+  withPlaceholder,
+  Typography,
+} from 'apolloschurchapp/src/ui/Placeholder';
+
+const UIText = compose(
+  setDisplayName('UIText'),
+  styled(
+    ({ theme, bold, italic }) => ({
+      fontSize: theme.helpers.rem(0.875),
+      lineHeight: theme.helpers.verticalRhythm(0.875),
+      fontFamily: theme.typography.ui.regular,
+      fontStyle: italic ? 'italic' : null,
+      fontWeight: bold ? '700' : null,
+      color: theme.colors.text.primary,
+    }),
+    'UIText'
+  ),
+  withPlaceholder(Typography, { width: '40%' }),
+  pure
+)(Text);
+
+UIText.propTypes = {
+  bold: PropTypes.bool,
+  italic: PropTypes.bool,
+  isLoading: PropTypes.bool, // display loading placeholder
+  ...Text.propTypes,
+};
+
+export default UIText;
diff --git a/apolloschurchapp/src/ui/typography/headings.stories.js b/apolloschurchapp/src/ui/typography/headings.stories.js
new file mode 100644
index 0000000..efbe852
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/headings.stories.js
@@ -0,0 +1,31 @@
+import React from 'react';
+import { View } from 'react-native';
+import { storiesOf } from '@storybook/react-native';
+
+import { withIsLoading } from 'apolloschurchapp/src/ui/isLoading';
+
+import { H1, H2, H3, H4, H5, H6 } from '.';
+
+const SetLoading = withIsLoading(View);
+
+storiesOf('typography', module)
+  .add('headings', () => (
+    <View>
+      <H1>Heading 1</H1>
+      <H2>Heading 2</H2>
+      <H3>Heading 3</H3>
+      <H4>Heading 4</H4>
+      <H5>Heading 5</H5>
+      <H6>Heading 6</H6>
+    </View>
+  ))
+  .add('placeholders', () => (
+    <SetLoading isLoading>
+      <H1>Heading 1</H1>
+      <H2>Heading 2</H2>
+      <H3>Heading 3</H3>
+      <H4>Heading 4</H4>
+      <H5>Heading 5</H5>
+      <H6>Heading 6</H6>
+    </SetLoading>
+  ));
diff --git a/apolloschurchapp/src/ui/typography/index.js b/apolloschurchapp/src/ui/typography/index.js
new file mode 100644
index 0000000..fb53054
--- /dev/null
+++ b/apolloschurchapp/src/ui/typography/index.js
@@ -0,0 +1,11 @@
+export H1 from './H1';
+export H2 from './H2';
+export H3 from './H3';
+export H4 from './H4';
+export H5 from './H5';
+export H6 from './H6';
+export UIText from './UIText';
+export BodyText from './BodyText';
+export Paragraph from './Paragraph';
+export BlockQuote from './BlockQuote';
+export BulletListItem from './BulletListItem';
diff --git a/apolloschurchapp/src/user-settings/ChangePassword.js b/apolloschurchapp/src/user-settings/ChangePassword.js
index 4b5bdf3..5db5101 100644
--- a/apolloschurchapp/src/user-settings/ChangePassword.js
+++ b/apolloschurchapp/src/user-settings/ChangePassword.js
@@ -1,32 +1,38 @@
 import React, { PureComponent } from 'react';
 import PropTypes from 'prop-types';
-import { SafeAreaView } from 'react-native';
+import { ScrollView } from 'react-native';
 import { Mutation } from 'react-apollo';
 import { Formik } from 'formik';
 import * as Yup from 'yup';
 
-import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
-import {
-  Button,
-  ButtonLink,
-  TextInput,
-  BackgroundView,
-  PaddedView,
-  FlexedView,
-} from '@apollosproject/ui-kit';
+import { Text as TextInput } from 'apolloschurchapp/src/ui/inputs';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+import ActivityIndicator from 'apolloschurchapp/src/ui/ActivityIndicator';
 
 import getAuthToken from '../store/getAuthToken';
 import changePassword from './passwordChange';
 
+const Header = styled(({ theme }) => ({
+  paddingTop: theme.sizing.baseUnit * 1.75,
+  flexDirection: 'row',
+  alignItems: 'flex-end',
+  justifyContent: 'space-between',
+  backgroundColor: theme.colors.background.paper,
+}))(PaddedView);
+
+const SpaceHolder = PaddedView;
+
+const DoneButton = styled(() => ({
+  fontWeight: '800',
+}))(ButtonLink);
+
 class ChangePassword extends PureComponent {
-  static navigationOptions = ({ navigation }) => ({
-    title: 'Change Password',
-    headerLeft: null,
-    headerRight: (
-      <PaddedView vertical={false}>
-        <ButtonLink onPress={() => navigation.goBack()}>Cancel</ButtonLink>
-      </PaddedView>
-    ),
+  static navigationOptions = () => ({
+    title: 'Personal Details',
   });
 
   static propTypes = {
@@ -37,46 +43,6 @@ class ChangePassword extends PureComponent {
     }),
   };
 
-  renderForm = (props) => (
-    <FlexedView>
-      <KeyboardAwareScrollView>
-        <BackgroundView>
-          <PaddedView>
-            <TextInput
-              label="New Password"
-              type="password"
-              value={props.values.password}
-              error={props.touched.password && props.errors.password}
-              onChangeText={(text) => props.setFieldValue('password', text)}
-            />
-            <TextInput
-              label="Confirm Password"
-              type="password"
-              value={props.values.confirmPassword}
-              error={
-                props.touched.confirmPassword && props.errors.confirmPassword
-              }
-              onChangeText={(text) =>
-                props.setFieldValue('confirmPassword', text)
-              }
-            />
-          </PaddedView>
-        </BackgroundView>
-      </KeyboardAwareScrollView>
-
-      <SafeAreaView>
-        <PaddedView>
-          <Button
-            disabled={!props.isValid || props.isSubmitting}
-            onPress={props.handleSubmit}
-            title="Save"
-            loading={props.isSubmitting}
-          />
-        </PaddedView>
-      </SafeAreaView>
-    </FlexedView>
-  );
-
   render() {
     return (
       <Mutation
@@ -120,7 +86,54 @@ class ChangePassword extends PureComponent {
               setSubmitting(false);
             }}
           >
-            {this.renderForm}
+            {(props) => {
+              if (props.isSubmitting) return <ActivityIndicator />;
+
+              return (
+                <ScrollView>
+                  <Header>
+                    <SpaceHolder />
+                    <H4>Change Password</H4>
+                    {props.dirty &&
+                    props.values.password &&
+                    props.values.confirmPassword ? (
+                      <DoneButton onPress={props.handleSubmit}>Done</DoneButton>
+                    ) : (
+                      <DoneButton
+                        onPress={() => this.props.navigation.goBack()}
+                      >
+                        Back
+                      </DoneButton>
+                    )}
+                  </Header>
+                  <BackgroundView>
+                    <PaddedView>
+                      <TextInput
+                        label="New Password"
+                        type="password"
+                        value={props.values.password}
+                        error={props.touched.password && props.errors.password}
+                        onChangeText={(text) =>
+                          props.setFieldValue('password', text)
+                        }
+                      />
+                      <TextInput
+                        label="Confirm Password"
+                        type="password"
+                        value={props.values.confirmPassword}
+                        error={
+                          props.touched.confirmPassword &&
+                          props.errors.confirmPassword
+                        }
+                        onChangeText={(text) =>
+                          props.setFieldValue('confirmPassword', text)
+                        }
+                      />
+                    </PaddedView>
+                  </BackgroundView>
+                </ScrollView>
+              );
+            }}
           </Formik>
         )}
       </Mutation>
diff --git a/apolloschurchapp/src/user-settings/PersonalDetails.js b/apolloschurchapp/src/user-settings/PersonalDetails.js
index 71d7631..bc3008a 100644
--- a/apolloschurchapp/src/user-settings/PersonalDetails.js
+++ b/apolloschurchapp/src/user-settings/PersonalDetails.js
@@ -1,32 +1,39 @@
 import React, { PureComponent } from 'react';
 import PropTypes from 'prop-types';
-import { SafeAreaView } from 'react-native';
+import { ScrollView } from 'react-native';
 import { Query, Mutation } from 'react-apollo';
 import { Formik } from 'formik';
 import * as Yup from 'yup';
-import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
 
-import {
-  TextInput,
-  PaddedView,
-  FlexedView,
-  Button,
-  ButtonLink,
-  TableView,
-} from '@apollosproject/ui-kit';
+import { Text as TextInput } from 'apolloschurchapp/src/ui/inputs';
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import { ButtonLink } from 'apolloschurchapp/src/ui/Button';
+import { H4 } from 'apolloschurchapp/src/ui/typography';
+import styled from 'apolloschurchapp/src/ui/styled';
+import ActivityIndicator from 'apolloschurchapp/src/ui/ActivityIndicator';
 
 import getUserProfile from '../tabs/connect/getUserProfile';
 import updateCurrentUser from './updateCurrentUser';
 
+const Header = styled(({ theme }) => ({
+  paddingTop: theme.sizing.baseUnit * 1.75,
+  paddingRight: theme.sizing.baseUnit,
+  flexDirection: 'row',
+  alignItems: 'flex-end',
+  justifyContent: 'space-between',
+  backgroundColor: theme.colors.background.paper,
+}))(PaddedView);
+
+const SpaceHolder = styled(() => ({}))(PaddedView);
+
+const DoneButton = styled(() => ({
+  fontWeight: '800',
+}))(ButtonLink);
+
 class PersonalDetails extends PureComponent {
-  static navigationOptions = ({ navigation }) => ({
+  static navigationOptions = () => ({
     title: 'Personal Details',
-    headerLeft: null,
-    headerRight: (
-      <PaddedView vertical={false}>
-        <ButtonLink onPress={() => navigation.goBack()}>Cancel</ButtonLink>
-      </PaddedView>
-    ),
   });
 
   static propTypes = {
@@ -37,57 +44,11 @@ class PersonalDetails extends PureComponent {
     }),
   };
 
-  renderForm = (props) => (
-    <FlexedView>
-      <KeyboardAwareScrollView>
-        <TableView>
-          <PaddedView>
-            <TextInput
-              label="First Name"
-              type="text"
-              value={props.values.firstName}
-              error={props.touched.firstName && props.errors.firstName}
-              onChangeText={(text) => props.setFieldValue('firstName', text)}
-            />
-            <TextInput
-              label="Last Name"
-              type="text"
-              value={props.values.lastName}
-              error={props.touched.lastName && props.errors.lastName}
-              onChangeText={(text) => props.setFieldValue('lastName', text)}
-            />
-          </PaddedView>
-        </TableView>
-        <TableView>
-          <PaddedView>
-            <TextInput
-              label="Email"
-              type="email"
-              value={props.values.email}
-              error={props.touched.email && props.errors.email}
-              onChangeText={(text) => props.setFieldValue('email', text)}
-            />
-          </PaddedView>
-        </TableView>
-      </KeyboardAwareScrollView>
-      <SafeAreaView>
-        <PaddedView>
-          <Button
-            disabled={!props.isValid || props.isSubmitting}
-            onPress={props.handleSubmit}
-            title="Save"
-            loading={props.isSubmitting}
-          />
-        </PaddedView>
-      </SafeAreaView>
-    </FlexedView>
-  );
-
   render() {
     return (
       <Query query={getUserProfile} fetchPolicy="cache-and-network">
         {({ data: { currentUser = { profile: {} } } = {} }) => {
-          const { firstName, lastName, email } = currentUser.profile;
+          const { firstName, lastName, email, nickName } = currentUser.profile;
 
           return (
             <Mutation
@@ -103,6 +64,7 @@ class PersonalDetails extends PureComponent {
                         firstName: updateProfileFields.firstName,
                         lastName: updateProfileFields.lastName,
                         email: updateProfileFields.email,
+                        nickName: updateProfileFields.nickName,
                       },
                     },
                   },
@@ -111,13 +73,14 @@ class PersonalDetails extends PureComponent {
             >
               {(updateDetails) => (
                 <Formik
-                  initialValues={{ firstName, lastName, email }}
+                  initialValues={{ firstName, lastName, email, nickName }}
                   validationSchema={Yup.object().shape({
                     firstName: Yup.string().required('First Name is required!'),
                     lastName: Yup.string().required('Last Name is required!'),
                     email: Yup.string()
                       .email('Invalid email address')
                       .required('Email is required!'),
+                    nickName: Yup.string().required('Nick Name is required!'),
                   })}
                   onSubmit={async (
                     variables,
@@ -148,7 +111,78 @@ class PersonalDetails extends PureComponent {
                     setSubmitting(false);
                   }}
                 >
-                  {this.renderForm}
+                  {(props) => {
+                    if (props.isSubmitting) return <ActivityIndicator />;
+
+                    return (
+                      <ScrollView>
+                        <Header>
+                          <SpaceHolder />
+                          <H4>Personal Details</H4>
+                          {props.dirty ? (
+                            <DoneButton onPress={props.handleSubmit}>
+                              Done
+                            </DoneButton>
+                          ) : (
+                            <DoneButton
+                              onPress={() => this.props.navigation.goBack()}
+                            >
+                              Back
+                            </DoneButton>
+                          )}
+                        </Header>
+                        <BackgroundView>
+                          <PaddedView>
+                            <TextInput
+                              label="Nick Name"
+                              type="text"
+                              value={props.values.nickName}
+                              error={
+                                props.touched.nickName && props.errors.nickName
+                              }
+                              onChangeText={(text) =>
+                                props.setFieldValue('nickName', text)
+                              }
+                            />
+                            <TextInput
+                              label="First Name"
+                              type="text"
+                              value={props.values.firstName}
+                              error={
+                                props.touched.firstName &&
+                                props.errors.firstName
+                              }
+                              onChangeText={(text) =>
+                                props.setFieldValue('firstName', text)
+                              }
+                            />
+                            <TextInput
+                              label="Last Name"
+                              type="text"
+                              value={props.values.lastName}
+                              error={
+                                props.touched.lastName && props.errors.lastName
+                              }
+                              onChangeText={(text) =>
+                                props.setFieldValue('lastName', text)
+                              }
+                            />
+                          </PaddedView>
+                          <PaddedView>
+                            <TextInput
+                              label="Email"
+                              type="email"
+                              value={props.values.email}
+                              error={props.touched.email && props.errors.email}
+                              onChangeText={(text) =>
+                                props.setFieldValue('email', text)
+                              }
+                            />
+                          </PaddedView>
+                        </BackgroundView>
+                      </ScrollView>
+                    );
+                  }}
                 </Formik>
               )}
             </Mutation>
diff --git a/apolloschurchapp/src/user-settings/index.js b/apolloschurchapp/src/user-settings/index.js
index 6d26048..da76427 100644
--- a/apolloschurchapp/src/user-settings/index.js
+++ b/apolloschurchapp/src/user-settings/index.js
@@ -3,33 +3,27 @@ import React, { PureComponent } from 'react';
 import PropTypes from 'prop-types';
 import { Query, Mutation } from 'react-apollo';
 
-import {
-  BackgroundView,
-  PaddedView,
-  TableView,
+import BackgroundView from 'apolloschurchapp/src/ui/BackgroundView';
+import PaddedView from 'apolloschurchapp/src/ui/PaddedView';
+import TableView, {
   Cell,
   CellIcon,
   CellText,
   Divider,
-  Touchable,
-  styled,
-  ActivityIndicator,
-} from '@apollosproject/ui-kit';
+} from 'apolloschurchapp/src/ui/TableView';
 import { WebBrowserConsumer } from 'apolloschurchapp/src/ui/WebBrowser';
+import Touchable from 'apolloschurchapp/src/ui/Touchable';
 import AvatarForm from 'apolloschurchapp/src/ui/UserAvatarView/AvatarForm';
-
-import getLoginState from '../auth/getLoginState';
+import styled from 'apolloschurchapp/src/ui/styled';
+import ActivityIndicator from 'apolloschurchapp/src/ui/ActivityIndicator';
 import logout from '../auth/logout';
+import getLoginState from '../auth/getLoginState';
 
 const AvatarView = styled({
   alignItems: 'center',
   justifyContent: 'center',
 })(PaddedView);
 
-const BackgroundContainer = styled(({ theme }) => ({
-  paddingTop: theme.sizing.baseUnit * 1.75,
-}))(BackgroundView);
-
 class UserSettings extends PureComponent {
   static navigationOptions = () => ({
     title: 'Settings',
@@ -44,15 +38,16 @@ class UserSettings extends PureComponent {
 
   render() {
     return (
-      <Query query={getLoginState} fetchPolicy="cache-and-network">
+      <Query query={getLoginState}>
         {({ data: { isLoggedIn = false, loading } }) => {
           if (loading) return <ActivityIndicator />;
           if (!isLoggedIn) return null;
           return (
-            <BackgroundContainer>
+            <BackgroundView>
               <AvatarView>
                 <AvatarForm
                   text
+                  photo={this.props.navigation.getParam('photo', '')}
                   refetch={this.props.navigation.getParam('refetch', {})}
                 />
               </AvatarView>
@@ -141,7 +136,7 @@ class UserSettings extends PureComponent {
                   </BackgroundView>
                 )}
               </WebBrowserConsumer>
-            </BackgroundContainer>
+            </BackgroundView>
           );
         }}
       </Query>
diff --git a/apolloschurchapp/src/user-settings/updateCurrentUser.js b/apolloschurchapp/src/user-settings/updateCurrentUser.js
index 5efd459..a0d156a 100644
--- a/apolloschurchapp/src/user-settings/updateCurrentUser.js
+++ b/apolloschurchapp/src/user-settings/updateCurrentUser.js
@@ -5,16 +5,19 @@ export default gql`
     $firstName: String!
     $lastName: String!
     $email: String!
+    $nickName: String!
   ) {
     updateProfileFields(
       input: [
         { field: FirstName, value: $firstName }
         { field: LastName, value: $lastName }
         { field: Email, value: $email }
+        { field: NickName, value: $nickName }
       ]
     ) {
       firstName
       lastName
+      nickName
       email
       id
     }
diff --git a/apolloschurchapp/src/utils/content/share.js b/apolloschurchapp/src/utils/content/share.js
index e04063d..4a52f5c 100644
--- a/apolloschurchapp/src/utils/content/share.js
+++ b/apolloschurchapp/src/utils/content/share.js
@@ -1,12 +1,12 @@
-import { Platform, Share } from 'react-native';
+import { Share } from 'react-native';
 // import { get } from 'lodash';
 import { track, events } from 'apolloschurchapp/src/analytics';
 // import getSiteLink from './getSiteLink';
 
-const share = ({ title, url, id = '' }) => {
+const share = ({ title, message, url, id = '' }) => {
   Share.share({
     title,
-    message: Platform.OS === 'android' ? `${title}\n${url}` : title,
+    message,
     url,
   });
 
